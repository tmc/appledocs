{
  "abstract": [
    {
      "text": "Returns a Boolean value indicating whether this sequence and another",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "sequence contain equivalent elements in the same order, using the given",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "predicate as the equivalence test.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.TabularData/documentation/TabularData",
        "doc://com.apple.TabularData/documentation/TabularData/FilledColumn"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/elementsEqual(_:by:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "extendedModule": "Swift",
    "externalID": "s:STsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF::SYNTHESIZED::s:11TabularData12FilledColumnV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "elementsEqual"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "genericParameter",
        "text": "OtherSequence"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "typeIdentifier",
        "text": "OtherSequence"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "by"
      },
      {
        "kind": "text",
        "text": ": ("
      },
      {
        "kind": "typeIdentifier",
        "text": "Self"
      },
      {
        "kind": "text",
        "text": "."
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:ST7ElementQa",
        "text": "Element"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "text": "OtherSequence"
      },
      {
        "kind": "text",
        "text": "."
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:ST7ElementQa",
        "text": "Element"
      },
      {
        "kind": "text",
        "text": ") "
      },
      {
        "kind": "keyword",
        "text": "throws"
      },
      {
        "kind": "text",
        "text": " -> "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Sb",
        "text": "Bool"
      },
      {
        "kind": "text",
        "text": ") "
      },
      {
        "kind": "keyword",
        "text": "rethrows"
      },
      {
        "kind": "text",
        "text": " -> "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Sb",
        "text": "Bool"
      }
    ],
    "modules": [
      {
        "name": "TabularData",
        "relatedModules": [
          "Swift"
        ]
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "12.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "method",
    "title": "elementsEqual(_:by:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "elementsEqual"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "OtherSequence"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "other"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "typeIdentifier",
              "text": "OtherSequence"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "by"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "areEquivalent"
            },
            {
              "kind": "text",
              "text": ": ("
            },
            {
              "kind": "typeIdentifier",
              "text": "Self"
            },
            {
              "kind": "text",
              "text": "."
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ST7ElementQa",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ST7ElementQa",
              "text": "Element"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "typeIdentifier",
              "text": "OtherSequence"
            },
            {
              "kind": "text",
              "text": "."
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ST7ElementQa",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ST7ElementQa",
              "text": "Element"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "throws"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Sb",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "rethrows"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Sb",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "OtherSequence"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ST",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ST",
              "text": "Sequence"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A sequence to compare to this sequence.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "other"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A predicate that returns ",
                  "type": "text"
                },
                {
                  "code": "true",
                  "type": "codeVoice"
                },
                {
                  "text": " if its two arguments",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "are equivalent; otherwise, ",
                  "type": "text"
                },
                {
                  "code": "false",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "areEquivalent"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return-value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "",
              "type": "text"
            },
            {
              "code": "true",
              "type": "codeVoice"
            },
            {
              "text": " if this sequence and ",
              "type": "text"
            },
            {
              "code": "other",
              "type": "codeVoice"
            },
            {
              "text": " contain equivalent items,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "using ",
              "type": "text"
            },
            {
              "code": "areEquivalent",
              "type": "codeVoice"
            },
            {
              "text": " as the equivalence test; otherwise, ",
              "type": "text"
            },
            {
              "code": "false.",
              "type": "codeVoice"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "At least one of the sequences must be finite.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The predicate must be an ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "equivalence relation",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " over the elements. That",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "is, for any elements ",
              "type": "text"
            },
            {
              "code": "a",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "b",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "c",
              "type": "codeVoice"
            },
            {
              "text": ", the following conditions must",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "hold:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "areEquivalent(a, a)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is always ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (Reflexivity)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "areEquivalent(a, b)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " implies ",
                      "type": "text"
                    },
                    {
                      "code": "areEquivalent(b, a)",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (Symmetry)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If ",
                      "type": "text"
                    },
                    {
                      "code": "areEquivalent(a, b)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "areEquivalent(b, c)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are both ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", then",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "areEquivalent(a, c)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is also ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (Transitivity)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "O(",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "text": "m",
                      "type": "text"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": "), where ",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "text": "m",
                      "type": "text"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": " is the lesser of the length of the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "sequence and the length of ",
                  "type": "text"
                },
                {
                  "code": "other",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Complexity",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.TabularData/documentation/TabularData": {
      "abstract": [
        {
          "text": "Import, organize, and prepare a table of data to train a machine learning model.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.TabularData/documentation/TabularData",
      "kind": "symbol",
      "role": "collection",
      "title": "TabularData",
      "type": "topic",
      "url": "/documentation/tabulardata"
    },
    "doc://com.apple.TabularData/documentation/TabularData/FilledColumn": {
      "abstract": [
        {
          "text": "A view on a column that replaces missing elements with a default value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FilledColumn"
        }
      ],
      "identifier": "doc://com.apple.TabularData/documentation/TabularData/FilledColumn",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FilledColumn"
        }
      ],
      "role": "symbol",
      "title": "FilledColumn",
      "type": "topic",
      "url": "/documentation/tabulardata/filledcolumn"
    },
    "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/elementsEqual(_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this sequence and another",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence contain the same elements in the same order.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "elementsEqual"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/elementsEqual(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "elementsEqual(_:)",
      "type": "topic",
      "url": "/documentation/tabulardata/filledcolumn/elementsequal(_:)"
    },
    "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/elementsEqual(_:by:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this sequence and another",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence contain equivalent elements in the same order, using the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "predicate as the equivalence test.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "elementsEqual"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/elementsEqual(_:by:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "elementsEqual(_:by:)",
      "type": "topic",
      "url": "/documentation/tabulardata/filledcolumn/elementsequal(_:by:)"
    },
    "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/lexicographicallyPrecedes(_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the sequence precedes another",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence in a lexicographical (dictionary) ordering, using the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "less-than operator (",
          "type": "text"
        },
        {
          "code": "<",
          "type": "codeVoice"
        },
        {
          "text": ") to compare elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "lexicographicallyPrecedes"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/lexicographicallyPrecedes(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "lexicographicallyPrecedes(_:)",
      "type": "topic",
      "url": "/documentation/tabulardata/filledcolumn/lexicographicallyprecedes(_:)"
    },
    "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/lexicographicallyPrecedes(_:by:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the sequence precedes another",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence in a lexicographical (dictionary) ordering, using the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "predicate to compare elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "lexicographicallyPrecedes"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "OtherSequence"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/lexicographicallyPrecedes(_:by:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "lexicographicallyPrecedes(_:by:)",
      "type": "topic",
      "url": "/documentation/tabulardata/filledcolumn/lexicographicallyprecedes(_:by:)"
    },
    "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/starts(with:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the initial elements of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence are the same as the elements in another sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "starts"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "PossiblePrefix"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "PossiblePrefix"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/starts(with:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "starts(with:)",
      "type": "topic",
      "url": "/documentation/tabulardata/filledcolumn/starts(with:)"
    },
    "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/starts(with:by:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the initial elements of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence are equivalent to the elements in another sequence, using",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the given predicate as the equivalence test.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "starts"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "PossiblePrefix"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "PossiblePrefix"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "PossiblePrefix"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/starts(with:by:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "starts(with:by:)",
      "type": "topic",
      "url": "/documentation/tabulardata/filledcolumn/starts(with:by:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:ST": {
      "abstract": [
        {
          "text": "A type that provides sequential, iterated access to its elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ST",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sequence",
      "type": "topic",
      "url": "/documentation/Swift/Sequence"
    },
    "doc://com.externally.resolved.symbol/s:ST7ElementQa": {
      "abstract": [
        {
          "text": "A type representing the sequence’s elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST8IteratorQa",
          "text": "Iterator"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:St7ElementQa",
          "text": "Element"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ST7ElementQa",
      "kind": "symbol",
      "role": "symbol",
      "title": "Element",
      "type": "topic",
      "url": "/documentation/Swift/Sequence/Element"
    },
    "doc://com.externally.resolved.symbol/s:Sb": {
      "abstract": [
        {
          "text": "A value type whose instances are either `true` or `false`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Sb",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/Swift/Bool"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Comparing-with-Another-Sequence",
      "generated": true,
      "identifiers": [
        "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/starts(with:)",
        "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/starts(with:by:)",
        "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/elementsEqual(_:)",
        "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/lexicographicallyPrecedes(_:)",
        "doc://com.apple.TabularData/documentation/TabularData/FilledColumn/lexicographicallyPrecedes(_:by:)"
      ],
      "title": "Comparing with Another Sequence"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/tabulardata/filledcolumn/elementsequal(_:by:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
