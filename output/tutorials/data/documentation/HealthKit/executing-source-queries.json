{
  "abstract": [
    {
      "text": "Create and run source queries.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.healthkit/documentation/HealthKit",
        "doc://com.apple.healthkit/documentation/HealthKit/queries",
        "doc://com.apple.healthkit/documentation/HealthKit/HKSourceQuery"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.healthkit/documentation/HealthKit/executing-source-queries"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "HealthKit"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Executing Source Queries"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Source queries return a list of apps and devices that have saved data to the HealthKit store.  The query returns all sources for the specified sample type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-Source-Queries",
          "level": 3,
          "text": "Create Source Queries",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You create a source query by calling the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.healthkit/documentation/HealthKit/HKSourceQuery/init(sampleType:samplePredicate:completionHandler:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " initializer. Start by creating the type object for the desired samples. The following example creates a type object for step counts.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "guard let stepCountType = HKObjectType.quantityType(forIdentifier: .stepCount) else {",
            "    // This should never fail when using a defined constant.",
            "    fatalError(\"*** Unable to get the step count type ***\")",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Then use the type object to create the query. Source queries return a list of sources (apps and devices) that have saved queries matching the sample type. The callback handler should check for errors before processing the sources. It should also dispatch updates to the user interface back to the main thread.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let query = HKSourceQuery(sampleType: stepCountType, samplePredicate: nil) { (query, sourcesOrNil, errorOrNil) in",
            "    ",
            "    guard let sources = sourcesOrNil else {",
            "        // Properly handle the error.",
            "        return",
            "    }",
            "    ",
            "    for source in sources {",
            "        // Process sources here.",
            "    }",
            "    ",
            "    DispatchQueue.main.async {",
            "        // Update the UI here.",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Run-the-Query",
          "level": 3,
          "text": "Run the Query",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "After the query is instantiated, you run it by calling the HealthKit store’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.healthkit/documentation/HealthKit/HKHealthStore/execute(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "store.execute(query)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "This runs the query on an anonymous background queue. When the query is complete, it executes the results handler on the same background queue (but not necessarily the same thread).",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.healthkit/documentation/HealthKit": {
      "abstract": [
        {
          "text": "Access and share health and fitness data while maintaining the user’s privacy and control.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.healthkit/documentation/HealthKit",
      "kind": "symbol",
      "role": "collection",
      "title": "HealthKit",
      "type": "topic",
      "url": "/documentation/healthkit"
    },
    "doc://com.apple.healthkit/documentation/HealthKit/HKHealthStore/execute(_:)": {
      "abstract": [
        {
          "text": "Starts executing the provided query.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "execute"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)HKQuery",
          "text": "HKQuery"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.healthkit/documentation/HealthKit/HKHealthStore/execute(_:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "executeQuery:"
        }
      ],
      "role": "symbol",
      "title": "execute(_:)",
      "type": "topic",
      "url": "/documentation/healthkit/hkhealthstore/execute(_:)"
    },
    "doc://com.apple.healthkit/documentation/HealthKit/HKSourceQuery": {
      "abstract": [
        {
          "text": "A query that returns a list of sources, such as apps and devices, that have saved matching queries to the HealthKit store.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "HKSourceQuery"
        }
      ],
      "identifier": "doc://com.apple.healthkit/documentation/HealthKit/HKSourceQuery",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "HKSourceQuery"
        }
      ],
      "role": "symbol",
      "title": "HKSourceQuery",
      "type": "topic",
      "url": "/documentation/healthkit/hksourcequery"
    },
    "doc://com.apple.healthkit/documentation/HealthKit/HKSourceQuery/init(sampleType:samplePredicate:completionHandler:)": {
      "abstract": [
        {
          "text": "Instantiates and returns a source query.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "sampleType"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)HKSampleType",
          "text": "HKSampleType"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "samplePredicate"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSPredicate",
          "text": "NSPredicate"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "completionHandler"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)HKSourceQuery",
          "text": "HKSourceQuery"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sh",
          "text": "Set"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)HKSource",
          "text": "HKSource"
        },
        {
          "kind": "text",
          "text": ">?, (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        },
        {
          "kind": "text",
          "text": ")?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.healthkit/documentation/HealthKit/HKSourceQuery/init(sampleType:samplePredicate:completionHandler:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "initWithSampleType:samplePredicate:completionHandler:"
        }
      ],
      "role": "symbol",
      "title": "init(sampleType:samplePredicate:completionHandler:)",
      "type": "topic",
      "url": "/documentation/healthkit/hksourcequery/init(sampletype:samplepredicate:completionhandler:)"
    },
    "doc://com.apple.healthkit/documentation/HealthKit/queries": {
      "abstract": [
        {
          "text": "Query health and fitness data.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.healthkit/documentation/HealthKit/queries",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Queries",
      "type": "topic",
      "url": "/documentation/healthkit/queries"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Creating-Source-Queries",
      "generated": true,
      "identifiers": [
        "doc://com.apple.healthkit/documentation/HealthKit/HKSourceQuery/init(sampleType:samplePredicate:completionHandler:)"
      ],
      "title": "Creating Source Queries"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.healthkit~1documentation~1HealthKit~1HKSourceQuery~1init(sampleType:samplePredicate:completionHandler:)/title",
          "value": "initWithSampleType:samplePredicate:completionHandler:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.healthkit~1documentation~1HealthKit~1HKSourceQuery~1init(sampleType:samplePredicate:completionHandler:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "initWithSampleType:samplePredicate:completionHandler:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.healthkit~1documentation~1HealthKit~1HKHealthStore~1execute(_:)/title",
          "value": "executeQuery:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.healthkit~1documentation~1HealthKit~1HKHealthStore~1execute(_:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "executeQuery:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.healthkit~1documentation~1HealthKit~1HKSourceQuery/title",
          "value": "HKSourceQuery"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.healthkit~1documentation~1HealthKit~1HKSourceQuery/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "HKSourceQuery"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.healthkit~1documentation~1HealthKit~1HKSourceQuery/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "HKSourceQuery"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
