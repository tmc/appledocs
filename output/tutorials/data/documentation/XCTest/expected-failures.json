{
  "abstract": [
    {
      "text": "Anticipate known test failures to prevent failing tests from affecting your workflows.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.xctest/documentation/XCTest"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.xctest/documentation/XCTest/expected-failures"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "XCTest"
      }
    ],
    "role": "collectionGroup",
    "roleHeading": "API Collection",
    "title": "Expected Failures"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you have a workflow that requires all of your tests to pass before continuing, issues that you can’t fix quickly, and cause your tests to fail, create a difficult situation: either you stop using your workflow, or you disable the failing tests to allow your workflow to continue.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Configure your test to handle an expected assertion failure by calling ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": " with a reason for the expected failure before the assertion you expect to fail.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func testExpectedFailure() throws {",
            "    let thingThatFails: Bool = false",
            "    XCTExpectFailure(\"Working on a fix for this problem.\")",
            "    XCTAssertTrue(thingThatFails, \"This is not working right now.\")",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If any assertions fail in a test after you call ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": ", Xcode marks the test as an expected failure instead of a test failure.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "media-3734335",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If no assertion failures occur, Xcode marks the test as failing because the expected failure doesn’t occur. Remove the expected failure to have Xcode mark the test as passing in future tests, or use the expected failure options below to refine your expected failure.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To specify which assertion you expect to fail, call ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": " with a block that contains the assertion.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func testExpectedFailureInBlock() throws {",
            "    let thingThatFails: Bool = false",
            "    XCTExpectFailure(\"Working on a fix for this problem.\") {",
            "        XCTAssertTrue(thingThatFails, \"This is not working right now.\")",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, provide options when calling ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": " to disable the expectation in circumstances you specify, such as when a test only passes in a target environment for Mac Catalyst.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func testExpectedFailureDisabledWithOptions() throws {",
            "    var thingThatFails: Bool = true",
            "    let options = XCTExpectedFailure.Options()",
            "    ",
            "    #if !targetEnvironment(macCatalyst)",
            "    thingThatFails = false",
            "    options.isEnabled = false",
            "    #endif",
            "    ",
            "    XCTExpectFailure(\"Working on a fix for this problem.\", options: options) {",
            "        XCTAssertTrue(thingThatFails, \"Thing that fails failed.\")",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Specify an ",
              "type": "text"
            },
            {
              "code": "issueMatcher",
              "type": "codeVoice"
            },
            {
              "text": " closure to match an assertion. Add code in the closure to examine the issue provided by the assertion failure:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If the issue matches what you expect, return ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": " from the closure.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Otherwise, return ",
                      "type": "text"
                    },
                    {
                      "code": "false,",
                      "type": "codeVoice"
                    },
                    {
                      "text": " then the test system records a test failure for your unmatched expected failure.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "code": [
            "func testExpectedFailureWithOptions() throws {    let thingThatFails: Bool = false",
            "    let options = XCTExpectedFailure.Options()",
            "    options.issueMatcher = { issue in",
            "        issue.type == .assertionFailure && issue.compactDescription.contains(\"SPECIFIC BROKEN THING\")",
            "    }",
            "    ",
            "    XCTExpectFailure(\"Working on a fix for this problem.\", options: options)",
            "    ",
            "    XCTAssertTrue(true, \"This always works.\")",
            "    XCTAssertTrue(thingThatFails, \"SPECIFIC BROKEN THING failed.\")",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If you set an expected failure for a test that fails occasionally and unpredictably, set ",
              "type": "text"
            },
            {
              "code": "isStrict",
              "type": "codeVoice"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": " to prevent an unmatched expectation from causing a test failure.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func testExpectedIntermittentFailure() throws {",
            "    let testResultOfSomeActivity = performSomeActivity()",
            "",
            "    let options = XCTExpectedFailure.Options()",
            "    options.isStrict = false",
            "    XCTExpectFailure(\"Working on a fix for this intermittent problem.\", options: options)",
            "",
            "    XCTAssertTrue(true, \"This always works.\")",
            "    XCTAssertTrue(testResultOfSomeActivity, \"This only seems to work half the time.\")",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When you call ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": " multiple times in the same test, the following rules apply:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If you call ",
                      "type": "text"
                    },
                    {
                      "code": "XCTExpectFailure",
                      "type": "codeVoice"
                    },
                    {
                      "text": " with a closure, the test system restricts the scope for matching failures to the code in the closure.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If you call ",
                      "type": "text"
                    },
                    {
                      "code": "XCTExpectFailure",
                      "type": "codeVoice"
                    },
                    {
                      "text": " without a closure, the test system compares a test failure to the matcher for each ",
                      "type": "text"
                    },
                    {
                      "code": "XCTExpectFailure",
                      "type": "codeVoice"
                    },
                    {
                      "text": " call in the test, from the most recent call to oldest. If the test finds a match, it associates the test failure with the matching ",
                      "type": "text"
                    },
                    {
                      "code": "XCTExpectFailure",
                      "type": "codeVoice"
                    },
                    {
                      "text": " call.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The test system records a test failure for each ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": " call that did not match a test failure. To avoid this, remove the unmatched ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": " calls from your tests. If your test fails intermittently and you don’t want the test system to record an unmatched ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": " call as a test failure, set ",
              "type": "text"
            },
            {
              "code": "isStrict",
              "type": "codeVoice"
            },
            {
              "text": " to false in options you provide to your ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure",
              "type": "codeVoice"
            },
            {
              "text": " call.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Code coverage metrics include tests with expected failures. Consider this when evaluating code coverage and attempt to resolve issues as soon as possible.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.xctest/documentation/XCTest": {
      "abstract": [
        {
          "text": "Create and run unit tests, performance tests, and UI tests for your Xcode project.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest",
      "kind": "symbol",
      "role": "collection",
      "title": "XCTest",
      "type": "topic",
      "url": "/documentation/xctest"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure": {
      "abstract": [
        {
          "text": "Instructs the test to expect a failure in an upcoming assertion.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "XCTExpectFailure"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure",
      "kind": "symbol",
      "role": "symbol",
      "title": "XCTExpectFailure",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectfailure"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:enabled:strict:failingBlock:issueMatcher:)": {
      "abstract": [
        {
          "text": "Instructs the test to expect a failure in an assertion in the provided block of code, with parameters to customize expected failure checking and handling.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "XCTExpectFailure"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "enabled"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "strict"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "failingBlock"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "issueMatcher"
        },
        {
          "kind": "text",
          "text": ": (("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:6XCTest8XCTIssueV",
          "text": "XCTIssue"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ")?) "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:enabled:strict:failingBlock:issueMatcher:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "XCTExpectFailure(_:enabled:strict:failingBlock:issueMatcher:)",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectfailure(_:enabled:strict:failingblock:issuematcher:)"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:enabled:strict:issueMatcher:)": {
      "abstract": [
        {
          "text": "Instructs the test to expect a failure in an upcoming assertion, with parameters to customize expected failure checking and handling.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "XCTExpectFailure"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "enabled"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "strict"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "issueMatcher"
        },
        {
          "kind": "text",
          "text": ": (("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:6XCTest8XCTIssueV",
          "text": "XCTIssue"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ")?)"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:enabled:strict:issueMatcher:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "XCTExpectFailure(_:enabled:strict:issueMatcher:)",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectfailure(_:enabled:strict:issuematcher:)"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:options:)": {
      "abstract": [
        {
          "text": "Instructs the test to expect a failure in an upcoming assertion, with options to customize expected failure checking and handling.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "XCTExpectFailure"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)XCTExpectedFailure",
          "text": "XCTExpectedFailure"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)XCTExpectedFailureOptions",
          "text": "Options"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:options:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "XCTExpectFailure(_:options:)",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectfailure(_:options:)"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:options:failingBlock:)": {
      "abstract": [
        {
          "text": "Instructs the test to expect a failure in an assertion in the provided block of code, with options to customize expected failure checking and handling.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "XCTExpectFailure"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)XCTExpectedFailure",
          "text": "XCTExpectedFailure"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)XCTExpectedFailureOptions",
          "text": "Options"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failingBlock"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:options:failingBlock:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "XCTExpectFailure(_:options:failingBlock:)",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectfailure(_:options:failingblock:)"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureInBlock": {
      "abstract": [
        {
          "text": "Instructs the test to expect a failure in an assertion in the provided block of code.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "XCTExpectFailureInBlock"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureInBlock",
      "kind": "symbol",
      "role": "symbol",
      "title": "XCTExpectFailureInBlock",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectfailureinblock"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureWithOptions": {
      "abstract": [
        {
          "text": "Instructs the test to expect a failure in an upcoming assertion, with options to customize expected failure checking and handling.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "XCTExpectFailureWithOptions"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureWithOptions",
      "kind": "symbol",
      "role": "symbol",
      "title": "XCTExpectFailureWithOptions",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectfailurewithoptions"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureWithOptionsInBlock": {
      "abstract": [
        {
          "text": "Instructs the test to expect a failure in an assertion in the provided block of code, with options to customize expected failure checking and handling.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "XCTExpectFailureWithOptionsInBlock"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureWithOptionsInBlock",
      "kind": "symbol",
      "role": "symbol",
      "title": "XCTExpectFailureWithOptionsInBlock",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectfailurewithoptionsinblock"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectedFailure": {
      "abstract": [
        {
          "text": "An object that represents an expected test failure.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "XCTExpectedFailure"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectedFailure",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "XCTExpectedFailure"
        }
      ],
      "role": "symbol",
      "title": "XCTExpectedFailure",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectedfailure"
    },
    "doc://com.apple.xctest/documentation/XCTest/XCTExpectedFailure/Options": {
      "abstract": [
        {
          "text": "Options that determine how the test matches the expected failure to an actual test failure, and whether an unfulfilled expected failure results in a test failure.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Options"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/XCTExpectedFailure/Options",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Options"
        }
      ],
      "role": "symbol",
      "title": "XCTExpectedFailure.Options",
      "type": "topic",
      "url": "/documentation/xctest/xctexpectedfailure/options"
    },
    "doc://com.apple.xctest/documentation/XCTest/boolean-assertions": {
      "abstract": [
        {
          "text": "Test a condition that generates a true or false result.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/boolean-assertions",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Boolean Assertions",
      "type": "topic",
      "url": "/documentation/xctest/boolean-assertions"
    },
    "doc://com.apple.xctest/documentation/XCTest/comparable-value-assertions": {
      "abstract": [
        {
          "text": "Compare two values to determine whether one is larger or smaller than the other.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/comparable-value-assertions",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Comparable Value Assertions",
      "type": "topic",
      "url": "/documentation/xctest/comparable-value-assertions"
    },
    "doc://com.apple.xctest/documentation/XCTest/equality-and-inequality-assertions": {
      "abstract": [
        {
          "text": "Check whether two values are equal or unequal.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/equality-and-inequality-assertions",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Equality and Inequality Assertions",
      "type": "topic",
      "url": "/documentation/xctest/equality-and-inequality-assertions"
    },
    "doc://com.apple.xctest/documentation/XCTest/error-assertions": {
      "abstract": [
        {
          "text": "Check whether a function call throws, or doesn’t throw, an error.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/error-assertions",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Error Assertions",
      "type": "topic",
      "url": "/documentation/xctest/error-assertions"
    },
    "doc://com.apple.xctest/documentation/XCTest/methods-for-skipping-tests": {
      "abstract": [
        {
          "text": "Skip tests when meeting specified conditions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/methods-for-skipping-tests",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Methods for Skipping Tests",
      "type": "topic",
      "url": "/documentation/xctest/methods-for-skipping-tests"
    },
    "doc://com.apple.xctest/documentation/XCTest/nil-and-non-nil-assertions": {
      "abstract": [
        {
          "text": "Check whether a test condition has, or doesn’t have, a value.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/nil-and-non-nil-assertions",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Nil and Non-Nil Assertions",
      "type": "topic",
      "url": "/documentation/xctest/nil-and-non-nil-assertions"
    },
    "doc://com.apple.xctest/documentation/XCTest/nsexception-assertions": {
      "abstract": [
        {
          "text": "Check whether a function call throws, or doesn’t throw, an exception.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/nsexception-assertions",
      "kind": "article",
      "role": "collectionGroup",
      "title": "NSException Assertions",
      "type": "topic",
      "url": "/documentation/xctest/nsexception-assertions"
    },
    "doc://com.apple.xctest/documentation/XCTest/unconditional-test-failures": {
      "abstract": [
        {
          "text": "Generate a failure immediately and unconditionally.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.xctest/documentation/XCTest/unconditional-test-failures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Unconditional Test Failures",
      "type": "topic",
      "url": "/documentation/xctest/unconditional-test-failures"
    },
    "media-3734335": {
      "alt": "An image showing two unit tests. The first test demonstrates how Xcode highlights an assertion that failed as an expected failure. The second test shows how Xcode highlights a test as failed when a failure was expected but did not occur.",
      "identifier": "media-3734335",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/7a0f4a47a6e8ac7c9aa2b5a2448a868c/media-3734335@2x.png"
        }
      ]
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Test-assertions",
      "generated": true,
      "identifiers": [
        "doc://com.apple.xctest/documentation/XCTest/boolean-assertions",
        "doc://com.apple.xctest/documentation/XCTest/nil-and-non-nil-assertions",
        "doc://com.apple.xctest/documentation/XCTest/equality-and-inequality-assertions",
        "doc://com.apple.xctest/documentation/XCTest/comparable-value-assertions",
        "doc://com.apple.xctest/documentation/XCTest/error-assertions",
        "doc://com.apple.xctest/documentation/XCTest/nsexception-assertions",
        "doc://com.apple.xctest/documentation/XCTest/unconditional-test-failures",
        "doc://com.apple.xctest/documentation/XCTest/methods-for-skipping-tests"
      ],
      "title": "Test assertions"
    }
  ],
  "topicSections": [
    {
      "anchor": "Expected-Failures",
      "identifiers": [
        "doc://com.apple.xctest/documentation/XCTest/XCTExpectedFailure",
        "doc://com.apple.xctest/documentation/XCTest/XCTExpectedFailure/Options",
        "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:options:)",
        "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:enabled:strict:issueMatcher:)",
        "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:options:failingBlock:)",
        "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure(_:enabled:strict:failingBlock:issueMatcher:)"
      ],
      "title": "Expected Failures"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "replace",
          "path": "/topicSections",
          "value": [
            {
              "anchor": "Expected-Failures",
              "identifiers": [
                "doc://com.apple.xctest/documentation/XCTest/XCTExpectedFailure",
                "doc://com.apple.xctest/documentation/XCTest/XCTExpectedFailure/Options",
                "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailure",
                "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureInBlock",
                "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureWithOptions",
                "doc://com.apple.xctest/documentation/XCTest/XCTExpectFailureWithOptionsInBlock"
              ],
              "title": "Expected Failures"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Test-assertions",
              "generated": true,
              "identifiers": [
                "doc://com.apple.xctest/documentation/XCTest/boolean-assertions",
                "doc://com.apple.xctest/documentation/XCTest/nil-and-non-nil-assertions",
                "doc://com.apple.xctest/documentation/XCTest/equality-and-inequality-assertions",
                "doc://com.apple.xctest/documentation/XCTest/comparable-value-assertions",
                "doc://com.apple.xctest/documentation/XCTest/error-assertions",
                "doc://com.apple.xctest/documentation/XCTest/nsexception-assertions",
                "doc://com.apple.xctest/documentation/XCTest/unconditional-test-failures",
                "doc://com.apple.xctest/documentation/XCTest/methods-for-skipping-tests"
              ],
              "title": "Test assertions"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.xctest~1documentation~1XCTest~1XCTExpectedFailure~1Options/title",
          "value": "XCTExpectedFailureOptions"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.xctest~1documentation~1XCTest~1XCTExpectedFailure~1Options/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "XCTExpectedFailureOptions"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.xctest~1documentation~1XCTest~1XCTExpectedFailure~1Options/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "XCTExpectedFailureOptions"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.xctest~1documentation~1XCTest~1XCTExpectedFailure/title",
          "value": "XCTExpectedFailure"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.xctest~1documentation~1XCTest~1XCTExpectedFailure/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "XCTExpectedFailure"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.xctest~1documentation~1XCTest~1XCTExpectedFailure/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "XCTExpectedFailure"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/xctest/expected-failures"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/xctest/expected-failures"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
