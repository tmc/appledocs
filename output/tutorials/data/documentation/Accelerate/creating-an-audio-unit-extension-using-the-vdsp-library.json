{
  "abstract": [
    {
      "text": "Add biquadratic filter audio-effect processing to apps like Logic Pro X and GarageBand with the Accelerate framework.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.accelerate/documentation/Accelerate",
        "doc://com.apple.accelerate/documentation/Accelerate/vdsp-library",
        "doc://com.apple.accelerate/documentation/Accelerate/single-channel-biquadratic-filters"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.accelerate/documentation/Accelerate/creating-an-audio-unit-extension-using-the-vdsp-library"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Accelerate"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "14.0",
        "name": "macOS"
      },
      {
        "beta": false,
        "introducedAt": "15.1",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Creating an audio unit extension using the vDSP library"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "An audio unit extension provides a way to create or modify audio and MIDI data in an iOS or macOS app that uses sound — including music-production apps. It contains the audio unit and, optionally, a user interface to control the audio unit. The audio unit is a custom plug-in where you generate audio or implement an audio-processing algorithm.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can shape the output of an audio signal, such as by boosting or cutting the bass or treble of a music track, with the single-channel and multichannel biquadratic filters that the vDSP library provides.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The image below shows an example of a magnitude response curve that boosts low frequencies:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "vDSP_Audio_Unit.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This sample code project is a peaking EQ filter implemented with a vDSP biquadratic filter that’s delivered as an audio unit extension. You can use the code in this project as the basis for writing audio units that use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vDSP",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " library.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This project is based on the Audio Unit Extension App Xcode template and uses the ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "Effect",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " audio unit type. This type of audio unit accepts an audio input and produces an audio output. The template provides an audio pass-through effect with a signal parameter to adjust the gain of the audio that passes through the audio unit.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about creating audio unit extensions, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/AVFAudio/creating-an-audio-unit-extension",
              "isActive": true,
              "overridingTitle": "Creating an audio unit extension",
              "overridingTitleInlineContent": [
                {
                  "text": "Creating an audio unit extension",
                  "type": "text"
                }
              ],
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Add-a-new-parameter-address",
          "level": 3,
          "text": "Add a new parameter address",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The peaking EQ filter requires three parameters: the center frequency, the Q value (which controls the shape of the response curve), and the decibel gain.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The code below adds enumeration cases for the parameters to the ",
              "type": "text"
            },
            {
              "code": "vDSP_audio_unitExtensionParameterAddresses.h",
              "type": "codeVoice"
            },
            {
              "text": " header:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "typedef NS_ENUM(AUParameterAddress, vDSP_audio_unitExtensionParameterAddress) {",
            "    frequency = 0,",
            "    Q = 1,",
            "    dbGain = 2",
            "};"
          ],
          "syntax": "objective-c",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To allow the host app to interact with the parameters, the sample code project describes their default value, value range, name, and identifier in ",
              "type": "text"
            },
            {
              "code": "Parameters.swift",
              "type": "codeVoice"
            },
            {
              "text": ". The identifier value you specify is what the audio unit uses to reference the parameter from the host app.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "ParameterSpec(",
            "    address: .frequency,",
            "    identifier: \"frequency\",",
            "    name: \"Frequency\",",
            "    units: .hertz,",
            "    valueRange: 20 ... 20_000,",
            "    defaultValue: 100.0",
            ")",
            "",
            "ParameterSpec(",
            "    address: .Q,",
            "    identifier: \"Q\",",
            "    name: \"Q\",",
            "    units: .generic,",
            "    valueRange: 0.1 ... 25,",
            "    defaultValue: 1",
            ")",
            "",
            "ParameterSpec(",
            "    address: .dbGain,",
            "    identifier: \"dbGain\",",
            "    name: \"Decibel Gain\",",
            "    units: .linearGain,",
            "    valueRange: -50 ... 50,",
            "    defaultValue: 15",
            ")"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To expose each parameter for digital signal processing (DSP), the code below adds each custom member variable to the ",
              "type": "text"
            },
            {
              "code": "setParameter",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "getParameter",
              "type": "codeVoice"
            },
            {
              "text": " functions:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "void setParameter(AUParameterAddress address, AUValue value) {",
            "    switch (address) {",
            "        case vDSP_audio_unitExtensionParameterAddress::frequency:",
            "            frequency = value;",
            "            break;",
            "        case vDSP_audio_unitExtensionParameterAddress::Q:",
            "            Q = value;",
            "            break;",
            "        case vDSP_audio_unitExtensionParameterAddress::dbGain:",
            "            dbGain = value;",
            "            break;",
            "    }",
            "}",
            "",
            "AUValue getParameter(AUParameterAddress address) {",
            "    // Return the goal. It's not thread safe to return the ramping value.",
            "    ",
            "    switch (address) {",
            "        case vDSP_audio_unitExtensionParameterAddress::frequency:",
            "            return (AUValue)frequency;",
            "        case vDSP_audio_unitExtensionParameterAddress::Q:",
            "            return (AUValue)Q;",
            "        case vDSP_audio_unitExtensionParameterAddress::dbGain:",
            "            return (AUValue)dbGain;",
            "        default: return 0.f;",
            "    }",
            "}"
          ],
          "syntax": "objective-c",
          "type": "codeListing"
        },
        {
          "anchor": "Implement-the-biquadratic-filter",
          "level": 3,
          "text": "Implement the biquadratic filter",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The audio unit extension applies a peaking EQ filter with the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vDSP_biquad_Setup",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " filter. For more information about using biquadratic filters, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/applying-biquadratic-filters-to-a-music-loop",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "vDSP_audio_unitExtensionDSPKernel",
              "type": "codeVoice"
            },
            {
              "text": " class provides the plug-in’s DSP logic, and is written in C++ to ensure real-time safety. The code below initializes the DSP kernel by creating a vector of biquadratic filters with default, pass-though coefficients:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "void initialize(int inputChannelCount, int outputChannelCount, double inSampleRate) {",
            "    mSampleRate = inSampleRate;",
            "",
            "    // Default coefficients.",
            "    double coefficients[5] = {1.0, 0.0, 0.0, 1.0, 0.0};",
            "    ",
            "    for (int i = 0; i < inputChannelCount; i++) {",
            "        ",
            "        biquads.push_back((Biquad){",
            "            .setup = vDSP_biquad_CreateSetup(coefficients, 1)",
            "        });",
            "        ",
            "        for (int j = 0; j < 4; j++) {",
            "            biquads[i].delay[j] = 0.0;",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "objective-c",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "vDSP_audio_unitExtensionDSPKernel::process()",
              "type": "codeVoice"
            },
            {
              "text": " function applies the biquadratic filters to the input channels and writes the result to the output channels:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "void process(std::span<float const*> inputBuffers,",
            "             std::span<float *> outputBuffers,",
            "             AUEventSampleTime bufferStartTime,",
            "             AUAudioFrameCount frameCount) {",
            "    ",
            "    if (mBypassed) {",
            "        // Pass the samples through.",
            "        for (UInt32 channel = 0; channel < inputBuffers.size(); ++channel) {",
            "            std::copy_n(inputBuffers[channel], frameCount, outputBuffers[channel]);",
            "        }",
            "        return;",
            "    }",
            "    ",
            "    double coeffs[5];",
            "    // Populate `coeffs` from the parameters.",
            "    biquadCoefficientsFor(mSampleRate,",
            "                          frequency,",
            "                          Q,",
            "                          dbGain,",
            "                          coeffs);",
            "    ",
            "    // For each channel, calculate and set the coefficients, and apply the",
            "    // biquadratic filter.",
            "    for (UInt32 channel = 0; channel < inputBuffers.size(); ++channel) {",
            "                    ",
            "        // Set the coefficients on the biquadratic object.",
            "        vDSP_biquad_SetCoefficientsDouble(biquads[channel].setup,",
            "                                          coeffs,",
            "                                          0, 1);",
            "        ",
            "        // Apply the biquadratic filter.",
            "        vDSP_biquad(biquads[channel].setup,",
            "                    biquads[channel].delay,",
            "                    inputBuffers[channel], 1,",
            "                    outputBuffers[channel], 1,",
            "                    frameCount);",
            "    }",
            "}"
          ],
          "syntax": "objective-c",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.accelerate/documentation/Accelerate": {
      "abstract": [
        {
          "text": "Make large-scale mathematical computations and image calculations, optimized for high performance and low energy consumption.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate",
      "kind": "symbol",
      "role": "collection",
      "title": "Accelerate",
      "type": "topic",
      "url": "/documentation/accelerate"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/applying-biquadratic-filters-to-a-music-loop": {
      "abstract": [
        {
          "text": "Change the frequency response of an audio signal using a cascaded biquadratic filter.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/applying-biquadratic-filters-to-a-music-loop",
      "kind": "article",
      "role": "sampleCode",
      "title": "Applying biquadratic filters to a music loop",
      "type": "topic",
      "url": "/documentation/accelerate/applying-biquadratic-filters-to-a-music-loop"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/single-channel-biquadratic-filters": {
      "abstract": [
        {
          "text": "Filter a single-channel signal with a cascade of biquadratic sections.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/single-channel-biquadratic-filters",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Single-channel biquadratic filters",
      "type": "topic",
      "url": "/documentation/accelerate/single-channel-biquadratic-filters"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vDSP": {
      "abstract": [
        {
          "text": "An enumeration that acts as a namespace for Swift overlays to vDSP.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vDSP"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vDSP",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "vDSP"
        }
      ],
      "role": "symbol",
      "title": "vDSP",
      "type": "topic",
      "url": "/documentation/accelerate/vdsp"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vDSP_biquad_Setup": {
      "abstract": [
        {
          "text": "A data structure that contains precalculated data for use by the single-precision cascaded biquadratic IIR filter function.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vDSP_biquad_Setup"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vDSP_biquad_Setup",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "vDSP_biquad_Setup"
        }
      ],
      "role": "symbol",
      "title": "vDSP_biquad_Setup",
      "type": "topic",
      "url": "/documentation/accelerate/vdsp_biquad_setup"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vdsp-library": {
      "abstract": [
        {
          "text": "Perform basic arithmetic operations and common digital signal processing (DSP) routines on large vectors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vdsp-library",
      "kind": "article",
      "role": "collectionGroup",
      "title": "vDSP",
      "type": "topic",
      "url": "/documentation/accelerate/vdsp-library"
    },
    "doc://com.apple.documentation/documentation/AVFAudio/creating-an-audio-unit-extension": {
      "abstract": [
        {
          "text": "Build an extension by using an Xcode template.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/AVFAudio/creating-an-audio-unit-extension",
      "kind": "article",
      "role": "article",
      "title": "Creating an audio unit extension",
      "type": "topic",
      "url": "/documentation/AVFAudio/creating-an-audio-unit-extension"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "f9bc5c104228/CreatingAnAudioUnitExtensionUsingTheVDSPLibrary.zip": {
      "checksum": "f9bc5c104228493e86027dacf451020859c7a32f3ed1a5ca137c3d45f1dd7e42101015f17849520abb356eb45e25e1aa3ec874fa037ca522375677a9c7a91b0f",
      "identifier": "f9bc5c104228/CreatingAnAudioUnitExtensionUsingTheVDSPLibrary.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/f9bc5c104228/CreatingAnAudioUnitExtensionUsingTheVDSPLibrary.zip"
    },
    "vDSP_Audio_Unit.png": {
      "alt": "A screenshot of a line chart that represents the magnitude response curve of a peaking EQ filter.",
      "identifier": "vDSP_Audio_Unit.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/665237f208ae924997047d07fb1ae875/vDSP_Audio_Unit.png"
        }
      ]
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "f9bc5c104228/CreatingAnAudioUnitExtensionUsingTheVDSPLibrary.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Biquadratic-filter-essentials",
      "generated": true,
      "identifiers": [
        "doc://com.apple.accelerate/documentation/Accelerate/applying-biquadratic-filters-to-a-music-loop"
      ],
      "title": "Biquadratic filter essentials"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vDSP_biquad_Setup/title",
          "value": "vDSP_biquad_Setup"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vDSP_biquad_Setup/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "vDSP_biquad_Setup"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vDSP_biquad_Setup/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "vDSP_biquad_Setup"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
