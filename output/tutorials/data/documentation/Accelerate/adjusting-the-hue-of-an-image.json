{
  "abstract": [
    {
      "text": "Convert an image to L*a*b* color space and apply hue adjustment.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.accelerate/documentation/Accelerate"
      ],
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.accelerate/documentation/Accelerate",
        "doc://com.apple.accelerate/documentation/Accelerate/vimage-library"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.accelerate/documentation/Accelerate/adjusting-the-hue-of-an-image"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Accelerate"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "13.0",
        "name": "macOS"
      },
      {
        "beta": false,
        "introducedAt": "14.0",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Adjusting the hue of an image"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "This sample code project allows you to adjust the hue of an image by treating the chrominance information as 2D coordinates, and transforming those values with a rotation matrix. You can convert an RGB image — with its pixels represented as red, green, and blue values — to L*a*b*, where luminance and chrominance are stored discretely. The ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "L*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " in L*a*b* refers to the lightness, and the ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "a*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "b*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " refer to the red-green and blue-yellow values, respectively.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The image below shows an approximation of an L*a*b* color chart. The ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "a*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " value transitions horizontally (left to right) from negative, through zero, to positive, and the ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "b*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " value transitions vertically (bottom to top) from negative, through zero, to positive. Because this sample code focuses on color rather than lightness, the image doesn’t consider L*.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "lab-color-chart_2x.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The sample uses the vImage Any-to-Any converter to convert the source image’s color space to L*a*b*. The code converts the interleaved L*a*b* image data to multiple-plane image data that it passes to a matrix multiply operation to apply the hue adjustment.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following image shows four photographs, from left to right, with a hue adjustment of -90º, 0º (an unchanged hue), 90º, and 180º:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "hueAdjust_2x.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-the-Lab-image-format",
          "level": 3,
          "text": "Create the L*a*b* image format",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To create the image format for the L*a*b* color space, the sample app uses the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coregraphics/cgcolorspace/2923325-genericlab",
              "isActive": true,
              "overridingTitle": "genericLab",
              "overridingTitleInlineContent": [
                {
                  "code": "genericLab",
                  "type": "codeVoice"
                }
              ],
              "type": "reference"
            },
            {
              "text": " system-defined ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coregraphics/cgcolorspace",
              "isActive": true,
              "overridingTitle": "CGColorSpace",
              "overridingTitleInlineContent": [
                {
                  "code": "CGColorSpace",
                  "type": "codeVoice"
                }
              ],
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var labImageFormat = vImage_CGImageFormat(",
            "    bitsPerComponent: 8,",
            "    bitsPerPixel: 8 * 3,",
            "    colorSpace: CGColorSpace(name: CGColorSpace.genericLab)!,",
            "    bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.none.rawValue),",
            "    renderingIntent: .defaultIntent)!"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On return, ",
              "type": "text"
            },
            {
              "code": "labImageFormat",
              "type": "codeVoice"
            },
            {
              "text": " describes the interleaved L*a*b* pixels over which this sample works. The first channel in each pixel is the lightness, and the second and third channels are the ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "a*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "b*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ", respectively.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Generate-the-pixel-buffer-and-image-format-from-the-source-image",
          "level": 3,
          "text": "Generate the pixel buffer and image format from the source image",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The converter that the sample uses to convert the source pixels to L*a*b* color space requires two ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage_CGImageFormat",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " structures that describe the source and destination images. The sample uses the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/makeDynamicPixelBufferAndCGImageFormat(cgImage:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method to create a dynamic pixel buffer and image format structure from the source Core Graphics image.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let source = try vImage.PixelBuffer",
            "    .makeDynamicPixelBufferAndCGImageFormat(cgImage: sourceCGImage)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On return, ",
              "type": "text"
            },
            {
              "code": "source.cgImageFormat",
              "type": "codeVoice"
            },
            {
              "text": " contains the image format of the source image, and ",
              "type": "text"
            },
            {
              "code": "source.pixelBuffer",
              "type": "codeVoice"
            },
            {
              "text": " is a pixel buffer that contains the source image data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-the-source-image-color-space-to-Lab-converter",
          "level": 3,
          "text": "Create the source image color space to L*a*b* converter",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The sample app uses the source and L*a*b* image formats to create a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImageConverter",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance to convert between the two color spaces.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let rgbToLab = try vImageConverter.make(sourceFormat: source.cgImageFormat,",
            "                                        destinationFormat: labImageFormat)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about vImage’s convert-any-to-any functionality, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/building-a-basic-image-conversion-workflow",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Convert-the-source-image-to-Lab",
          "level": 3,
          "text": "Convert the source image to L*a*b*",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The sample creates a pixel buffer that’s the same size as the source image.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "labInterleavedSource = vImage.PixelBuffer<vImage.Interleaved8x3>(size: size)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The converter’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImageConverter/convert(from:to:)-9s7p7",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function performs the conversion.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "try rgbToLab.convert(from: source.pixelBuffer,",
            "                     to: labInterleavedSource)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On return, the ",
              "type": "text"
            },
            {
              "code": "labInterleavedSource",
              "type": "codeVoice"
            },
            {
              "text": " contains the L*a*b* representation of the source image.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Convert-the-interleaved-Lab-buffer-to-planar-buffers",
          "level": 3,
          "text": "Convert the interleaved L*a*b* buffer to planar buffers",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The function the sample app uses to apply the hue adjustment, ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:divisor:preBias:postBias:destination:)-7jo6v",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", operates on a multiple-plane pixel buffer. To convert the interleaved L*a*b* buffer to planar buffers, the app creates a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/Planar8x3",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " pixel buffer.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "labPlanarDestination = vImage.PixelBuffer<vImage.Planar8x3>(size: size)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "It then calls ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/deinterleave(destination:)-hrhz",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to populate the planar buffers with the contents of the interleaved buffer.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "labInterleavedSource.deinterleave(destination: labPlanarDestination)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about working with planar buffers, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/optimizing-image-processing-performance",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Apply-the-hue-adjustment",
          "level": 3,
          "text": "Apply the hue adjustment",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The app adjusts the hue of an image by rotating a two-element vector, described by ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "a*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "b*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ". For more information about working with rotation matrices, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/working-with-matrices",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following visualizes a sample color (marked ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "A",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ") rotated by -90º (marked ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "C",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ") and 45º (marked ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "B",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": "):",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "ColorRotate_2x.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following code generates the rotation matrix based on ",
              "type": "text"
            },
            {
              "code": "hueAngle",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let divisor: Int = 0x1000",
            "",
            "let rotationMatrix = [",
            "    1, 0,             0,",
            "    0, cos(hueAngle), -sin(hueAngle),",
            "    0, sin(hueAngle),  cos(hueAngle)",
            "].map {",
            "    return Int($0 * Float(divisor))",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "preBias",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "postBias",
              "type": "codeVoice"
            },
            {
              "text": " values effectively shift the ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "a*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "b*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " values from ",
              "type": "text"
            },
            {
              "code": "0...255",
              "type": "codeVoice"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "code": "-128...127",
              "type": "codeVoice"
            },
            {
              "text": ", so the rotation is centered where ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "a*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "b*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " are zero.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let preBias = [Int](repeating: -128, count: 3)",
            "let postBias = [Int](repeating: 128 * divisor, count: 3)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:divisor:preBias:postBias:destination:)-7jo6v",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function multiplies each pixel in the source buffer by the matrix and writes the result to the destination buffers. The code performs the matrix multiplication in-place, so the source and destination point to the same buffers.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following code performs the matrix multiply operation:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "labPlanarDestination.multiply(",
            "    by: rotationMatrix,",
            "    divisor: divisor,",
            "    preBias: preBias,",
            "    postBias: postBias,",
            "    destination: labPlanarDestination)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On return, ",
              "type": "text"
            },
            {
              "code": "labPlanarDestination",
              "type": "codeVoice"
            },
            {
              "text": " contains the hue-adjusted ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "a*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "b*",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " channels.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Display-the-image",
          "level": 3,
          "text": "Display the image",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, the sample code converts the hue-adjusted planar buffer back to an interleaved buffer.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "labPlanarDestination.interleave(destination: labInterleavedDestination)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The SwiftUI ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Image",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " view supports the L*a*b* color space. The following code creates a Core Graphics image from the interleaved pixel buffer and passes it to the published ",
              "type": "text"
            },
            {
              "code": "outputImage",
              "type": "codeVoice"
            },
            {
              "text": " property that the app displays on the screen:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "if let result = labInterleavedDestination",
            "    .makeCGImage(cgImageFormat: labImageFormat) {",
            "    ",
            "    DispatchQueue.main.async {",
            "        self.outputImage = result",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "7d7c89a1faf9/AdjustingTheHueOfAnImage.zip": {
      "checksum": "7d7c89a1faf916fcd6063cd3903f7cfb95f06b4c846b8b0159c9e24be3cefaeba86b38e2b68b2cb5a6cb7acec70d71283649dd2595699989388f7f753c2b52cb",
      "identifier": "7d7c89a1faf9/AdjustingTheHueOfAnImage.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/7d7c89a1faf9/AdjustingTheHueOfAnImage.zip"
    },
    "ColorRotate_2x.png": {
      "alt": "A graphic showing a color rotated by minus 90 degrees and by 45 degrees. The background contains vertical and horizontal gradients. The colors transition from green on the left to red on the right, and from yellow at the top to blue at the bottom. The original color is light yellow. The color that is rotated minus 90 degrees is light green, and the color that is rotated 45 degrees is light red. ",
      "identifier": "ColorRotate_2x.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/057803bef57b84075891b0e92e7f3688/ColorRotate_2x.png"
        }
      ]
    },
    "doc://com.apple.accelerate/documentation/Accelerate": {
      "abstract": [
        {
          "text": "Make large-scale mathematical computations and image calculations, optimized for high performance and low energy consumption.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate",
      "kind": "symbol",
      "role": "collection",
      "title": "Accelerate",
      "type": "topic",
      "url": "/documentation/accelerate"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/adjusting-saturation-and-applying-tone-mapping": {
      "abstract": [
        {
          "text": "Convert an RGB image to discrete luminance and chrominance channels, and apply color and contrast treatments.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/adjusting-saturation-and-applying-tone-mapping",
      "kind": "article",
      "role": "sampleCode",
      "title": "Adjusting saturation and applying tone mapping",
      "type": "topic",
      "url": "/documentation/accelerate/adjusting-saturation-and-applying-tone-mapping"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/adjusting-the-brightness-and-contrast-of-an-image": {
      "abstract": [
        {
          "text": "Use a gamma function to apply a linear or exponential curve.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/adjusting-the-brightness-and-contrast-of-an-image",
      "kind": "article",
      "role": "sampleCode",
      "title": "Adjusting the brightness and contrast of an image",
      "type": "topic",
      "url": "/documentation/accelerate/adjusting-the-brightness-and-contrast-of-an-image"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/applying-tone-curve-adjustments-to-images": {
      "abstract": [
        {
          "text": "Use the vImage library’s polynomial transform to apply tone curve adjustments to images.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/applying-tone-curve-adjustments-to-images",
      "kind": "article",
      "role": "sampleCode",
      "title": "Applying tone curve adjustments to images",
      "type": "topic",
      "url": "/documentation/accelerate/applying-tone-curve-adjustments-to-images"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/building-a-basic-image-conversion-workflow": {
      "abstract": [
        {
          "text": "Learn the fundamentals of the convert-any-to-any function by converting a CMYK image to an RGB image.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/building-a-basic-image-conversion-workflow",
      "kind": "article",
      "role": "article",
      "title": "Building a basic image conversion workflow",
      "type": "topic",
      "url": "/documentation/accelerate/building-a-basic-image-conversion-workflow"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/enhancing-image-contrast-with-histogram-manipulation": {
      "abstract": [
        {
          "text": "Enhance and adjust the contrast of an image with histogram equalization and contrast stretching.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/enhancing-image-contrast-with-histogram-manipulation",
      "kind": "article",
      "role": "article",
      "title": "Enhancing image contrast with histogram manipulation",
      "type": "topic",
      "url": "/documentation/accelerate/enhancing-image-contrast-with-histogram-manipulation"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/histogram": {
      "abstract": [
        {
          "text": "Calculate or manipulate an image’s histogram.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/histogram",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Histogram",
      "type": "topic",
      "url": "/documentation/accelerate/histogram"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/optimizing-image-processing-performance": {
      "abstract": [
        {
          "text": "Improve your app’s performance by converting image buffer formats from interleaved to planar.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/optimizing-image-processing-performance",
      "kind": "article",
      "role": "article",
      "title": "Optimizing image-processing performance",
      "type": "topic",
      "url": "/documentation/accelerate/optimizing-image-processing-performance"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/specifying-histograms-with-vimage": {
      "abstract": [
        {
          "text": "Calculate the histogram of one image, and apply it to a second image.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/specifying-histograms-with-vimage",
      "kind": "article",
      "role": "sampleCode",
      "title": "Specifying histograms with vImage",
      "type": "topic",
      "url": "/documentation/accelerate/specifying-histograms-with-vimage"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/deinterleave(destination:)-hrhz": {
      "abstract": [
        {
          "text": "Deinterleaves the 8-bit-per-channel, three-channel interleaved buffer and writes the result to a multiple-plane pixel buffer.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Format",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "vImage.Interleaved8x3",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "deinterleave"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "destination"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO11PixelBufferV",
          "text": "PixelBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO9Planar8x3V",
          "text": "Planar8x3"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/deinterleave(destination:)-hrhz",
      "kind": "symbol",
      "role": "symbol",
      "title": "deinterleave(destination:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimage/pixelbuffer/deinterleave(destination:)-hrhz"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/makeDynamicPixelBufferAndCGImageFormat(cgImage:)": {
      "abstract": [
        {
          "text": "Returns a new dynamic pixel format pixel buffer and Core Graphics image format structure from a Core Graphics image.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Format",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "vImage.DynamicPixelFormat",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "makeDynamicPixelBufferAndCGImageFormat"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "cgImage"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@CGImageRef",
          "text": "CGImage"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> (pixelBuffer"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO11PixelBufferV",
          "text": "PixelBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO18DynamicPixelFormatV",
          "text": "DynamicPixelFormat"
        },
        {
          "kind": "text",
          "text": ">, cgImageFormat"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@vImage_CGImageFormat",
          "text": "vImage_CGImageFormat"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/makeDynamicPixelBufferAndCGImageFormat(cgImage:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "makeDynamicPixelBufferAndCGImageFormat(cgImage:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimage/pixelbuffer/makedynamicpixelbufferandcgimageformat(cgimage:)"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:divisor:preBias:postBias:destination:)-7jo6v": {
      "abstract": [
        {
          "text": "Multiplies each pixel in an 8-bit planar pixel buffer by the specified factor.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Format",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "vImage.Planar8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "multiply"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "divisor"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "preBias"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "postBias"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destination"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO11PixelBufferV",
          "text": "PixelBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO7Planar8V",
          "text": "Planar8"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:divisor:preBias:postBias:destination:)-7jo6v",
      "kind": "symbol",
      "role": "symbol",
      "title": "multiply(by:divisor:preBias:postBias:destination:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimage/pixelbuffer/multiply(by:divisor:prebias:postbias:destination:)-7jo6v"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage/Planar8x3": {
      "abstract": [
        {
          "text": "A pixel buffer that contains three homogeneous 8-bit planes, for example, RGB.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Planar8x3"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/Planar8x3",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Planar8x3"
        }
      ],
      "role": "symbol",
      "title": "vImage.Planar8x3",
      "type": "topic",
      "url": "/documentation/accelerate/vimage/planar8x3"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImageConverter": {
      "abstract": [
        {
          "text": "A description of a conversion from one image format to another.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vImageConverter"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImageConverter",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "vImageConverter"
        }
      ],
      "role": "symbol",
      "title": "vImageConverter",
      "type": "topic",
      "url": "/documentation/accelerate/vimageconverter"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImageConverter/convert(from:to:)-9s7p7": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "convert"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Src"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Dest"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO11PixelBufferV",
          "text": "PixelBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Src"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO11PixelBufferV",
          "text": "PixelBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Dest"
        },
        {
          "kind": "text",
          "text": ">) "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImageConverter/convert(from:to:)-9s7p7",
      "kind": "symbol",
      "role": "symbol",
      "title": "convert(from:to:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimageconverter/convert(from:to:)-9s7p7"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage_CGImageFormat": {
      "abstract": [
        {
          "text": "The description of a Core Graphics image.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vImage_CGImageFormat"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage_CGImageFormat",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "vImage_CGImageFormat"
        }
      ],
      "role": "symbol",
      "title": "vImage_CGImageFormat",
      "type": "topic",
      "url": "/documentation/accelerate/vimage_cgimageformat"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vimage-library": {
      "abstract": [
        {
          "text": "Manipulate large images using the CPU’s vector processor.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vimage-library",
      "kind": "article",
      "role": "collectionGroup",
      "title": "vImage",
      "type": "topic",
      "url": "/documentation/accelerate/vimage-library"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/working-with-matrices": {
      "abstract": [
        {
          "text": "Solve simultaneous equations and transform points in space.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/working-with-matrices",
      "kind": "article",
      "role": "article",
      "title": "Working with Matrices",
      "type": "topic",
      "url": "/documentation/accelerate/working-with-matrices"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/Image": {
      "abstract": [
        {
          "text": "A view that displays an image.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Image"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Image",
      "kind": "symbol",
      "role": "symbol",
      "title": "Image",
      "type": "topic",
      "url": "/documentation/SwiftUI/Image"
    },
    "doc://com.apple.documentation/documentation/coregraphics/cgcolorspace": {
      "abstract": [
        {
          "text": "A profile that specifies how to interpret a color value for display.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "CGColorSpace"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coregraphics/cgcolorspace",
      "kind": "symbol",
      "role": "symbol",
      "title": "CGColorSpace",
      "type": "topic",
      "url": "/documentation/coregraphics/cgcolorspace"
    },
    "doc://com.apple.documentation/documentation/coregraphics/cgcolorspace/2923325-genericlab": {
      "abstract": [
        {
          "text": "The generic LAB color space.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class let "
        },
        {
          "kind": "identifier",
          "text": "genericLab"
        },
        {
          "kind": "text",
          "text": ": CFString"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coregraphics/cgcolorspace/2923325-genericlab",
      "kind": "symbol",
      "role": "symbol",
      "title": "genericLab",
      "type": "topic",
      "url": "/documentation/coregraphics/cgcolorspace/2923325-genericlab"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "hueAdjust_2x.png": {
      "alt": "Four photographs of a flower with different hue adjustments.",
      "identifier": "hueAdjust_2x.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b3598292b9795848665392d30103feb1/hueAdjust_2x.png"
        }
      ]
    },
    "lab-color-chart_2x.png": {
      "alt": "A graphic containing vertical and horizontal gradients. The gradient colors transition from green on the left to red on the right, and from yellow at the top to blue at the bottom.",
      "identifier": "lab-color-chart_2x.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/8b5229283b3e0e9790f3ad28ee2bb7e2/lab-color-chart_2x.png"
        }
      ]
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "7d7c89a1faf9/AdjustingTheHueOfAnImage.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Color-and-Tone-Adjustment",
      "generated": true,
      "identifiers": [
        "doc://com.apple.accelerate/documentation/Accelerate/adjusting-the-brightness-and-contrast-of-an-image",
        "doc://com.apple.accelerate/documentation/Accelerate/adjusting-saturation-and-applying-tone-mapping",
        "doc://com.apple.accelerate/documentation/Accelerate/applying-tone-curve-adjustments-to-images",
        "doc://com.apple.accelerate/documentation/Accelerate/specifying-histograms-with-vimage",
        "doc://com.apple.accelerate/documentation/Accelerate/enhancing-image-contrast-with-histogram-manipulation",
        "doc://com.apple.accelerate/documentation/Accelerate/histogram"
      ],
      "title": "Color and Tone Adjustment"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1coregraphics~1cgcolorspace~12923325-genericlab/title",
          "value": "kCGColorSpaceGenericLab"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImageConverter/title",
          "value": "vImageConverterRef"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImageConverter/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "vImageConverterRef"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImageConverter/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "vImageConverterRef"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1coregraphics~1cgcolorspace/title",
          "value": "CGColorSpaceRef"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImage_CGImageFormat/title",
          "value": "vImage_CGImageFormat"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImage_CGImageFormat/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "vImage_CGImageFormat"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImage_CGImageFormat/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "vImage_CGImageFormat"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
