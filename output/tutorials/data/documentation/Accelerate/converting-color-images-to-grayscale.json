{
  "abstract": [
    {
      "text": "Convert an RGB image to grayscale using matrix multiplication.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.accelerate/documentation/Accelerate"
      ],
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.accelerate/documentation/Accelerate",
        "doc://com.apple.accelerate/documentation/Accelerate/vimage-library"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.accelerate/documentation/Accelerate/converting-color-images-to-grayscale"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Accelerate"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "13.3",
        "name": "macOS"
      },
      {
        "beta": false,
        "introducedAt": "14.3",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Converting color images to grayscale"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The vImage ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:divisor:preBias:postBias:destination:)-7jo6v",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ") and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:preBias:postBias:destination:)-3bh2a",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " functions multiply each channel of an interleaved image with the corresponding value in a matrix and return the sum of the multiplications to generate a planar image. These functions wrap ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImageMatrixMultiply_ARGB8888ToPlanar8(_:_:_:_:_:_:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImageMatrixMultiply_ARGBFFFFToPlanarF(_:_:_:_:_:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", respectively.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following shows how the 8-bit matrix multiply operation calculates the result for each pixel:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let p = (sourcePixels[index].a + preBias.a) * matrix.a +",
            "        (sourcePixels[index].r + preBias.r) * matrix.r +",
            "        (sourcePixels[index].g + preBias.g) * matrix.g +",
            "        (sourcePixels[index].b + preBias.b) * matrix.b",
            "",
            "let destinationPixels[index] = (p + postBias) / divisor"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The 8-bit matrix multiply operation creates a maximum of 255 gray tones. However, even with an 8-bit-per-channel source image, the 32-bit matrix multiply operation can create up to 255 x 255 x 255 (16,581,375) gray tones. This sample code project includes 8- and 32-bit color-to-grayscale conversion and provides a function to count the distinct tones in the output image.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Before exploring the code, build and run the app to familiarize yourself with the different visual results it generates from setting different coefficients for the red, green, and blue channels.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Define-the-source-and-destination-pixel-buffers",
          "level": 3,
          "text": "Define the source and destination pixel buffers",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To support 8- and 32-bit matrix multiply, the sample code defines four pixel buffers: two ARGB source buffers and two grayscale destination buffers.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "/// The 8-bit-per-channel, 4-channel source pixel buffer.",
            "let sourceBuffer8 = try! vImage.PixelBuffer<vImage.Interleaved8x4>(",
            "    cgImage: sourceImage,",
            "    cgImageFormat: &GrayscaleConverter.sourceFormat8)",
            "",
            "/// The 32-bit-per-channel, 4-channel source pixel buffer.",
            "let sourceBufferF = try! vImage.PixelBuffer<vImage.InterleavedFx4>(",
            "    cgImage: sourceImage,",
            "    cgImageFormat: &GrayscaleConverter.sourceFormatF)",
            "",
            "/// The 8-bit planar destination pixel buffer.",
            "let destinationBuffer8 = vImage.PixelBuffer<vImage.Planar8>(width: sourceImage.width,",
            "                                                            height: sourceImage.height)",
            "",
            "/// The 32-bit planar destination pixel buffer.",
            "let destinationBufferF = vImage.PixelBuffer<vImage.PlanarF>(width: sourceImage.width,",
            "                                                            height: sourceImage.height)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Define-the-coefficient-values",
          "level": 3,
          "text": "Define the coefficient values",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Luma coefficients model an eye’s response to red, green, and blue light. The following formula shows the Rec. 709 luma coefficients for the sample app’s default color-to-grayscale conversion.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "luminance = (red × 0.2126) + (green x 0.7152) + (blue × 0.0722)"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The sample code app provides a user interface that allows a user to change the red, green, and blue coefficients. To ensure the grayscale image isn’t darker or brighter than the original image, the following code normalizes the coefficient values so that their sum equals ",
              "type": "text"
            },
            {
              "code": "1.0",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let scale = 1.0 / (redCoefficient + greenCoefficient + blueCoefficient)",
            "",
            "DispatchQueue.main.async { [self] in",
            "    normalizedRedCoefficient = redCoefficient * scale",
            "    normalizedGreenCoefficient = greenCoefficient * scale",
            "    normalizedBlueCoefficient = blueCoefficient * scale",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Perform-the-8-bit-matrix-multiply-operation",
          "level": 3,
          "text": "Perform the 8-bit matrix multiply operation",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The 8-bit matrix multiply operation accepts integer matrix values. The following code defines a divisor that it uses to multiply the floating-point coefficient values and that the function uses to renormalize the image after scaling by the matrix:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let divisor: Int = 0x1000",
            "let fDivisor = Float(divisor)",
            "",
            "sourceBuffer8.multiply(by: (0,",
            "                            Int(normalizedRedCoefficient * fDivisor),",
            "                            Int(normalizedGreenCoefficient * fDivisor),",
            "                            Int(normalizedBlueCoefficient * fDivisor)),",
            "                       divisor: divisor,",
            "                       preBias: (0, 0, 0, 0),",
            "                       postBias: 0,",
            "                       destination: destinationBuffer8)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On return, the ",
              "type": "text"
            },
            {
              "code": "destinationBuffer8",
              "type": "codeVoice"
            },
            {
              "text": " pixel buffer contains a grayscale representation of the original image.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Perform-the-32-bit-matrix-multiply-operation",
          "level": 3,
          "text": "Perform the 32-bit matrix multiply operation",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The 32-bit matrix multiply operation accepts floating-point matrix values and, therefore, doesn’t require a divisor. The following code performs the 32-bit color-to-grayscale conversion.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "sourceBufferF.multiply(by: (0,",
            "                            normalizedRedCoefficient,",
            "                            normalizedGreenCoefficient,",
            "                            normalizedBlueCoefficient),",
            "                       preBias: (0, 0, 0, 0),",
            "                       postBias: 0,",
            "                       destination: destinationBufferF)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On return, the ",
              "type": "text"
            },
            {
              "code": "destinationBufferF",
              "type": "codeVoice"
            },
            {
              "text": " pixel buffer contains a grayscale representation of the original image.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-a-grayscale-Core-Graphics-image",
          "level": 3,
          "text": "Create a grayscale Core Graphics image",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The sample app displays the 8- and 32-bit grayscale images in the user interface. To support this, the following code defines two single-channel ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage_CGImageFormat",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " structures:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "static var destinationFormat8 = vImage_CGImageFormat(",
            "    bitsPerComponent: 8,",
            "    bitsPerPixel: 8,",
            "    colorSpace: CGColorSpaceCreateDeviceGray(),",
            "    bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.none.rawValue))!",
            "",
            "static var destinationFormatF = vImage_CGImageFormat(",
            "    bitsPerComponent: 32,",
            "    bitsPerPixel: 32,",
            "    colorSpace: CGColorSpaceCreateDeviceGray(),",
            "    bitmapInfo: CGBitmapInfo(",
            "        rawValue: kCGBitmapByteOrder32Host.rawValue |",
            "        CGBitmapInfo.floatComponents.rawValue |",
            "        CGImageAlphaInfo.none.rawValue))!"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/makeCGImage(cgImageFormat:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function is available for both the 8- and 32-bit pixel buffers. The following code creates a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coregraphics/cgimage",
              "isActive": true,
              "overridingTitle": "CGImage",
              "overridingTitleInlineContent": [
                {
                  "code": "CGImage",
                  "type": "codeVoice"
                }
              ],
              "type": "reference"
            },
            {
              "text": " instance from the 32-bit grayscale pixel buffer:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let result = destinationBufferF.makeCGImage(",
            "    cgImageFormat: GrayscaleConverter.destinationFormatF)!"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On return, ",
              "type": "text"
            },
            {
              "code": "result",
              "type": "codeVoice"
            },
            {
              "text": " contains the grayscale representation of the original image:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "grayscale_2x.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "2c231368d34c/ConvertingColorImagesToGrayscale.zip": {
      "checksum": "2c231368d34c5b7cb4f59810ee182548ca0ea7426b51cb5b64bb96f30e4c1c71c5112d32f1a34227442007fa9b28db88f448c2547801d255fc215e92881a5b69",
      "identifier": "2c231368d34c/ConvertingColorImagesToGrayscale.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/2c231368d34c/ConvertingColorImagesToGrayscale.zip"
    },
    "doc://com.apple.accelerate/documentation/Accelerate": {
      "abstract": [
        {
          "text": "Make large-scale mathematical computations and image calculations, optimized for high performance and low energy consumption.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate",
      "kind": "symbol",
      "role": "collection",
      "title": "Accelerate",
      "type": "topic",
      "url": "/documentation/accelerate"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/applying-color-transforms-to-images-with-a-multidimensional-lookup-table": {
      "abstract": [
        {
          "text": "Precompute translation values to optimize color space conversion and other pointwise operations.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/applying-color-transforms-to-images-with-a-multidimensional-lookup-table",
      "kind": "article",
      "role": "article",
      "title": "Applying color transforms to images with a multidimensional lookup table",
      "type": "topic",
      "url": "/documentation/accelerate/applying-color-transforms-to-images-with-a-multidimensional-lookup-table"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/building-a-basic-image-conversion-workflow": {
      "abstract": [
        {
          "text": "Learn the fundamentals of the convert-any-to-any function by converting a CMYK image to an RGB image.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/building-a-basic-image-conversion-workflow",
      "kind": "article",
      "role": "article",
      "title": "Building a basic image conversion workflow",
      "type": "topic",
      "url": "/documentation/accelerate/building-a-basic-image-conversion-workflow"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/conversion": {
      "abstract": [
        {
          "text": "Convert an image to a different format.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/conversion",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Conversion",
      "type": "topic",
      "url": "/documentation/accelerate/conversion"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/converting-luminance-and-chrominance-planes-to-an-argb-image": {
      "abstract": [
        {
          "text": "Create a displayable ARGB image using the luminance and chrominance information from your device’s camera.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/converting-luminance-and-chrominance-planes-to-an-argb-image",
      "kind": "article",
      "role": "sampleCode",
      "title": "Converting luminance and chrominance planes to an ARGB image",
      "type": "topic",
      "url": "/documentation/accelerate/converting-luminance-and-chrominance-planes-to-an-argb-image"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/makeCGImage(cgImageFormat:)": {
      "abstract": [
        {
          "text": "Returns a Core Graphics image from the pixel buffer’s contents.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Format",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "StaticPixelFormat",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "makeCGImage"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "cgImageFormat"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@vImage_CGImageFormat",
          "text": "vImage_CGImageFormat"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@CGImageRef",
          "text": "CGImage"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/makeCGImage(cgImageFormat:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "makeCGImage(cgImageFormat:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimage/pixelbuffer/makecgimage(cgimageformat:)"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:divisor:preBias:postBias:destination:)-7jo6v": {
      "abstract": [
        {
          "text": "Multiplies each pixel in an 8-bit planar pixel buffer by the specified factor.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Format",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "vImage.Planar8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "multiply"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "divisor"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "preBias"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "postBias"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destination"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO11PixelBufferV",
          "text": "PixelBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO7Planar8V",
          "text": "Planar8"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:divisor:preBias:postBias:destination:)-7jo6v",
      "kind": "symbol",
      "role": "symbol",
      "title": "multiply(by:divisor:preBias:postBias:destination:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimage/pixelbuffer/multiply(by:divisor:prebias:postbias:destination:)-7jo6v"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:preBias:postBias:destination:)-3bh2a": {
      "abstract": [
        {
          "text": "Multiplies each pixel in a 32-bit planar pixel buffer by the specified factor.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Format",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "vImage.PlanarF",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "multiply"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "preBias"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "postBias"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destination"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO11PixelBufferV",
          "text": "PixelBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO",
          "text": "vImage"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate6vImageO7PlanarFV",
          "text": "PlanarF"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage/PixelBuffer/multiply(by:preBias:postBias:destination:)-3bh2a",
      "kind": "symbol",
      "role": "symbol",
      "title": "multiply(by:preBias:postBias:destination:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimage/pixelbuffer/multiply(by:prebias:postbias:destination:)-3bh2a"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImageMatrixMultiply_ARGB8888ToPlanar8(_:_:_:_:_:_:_:)": {
      "abstract": [
        {
          "text": "Multiplies each pixel in an interleaved four-channel, 8-bit source image by a matrix to produce a planar 8-bit destination image.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vImageMatrixMultiply_ARGB8888ToPlanar8"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@vImage_Buffer",
          "text": "vImage_Buffer"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@vImage_Buffer",
          "text": "vImage_Buffer"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ">!, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@vImage_Flags",
          "text": "vImage_Flags"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@vImage_Error",
          "text": "vImage_Error"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImageMatrixMultiply_ARGB8888ToPlanar8(_:_:_:_:_:_:_:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "vImageMatrixMultiply_ARGB8888ToPlanar8"
        }
      ],
      "role": "symbol",
      "title": "vImageMatrixMultiply_ARGB8888ToPlanar8(_:_:_:_:_:_:_:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimagematrixmultiply_argb8888toplanar8(_:_:_:_:_:_:_:)"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImageMatrixMultiply_ARGBFFFFToPlanarF(_:_:_:_:_:_:)": {
      "abstract": [
        {
          "text": "Multiplies each pixel in an interleaved four-channel, 32-bit source image by a matrix to produce a planar 32-bit destination image.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vImageMatrixMultiply_ARGBFFFFToPlanarF"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@vImage_Buffer",
          "text": "vImage_Buffer"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@vImage_Buffer",
          "text": "vImage_Buffer"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ">!, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@vImage_Flags",
          "text": "vImage_Flags"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@vImage_Error",
          "text": "vImage_Error"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImageMatrixMultiply_ARGBFFFFToPlanarF(_:_:_:_:_:_:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "vImageMatrixMultiply_ARGBFFFFToPlanarF"
        }
      ],
      "role": "symbol",
      "title": "vImageMatrixMultiply_ARGBFFFFToPlanarF(_:_:_:_:_:_:)",
      "type": "topic",
      "url": "/documentation/accelerate/vimagematrixmultiply_argbfffftoplanarf(_:_:_:_:_:_:)"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vImage_CGImageFormat": {
      "abstract": [
        {
          "text": "The description of a Core Graphics image.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vImage_CGImageFormat"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vImage_CGImageFormat",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "vImage_CGImageFormat"
        }
      ],
      "role": "symbol",
      "title": "vImage_CGImageFormat",
      "type": "topic",
      "url": "/documentation/accelerate/vimage_cgimageformat"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/vimage-library": {
      "abstract": [
        {
          "text": "Manipulate large images using the CPU’s vector processor.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/vimage-library",
      "kind": "article",
      "role": "collectionGroup",
      "title": "vImage",
      "type": "topic",
      "url": "/documentation/accelerate/vimage-library"
    },
    "doc://com.apple.documentation/documentation/coregraphics/cgimage": {
      "abstract": [
        {
          "text": "A bitmap image or image mask.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "CGImage"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coregraphics/cgimage",
      "kind": "symbol",
      "role": "symbol",
      "title": "CGImage",
      "type": "topic",
      "url": "/documentation/coregraphics/cgimage"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "grayscale_2x.png": {
      "alt": "Grayscale photograph.",
      "identifier": "grayscale_2x.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/91ec6c92e6eedcb41bb2612616718ee9/grayscale_2x.png"
        }
      ]
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "2c231368d34c/ConvertingColorImagesToGrayscale.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Conversion-Between-Image-Formats",
      "generated": true,
      "identifiers": [
        "doc://com.apple.accelerate/documentation/Accelerate/building-a-basic-image-conversion-workflow",
        "doc://com.apple.accelerate/documentation/Accelerate/applying-color-transforms-to-images-with-a-multidimensional-lookup-table",
        "doc://com.apple.accelerate/documentation/Accelerate/building-a-basic-image-conversion-workflow",
        "doc://com.apple.accelerate/documentation/Accelerate/converting-luminance-and-chrominance-planes-to-an-argb-image",
        "doc://com.apple.accelerate/documentation/Accelerate/conversion"
      ],
      "title": "Conversion Between Image Formats"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImage_CGImageFormat/title",
          "value": "vImage_CGImageFormat"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImage_CGImageFormat/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "vImage_CGImageFormat"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImage_CGImageFormat/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "vImage_CGImageFormat"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1coregraphics~1cgimage/title",
          "value": "CGImageRef"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImageMatrixMultiply_ARGBFFFFToPlanarF(_:_:_:_:_:_:)/title",
          "value": "vImageMatrixMultiply_ARGBFFFFToPlanarF"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImageMatrixMultiply_ARGBFFFFToPlanarF(_:_:_:_:_:_:)/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "vImageMatrixMultiply_ARGBFFFFToPlanarF"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImageMatrixMultiply_ARGB8888ToPlanar8(_:_:_:_:_:_:_:)/title",
          "value": "vImageMatrixMultiply_ARGB8888ToPlanar8"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1vImageMatrixMultiply_ARGB8888ToPlanar8(_:_:_:_:_:_:_:)/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "vImageMatrixMultiply_ARGB8888ToPlanar8"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
