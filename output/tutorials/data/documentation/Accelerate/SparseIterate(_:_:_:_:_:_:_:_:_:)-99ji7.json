{
  "abstract": [
    {
      "text": "Performs a single iteration of the specified iterative method for double-precision matrices, applying a preconditioner.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.accelerate/documentation/Accelerate"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.accelerate/documentation/Accelerate/SparseIterate(_:_:_:_:_:_:_:_:_:)-99ji7"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "c:@F@SparseIterate#$@SA@SparseIterativeMethod#I#*1b#*v#BFv(#b#$@E@CBLAS_TRANSPOSE#$@SA@DenseMatrix_Double#S6_)#S6_#S6_#S6_#$@SA@SparseOpaquePreconditioner_Double#",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "SparseIterate"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "c:@SA@SparseIterativeMethod",
        "text": "SparseIterativeMethod"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:s5Int32V",
        "text": "Int32"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:SP",
        "text": "UnsafePointer"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Sb",
        "text": "Bool"
      },
      {
        "kind": "text",
        "text": ">, "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Sv",
        "text": "UnsafeMutableRawPointer"
      },
      {
        "kind": "text",
        "text": ", ("
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Sb",
        "text": "Bool"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "c:@E@CBLAS_TRANSPOSE",
        "text": "CBLAS_TRANSPOSE"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "c:@SA@DenseMatrix_Double",
        "text": "DenseMatrix_Double"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "c:@SA@DenseMatrix_Double",
        "text": "DenseMatrix_Double"
      },
      {
        "kind": "text",
        "text": ") -> "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:s4Voida",
        "text": "Void"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "c:@SA@DenseMatrix_Double",
        "text": "DenseMatrix_Double"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "c:@SA@DenseMatrix_Double",
        "text": "DenseMatrix_Double"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "c:@SA@DenseMatrix_Double",
        "text": "DenseMatrix_Double"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "c:@SA@SparseOpaquePreconditioner_Double",
        "text": "SparseOpaquePreconditioner_Double"
      },
      {
        "kind": "text",
        "text": ")"
      }
    ],
    "modules": [
      {
        "name": "Accelerate"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "SparseIterate"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "11.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "11.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.1",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.13",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "11.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "4.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Function",
    "symbolKind": "func",
    "title": "SparseIterate(_:_:_:_:_:_:_:_:_:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "SparseIterate"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "method"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseIterativeMethod",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@SparseIterativeMethod",
              "text": "SparseIterativeMethod"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "iteration"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:s5Int32V",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s5Int32V",
              "text": "Int32"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "converged"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:SP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SP",
              "text": "UnsafePointer"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Sb",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": ">, "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "state"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Sv",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sv",
              "text": "UnsafeMutableRawPointer"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "ApplyOperator"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "keyword",
              "text": "@escaping"
            },
            {
              "kind": "text",
              "text": " ("
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Sb",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/CBLAS_TRANSPOSE",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@E@CBLAS_TRANSPOSE",
              "text": "CBLAS_TRANSPOSE"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@DenseMatrix_Double",
              "text": "DenseMatrix_Double"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@DenseMatrix_Double",
              "text": "DenseMatrix_Double"
            },
            {
              "kind": "text",
              "text": ") -> "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:s4Voida",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s4Voida",
              "text": "Void"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "B"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@DenseMatrix_Double",
              "text": "DenseMatrix_Double"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "R"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@DenseMatrix_Double",
              "text": "DenseMatrix_Double"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "X"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@DenseMatrix_Double",
              "text": "DenseMatrix_Double"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "Preconditioner"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseOpaquePreconditioner_Double",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@SparseOpaquePreconditioner_Double",
              "text": "SparseOpaquePreconditioner_Double"
            },
            {
              "kind": "text",
              "text": ")"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The iterative method specification, such as the return value of ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseConjugateGradient()",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "inlineContent": [
                {
                  "text": "Note that this function ignores the options for convergence testing (for example, ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/maxIterations",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ", ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/atol",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ", ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/rtol",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ") because you’re responsible for convergence tests.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "method"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The current iteration number, starting from ",
                  "type": "text"
                },
                {
                  "code": "0",
                  "type": "codeVoice"
                },
                {
                  "text": ". If ",
                  "type": "text"
                },
                {
                  "code": "iteration<0",
                  "type": "codeVoice"
                },
                {
                  "text": ", the function finalizes the current iteration, and updates the value of ",
                  "type": "text"
                },
                {
                  "code": "X",
                  "type": "codeVoice"
                },
                {
                  "text": ". Note that this may force some methods to restart, and slow convergence.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "iteration"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The convergence status of each right-hand-side. Set ",
                  "type": "text"
                },
                {
                  "code": "converged[j]",
                  "type": "codeVoice"
                },
                {
                  "text": " to ",
                  "type": "text"
                },
                {
                  "code": "true",
                  "type": "codeVoice"
                },
                {
                  "text": " to indicate that the operation has converged the vector that it stores as column ",
                  "type": "text"
                },
                {
                  "code": "j",
                  "type": "codeVoice"
                },
                {
                  "text": " of ",
                  "type": "text"
                },
                {
                  "code": "X",
                  "type": "codeVoice"
                },
                {
                  "text": ", and the function must ignore it in this iteration.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "converged"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A pointer to a state space with a size that ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseGetStateSize_Double(_:_:_:_:_:)",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " defines. Don’t alter the state space between iterations, and deallocate it after the final call to ",
                  "type": "text"
                },
                {
                  "code": "SparseIterate",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "state"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The apply operator block to run. The block takes the following parameters:",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "items": [
                {
                  "definition": {
                    "content": [
                      {
                        "inlineContent": [
                          {
                            "text": "Indicates whether to perform ",
                            "type": "text"
                          },
                          {
                            "code": "y += op(A)x",
                            "type": "codeVoice"
                          },
                          {
                            "text": " (if ",
                            "type": "text"
                          },
                          {
                            "code": "true",
                            "type": "codeVoice"
                          },
                          {
                            "text": "), or ",
                            "type": "text"
                          },
                          {
                            "code": "y = op(A)x",
                            "type": "codeVoice"
                          },
                          {
                            "text": " (if ",
                            "type": "text"
                          },
                          {
                            "code": "false",
                            "type": "codeVoice"
                          },
                          {
                            "text": ").",
                            "type": "text"
                          }
                        ],
                        "type": "paragraph"
                      }
                    ]
                  },
                  "term": {
                    "inlineContent": [
                      {
                        "text": "accumulate",
                        "type": "text"
                      }
                    ]
                  }
                },
                {
                  "definition": {
                    "content": [
                      {
                        "inlineContent": [
                          {
                            "text": "Indicates whether ",
                            "type": "text"
                          },
                          {
                            "code": "op(A)",
                            "type": "codeVoice"
                          },
                          {
                            "text": " is the application of ",
                            "type": "text"
                          },
                          {
                            "inlineContent": [
                              {
                                "text": "A",
                                "type": "text"
                              }
                            ],
                            "type": "emphasis"
                          },
                          {
                            "text": "  if ",
                            "type": "text"
                          },
                          {
                            "code": "CblasNoTrans",
                            "type": "codeVoice"
                          },
                          {
                            "text": ", or ",
                            "type": "text"
                          },
                          {
                            "inlineContent": [
                              {
                                "text": "Aᵀ",
                                "type": "text"
                              }
                            ],
                            "type": "emphasis"
                          },
                          {
                            "text": " if ",
                            "type": "text"
                          },
                          {
                            "code": "CblasTrans",
                            "type": "codeVoice"
                          },
                          {
                            "text": ".",
                            "type": "text"
                          }
                        ],
                        "type": "paragraph"
                      }
                    ]
                  },
                  "term": {
                    "inlineContent": [
                      {
                        "text": "trans",
                        "type": "text"
                      }
                    ]
                  }
                },
                {
                  "definition": {
                    "content": [
                      {
                        "inlineContent": [
                          {
                            "text": "The vector to multiply.",
                            "type": "text"
                          }
                        ],
                        "type": "paragraph"
                      }
                    ]
                  },
                  "term": {
                    "inlineContent": [
                      {
                        "text": "x",
                        "type": "text"
                      }
                    ]
                  }
                },
                {
                  "definition": {
                    "content": [
                      {
                        "inlineContent": [
                          {
                            "text": "The vector for accumulating or storing the result.",
                            "type": "text"
                          }
                        ],
                        "type": "paragraph"
                      }
                    ]
                  },
                  "term": {
                    "inlineContent": [
                      {
                        "text": "y",
                        "type": "text"
                      }
                    ]
                  }
                }
              ],
              "type": "termList"
            }
          ],
          "name": "ApplyOperator"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The right-hand-sides to solve for.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "B"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The residual estimate. For the first entry, that is, when ",
                  "type": "text"
                },
                {
                  "code": "iteration = 0",
                  "type": "codeVoice"
                },
                {
                  "text": ", set this to the residuals ",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "text": "b-Ax",
                      "type": "text"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": " (equal to ",
                  "type": "text"
                },
                {
                  "code": "B",
                  "type": "codeVoice"
                },
                {
                  "text": " if ",
                  "type": "text"
                },
                {
                  "code": "X = 0",
                  "type": "codeVoice"
                },
                {
                  "text": "). On return from each call with ",
                  "type": "text"
                },
                {
                  "code": "iteration >= 0",
                  "type": "codeVoice"
                },
                {
                  "text": ", the first entries of each vector contain various estimates of norms to use in convergence testing.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "inlineContent": [
                {
                  "text": "For CG and GMRES:",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "items": [
                {
                  "content": [
                    {
                      "inlineContent": [
                        {
                          "code": "R(0,j)",
                          "type": "codeVoice"
                        },
                        {
                          "text": " holds an estimate of ",
                          "type": "text"
                        },
                        {
                          "inlineContent": [
                            {
                              "text": "‖ b-Ax ‖₂",
                              "type": "text"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "text": " for the ",
                          "type": "text"
                        },
                        {
                          "code": "j",
                          "type": "codeVoice"
                        },
                        {
                          "text": "-th right-hand-side.",
                          "type": "text"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ]
                }
              ],
              "type": "unorderedList"
            },
            {
              "inlineContent": [
                {
                  "text": "For LSMR:",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "items": [
                {
                  "content": [
                    {
                      "inlineContent": [
                        {
                          "code": "R(0,j)",
                          "type": "codeVoice"
                        },
                        {
                          "text": " holds an estimate of ",
                          "type": "text"
                        },
                        {
                          "inlineContent": [
                            {
                              "text": "‖ Aᵀ(b-Ax) ‖₂",
                              "type": "text"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "text": " for the ",
                          "type": "text"
                        },
                        {
                          "code": "j",
                          "type": "codeVoice"
                        },
                        {
                          "text": "-th right-hand-side.",
                          "type": "text"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "inlineContent": [
                        {
                          "code": "R(1,j)",
                          "type": "codeVoice"
                        },
                        {
                          "text": " holds an estimate of ",
                          "type": "text"
                        },
                        {
                          "inlineContent": [
                            {
                              "text": "‖ b-Ax ‖₂",
                              "type": "text"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "text": " for the ",
                          "type": "text"
                        },
                        {
                          "code": "j",
                          "type": "codeVoice"
                        },
                        {
                          "text": "-th right-hand-side.",
                          "type": "text"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "inlineContent": [
                        {
                          "code": "R(2,j)",
                          "type": "codeVoice"
                        },
                        {
                          "text": " holds an estimate of ",
                          "type": "text"
                        },
                        {
                          "inlineContent": [
                            {
                              "text": "‖ A ‖ꜰ",
                              "type": "text"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "text": ", the Frobenius norm of ",
                          "type": "text"
                        },
                        {
                          "inlineContent": [
                            {
                              "text": "A",
                              "type": "text"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "text": ", which the operation estimates using calculations from the ",
                          "type": "text"
                        },
                        {
                          "code": "j",
                          "type": "codeVoice"
                        },
                        {
                          "text": "-th right-hand-side.",
                          "type": "text"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "inlineContent": [
                        {
                          "code": "R(3,j)",
                          "type": "codeVoice"
                        },
                        {
                          "text": " holds an estimate of ",
                          "type": "text"
                        },
                        {
                          "inlineContent": [
                            {
                              "text": "cond(A)",
                              "type": "text"
                            }
                          ],
                          "type": "emphasis"
                        },
                        {
                          "text": ", the condition number of A, which the operation estimates using calculations from the ",
                          "type": "text"
                        },
                        {
                          "code": "j",
                          "type": "codeVoice"
                        },
                        {
                          "text": "-th right-hand-side.",
                          "type": "text"
                        }
                      ],
                      "type": "paragraph"
                    }
                  ]
                }
              ],
              "type": "unorderedList"
            },
            {
              "inlineContent": [
                {
                  "text": "The function may use other entries of ",
                  "type": "text"
                },
                {
                  "code": "R",
                  "type": "codeVoice"
                },
                {
                  "text": " as a workspace. On return from a call with ",
                  "type": "text"
                },
                {
                  "code": "iteration < 0",
                  "type": "codeVoice"
                },
                {
                  "text": ", the function returns the exact residual vector ",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "text": "b-Ax",
                      "type": "text"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "R"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The current estimate of the solution vectors ",
                  "type": "text"
                },
                {
                  "code": "X",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "inlineContent": [
                {
                  "text": "On entry with ",
                  "type": "text"
                },
                {
                  "code": "iteration = 0",
                  "type": "codeVoice"
                },
                {
                  "text": ", this is an initial estimate for the solution. If no good estimate is available, use ",
                  "type": "text"
                },
                {
                  "code": "X = 0.0",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "inlineContent": [
                {
                  "text": "Depending on the method, the function may not update ",
                  "type": "text"
                },
                {
                  "code": "X",
                  "type": "codeVoice"
                },
                {
                  "text": " at each iteration. Make a call with ",
                  "type": "text"
                },
                {
                  "code": "iteration < 0",
                  "type": "codeVoice"
                },
                {
                  "text": " after the function achieves convergence to update ",
                  "type": "text"
                },
                {
                  "code": "X",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "X"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The preconditioner to apply.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Preconditioner"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "Discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this function to solve a system of linear equations using a factored coefficient matrix. This function provides complete control over each iteration, and you’re responsible for convergence tests and the number of iterations.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following figure shows two systems of equations where the coefficient matrix is sparse:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "media-3703929",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following code solves this system by applying a diagonal scaling preconditioner and using the least squares minimum residual method:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "/// Create the coefficient matrix _A_",
            "let rowIndices: [Int32] =    [ 0,  1, 1,  2]",
            "let columnIndices: [Int32] = [ 2,  0, 2,  1]",
            "let aValues: [Double] =      [10, 20, 5, 50]",
            "",
            "let rowCount = Int32(3)",
            "let columnCount = Int32(3)",
            "",
            "let A = SparseConvertFromCoordinate(rowCount, columnCount,",
            "                                    aValues.count, 1,",
            "                                    SparseAttributes_t(),",
            "                                    rowIndices, columnIndices,",
            "                                    aValues)",
            "let preconditioner = SparseCreatePreconditioner(SparsePreconditionerDiagScaling,",
            "                                                A)",
            "",
            "defer {",
            "    SparseCleanup(A)",
            "    SparseCleanup(preconditioner)",
            "}",
            "",
            "/// Define the size of the right-hand-side matrix, residuals matrix, and solution vectors.",
            "let rhsCount = Int32(2)",
            "let count = Int(rowCount * rhsCount)",
            "",
            "/// Create the constants matrix, _B_ data.",
            "let bData = UnsafeMutablePointer<Double>.allocate(capacity: count)",
            "bData.initialize(from: [30, 35, 100,",
            "                        300, 350, 1000], count: count)",
            "",
            "/// Create the residual estimate matrix, _R_ data.",
            "let rData = UnsafeMutablePointer<Double>.allocate(capacity: count)",
            "rData.initialize(from: bData, count: count)",
            "",
            "/// Create the solution vectors, _X_ data.",
            "let xData = UnsafeMutablePointer<Double>.allocate(capacity: count)",
            "xData.initialize(repeating: 0, count: count)",
            "",
            "/// Create the state space.",
            "let method = SparseLSMR()",
            "let stateSize = SparseGetStateSize_Double(method, true,",
            "                                          rowCount, columnCount,",
            "                                          rhsCount)",
            "let state = UnsafeMutablePointer<Double>.allocate(capacity: stateSize)",
            "state.initialize(repeating: 0, count: stateSize)",
            "",
            "defer {",
            "    bData.deallocate()",
            "    rData.deallocate()",
            "    xData.deallocate()",
            "    state.deallocate()",
            "}",
            "",
            "/// Create the apply operator block.",
            "func applyOperator(accumulate: Bool,",
            "                   trans: CBLAS_TRANSPOSE,",
            "                   X: DenseMatrix_Double,",
            "                   Y: DenseMatrix_Double) {",
            "    switch(accumulate, trans == CblasTrans) {",
            "        case (false, false):",
            "            SparseMultiply(A, X, Y)",
            "        case (false, true):",
            "            SparseMultiply(SparseGetTranspose(A), X, Y)",
            "        case (true, false):",
            "            SparseMultiplyAdd(A, X, Y)",
            "        case (true, true):",
            "            SparseMultiplyAdd(SparseGetTranspose(A), X, Y)",
            "    }",
            "}",
            "",
            "var iteration = Int32(0)",
            "var converged = [Bool](repeating: false,",
            "                       count: Int(rhsCount))",
            "",
            "while iteration >= 0 {",
            "    /// If all right-hand-sides have converged, set `converge` ",
            "    /// to a negative value to indicate the current iteration is final.",
            "    if converged.allSatisfy({ $0 }) {",
            "        iteration = -.max",
            "    }",
            "    ",
            "    print(\"Iteration:\", iteration)",
            "    let B = DenseMatrix_Double(rowCount: rowCount,",
            "                               columnCount: rhsCount,",
            "                               columnStride: rowCount,",
            "                               attributes: SparseAttributes_t(),",
            "                               data: bData)",
            "    ",
            "    let R = DenseMatrix_Double(rowCount: rowCount,",
            "                               columnCount: rhsCount,",
            "                               columnStride: rowCount,",
            "                               attributes: SparseAttributes_t(),",
            "                               data: rData)",
            "    ",
            "    let X = DenseMatrix_Double(rowCount: rowCount,",
            "                               columnCount: rhsCount,",
            "                               columnStride: rowCount,",
            "                               attributes: SparseAttributes_t(),",
            "                               data: xData)",
            "    ",
            "    SparseIterate(method,",
            "                  iteration, converged,",
            "                  state,",
            "                  applyOperator,",
            "                  B, R, X,",
            "                  preconditioner)",
            "    ",
            "    /// Elements 1 and 4 of the residual estimate contain the least squares residual, _‖ b-Ax ‖₂_,",
            "    /// for columns 0 and 1, respectively. Define a suitable tolerance for convergence testing.",
            "    converged = [",
            "        rData[1] < 1e-4,",
            "        rData[4] < 1e-4",
            "    ]",
            "    ",
            "    iteration += 1",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On return, x",
              "type": "text"
            },
            {
              "code": "Data",
              "type": "codeVoice"
            },
            {
              "text": " points to the values ",
              "type": "text"
            },
            {
              "code": "[1.0, 2.0, 3.0, 10.0, 20.0, 30.0]",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.accelerate/documentation/Accelerate": {
      "abstract": [
        {
          "text": "Make large-scale mathematical computations and image calculations, optimized for high performance and low energy consumption.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate",
      "kind": "symbol",
      "role": "collection",
      "title": "Accelerate",
      "type": "topic",
      "url": "/documentation/accelerate"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/CBLAS_TRANSPOSE": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CBLAS_TRANSPOSE"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/CBLAS_TRANSPOSE",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CBLAS_TRANSPOSE"
        }
      ],
      "role": "symbol",
      "title": "CBLAS_TRANSPOSE",
      "type": "topic",
      "url": "/documentation/accelerate/cblas_transpose"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double": {
      "abstract": [
        {
          "text": "A structure that contains a dense matrix of double-precision, floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DenseMatrix_Double"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DenseMatrix_Double"
        }
      ],
      "role": "symbol",
      "title": "DenseMatrix_Double",
      "type": "topic",
      "url": "/documentation/accelerate/densematrix_double"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseConjugateGradient()": {
      "abstract": [
        {
          "text": "Returns a conjugate gradient (CG) method.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SparseConjugateGradient"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@SparseIterativeMethod",
          "text": "SparseIterativeMethod"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseConjugateGradient()",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SparseConjugateGradient"
        }
      ],
      "role": "symbol",
      "title": "SparseConjugateGradient()",
      "type": "topic",
      "url": "/documentation/accelerate/sparseconjugategradient()"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseGetStateSize_Double(_:_:_:_:_:)": {
      "abstract": [
        {
          "text": "Returns the size in bytes necessary for a call to the double-precision sparse iterate method.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SparseGetStateSize_Double"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@SparseIterativeMethod",
          "text": "SparseIterativeMethod"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseGetStateSize_Double(_:_:_:_:_:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SparseGetStateSize_Double"
        }
      ],
      "role": "symbol",
      "title": "SparseGetStateSize_Double(_:_:_:_:_:)",
      "type": "topic",
      "url": "/documentation/accelerate/sparsegetstatesize_double(_:_:_:_:_:)"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseIterate(_:_:_:_:_:_:_:_:_:)-1anay": {
      "abstract": [
        {
          "text": "Performs a single iteration of the specified iterative method for single-precision matrices, applying a preconditioner.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SparseIterate"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@SparseIterativeMethod",
          "text": "SparseIterativeMethod"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sv",
          "text": "UnsafeMutableRawPointer"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@CBLAS_TRANSPOSE",
          "text": "CBLAS_TRANSPOSE"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Float",
          "text": "DenseMatrix_Float"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Float",
          "text": "DenseMatrix_Float"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Float",
          "text": "DenseMatrix_Float"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Float",
          "text": "DenseMatrix_Float"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Float",
          "text": "DenseMatrix_Float"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@SparseOpaquePreconditioner_Float",
          "text": "SparseOpaquePreconditioner_Float"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseIterate(_:_:_:_:_:_:_:_:_:)-1anay",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SparseIterate"
        }
      ],
      "role": "symbol",
      "title": "SparseIterate(_:_:_:_:_:_:_:_:_:)",
      "type": "topic",
      "url": "/documentation/accelerate/sparseiterate(_:_:_:_:_:_:_:_:_:)-1anay"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseIterate(_:_:_:_:_:_:_:_:_:)-99ji7": {
      "abstract": [
        {
          "text": "Performs a single iteration of the specified iterative method for double-precision matrices, applying a preconditioner.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SparseIterate"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@SparseIterativeMethod",
          "text": "SparseIterativeMethod"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sv",
          "text": "UnsafeMutableRawPointer"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@CBLAS_TRANSPOSE",
          "text": "CBLAS_TRANSPOSE"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Double",
          "text": "DenseMatrix_Double"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Double",
          "text": "DenseMatrix_Double"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Double",
          "text": "DenseMatrix_Double"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Double",
          "text": "DenseMatrix_Double"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@DenseMatrix_Double",
          "text": "DenseMatrix_Double"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@SparseOpaquePreconditioner_Double",
          "text": "SparseOpaquePreconditioner_Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseIterate(_:_:_:_:_:_:_:_:_:)-99ji7",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SparseIterate"
        }
      ],
      "role": "symbol",
      "title": "SparseIterate(_:_:_:_:_:_:_:_:_:)",
      "type": "topic",
      "url": "/documentation/accelerate/sparseiterate(_:_:_:_:_:_:_:_:_:)-99ji7"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseIterativeMethod": {
      "abstract": [
        {
          "text": "The base type for all iterative methods.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SparseIterativeMethod"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseIterativeMethod",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SparseIterativeMethod"
        }
      ],
      "role": "symbol",
      "title": "SparseIterativeMethod",
      "type": "topic",
      "url": "/documentation/accelerate/sparseiterativemethod"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/atol": {
      "abstract": [
        {
          "text": "The absolute tolerance (default test) or ",
          "type": "text"
        },
        {
          "inlineContent": [
            {
              "text": "A",
              "type": "text"
            }
          ],
          "type": "emphasis"
        },
        {
          "text": " tolerance (Fong-Saunders test).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "atol"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/atol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "atol"
        }
      ],
      "role": "symbol",
      "title": "atol",
      "type": "topic",
      "url": "/documentation/accelerate/sparselsmroptions/atol"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/maxIterations": {
      "abstract": [
        {
          "text": "The maximum number of iterations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "maxIterations"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/maxIterations",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "maxIterations"
        }
      ],
      "role": "symbol",
      "title": "maxIterations",
      "type": "topic",
      "url": "/documentation/accelerate/sparselsmroptions/maxiterations"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/rtol": {
      "abstract": [
        {
          "text": "The relative convergence tolerance (default test only).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "rtol"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/rtol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "rtol"
        }
      ],
      "role": "symbol",
      "title": "rtol",
      "type": "topic",
      "url": "/documentation/accelerate/sparselsmroptions/rtol"
    },
    "doc://com.apple.accelerate/documentation/Accelerate/SparseOpaquePreconditioner_Double": {
      "abstract": [
        {
          "text": "A structure that represents a double-precision preconditioner.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SparseOpaquePreconditioner_Double"
        }
      ],
      "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseOpaquePreconditioner_Double",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SparseOpaquePreconditioner_Double"
        }
      ],
      "role": "symbol",
      "title": "SparseOpaquePreconditioner_Double",
      "type": "topic",
      "url": "/documentation/accelerate/sparseopaquepreconditioner_double"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:SP": {
      "abstract": [
        {
          "text": "A pointer for accessing data of a specific type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Pointee"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Pointee"
        },
        {
          "kind": "text",
          "text": " : ~Copyable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SP",
      "kind": "symbol",
      "role": "symbol",
      "title": "UnsafePointer",
      "type": "topic",
      "url": "/documentation/Swift/UnsafePointer"
    },
    "doc://com.externally.resolved.symbol/s:Sb": {
      "abstract": [
        {
          "text": "A value type whose instances are either `true` or `false`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Sb",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/Swift/Bool"
    },
    "doc://com.externally.resolved.symbol/s:Sv": {
      "abstract": [
        {
          "text": "A raw pointer for accessing and manipulating untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Sv",
      "kind": "symbol",
      "role": "symbol",
      "title": "UnsafeMutableRawPointer",
      "type": "topic",
      "url": "/documentation/Swift/UnsafeMutableRawPointer"
    },
    "doc://com.externally.resolved.symbol/s:s4Voida": {
      "abstract": [
        {
          "text": "The return type of functions that don’t explicitly specify a return type, that is, an empty tuple `()`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": " = ()"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s4Voida",
      "kind": "symbol",
      "role": "symbol",
      "title": "Void",
      "type": "topic",
      "url": "/documentation/Swift/Void"
    },
    "doc://com.externally.resolved.symbol/s:s5Int32V": {
      "abstract": [
        {
          "text": "A 32-bit signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int32"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s5Int32V",
      "kind": "symbol",
      "role": "symbol",
      "title": "Int32",
      "type": "topic",
      "url": "/documentation/Swift/Int32"
    },
    "media-3703929": {
      "alt": "A mathematical equation that has two stacked sets of three simultaneous equations on the left. Each equation has three unknowns. The same sets of simultaneous equations appear on the right as a single matrix equation, A x equals B. The single matrix equation consists of a three-by-three matrix multiplied by a three-by-two matrix that equals a three-by-two matrix.",
      "identifier": "media-3703929",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/f418105a3665a60546bc23d6a8dd3f50/media-3703929@2x.png"
        }
      ]
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Sparse-Iterate-Functions-with-Preconditioner",
      "generated": true,
      "identifiers": [
        "doc://com.apple.accelerate/documentation/Accelerate/SparseIterate(_:_:_:_:_:_:_:_:_:)-1anay"
      ],
      "title": "Sparse Iterate Functions with Preconditioner"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "replace",
          "path": "/metadata/platforms",
          "value": [
            {
              "beta": false,
              "deprecated": false,
              "introducedAt": "11.0",
              "name": "iOS",
              "unavailable": false
            },
            {
              "beta": false,
              "deprecated": false,
              "introducedAt": "11.0",
              "name": "iPadOS",
              "unavailable": false
            },
            {
              "beta": false,
              "deprecated": false,
              "introducedAt": "13.1",
              "name": "Mac Catalyst",
              "unavailable": false
            },
            {
              "beta": false,
              "deprecated": false,
              "introducedAt": "10.13",
              "name": "macOS",
              "unavailable": false
            },
            {
              "beta": false,
              "deprecated": false,
              "introducedAt": "11.0",
              "name": "tvOS",
              "unavailable": false
            },
            {
              "beta": false,
              "deprecated": false,
              "introducedAt": "1.0",
              "name": "visionOS",
              "unavailable": false
            },
            {
              "beta": false,
              "deprecated": false,
              "introducedAt": "4.0",
              "name": "watchOS",
              "unavailable": false
            }
          ]
        },
        {
          "op": "replace",
          "path": "/metadata/roleHeading",
          "value": "Function"
        },
        {
          "op": "replace",
          "path": "/metadata/title",
          "value": "SparseIterate"
        },
        {
          "op": "replace",
          "path": "/metadata/symbolKind",
          "value": "func"
        },
        {
          "op": "replace",
          "path": "/metadata/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseIterate"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/hierarchy",
          "value": {
            "paths": [
              [
                "doc://com.apple.documentation/documentation/technologies",
                "doc://com.apple.accelerate/documentation/Accelerate"
              ]
            ]
          }
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "add",
          "path": "/relationshipsSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Sparse-Iterate-Functions-with-Preconditioner",
              "generated": true,
              "identifiers": [
                "doc://com.apple.accelerate/documentation/Accelerate/SparseIterate(_:_:_:_:_:_:_:_:_:)-1anay"
              ],
              "title": "Sparse Iterate Functions with Preconditioner"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/primaryContentSections/0",
          "value": {
            "declarations": [
              {
                "languages": [
                  "occ"
                ],
                "platforms": [
                  "iOS",
                  "iPadOS",
                  "Mac Catalyst",
                  "macOS",
                  "tvOS",
                  "visionOS",
                  "watchOS"
                ],
                "tokens": [
                  {
                    "kind": "keyword",
                    "text": "static"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:v",
                    "text": "void"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "identifier",
                    "text": "SparseIterate"
                  },
                  {
                    "kind": "text",
                    "text": "("
                  },
                  {
                    "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseIterativeMethod",
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:@SA@SparseIterativeMethod",
                    "text": "SparseIterativeMethod"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "method"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:I",
                    "text": "int"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "iteration"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "kind": "keyword",
                    "text": "const"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:b",
                    "text": "_Bool"
                  },
                  {
                    "kind": "text",
                    "text": " * "
                  },
                  {
                    "kind": "internalParam",
                    "text": "converged"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:v",
                    "text": "void"
                  },
                  {
                    "kind": "text",
                    "text": " * "
                  },
                  {
                    "kind": "internalParam",
                    "text": "state"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:v",
                    "text": "void"
                  },
                  {
                    "kind": "text",
                    "text": " (^"
                  },
                  {
                    "kind": "internalParam",
                    "text": "ApplyOperator"
                  },
                  {
                    "kind": "text",
                    "text": ")("
                  },
                  {
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:b",
                    "text": "bool"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "accumulate"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "kind": "keyword",
                    "text": "enum"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "identifier": "doc://com.apple.accelerate/documentation/Accelerate/CBLAS_TRANSPOSE",
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:@E@CBLAS_TRANSPOSE",
                    "text": "CBLAS_TRANSPOSE"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "trans"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:@SA@DenseMatrix_Double",
                    "text": "DenseMatrix_Double"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "X"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:@SA@DenseMatrix_Double",
                    "text": "DenseMatrix_Double"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "Y"
                  },
                  {
                    "kind": "text",
                    "text": "), "
                  },
                  {
                    "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:@SA@DenseMatrix_Double",
                    "text": "DenseMatrix_Double"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "B"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:@SA@DenseMatrix_Double",
                    "text": "DenseMatrix_Double"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "R"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "identifier": "doc://com.apple.accelerate/documentation/Accelerate/DenseMatrix_Double",
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:@SA@DenseMatrix_Double",
                    "text": "DenseMatrix_Double"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "X"
                  },
                  {
                    "kind": "text",
                    "text": ", "
                  },
                  {
                    "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseOpaquePreconditioner_Double",
                    "kind": "typeIdentifier",
                    "preciseIdentifier": "c:@SA@SparseOpaquePreconditioner_Double",
                    "text": "SparseOpaquePreconditioner_Double"
                  },
                  {
                    "kind": "text",
                    "text": " "
                  },
                  {
                    "kind": "internalParam",
                    "text": "Preconditioner"
                  },
                  {
                    "kind": "text",
                    "text": ");"
                  }
                ]
              }
            ],
            "kind": "declarations"
          }
        },
        {
          "op": "replace",
          "path": "/primaryContentSections/1",
          "value": {
            "kind": "parameters",
            "parameters": [
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The iterative method specification, such as the return value of ",
                        "type": "text"
                      },
                      {
                        "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseConjugateGradient()",
                        "isActive": true,
                        "type": "reference"
                      },
                      {
                        "text": ".",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  },
                  {
                    "inlineContent": [
                      {
                        "text": "Note that this function ignores the options for convergence testing (for example, ",
                        "type": "text"
                      },
                      {
                        "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/maxIterations",
                        "isActive": true,
                        "type": "reference"
                      },
                      {
                        "text": ", ",
                        "type": "text"
                      },
                      {
                        "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/atol",
                        "isActive": true,
                        "type": "reference"
                      },
                      {
                        "text": ", ",
                        "type": "text"
                      },
                      {
                        "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseLSMROptions/rtol",
                        "isActive": true,
                        "type": "reference"
                      },
                      {
                        "text": ") because you’re responsible for convergence tests.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "name": "method"
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The current iteration number, starting from ",
                        "type": "text"
                      },
                      {
                        "code": "0",
                        "type": "codeVoice"
                      },
                      {
                        "text": ". If ",
                        "type": "text"
                      },
                      {
                        "code": "iteration<0",
                        "type": "codeVoice"
                      },
                      {
                        "text": ", the function finalizes the current iteration, and updates the value of ",
                        "type": "text"
                      },
                      {
                        "code": "X",
                        "type": "codeVoice"
                      },
                      {
                        "text": ". Note that this may force some methods to restart, and slow convergence.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "name": "iteration"
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The convergence status of each right-hand-side. Set ",
                        "type": "text"
                      },
                      {
                        "code": "converged[j]",
                        "type": "codeVoice"
                      },
                      {
                        "text": " to ",
                        "type": "text"
                      },
                      {
                        "code": "true",
                        "type": "codeVoice"
                      },
                      {
                        "text": " to indicate that the operation has converged the vector that it stores as column ",
                        "type": "text"
                      },
                      {
                        "code": "j",
                        "type": "codeVoice"
                      },
                      {
                        "text": " of ",
                        "type": "text"
                      },
                      {
                        "code": "X",
                        "type": "codeVoice"
                      },
                      {
                        "text": ", and the function must ignore it in this iteration.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "name": "converged"
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "A pointer to a state space with a size that ",
                        "type": "text"
                      },
                      {
                        "identifier": "doc://com.apple.accelerate/documentation/Accelerate/SparseGetStateSize_Double(_:_:_:_:_:)",
                        "isActive": true,
                        "type": "reference"
                      },
                      {
                        "text": " defines. Don’t alter the state space between iterations, and deallocate it after the final call to ",
                        "type": "text"
                      },
                      {
                        "code": "SparseIterate",
                        "type": "codeVoice"
                      },
                      {
                        "text": ".",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "name": "state"
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The apply operator block to run. The block takes the following parameters:",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  },
                  {
                    "items": [
                      {
                        "definition": {
                          "content": [
                            {
                              "inlineContent": [
                                {
                                  "text": "Indicates whether to perform ",
                                  "type": "text"
                                },
                                {
                                  "code": "y += op(A)x",
                                  "type": "codeVoice"
                                },
                                {
                                  "text": " (if ",
                                  "type": "text"
                                },
                                {
                                  "code": "true",
                                  "type": "codeVoice"
                                },
                                {
                                  "text": "), or ",
                                  "type": "text"
                                },
                                {
                                  "code": "y = op(A)x",
                                  "type": "codeVoice"
                                },
                                {
                                  "text": " (if ",
                                  "type": "text"
                                },
                                {
                                  "code": "false",
                                  "type": "codeVoice"
                                },
                                {
                                  "text": ").",
                                  "type": "text"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ]
                        },
                        "term": {
                          "inlineContent": [
                            {
                              "text": "accumulate",
                              "type": "text"
                            }
                          ]
                        }
                      },
                      {
                        "definition": {
                          "content": [
                            {
                              "inlineContent": [
                                {
                                  "text": "Indicates whether ",
                                  "type": "text"
                                },
                                {
                                  "code": "op(A)",
                                  "type": "codeVoice"
                                },
                                {
                                  "text": " is the application of ",
                                  "type": "text"
                                },
                                {
                                  "inlineContent": [
                                    {
                                      "text": "A",
                                      "type": "text"
                                    }
                                  ],
                                  "type": "emphasis"
                                },
                                {
                                  "text": "  if ",
                                  "type": "text"
                                },
                                {
                                  "code": "CblasNoTrans",
                                  "type": "codeVoice"
                                },
                                {
                                  "text": ", or ",
                                  "type": "text"
                                },
                                {
                                  "inlineContent": [
                                    {
                                      "text": "Aᵀ",
                                      "type": "text"
                                    }
                                  ],
                                  "type": "emphasis"
                                },
                                {
                                  "text": " if ",
                                  "type": "text"
                                },
                                {
                                  "code": "CblasTrans",
                                  "type": "codeVoice"
                                },
                                {
                                  "text": ".",
                                  "type": "text"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ]
                        },
                        "term": {
                          "inlineContent": [
                            {
                              "text": "trans",
                              "type": "text"
                            }
                          ]
                        }
                      },
                      {
                        "definition": {
                          "content": [
                            {
                              "inlineContent": [
                                {
                                  "text": "The vector to multiply.",
                                  "type": "text"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ]
                        },
                        "term": {
                          "inlineContent": [
                            {
                              "text": "x",
                              "type": "text"
                            }
                          ]
                        }
                      },
                      {
                        "definition": {
                          "content": [
                            {
                              "inlineContent": [
                                {
                                  "text": "The vector for accumulating or storing the result.",
                                  "type": "text"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ]
                        },
                        "term": {
                          "inlineContent": [
                            {
                              "text": "y",
                              "type": "text"
                            }
                          ]
                        }
                      }
                    ],
                    "type": "termList"
                  }
                ],
                "name": "ApplyOperator"
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The right-hand-sides to solve for.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "name": "B"
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The residual estimate. For the first entry, that is, when ",
                        "type": "text"
                      },
                      {
                        "code": "iteration = 0",
                        "type": "codeVoice"
                      },
                      {
                        "text": ", set this to the residuals ",
                        "type": "text"
                      },
                      {
                        "inlineContent": [
                          {
                            "text": "b-Ax",
                            "type": "text"
                          }
                        ],
                        "type": "emphasis"
                      },
                      {
                        "text": " (equal to ",
                        "type": "text"
                      },
                      {
                        "code": "B",
                        "type": "codeVoice"
                      },
                      {
                        "text": " if ",
                        "type": "text"
                      },
                      {
                        "code": "X = 0",
                        "type": "codeVoice"
                      },
                      {
                        "text": "). On return from each call with ",
                        "type": "text"
                      },
                      {
                        "code": "iteration >= 0",
                        "type": "codeVoice"
                      },
                      {
                        "text": ", the first entries of each vector contain various estimates of norms to use in convergence testing.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  },
                  {
                    "inlineContent": [
                      {
                        "text": "For CG and GMRES:",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  },
                  {
                    "items": [
                      {
                        "content": [
                          {
                            "inlineContent": [
                              {
                                "code": "R(0,j)",
                                "type": "codeVoice"
                              },
                              {
                                "text": " holds an estimate of ",
                                "type": "text"
                              },
                              {
                                "inlineContent": [
                                  {
                                    "text": "‖ b-Ax ‖₂",
                                    "type": "text"
                                  }
                                ],
                                "type": "emphasis"
                              },
                              {
                                "text": " for the ",
                                "type": "text"
                              },
                              {
                                "code": "j",
                                "type": "codeVoice"
                              },
                              {
                                "text": "-th right-hand-side.",
                                "type": "text"
                              }
                            ],
                            "type": "paragraph"
                          }
                        ]
                      }
                    ],
                    "type": "unorderedList"
                  },
                  {
                    "inlineContent": [
                      {
                        "text": "For LSMR:",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  },
                  {
                    "items": [
                      {
                        "content": [
                          {
                            "inlineContent": [
                              {
                                "code": "R(0,j)",
                                "type": "codeVoice"
                              },
                              {
                                "text": " holds an estimate of ",
                                "type": "text"
                              },
                              {
                                "inlineContent": [
                                  {
                                    "text": "‖ Aᵀ(b-Ax) ‖₂",
                                    "type": "text"
                                  }
                                ],
                                "type": "emphasis"
                              },
                              {
                                "text": " for the ",
                                "type": "text"
                              },
                              {
                                "code": "j",
                                "type": "codeVoice"
                              },
                              {
                                "text": "-th right-hand-side.",
                                "type": "text"
                              }
                            ],
                            "type": "paragraph"
                          }
                        ]
                      },
                      {
                        "content": [
                          {
                            "inlineContent": [
                              {
                                "code": "R(1,j)",
                                "type": "codeVoice"
                              },
                              {
                                "text": " holds an estimate of ",
                                "type": "text"
                              },
                              {
                                "inlineContent": [
                                  {
                                    "text": "‖ b-Ax ‖₂",
                                    "type": "text"
                                  }
                                ],
                                "type": "emphasis"
                              },
                              {
                                "text": " for the ",
                                "type": "text"
                              },
                              {
                                "code": "j",
                                "type": "codeVoice"
                              },
                              {
                                "text": "-th right-hand-side.",
                                "type": "text"
                              }
                            ],
                            "type": "paragraph"
                          }
                        ]
                      },
                      {
                        "content": [
                          {
                            "inlineContent": [
                              {
                                "code": "R(2,j)",
                                "type": "codeVoice"
                              },
                              {
                                "text": " holds an estimate of ",
                                "type": "text"
                              },
                              {
                                "inlineContent": [
                                  {
                                    "text": "‖ A ‖ꜰ",
                                    "type": "text"
                                  }
                                ],
                                "type": "emphasis"
                              },
                              {
                                "text": ", the Frobenius norm of ",
                                "type": "text"
                              },
                              {
                                "inlineContent": [
                                  {
                                    "text": "A",
                                    "type": "text"
                                  }
                                ],
                                "type": "emphasis"
                              },
                              {
                                "text": ", which the operation estimates using calculations from the ",
                                "type": "text"
                              },
                              {
                                "code": "j",
                                "type": "codeVoice"
                              },
                              {
                                "text": "-th right-hand-side.",
                                "type": "text"
                              }
                            ],
                            "type": "paragraph"
                          }
                        ]
                      },
                      {
                        "content": [
                          {
                            "inlineContent": [
                              {
                                "code": "R(3,j)",
                                "type": "codeVoice"
                              },
                              {
                                "text": " holds an estimate of ",
                                "type": "text"
                              },
                              {
                                "inlineContent": [
                                  {
                                    "text": "cond(A)",
                                    "type": "text"
                                  }
                                ],
                                "type": "emphasis"
                              },
                              {
                                "text": ", the condition number of A, which the operation estimates using calculations from the ",
                                "type": "text"
                              },
                              {
                                "code": "j",
                                "type": "codeVoice"
                              },
                              {
                                "text": "-th right-hand-side.",
                                "type": "text"
                              }
                            ],
                            "type": "paragraph"
                          }
                        ]
                      }
                    ],
                    "type": "unorderedList"
                  },
                  {
                    "inlineContent": [
                      {
                        "text": "The function may use other entries of ",
                        "type": "text"
                      },
                      {
                        "code": "R",
                        "type": "codeVoice"
                      },
                      {
                        "text": " as a workspace. On return from a call with ",
                        "type": "text"
                      },
                      {
                        "code": "iteration < 0",
                        "type": "codeVoice"
                      },
                      {
                        "text": ", the function returns the exact residual vector ",
                        "type": "text"
                      },
                      {
                        "inlineContent": [
                          {
                            "text": "b-Ax",
                            "type": "text"
                          }
                        ],
                        "type": "emphasis"
                      },
                      {
                        "text": ".",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "name": "R"
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The current estimate of the solution vectors ",
                        "type": "text"
                      },
                      {
                        "code": "X",
                        "type": "codeVoice"
                      },
                      {
                        "text": ".",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  },
                  {
                    "inlineContent": [
                      {
                        "text": "On entry with ",
                        "type": "text"
                      },
                      {
                        "code": "iteration = 0",
                        "type": "codeVoice"
                      },
                      {
                        "text": ", this is an initial estimate for the solution. If no good estimate is available, use ",
                        "type": "text"
                      },
                      {
                        "code": "X = 0.0",
                        "type": "codeVoice"
                      },
                      {
                        "text": ".",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  },
                  {
                    "inlineContent": [
                      {
                        "text": "Depending on the method, the function may not update ",
                        "type": "text"
                      },
                      {
                        "code": "X",
                        "type": "codeVoice"
                      },
                      {
                        "text": " at each iteration. Make a call with ",
                        "type": "text"
                      },
                      {
                        "code": "iteration < 0",
                        "type": "codeVoice"
                      },
                      {
                        "text": " after the function achieves convergence to update ",
                        "type": "text"
                      },
                      {
                        "code": "X",
                        "type": "codeVoice"
                      },
                      {
                        "text": ".",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "name": "X"
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The preconditioner to apply.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "name": "Preconditioner"
              }
            ]
          }
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseLSMROptions~1maxIterations/title",
          "value": "maxIterations"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseLSMROptions~1maxIterations/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "maxIterations"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseLSMROptions~1atol/title",
          "value": "atol"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseLSMROptions~1atol/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "atol"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseIterativeMethod/title",
          "value": "SparseIterativeMethod"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseIterativeMethod/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseIterativeMethod"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseIterativeMethod/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseIterativeMethod"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1CBLAS_TRANSPOSE/title",
          "value": "CBLAS_TRANSPOSE"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1CBLAS_TRANSPOSE/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "CBLAS_TRANSPOSE"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1CBLAS_TRANSPOSE/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "CBLAS_TRANSPOSE"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseIterate(_:_:_:_:_:_:_:_:_:)-1anay/title",
          "value": "SparseIterate"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseIterate(_:_:_:_:_:_:_:_:_:)-1anay/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseIterate"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseOpaquePreconditioner_Double/title",
          "value": "SparseOpaquePreconditioner_Double"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseOpaquePreconditioner_Double/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseOpaquePreconditioner_Double"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseOpaquePreconditioner_Double/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseOpaquePreconditioner_Double"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseConjugateGradient()/title",
          "value": "SparseConjugateGradient"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseConjugateGradient()/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseConjugateGradient"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1DenseMatrix_Double/title",
          "value": "DenseMatrix_Double"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1DenseMatrix_Double/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "DenseMatrix_Double"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1DenseMatrix_Double/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "DenseMatrix_Double"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseGetStateSize_Double(_:_:_:_:_:)/title",
          "value": "SparseGetStateSize_Double"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseGetStateSize_Double(_:_:_:_:_:)/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseGetStateSize_Double"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseIterate(_:_:_:_:_:_:_:_:_:)-99ji7/title",
          "value": "SparseIterate"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseIterate(_:_:_:_:_:_:_:_:_:)-99ji7/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "SparseIterate"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseLSMROptions~1rtol/title",
          "value": "rtol"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.accelerate~1documentation~1Accelerate~1SparseLSMROptions~1rtol/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "rtol"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/accelerate/sparseiterate(_:_:_:_:_:_:_:_:_:)-99ji7"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/accelerate/sparseiterate(_:_:_:_:_:_:_:_:_:)-99ji7"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
