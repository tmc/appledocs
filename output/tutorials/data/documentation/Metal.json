{
  "abstract": [
    {
      "text": "Render advanced 3D graphics and compute data in parallel with graphics processors.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.metal/documentation/Metal"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "Metal",
    "modules": [
      {
        "name": "Metal"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "8.0",
        "name": "iOS"
      },
      {
        "beta": false,
        "introducedAt": "8.0",
        "name": "iPadOS"
      },
      {
        "beta": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst"
      },
      {
        "beta": false,
        "introducedAt": "10.11",
        "name": "macOS"
      },
      {
        "beta": false,
        "introducedAt": "9.0",
        "name": "tvOS"
      },
      {
        "beta": false,
        "introducedAt": "1.0",
        "name": "visionOS"
      }
    ],
    "role": "collection",
    "roleHeading": "Framework",
    "symbolKind": "module",
    "title": "Metal"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The Metal framework gives your app direct access to a device’s graphics processing unit (GPU). With Metal, apps can leverage a GPU to quickly render complex scenes and run computational tasks in parallel. For example, apps in these categories use Metal to maximize their performance:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Games that render sophisticated 2D or 3D environments",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Video processing apps, like Final Cut Pro",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Scientific research apps that analyze and process large datasets",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Fully immersive visionOS apps",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Metal works hand-in-hand with other frameworks that supplement its capability. For example, ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/MetalFX",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " upscales your renderings in less time than rendering them natively, and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/MetalKit",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " simplifies the tasks that display your Metal content onscreen. The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/metalperformanceshaders",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " framework provides a large library of optimized compute and rendering shaders that take advantage of each GPU’s unique hardware. In visionOS, create fully immersive stereoscopic content with the help of the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/CompositorServices",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " framework.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Many high-level Apple frameworks leverage the performance of Metal, including ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SceneKit",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SpriteKit",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". These high-level frameworks implement the GPU programming details for you. However, you can typically get better performance by writing your own custom Metal and shader code. See the ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " for shader implementation details.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Metal-Developer-Workflow-PageImage-card.png": {
      "alt": null,
      "identifier": "Metal-Developer-Workflow-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/713b476e42e48070365a2abf70bc49b0/Metal-Developer-Workflow-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/e226f618b21dde7899eba5de3bd4641a/Metal-Developer-Workflow-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/Apple-Silicon/porting-your-metal-code-to-apple-silicon": {
      "abstract": [
        {
          "text": "Create a version of your Metal app that runs on both Apple silicon and Intel-based Mac computers.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Apple-Silicon/porting-your-metal-code-to-apple-silicon",
      "kind": "article",
      "role": "article",
      "title": "Porting Your Metal Code to Apple Silicon",
      "type": "topic",
      "url": "/documentation/Apple-Silicon/porting-your-metal-code-to-apple-silicon"
    },
    "doc://com.apple.documentation/documentation/CompositorServices": {
      "abstract": [
        {
          "text": "Take control of the drawing environment and render your own content using Metal.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/CompositorServices",
      "kind": "symbol",
      "role": "collection",
      "title": "Compositor Services",
      "type": "topic",
      "url": "/documentation/CompositorServices"
    },
    "doc://com.apple.documentation/documentation/MetalFX": {
      "abstract": [
        {
          "text": "Boost your Metal app’s performance by upscaling lower-resolution content to save GPU time.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/MetalFX",
      "kind": "symbol",
      "role": "collection",
      "title": "MetalFX",
      "type": "topic",
      "url": "/documentation/MetalFX"
    },
    "doc://com.apple.documentation/documentation/MetalKit": {
      "abstract": [
        {
          "text": "Build Metal apps quicker and easier using a common set of utility classes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/MetalKit",
      "kind": "symbol",
      "role": "collection",
      "title": "MetalKit",
      "type": "topic",
      "url": "/documentation/MetalKit"
    },
    "doc://com.apple.documentation/documentation/QuartzCore": {
      "abstract": [
        {
          "text": "Render, compose, and animate visual elements.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/QuartzCore",
      "kind": "symbol",
      "role": "collection",
      "title": "Core Animation",
      "type": "topic",
      "url": "/documentation/QuartzCore"
    },
    "doc://com.apple.documentation/documentation/RealityKit": {
      "abstract": [
        {
          "text": "Simulate and render 3D content for use in your augmented reality apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit",
      "kind": "symbol",
      "role": "collection",
      "title": "RealityKit",
      "type": "topic",
      "url": "/documentation/RealityKit"
    },
    "doc://com.apple.documentation/documentation/SceneKit": {
      "abstract": [
        {
          "text": "Create 3D games and add 3D content to apps using high-level scene descriptions, and easily add animations, physics simulation, particle effects, and realistic physically based rendering.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SceneKit",
      "kind": "symbol",
      "role": "collection",
      "title": "SceneKit",
      "type": "topic",
      "url": "/documentation/SceneKit"
    },
    "doc://com.apple.documentation/documentation/SpriteKit": {
      "abstract": [
        {
          "text": "Add high-performance 2D content with smooth animations to your app, or create a game with a high-level set of 2D game-based tools.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SpriteKit",
      "kind": "symbol",
      "role": "collection",
      "title": "SpriteKit",
      "type": "topic",
      "url": "/documentation/SpriteKit"
    },
    "doc://com.apple.documentation/documentation/Xcode/Analyzing-the-memory-usage-of-your-Metal-app": {
      "abstract": [
        {
          "text": "Keep your app alive in the background by managing its memory footprint.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Xcode/Analyzing-the-memory-usage-of-your-Metal-app",
      "kind": "article",
      "role": "article",
      "title": "Analyzing the memory usage of your Metal app",
      "type": "topic",
      "url": "/documentation/Xcode/Analyzing-the-memory-usage-of-your-Metal-app"
    },
    "doc://com.apple.documentation/documentation/Xcode/Analyzing-the-performance-of-your-Metal-app": {
      "abstract": [
        {
          "text": "Ensure consistent, smooth rendering by profiling your app’s frame time.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Xcode/Analyzing-the-performance-of-your-Metal-app",
      "kind": "article",
      "role": "article",
      "title": "Analyzing the performance of your Metal app",
      "type": "topic",
      "url": "/documentation/Xcode/Analyzing-the-performance-of-your-Metal-app"
    },
    "doc://com.apple.documentation/documentation/Xcode/Metal-debugger": {
      "abstract": [
        {
          "text": "Debug and profile your Metal workload with a GPU trace.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Xcode/Metal-debugger",
      "kind": "article",
      "role": "article",
      "title": "Metal debugger",
      "type": "topic",
      "url": "/documentation/Xcode/Metal-debugger"
    },
    "doc://com.apple.documentation/documentation/Xcode/Metal-developer-workflows": {
      "abstract": [
        {
          "text": "Locate and fix issues related to your app’s use of the Metal API and GPU functions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Xcode/Metal-developer-workflows",
      "images": [
        {
          "identifier": "Metal-Developer-Workflow-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "article",
      "title": "Metal developer workflows",
      "type": "topic",
      "url": "/documentation/Xcode/Metal-developer-workflows"
    },
    "doc://com.apple.documentation/documentation/Xcode/Optimizing-GPU-performance": {
      "abstract": [
        {
          "text": "Find and address performance bottlenecks using the Metal debugger.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Xcode/Optimizing-GPU-performance",
      "kind": "article",
      "role": "article",
      "title": "Optimizing GPU performance",
      "type": "topic",
      "url": "/documentation/Xcode/Optimizing-GPU-performance"
    },
    "doc://com.apple.documentation/documentation/Xcode/stepping-through-code-and-inspecting-variables-to-isolate-bugs": {
      "abstract": [
        {
          "text": "Find the cause of your bugs by watching variables change as you step through your source code in the debugger.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Xcode/stepping-through-code-and-inspecting-variables-to-isolate-bugs",
      "kind": "article",
      "role": "article",
      "title": "Stepping through code and inspecting variables to isolate bugs",
      "type": "topic",
      "url": "/documentation/Xcode/stepping-through-code-and-inspecting-variables-to-isolate-bugs"
    },
    "doc://com.apple.documentation/documentation/coreimage": {
      "abstract": [
        {
          "text": "Use built-in or custom filters to process still and video images.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coreimage",
      "kind": "symbol",
      "role": "collection",
      "title": "Core Image",
      "type": "topic",
      "url": "/documentation/coreimage"
    },
    "doc://com.apple.documentation/documentation/metalperformanceshaders": {
      "abstract": [
        {
          "text": "Optimize graphics and compute performance with kernels that are fine-tuned for the unique characteristics of each Metal GPU family.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/metalperformanceshaders",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal Performance Shaders",
      "type": "topic",
      "url": "/documentation/metalperformanceshaders"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.metal/documentation/Metal": {
      "abstract": [
        {
          "text": "Render advanced 3D graphics and compute data in parallel with graphics processors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal",
      "type": "topic",
      "url": "/documentation/metal"
    },
    "doc://com.apple.metal/documentation/Metal/adapting-your-game-interface-for-smaller-screens": {
      "abstract": [
        {
          "text": "Make text legible on all devices the player chooses to run your game on.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/adapting-your-game-interface-for-smaller-screens",
      "kind": "article",
      "role": "article",
      "title": "Adapting your game interface for smaller screens",
      "type": "topic",
      "url": "/documentation/metal/adapting-your-game-interface-for-smaller-screens"
    },
    "doc://com.apple.metal/documentation/Metal/blit-passes": {
      "abstract": [
        {
          "text": "Encode a block information transfer pass to adjust and copy data to and from GPU resources, such as buffers and textures.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/blit-passes",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Blit Passes",
      "type": "topic",
      "url": "/documentation/metal/blit-passes"
    },
    "doc://com.apple.metal/documentation/Metal/buffers": {
      "abstract": [
        {
          "text": "Create and manage untyped data your app uses to exchange information with its shader functions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/buffers",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Buffers",
      "type": "topic",
      "url": "/documentation/metal/buffers"
    },
    "doc://com.apple.metal/documentation/Metal/capturing-metal-commands-programmatically": {
      "abstract": [
        {
          "text": "Invoke Metal’s frame capture from your app, then save the resulting GPU trace to a file or view it in Xcode.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/capturing-metal-commands-programmatically",
      "kind": "article",
      "role": "sampleCode",
      "title": "Capturing Metal Commands Programmatically",
      "type": "topic",
      "url": "/documentation/metal/capturing-metal-commands-programmatically"
    },
    "doc://com.apple.metal/documentation/Metal/compute-passes": {
      "abstract": [
        {
          "text": "Encode a compute pass that runs computations in parallel on a thread grid, processing and manipulating Metal resource data on multiple cores of a GPU.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/compute-passes",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Compute Passes",
      "type": "topic",
      "url": "/documentation/metal/compute-passes"
    },
    "doc://com.apple.metal/documentation/Metal/developing-metal-apps-that-run-in-simulator": {
      "abstract": [
        {
          "text": "Prototype and test your Metal apps in Simulator.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/developing-metal-apps-that-run-in-simulator",
      "kind": "article",
      "role": "article",
      "title": "Developing Metal apps that run in Simulator",
      "type": "topic",
      "url": "/documentation/metal/developing-metal-apps-that-run-in-simulator"
    },
    "doc://com.apple.metal/documentation/Metal/gpu-counters-and-counter-sample-buffers": {
      "abstract": [
        {
          "text": "Retrieve runtime data from a GPU device by sampling one or more of its counters.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/gpu-counters-and-counter-sample-buffers",
      "kind": "article",
      "role": "collectionGroup",
      "title": "GPU Counters and Counter Sample Buffers",
      "type": "topic",
      "url": "/documentation/metal/gpu-counters-and-counter-sample-buffers"
    },
    "doc://com.apple.metal/documentation/Metal/gpu-devices-and-work-submission": {
      "abstract": [
        {
          "text": "Find any available GPU, submit work to it with command buffers, suspend work, and coordinate between multiple GPUs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/gpu-devices-and-work-submission",
      "kind": "article",
      "role": "collectionGroup",
      "title": "GPU Devices and Work Submission",
      "type": "topic",
      "url": "/documentation/metal/gpu-devices-and-work-submission"
    },
    "doc://com.apple.metal/documentation/Metal/hdr-content": {
      "abstract": [
        {
          "text": "Take advantage of high dynamic range to present more vibrant colors in your apps and games.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/hdr-content",
      "kind": "article",
      "role": "collectionGroup",
      "title": "HDR Content",
      "type": "topic",
      "url": "/documentation/metal/hdr-content"
    },
    "doc://com.apple.metal/documentation/Metal/improving-your-games-graphics-performance-and-settings": {
      "abstract": [
        {
          "text": "Fix performance glitches and develop default settings for smooth experiences on Apple platforms using the powerful suite of Metal development tools.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/improving-your-games-graphics-performance-and-settings",
      "kind": "article",
      "role": "article",
      "title": "Improving your game’s graphics performance and settings",
      "type": "topic",
      "url": "/documentation/metal/improving-your-games-graphics-performance-and-settings"
    },
    "doc://com.apple.metal/documentation/Metal/indirect-command-encoding": {
      "abstract": [
        {
          "text": "Store draw commands in Metal buffers and run them at a later time on the GPU, either once or repeatedly.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/indirect-command-encoding",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Indirect Command Encoding",
      "type": "topic",
      "url": "/documentation/metal/indirect-command-encoding"
    },
    "doc://com.apple.metal/documentation/Metal/logging-shader-debug-messages": {
      "abstract": [
        {
          "text": "Print debugging messages that a shader generates using shader logging.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/logging-shader-debug-messages",
      "kind": "article",
      "role": "article",
      "title": "Logging shader debug messages",
      "type": "topic",
      "url": "/documentation/metal/logging-shader-debug-messages"
    },
    "doc://com.apple.metal/documentation/Metal/managing-your-game-window-for-metal-in-macos": {
      "abstract": [
        {
          "text": "Set up a window and view for optimally displaying your Metal content.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/managing-your-game-window-for-metal-in-macos",
      "kind": "article",
      "role": "article",
      "title": "Managing your game window for Metal in macOS",
      "type": "topic",
      "url": "/documentation/metal/managing-your-game-window-for-metal-in-macos"
    },
    "doc://com.apple.metal/documentation/Metal/memory-heaps": {
      "abstract": [
        {
          "text": "Take control of your app’s GPU memory management by creating a large memory allocation for various buffers, textures, and other resources.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/memory-heaps",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Memory Heaps",
      "type": "topic",
      "url": "/documentation/metal/memory-heaps"
    },
    "doc://com.apple.metal/documentation/Metal/metal-constants": {
      "abstract": [],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-constants",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Constants",
      "type": "topic",
      "url": "/documentation/metal/metal-constants"
    },
    "doc://com.apple.metal/documentation/Metal/metal-data-types": {
      "abstract": [],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-data-types",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Data Types",
      "type": "topic",
      "url": "/documentation/metal/metal-data-types"
    },
    "doc://com.apple.metal/documentation/Metal/metal-debugging-types": {
      "abstract": [
        {
          "text": "Create capture managers and capture scopes, and review a GPU device’s log after it runs a command buffer.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-debugging-types",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Debugging Types",
      "type": "topic",
      "url": "/documentation/metal/metal-debugging-types"
    },
    "doc://com.apple.metal/documentation/Metal/metal-enumerations": {
      "abstract": [],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-enumerations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Enumerations",
      "type": "topic",
      "url": "/documentation/metal/metal-enumerations"
    },
    "doc://com.apple.metal/documentation/Metal/metal-functions": {
      "abstract": [],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-functions",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Functions",
      "type": "topic",
      "url": "/documentation/metal/metal-functions"
    },
    "doc://com.apple.metal/documentation/Metal/metal-macros": {
      "abstract": [],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-macros",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Macros",
      "type": "topic",
      "url": "/documentation/metal/metal-macros"
    },
    "doc://com.apple.metal/documentation/Metal/metal-sample-code-library": {
      "abstract": [
        {
          "text": "Explore the complete set of Metal samples.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-sample-code-library",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Sample Code Library",
      "type": "topic",
      "url": "/documentation/metal/metal-sample-code-library"
    },
    "doc://com.apple.metal/documentation/Metal/metal-structures": {
      "abstract": [],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-structures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Structures",
      "type": "topic",
      "url": "/documentation/metal/metal-structures"
    },
    "doc://com.apple.metal/documentation/Metal/metal-variables": {
      "abstract": [],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-variables",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Variables",
      "type": "topic",
      "url": "/documentation/metal/metal-variables"
    },
    "doc://com.apple.metal/documentation/Metal/onscreen-presentation": {
      "abstract": [
        {
          "text": "Show the output from a GPU’s rendering pass to the user in your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/onscreen-presentation",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Onscreen Presentation",
      "type": "topic",
      "url": "/documentation/metal/onscreen-presentation"
    },
    "doc://com.apple.metal/documentation/Metal/performing-calculations-on-a-gpu": {
      "abstract": [
        {
          "text": "Use Metal to find GPUs and perform calculations on them.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/performing-calculations-on-a-gpu",
      "kind": "article",
      "role": "sampleCode",
      "title": "Performing Calculations on a GPU",
      "type": "topic",
      "url": "/documentation/metal/performing-calculations-on-a-gpu"
    },
    "doc://com.apple.metal/documentation/Metal/ray-tracing-with-acceleration-structures": {
      "abstract": [
        {
          "text": "Build a representation of your scene’s geometry using triangles and bounding volumes to quickly trace rays through the scene.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/ray-tracing-with-acceleration-structures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Ray Tracing with Acceleration Structures",
      "type": "topic",
      "url": "/documentation/metal/ray-tracing-with-acceleration-structures"
    },
    "doc://com.apple.metal/documentation/Metal/render-passes": {
      "abstract": [
        {
          "text": "Encode a render pass to draw graphics into an image.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/render-passes",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Render Passes",
      "type": "topic",
      "url": "/documentation/metal/render-passes"
    },
    "doc://com.apple.metal/documentation/Metal/resource-fundamentals": {
      "abstract": [
        {
          "text": "Learn the common attributes of all Metal memory resources, including buffers and textures, and how to manage the underlying memory.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/resource-fundamentals",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Resource Fundamentals",
      "type": "topic",
      "url": "/documentation/metal/resource-fundamentals"
    },
    "doc://com.apple.metal/documentation/Metal/resource-loading": {
      "abstract": [
        {
          "text": "Load assets in your games and apps quickly by running a dedicated input/output queue alongside your GPU tasks.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/resource-loading",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Resource Loading",
      "type": "topic",
      "url": "/documentation/metal/resource-loading"
    },
    "doc://com.apple.metal/documentation/Metal/resource-synchronization": {
      "abstract": [
        {
          "text": "Coordinate the contents of data buffers, textures, and other resources that CPUs and GPUs share access to.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/resource-synchronization",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Resource Synchronization",
      "type": "topic",
      "url": "/documentation/metal/resource-synchronization"
    },
    "doc://com.apple.metal/documentation/Metal/shader-libraries": {
      "abstract": [
        {
          "text": "Manage and load your app’s Metal shaders.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/shader-libraries",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Shader Libraries",
      "type": "topic",
      "url": "/documentation/metal/shader-libraries"
    },
    "doc://com.apple.metal/documentation/Metal/supporting-simulator-in-a-metal-app": {
      "abstract": [
        {
          "text": "Configure alternative render paths in your Metal app to enable running your app in Simulator.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/supporting-simulator-in-a-metal-app",
      "kind": "article",
      "role": "sampleCode",
      "title": "Supporting Simulator in a Metal app",
      "type": "topic",
      "url": "/documentation/metal/supporting-simulator-in-a-metal-app"
    },
    "doc://com.apple.metal/documentation/Metal/tailor-your-apps-for-apple-gpus-and-tile-based-deferred-rendering": {
      "abstract": [
        {
          "text": "Learn about characteristic Apple GPU features, including imageblocks, tile shaders, and raster order groups.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/tailor-your-apps-for-apple-gpus-and-tile-based-deferred-rendering",
      "kind": "article",
      "role": "article",
      "title": "Tailor Your Apps for Apple GPUs and Tile-Based Deferred Rendering",
      "type": "topic",
      "url": "/documentation/metal/tailor-your-apps-for-apple-gpus-and-tile-based-deferred-rendering"
    },
    "doc://com.apple.metal/documentation/Metal/textures": {
      "abstract": [
        {
          "text": "Create and manage typed data your app uses to exchange information with its shader functions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/textures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Textures",
      "type": "topic",
      "url": "/documentation/metal/textures"
    },
    "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives": {
      "abstract": [
        {
          "text": "Render a simple 2D triangle.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using a Render Pipeline to Render Primitives",
      "type": "topic",
      "url": "/documentation/metal/using-a-render-pipeline-to-render-primitives"
    },
    "doc://com.apple.metal/documentation/Metal/using-function-specialization-to-build-pipeline-variants": {
      "abstract": [
        {
          "text": "Create pipelines for different levels of detail from a common shader source.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-function-specialization-to-build-pipeline-variants",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using Function Specialization to Build Pipeline Variants",
      "type": "topic",
      "url": "/documentation/metal/using-function-specialization-to-build-pipeline-variants"
    },
    "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents": {
      "abstract": [
        {
          "text": "Create a MetalKit view and a render pass to draw the view’s contents.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using Metal to Draw a View’s Contents",
      "type": "topic",
      "url": "/documentation/metal/using-metal-to-draw-a-view's-contents"
    },
    "https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/MTLBestPracticesGuide/index.html#//apple_ref/doc/uid/TP40016642": {
      "identifier": "https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/MTLBestPracticesGuide/index.html#//apple_ref/doc/uid/TP40016642",
      "title": "Metal Best Practices Guide",
      "titleInlineContent": [
        {
          "text": "Metal Best Practices Guide",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/MTLBestPracticesGuide/index.html#//apple_ref/doc/uid/TP40016642"
    },
    "https://developer.apple.com/library/archive/documentation/Miscellaneous/Conceptual/MetalProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014221": {
      "identifier": "https://developer.apple.com/library/archive/documentation/Miscellaneous/Conceptual/MetalProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014221",
      "title": "Metal Programming Guide",
      "titleInlineContent": [
        {
          "text": "Metal Programming Guide",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/library/archive/documentation/Miscellaneous/Conceptual/MetalProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014221"
    },
    "https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf": {
      "identifier": "https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf",
      "title": "Metal Shading Language Specification",
      "titleInlineContent": [
        {
          "text": "Metal Shading Language Specification",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Related-Documentation",
      "identifiers": [
        "https://developer.apple.com/library/archive/documentation/Miscellaneous/Conceptual/MetalProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014221",
        "https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/MTLBestPracticesGuide/index.html#//apple_ref/doc/uid/TP40016642"
      ],
      "title": "Related Documentation"
    }
  ],
  "topicSections": [
    {
      "abstract": [
        {
          "text": "Begin with the samples that demonstrate the fundamentals of Metal.",
          "type": "text"
        }
      ],
      "anchor": "Essentials",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/performing-calculations-on-a-gpu",
        "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
        "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives"
      ],
      "title": "Essentials"
    },
    {
      "abstract": [
        {
          "text": "Discover graphics techniques and Metal features through sample code projects.",
          "type": "text"
        }
      ],
      "anchor": "Samples",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/metal-sample-code-library"
      ],
      "title": "Samples"
    },
    {
      "abstract": [
        {
          "text": "Start with a Metal device instance to begin working with the GPU it represents.",
          "type": "text"
        }
      ],
      "anchor": "GPU-Devices",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/gpu-devices-and-work-submission"
      ],
      "title": "GPU Devices"
    },
    {
      "abstract": [
        {
          "text": "Send work to a GPU by issuing commands and configuring the pipeline states for those commands.",
          "type": "text"
        }
      ],
      "anchor": "Command-Encoders",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/render-passes",
        "doc://com.apple.metal/documentation/Metal/compute-passes",
        "doc://com.apple.metal/documentation/Metal/blit-passes",
        "doc://com.apple.metal/documentation/Metal/indirect-command-encoding",
        "doc://com.apple.metal/documentation/Metal/ray-tracing-with-acceleration-structures"
      ],
      "title": "Command Encoders"
    },
    {
      "abstract": [
        {
          "text": "Store data in buffers and textures, and optionally manage the underlying GPU memory yourself.",
          "type": "text"
        }
      ],
      "anchor": "Resources",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/resource-fundamentals",
        "doc://com.apple.metal/documentation/Metal/buffers",
        "doc://com.apple.metal/documentation/Metal/textures",
        "doc://com.apple.metal/documentation/Metal/memory-heaps",
        "doc://com.apple.metal/documentation/Metal/resource-loading",
        "doc://com.apple.metal/documentation/Metal/resource-synchronization"
      ],
      "title": "Resources"
    },
    {
      "abstract": [
        {
          "text": "Write and organize shaders, the functions that work on a GPU’s execution units.",
          "type": "text"
        }
      ],
      "anchor": "Shaders",
      "identifiers": [
        "doc://com.apple.documentation/documentation/Xcode/stepping-through-code-and-inspecting-variables-to-isolate-bugs",
        "doc://com.apple.documentation/documentation/Xcode/Optimizing-GPU-performance",
        "doc://com.apple.metal/documentation/Metal/logging-shader-debug-messages",
        "doc://com.apple.metal/documentation/Metal/using-function-specialization-to-build-pipeline-variants",
        "doc://com.apple.metal/documentation/Metal/shader-libraries"
      ],
      "title": "Shaders"
    },
    {
      "abstract": [
        {
          "text": "Present your rendered content on a device’s display with ",
          "type": "text"
        },
        {
          "identifier": "doc://com.apple.documentation/documentation/QuartzCore",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": " or ",
          "type": "text"
        },
        {
          "identifier": "doc://com.apple.documentation/documentation/MetalKit",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": ", in standard or high dynamic range.",
          "type": "text"
        }
      ],
      "anchor": "Presentation",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/onscreen-presentation",
        "doc://com.apple.metal/documentation/Metal/hdr-content"
      ],
      "title": "Presentation"
    },
    {
      "abstract": [
        {
          "text": "Configure windows and text to display correctly on all devices.",
          "type": "text"
        }
      ],
      "anchor": "User-Interface",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/managing-your-game-window-for-metal-in-macos",
        "doc://com.apple.metal/documentation/Metal/adapting-your-game-interface-for-smaller-screens"
      ],
      "title": "User Interface"
    },
    {
      "abstract": [
        {
          "text": "Identify and fix issues with your app’s Metal API calls, shader code, resources, and performance during development by using Metal Debugger.",
          "type": "text"
        }
      ],
      "anchor": "Developer-Tools",
      "identifiers": [
        "doc://com.apple.documentation/documentation/Xcode/Metal-developer-workflows",
        "doc://com.apple.documentation/documentation/Xcode/Metal-debugger",
        "doc://com.apple.metal/documentation/Metal/improving-your-games-graphics-performance-and-settings",
        "doc://com.apple.metal/documentation/Metal/capturing-metal-commands-programmatically",
        "doc://com.apple.metal/documentation/Metal/supporting-simulator-in-a-metal-app",
        "doc://com.apple.documentation/documentation/Xcode/Analyzing-the-memory-usage-of-your-Metal-app",
        "doc://com.apple.documentation/documentation/Xcode/Analyzing-the-performance-of-your-Metal-app",
        "doc://com.apple.metal/documentation/Metal/developing-metal-apps-that-run-in-simulator",
        "doc://com.apple.metal/documentation/Metal/gpu-counters-and-counter-sample-buffers",
        "doc://com.apple.metal/documentation/Metal/metal-debugging-types"
      ],
      "title": "Developer Tools"
    },
    {
      "abstract": [
        {
          "text": "Take advantage of the unique architecture of Apple silicon GPUs.",
          "type": "text"
        }
      ],
      "anchor": "Apple-Silicon",
      "identifiers": [
        "doc://com.apple.documentation/documentation/Apple-Silicon/porting-your-metal-code-to-apple-silicon",
        "doc://com.apple.metal/documentation/Metal/tailor-your-apps-for-apple-gpus-and-tile-based-deferred-rendering"
      ],
      "title": "Apple Silicon"
    },
    {
      "anchor": "Reference",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/metal-structures",
        "doc://com.apple.metal/documentation/Metal/metal-enumerations",
        "doc://com.apple.metal/documentation/Metal/metal-constants",
        "doc://com.apple.metal/documentation/Metal/metal-data-types",
        "doc://com.apple.metal/documentation/Metal/metal-variables"
      ],
      "title": "Reference"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "replace",
          "path": "/hierarchy",
          "value": {
            "paths": [
              [
                "doc://com.apple.documentation/documentation/technologies"
              ]
            ]
          }
        },
        {
          "op": "replace",
          "path": "/topicSections",
          "value": [
            {
              "abstract": [
                {
                  "text": "Begin with the samples that demonstrate the fundamentals of Metal.",
                  "type": "text"
                }
              ],
              "anchor": "Essentials",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/performing-calculations-on-a-gpu",
                "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
                "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives"
              ],
              "title": "Essentials"
            },
            {
              "abstract": [
                {
                  "text": "Discover graphics techniques and Metal features through sample code projects.",
                  "type": "text"
                }
              ],
              "anchor": "Samples",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/metal-sample-code-library"
              ],
              "title": "Samples"
            },
            {
              "abstract": [
                {
                  "text": "Start with a Metal device instance to begin working with the GPU it represents.",
                  "type": "text"
                }
              ],
              "anchor": "GPU-Devices",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/gpu-devices-and-work-submission"
              ],
              "title": "GPU Devices"
            },
            {
              "abstract": [
                {
                  "text": "Send work to a GPU by issuing commands and configuring the pipeline states for those commands.",
                  "type": "text"
                }
              ],
              "anchor": "Command-Encoders",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/render-passes",
                "doc://com.apple.metal/documentation/Metal/compute-passes",
                "doc://com.apple.metal/documentation/Metal/blit-passes",
                "doc://com.apple.metal/documentation/Metal/indirect-command-encoding",
                "doc://com.apple.metal/documentation/Metal/ray-tracing-with-acceleration-structures"
              ],
              "title": "Command Encoders"
            },
            {
              "abstract": [
                {
                  "text": "Store data in buffers and textures, and optionally manage the underlying GPU memory yourself.",
                  "type": "text"
                }
              ],
              "anchor": "Resources",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/resource-fundamentals",
                "doc://com.apple.metal/documentation/Metal/buffers",
                "doc://com.apple.metal/documentation/Metal/textures",
                "doc://com.apple.metal/documentation/Metal/memory-heaps",
                "doc://com.apple.metal/documentation/Metal/resource-loading",
                "doc://com.apple.metal/documentation/Metal/resource-synchronization"
              ],
              "title": "Resources"
            },
            {
              "abstract": [
                {
                  "text": "Write and organize shaders, the functions that work on a GPU’s execution units.",
                  "type": "text"
                }
              ],
              "anchor": "Shaders",
              "identifiers": [
                "doc://com.apple.documentation/documentation/Xcode/stepping-through-code-and-inspecting-variables-to-isolate-bugs",
                "doc://com.apple.documentation/documentation/Xcode/Optimizing-GPU-performance",
                "doc://com.apple.metal/documentation/Metal/logging-shader-debug-messages",
                "doc://com.apple.metal/documentation/Metal/using-function-specialization-to-build-pipeline-variants",
                "doc://com.apple.metal/documentation/Metal/shader-libraries"
              ],
              "title": "Shaders"
            },
            {
              "abstract": [
                {
                  "text": "Present your rendered content on a device’s display with ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/QuartzCore",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " or ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/MetalKit",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ", in standard or high dynamic range.",
                  "type": "text"
                }
              ],
              "anchor": "Presentation",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/onscreen-presentation",
                "doc://com.apple.metal/documentation/Metal/hdr-content"
              ],
              "title": "Presentation"
            },
            {
              "abstract": [
                {
                  "text": "Configure windows and text to display correctly on all devices.",
                  "type": "text"
                }
              ],
              "anchor": "User-Interface",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/managing-your-game-window-for-metal-in-macos",
                "doc://com.apple.metal/documentation/Metal/adapting-your-game-interface-for-smaller-screens"
              ],
              "title": "User Interface"
            },
            {
              "abstract": [
                {
                  "text": "Identify and fix issues with your app’s Metal API calls, shader code, resources, and performance during development by using Metal Debugger.",
                  "type": "text"
                }
              ],
              "anchor": "Developer-Tools",
              "identifiers": [
                "doc://com.apple.documentation/documentation/Xcode/Metal-developer-workflows",
                "doc://com.apple.documentation/documentation/Xcode/Metal-debugger",
                "doc://com.apple.metal/documentation/Metal/improving-your-games-graphics-performance-and-settings",
                "doc://com.apple.metal/documentation/Metal/capturing-metal-commands-programmatically",
                "doc://com.apple.metal/documentation/Metal/supporting-simulator-in-a-metal-app",
                "doc://com.apple.documentation/documentation/Xcode/Analyzing-the-memory-usage-of-your-Metal-app",
                "doc://com.apple.documentation/documentation/Xcode/Analyzing-the-performance-of-your-Metal-app",
                "doc://com.apple.metal/documentation/Metal/developing-metal-apps-that-run-in-simulator",
                "doc://com.apple.metal/documentation/Metal/gpu-counters-and-counter-sample-buffers",
                "doc://com.apple.metal/documentation/Metal/metal-debugging-types"
              ],
              "title": "Developer Tools"
            },
            {
              "abstract": [
                {
                  "text": "Take advantage of the unique architecture of Apple silicon GPUs.",
                  "type": "text"
                }
              ],
              "anchor": "Apple-Silicon",
              "identifiers": [
                "doc://com.apple.documentation/documentation/Apple-Silicon/porting-your-metal-code-to-apple-silicon",
                "doc://com.apple.metal/documentation/Metal/tailor-your-apps-for-apple-gpus-and-tile-based-deferred-rendering"
              ],
              "title": "Apple Silicon"
            },
            {
              "anchor": "Reference",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/metal-structures",
                "doc://com.apple.metal/documentation/Metal/metal-enumerations",
                "doc://com.apple.metal/documentation/Metal/metal-constants",
                "doc://com.apple.metal/documentation/Metal/metal-functions",
                "doc://com.apple.metal/documentation/Metal/metal-data-types",
                "doc://com.apple.metal/documentation/Metal/metal-variables",
                "doc://com.apple.metal/documentation/Metal/metal-macros"
              ],
              "title": "Reference"
            }
          ]
        },
        {
          "op": "add",
          "path": "/relationshipsSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Related-Documentation",
              "identifiers": [
                "https://developer.apple.com/library/archive/documentation/Miscellaneous/Conceptual/MetalProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014221",
                "https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/MTLBestPracticesGuide/index.html#//apple_ref/doc/uid/TP40016642"
              ],
              "title": "Related Documentation"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/metal"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/metal"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
