{
  "abstract": [
    {
      "text": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.",
      "type": "text"
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/objectivec",
        "doc://com.apple.documentation/documentation/objectivec/objcclasslist"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.documentation/documentation/objectivec/objcclasslist/3952775-sorted"
  },
  "kind": "symbol",
  "legacy_identifier": 3952775,
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:STsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF::SYNTHESIZED::s:10ObjectiveC13ObjCClassListV",
    "fragments": [
      {
        "kind": "text",
        "text": "func "
      },
      {
        "kind": "identifier",
        "text": "sorted"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "identifier",
        "text": "by"
      },
      {
        "kind": "text",
        "text": ": (AnyClass, AnyClass) -> Bool) -> [AnyClass]"
      }
    ],
    "modules": [
      {
        "name": "Objective-C Runtime"
      }
    ],
    "parent": {
      "title": "ObjCClassList"
    },
    "platforms": [
      {
        "current": "18.4",
        "introducedAt": "16.0",
        "name": "iOS"
      },
      {
        "current": "18.4",
        "introducedAt": "16.0",
        "name": "iPadOS"
      },
      {
        "current": "18.4",
        "introducedAt": "16.0",
        "name": "Mac Catalyst"
      },
      {
        "current": "15.4",
        "introducedAt": "13.0",
        "name": "macOS"
      },
      {
        "current": "18.4",
        "introducedAt": "16.0",
        "name": "tvOS"
      },
      {
        "current": "2.4",
        "introducedAt": "1.0",
        "name": "visionOS"
      },
      {
        "current": "11.4",
        "introducedAt": "9.0",
        "name": "watchOS"
      },
      {
        "current": "16.3",
        "introducedAt": "14.0",
        "name": "Xcode"
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "structm",
    "title": "sorted(by:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "sorted"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "by"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "areInIncreasingOrder"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/AnyClass",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s8AnyClassa",
              "text": "AnyClass"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/AnyClass",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s8AnyClassa",
              "text": "AnyClass"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "throws"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Bool",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "rethrows"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "kind": "text",
              "text": "["
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/AnyClass",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s8AnyClassa",
              "text": "AnyClass"
            },
            {
              "kind": "text",
              "text": "]"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "languages": [
        "swift"
      ],
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A predicate that returns ",
                  "type": "text"
                },
                {
                  "code": "true",
                  "type": "codeVoice"
                },
                {
                  "text": " if its first argument should be ordered before its second argument; otherwise, ",
                  "type": "text"
                },
                {
                  "code": "false",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "areInIncreasingOrder"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return_value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A sorted array of the sequence’s elements.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you want to sort a sequence of elements that don’t conform to the ",
              "type": "text"
            },
            {
              "code": "Comparable",
              "type": "codeVoice"
            },
            {
              "text": " protocol, pass a predicate to this method that returns ",
              "type": "text"
            },
            {
              "code": "true",
              "type": "codeVoice"
            },
            {
              "text": " when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In the following example, the predicate provides an ordering for an array of a custom ",
              "type": "text"
            },
            {
              "code": "HTTPResponse",
              "type": "codeVoice"
            },
            {
              "text": " type. The predicate orders errors before successes and sorts the error responses by their error code.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum HTTPResponse {",
            "    case ok",
            "    case error(Int)",
            "}",
            "",
            "let responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]",
            "let sortedResponses = responses.sorted {",
            "    switch ($0, $1) {",
            "    // Order errors by code",
            "    case let (.error(aCode), .error(bCode)):",
            "        return aCode < bCode",
            "",
            "    // All successes are equivalent, so none is before any other",
            "    case (.ok, .ok): return false",
            "",
            "    // Order errors before successes",
            "    case (.error, .ok): return true",
            "    case (.ok, .error): return false",
            "    }",
            "}",
            "print(sortedResponses)",
            "// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\""
          ],
          "metadata": {
            "anchor": "3952776",
            "title": "Listing 1"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You also use this method to sort elements that conform to the ",
              "type": "text"
            },
            {
              "code": "Comparable",
              "type": "codeVoice"
            },
            {
              "text": " protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (",
              "type": "text"
            },
            {
              "code": ">",
              "type": "codeVoice"
            },
            {
              "text": ") as the ",
              "type": "text"
            },
            {
              "code": "areInIncreasingOrder",
              "type": "codeVoice"
            },
            {
              "text": " parameter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]",
            "let descendingStudents = students.sorted(by: >)",
            "print(descendingStudents)",
            "// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""
          ],
          "metadata": {
            "anchor": "3952777",
            "title": "Listing 2"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Calling the related ",
              "type": "text"
            },
            {
              "code": "sorted()",
              "type": "codeVoice"
            },
            {
              "text": " method is equivalent to calling this method and passing the less-than operator (",
              "type": "text"
            },
            {
              "code": "<",
              "type": "codeVoice"
            },
            {
              "text": ") as the predicate.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "print(students.sorted())",
            "// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"",
            "print(students.sorted(by: <))",
            "// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\""
          ],
          "metadata": {
            "anchor": "3952778",
            "title": "Listing 3"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The predicate must be a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "strict weak ordering",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " over the elements. That is, for any elements ",
              "type": "text"
            },
            {
              "code": "a",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "b",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "c",
              "type": "codeVoice"
            },
            {
              "text": ", the following conditions must hold:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "areInIncreasingOrder(a, a)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is always ",
                      "type": "text"
                    },
                    {
                      "code": "false",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (Irreflexivity)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If ",
                      "type": "text"
                    },
                    {
                      "code": "areInIncreasingOrder(a, b)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "areInIncreasingOrder(b, c)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are both ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", then ",
                      "type": "text"
                    },
                    {
                      "code": "areInIncreasingOrder(a, c)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is also ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (Transitive comparability)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Two elements are ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "incomparable",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " if neither is ordered before the other according to the predicate. If ",
                      "type": "text"
                    },
                    {
                      "code": "a",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "b",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are incomparable, and ",
                      "type": "text"
                    },
                    {
                      "code": "b",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "c",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are incomparable, then ",
                      "type": "text"
                    },
                    {
                      "code": "a",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "c",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are also incomparable. (Transitive incomparability)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which ",
              "type": "text"
            },
            {
              "code": "areInIncreasingOrder",
              "type": "codeVoice"
            },
            {
              "text": " does not establish an order.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Complexity: O(",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "n",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " log ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "n",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": "), where ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "n",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " is the length of the sequence.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.Swift/documentation/Swift/AnyClass": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyClass",
      "kind": "symbol",
      "role": "symbol",
      "title": "AnyClass",
      "type": "topic",
      "url": "/documentation/swift/anyclass"
    },
    "doc://com.apple.Swift/documentation/Swift/Bool": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Bool",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/swift/bool"
    },
    "doc://com.apple.documentation/documentation/objectivec": {
      "identifier": "doc://com.apple.documentation/documentation/objectivec",
      "kind": "symbol",
      "role": "collection",
      "title": "Objective-C Runtime",
      "type": "topic",
      "url": "/documentation/objectivec"
    },
    "doc://com.apple.documentation/documentation/objectivec/objcclasslist": {
      "identifier": "doc://com.apple.documentation/documentation/objectivec/objcclasslist",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObjCClassList",
      "type": "topic",
      "url": "/documentation/objectivec/objcclasslist"
    },
    "doc://com.apple.documentation/documentation/objectivec/objcclasslist/3952775-sorted#3952776": {
      "identifier": "doc://com.apple.documentation/documentation/objectivec/objcclasslist/3952775-sorted#3952776",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 1",
      "type": "section",
      "url": "/documentation/objectivec/objcclasslist/3952775-sorted#3952776"
    },
    "doc://com.apple.documentation/documentation/objectivec/objcclasslist/3952775-sorted#3952777": {
      "identifier": "doc://com.apple.documentation/documentation/objectivec/objcclasslist/3952775-sorted#3952777",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 2",
      "type": "section",
      "url": "/documentation/objectivec/objcclasslist/3952775-sorted#3952777"
    },
    "doc://com.apple.documentation/documentation/objectivec/objcclasslist/3952775-sorted#3952778": {
      "identifier": "doc://com.apple.documentation/documentation/objectivec/objcclasslist/3952775-sorted#3952778",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 3",
      "type": "section",
      "url": "/documentation/objectivec/objcclasslist/3952775-sorted#3952778"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "documentation/objectivec/objcclasslist/3952775-sorted"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
