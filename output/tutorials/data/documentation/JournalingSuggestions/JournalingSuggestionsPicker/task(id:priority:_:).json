{
  "abstract": [
    {
      "text": "Adds a task to perform before this view appears or when a specified",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "value changes.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions",
        "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions/JournalingSuggestionsPicker"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions/JournalingSuggestionsPicker/task(id:priority:_:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "extendedModule": "SwiftUI",
    "externalID": "s:7SwiftUI4ViewPAAE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lF::SYNTHESIZED::s:21JournalingSuggestions0aB6PickerV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "task"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "genericParameter",
        "text": "T"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "externalParam",
        "text": "id"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "text": "T"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "priority"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:ScP",
        "text": "TaskPriority"
      },
      {
        "kind": "text",
        "text": ", () "
      },
      {
        "kind": "keyword",
        "text": "async"
      },
      {
        "kind": "text",
        "text": " -> "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:s4Voida",
        "text": "Void"
      },
      {
        "kind": "text",
        "text": ") -> "
      },
      {
        "kind": "keyword",
        "text": "some"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7SwiftUI4ViewP",
        "text": "View"
      }
    ],
    "modules": [
      {
        "name": "Journaling Suggestions",
        "relatedModules": [
          "SwiftUI"
        ]
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "12.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "method",
    "title": "task(id:priority:_:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "nonisolated"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "task"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "T"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "id"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "value"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "typeIdentifier",
              "text": "T"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "priority"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ScP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ScP",
              "text": "TaskPriority"
            },
            {
              "kind": "text",
              "text": " = .userInitiated, "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "action"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "keyword",
              "text": "@escaping"
            },
            {
              "kind": "text",
              "text": " () "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:s4Voida",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s4Voida",
              "text": "Void"
            },
            {
              "kind": "text",
              "text": ") -> "
            },
            {
              "kind": "keyword",
              "text": "some"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI4ViewP",
              "text": "View"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "T"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:SQ",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SQ",
              "text": "Equatable"
            },
            {
              "kind": "text",
              "text": "\n"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The value to observe for changes. The value must conform",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "to the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "protocol.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "id"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The task priority to use when creating the asynchronous",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "task. The default priority is",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/Swift/TaskPriority/userInitiated",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "priority"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A closure that SwiftUI calls as an asynchronous task",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "before the view appears. SwiftUI can automatically cancel the task",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "after the view disappears before the action completes. If the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "code": "id",
                  "type": "codeVoice"
                },
                {
                  "text": " value changes, SwiftUI cancels and restarts the task.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "action"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return-value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A view that runs the specified action asynchronously before",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the view appears, or restarts the task when the ",
              "type": "text"
            },
            {
              "code": "id",
              "type": "codeVoice"
            },
            {
              "text": " value changes.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "This method behaves like ",
              "type": "text"
            },
            {
              "code": "View/task(priority:_:)",
              "type": "codeVoice"
            },
            {
              "text": ", except that it also",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "cancels and recreates the task when a specified value changes. To detect",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a change, the modifier tests whether a new value for the ",
              "type": "text"
            },
            {
              "code": "id",
              "type": "codeVoice"
            },
            {
              "text": " parameter",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "equals the previous value. For this to work,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the value’s type must conform to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, if you define an equatable ",
              "type": "text"
            },
            {
              "code": "Server",
              "type": "codeVoice"
            },
            {
              "text": " type that posts custom",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "notifications whenever its state changes — for example, from ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "signed",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "out",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "signed in",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " — you can use the task modifier to update",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the contents of a ",
              "type": "text"
            },
            {
              "code": "Text",
              "type": "codeVoice"
            },
            {
              "text": " view to reflect the state of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "currently selected server:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Text(status ?? \"Signed Out\")",
            "    .task(id: server) {",
            "        let sequence = NotificationCenter.default.notifications(",
            "            named: .didUpdateStatus,",
            "            object: server",
            "        ).compactMap {",
            "            $0.userInfo?[\"status\"] as? String",
            "        }",
            "        for await value in sequence {",
            "            status = value",
            "        }",
            "    }"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "This example uses the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/foundation/notificationcenter/3813137-notifications",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method to create an asynchronous sequence of notifications, given by an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncSequence",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance. The example then maps the notification sequence to a sequence",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of strings that correspond to values stored with each notification.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Elsewhere, the server defines a custom ",
              "type": "text"
            },
            {
              "code": "didUpdateStatus",
              "type": "codeVoice"
            },
            {
              "text": " notification:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "extension NSNotification.Name {",
            "    static var didUpdateStatus: NSNotification.Name {",
            "        NSNotification.Name(\"didUpdateStatus\")",
            "    }",
            "}"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Whenever the server status changes, like after the user signs in, the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "server posts a notification of this custom type:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let notification = Notification(",
            "    name: .didUpdateStatus,",
            "    object: self,",
            "    userInfo: [\"status\": \"Signed In\"])",
            "NotificationCenter.default.post(notification)"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The task attached to the ",
              "type": "text"
            },
            {
              "code": "Text",
              "type": "codeVoice"
            },
            {
              "text": " view gets and displays the status",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "value from the notification’s user information dictionary. When the user",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "chooses a different server, SwiftUI cancels the task and creates a new",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "one, which then waits for notifications from the new server.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions": {
      "abstract": [
        {
          "text": "Display a set of recent, personal events that inspire someone to contribute to your app’s creative workflow.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions",
      "kind": "symbol",
      "role": "collection",
      "title": "Journaling Suggestions",
      "type": "topic",
      "url": "/documentation/journalingsuggestions"
    },
    "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions/JournalingSuggestionsPicker": {
      "abstract": [
        {
          "text": "A view that lists different types of recent events in a person’s life.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "JournalingSuggestionsPicker"
        }
      ],
      "identifier": "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions/JournalingSuggestionsPicker",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "JournalingSuggestionsPicker"
        }
      ],
      "role": "symbol",
      "title": "JournalingSuggestionsPicker",
      "type": "topic",
      "url": "/documentation/journalingsuggestions/journalingsuggestionspicker"
    },
    "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions/JournalingSuggestionsPicker/task(id:priority:_:)": {
      "abstract": [
        {
          "text": "Adds a task to perform before this view appears or when a specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "task"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "id"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "priority"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScP",
          "text": "TaskPriority"
        },
        {
          "kind": "text",
          "text": ", () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.JournalingSuggestions/documentation/JournalingSuggestions/JournalingSuggestionsPicker/task(id:priority:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "task(id:priority:_:)",
      "type": "topic",
      "url": "/documentation/journalingsuggestions/journalingsuggestionspicker/task(id:priority:_:)"
    },
    "doc://com.apple.documentation/documentation/Swift/AsyncSequence": {
      "abstract": [
        {
          "text": "A type that provides asynchronous, sequential, iterated access to its elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7FailureQa",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncSequence",
      "kind": "symbol",
      "role": "symbol",
      "title": "AsyncSequence",
      "type": "topic",
      "url": "/documentation/Swift/AsyncSequence"
    },
    "doc://com.apple.documentation/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/Swift/Equatable"
    },
    "doc://com.apple.documentation/documentation/Swift/TaskPriority/userInitiated": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "let"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "userInitiated"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScP",
          "text": "TaskPriority"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/TaskPriority/userInitiated",
      "kind": "symbol",
      "role": "symbol",
      "title": "userInitiated",
      "type": "topic",
      "url": "/documentation/Swift/TaskPriority/userInitiated"
    },
    "doc://com.apple.documentation/documentation/foundation/notificationcenter/3813137-notifications": {
      "abstract": [
        {
          "text": "Returns an asynchronous sequence of notifications produced by this center for a given notification name and optional source object.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "notifications"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "named"
        },
        {
          "kind": "text",
          "text": ": Notification.Name, "
        },
        {
          "kind": "identifier",
          "text": "object"
        },
        {
          "kind": "text",
          "text": ": (any AnyObject & Sendable)?) -> NotificationCenter.Notifications"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/notificationcenter/3813137-notifications",
      "kind": "symbol",
      "role": "symbol",
      "title": "notifications(named:object:)",
      "type": "topic",
      "url": "/documentation/foundation/notificationcenter/3813137-notifications"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP": {
      "abstract": [
        {
          "text": "A type that represents part of your app’s user interface and provides modifiers that you use to configure views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
      "kind": "symbol",
      "role": "symbol",
      "title": "View",
      "type": "topic",
      "url": "/documentation/SwiftUI/View"
    },
    "doc://com.externally.resolved.symbol/s:SQ": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SQ",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/Swift/Equatable"
    },
    "doc://com.externally.resolved.symbol/s:ScP": {
      "abstract": [
        {
          "text": "The priority of a task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskPriority"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ScP",
      "kind": "symbol",
      "role": "symbol",
      "title": "TaskPriority",
      "type": "topic",
      "url": "/documentation/Swift/TaskPriority"
    },
    "doc://com.externally.resolved.symbol/s:s4Voida": {
      "abstract": [
        {
          "text": "The return type of functions that don’t explicitly specify a return type, that is, an empty tuple `()`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": " = ()"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s4Voida",
      "kind": "symbol",
      "role": "symbol",
      "title": "Void",
      "type": "topic",
      "url": "/documentation/Swift/Void"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/journalingsuggestions/journalingsuggestionspicker/task(id:priority:_:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
