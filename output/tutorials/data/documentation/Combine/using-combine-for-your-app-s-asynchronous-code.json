{
  "abstract": [
    {
      "text": "Apply common patterns to migrate your closure-based, event-handling code.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Combine/documentation/Combine"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Combine/documentation/Combine/using-combine-for-your-app-s-asynchronous-code"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Combine"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Using Combine for Your App’s Asynchronous Code"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Your app may use common patterns to handle asynchronous events, such as:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Completion handlers, in which a caller provides a closure to execute once, after",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "a potentially long-running task completes.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Closure properties, in which a caller provides a closure to invoke every time a",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "given asynchronous event occurs.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Combine provides compelling equivalents to these patterns, which allow you to eliminate",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "boilerplate implementations, and leverage its many operators. As you adopt Combine",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "elsewhere in your app, converting your asynchronous call points to Combine improves",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "your code’s consistency and readability.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "You don’t need closure-based asychronicity patterns if you’re using the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "code": "async",
                  "type": "codeVoice"
                },
                {
                  "text": "-",
                  "type": "text"
                },
                {
                  "code": "await",
                  "type": "codeVoice"
                },
                {
                  "text": " features in Swift 5.5 and later. Instead, your code can ",
                  "type": "text"
                },
                {
                  "code": "await",
                  "type": "codeVoice"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "an asynchronous call, and then execute the code that would have been in the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "closure. This eliminates the need for both conventional completion handlers and",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Combine futures. For more information, see",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "in ",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "identifier": "https://docs.swift.org/swift-book/",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Tip",
          "style": "tip",
          "type": "aside"
        },
        {
          "anchor": "Replace-Completion-Handler-Closures-with-Futures",
          "level": 3,
          "text": "Replace Completion-Handler Closures with Futures",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A completion handler is a closure accepted by a function that executes after the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function completes its work. You typically implement this by invoking the completion",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "handler directly when the function finishes its work, storing the closure outside",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the function if necessary. For example, the following function accepts a closure",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and then executes it after a two-second delay:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func performAsyncAction(completionHandler: @escaping () -> Void) {",
            "    DispatchQueue.main.asyncAfter(deadline:.now() + 2) {",
            "        completionHandler()",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can replace this pattern with a Combine ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Future",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "publisher that performs some work and then asynchronously signals success or failure.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "If it succeeds, the future executes a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Future/Promise",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a closure that receives the element produced by the future. You can replace the previous",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function as follows:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func performAsyncActionAsFuture() -> Future <Void, Never> {",
            "    return Future() { promise in",
            "        DispatchQueue.main.asyncAfter(deadline:.now() + 2) {",
            "            promise(Result.success(()))",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Rather than explicitly invoking a closure when the work completes, the future invokes",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the promise passed to it, passing in a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/Result",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that indicates success or failure. The caller receives this result asynchronously",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "from the future. Because ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Future",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " is a Combine ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Publisher",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the caller attaches it to an optional chain of operators, ending with a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Subscriber",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "like ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Publisher/sink(receiveValue:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "cancellable = performAsyncActionAsFuture()",
            "    .sink() { _ in print(\"Future succeeded.\") }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Use-Output-Types-to-Represent-a-Futures-Parameters",
          "level": 3,
          "text": "Use Output Types to Represent a Future’s Parameters",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Sometimes, a long-running task generates a value that it passes to a completion handler",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as a parameter. To replicate this functionality in Combine, declare the parameter",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as the output type published by the future. The following example produces a randomly-generated",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "integer, and passes it to the promise by declaring ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": " as the future’s output type:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func performAsyncActionAsFutureWithParameter() -> Future <Int, Never> {",
            "    return Future() { promise in",
            "        DispatchQueue.main.asyncAfter(deadline:.now() + 2) {",
            "            let rn = Int.random(in: 1...10)",
            "            promise(Result.success(rn))",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "By declaring that the future produces ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": " elements, the future can use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/Result",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type to pass an ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": " value to the promise. When the promise executes, the future",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "publishes the value, which a caller can receive with a subscriber like ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Publisher/sink(receiveValue:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "cancellable = performAsyncActionAsFutureWithParameter()",
            "    .sink() { rn in print(\"Got random number \\(rn).\") }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Replace-Repeatedly-Invoked-Closures-with-Subjects",
          "level": 3,
          "text": "Replace Repeatedly Invoked Closures with Subjects",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Your app may also have the common pattern of using a closure as a property to invoke",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "when certain events happen. These properties often have names starting with ",
              "type": "text"
            },
            {
              "code": "on",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and their call points look like the following:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "vc.onDoSomething = { print(\"Did something.\") }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "With Combine, you can replace this pattern by using a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Subject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "A subject allows you to imperatively publish a new element at any time by calling",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Subject/send()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. Adopt this pattern by using",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a ",
              "type": "text"
            },
            {
              "code": "private",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/PassthroughSubject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/CurrentValueSubject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "then expose this publicly as an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/AnyPublisher",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "private lazy var myDoSomethingSubject = PassthroughSubject<Void, Never>()",
            "lazy var doSomethingSubject = myDoSomethingSubject.eraseToAnyPublisher()"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "With this arrangement, instead of setting a closure property, callers perform their",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "work in a subscriber, such as ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Publisher/sink(receiveValue:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "cancellable = vc.doSomethingSubject",
            "    .sink() { print(\"Did something with Combine.\") }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "One advantage to using Combine is that the subject can call",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Combine/documentation/Combine/Subject/send(completion:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to tell the subscriber that no further",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "events are forthcoming, or that an error occurred.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "If you are using ",
                  "type": "text"
                },
                {
                  "code": "async",
                  "type": "codeVoice"
                },
                {
                  "text": "-",
                  "type": "text"
                },
                {
                  "code": "await",
                  "type": "codeVoice"
                },
                {
                  "text": " concurrency in Swift 5.5 or later,",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "you can use a ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncStream",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ",",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "instead of a Combine ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.Combine/documentation/Combine/Subject",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ", to asynchronously produce new elements.",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "With this arrangement, the call point performs a ",
                  "type": "text"
                },
                {
                  "code": "for",
                  "type": "codeVoice"
                },
                {
                  "text": "-",
                  "type": "text"
                },
                {
                  "code": "await",
                  "type": "codeVoice"
                },
                {
                  "text": "-",
                  "type": "text"
                },
                {
                  "code": "in",
                  "type": "codeVoice"
                },
                {
                  "text": " loop to",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "iterate over the stream rather than subscribing to the subject. The code that",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "would go in the subscriber’s ",
                  "type": "text"
                },
                {
                  "code": "receiveValue",
                  "type": "codeVoice"
                },
                {
                  "text": " closure instead becomes the contents",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "of the ",
                  "type": "text"
                },
                {
                  "code": "for",
                  "type": "codeVoice"
                },
                {
                  "text": "-",
                  "type": "text"
                },
                {
                  "code": "await",
                  "type": "codeVoice"
                },
                {
                  "text": "-",
                  "type": "text"
                },
                {
                  "code": "in",
                  "type": "codeVoice"
                },
                {
                  "text": " loop.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Tip",
          "style": "tip",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Combine-PageImage-card.png": {
      "alt": "The Swift language logo, overlaid by a graph of interconnected lines and points.",
      "identifier": "Combine-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/ba2aa5f2e9d9ae5b196c642a6cf121dd/Combine-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/8df9b2bdcd94118827dd29f28f3915d7/Combine-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Combine/documentation/Combine": {
      "abstract": [
        {
          "text": "Customize handling of asynchronous events by combining event-processing operators.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine",
      "images": [
        {
          "identifier": "Combine-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Combine",
      "type": "topic",
      "url": "/documentation/combine"
    },
    "doc://com.apple.Combine/documentation/Combine/AnyPublisher": {
      "abstract": [
        {
          "text": "A publisher that performs type erasure by wrapping another publisher.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyPublisher"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/AnyPublisher",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyPublisher"
        }
      ],
      "role": "symbol",
      "title": "AnyPublisher",
      "type": "topic",
      "url": "/documentation/combine/anypublisher"
    },
    "doc://com.apple.Combine/documentation/Combine/CurrentValueSubject": {
      "abstract": [
        {
          "text": "A subject that wraps a single value and publishes a new element whenever the value changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CurrentValueSubject"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/CurrentValueSubject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CurrentValueSubject"
        }
      ],
      "role": "symbol",
      "title": "CurrentValueSubject",
      "type": "topic",
      "url": "/documentation/combine/currentvaluesubject"
    },
    "doc://com.apple.Combine/documentation/Combine/Future": {
      "abstract": [
        {
          "text": "A publisher that eventually produces a single value and then finishes or fails.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Future"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/Future",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Future"
        }
      ],
      "role": "symbol",
      "title": "Future",
      "type": "topic",
      "url": "/documentation/combine/future"
    },
    "doc://com.apple.Combine/documentation/Combine/Future/Promise": {
      "abstract": [
        {
          "text": "A type that represents a closure to invoke in the future, when an element or error is available.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Promise"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/Future/Promise",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Promise"
        }
      ],
      "role": "symbol",
      "title": "Future.Promise",
      "type": "topic",
      "url": "/documentation/combine/future/promise"
    },
    "doc://com.apple.Combine/documentation/Combine/PassthroughSubject": {
      "abstract": [
        {
          "text": "A subject that broadcasts elements to downstream subscribers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PassthroughSubject"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/PassthroughSubject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PassthroughSubject"
        }
      ],
      "role": "symbol",
      "title": "PassthroughSubject",
      "type": "topic",
      "url": "/documentation/combine/passthroughsubject"
    },
    "doc://com.apple.Combine/documentation/Combine/Publisher": {
      "abstract": [
        {
          "text": "Declares that a type can transmit a sequence of values over time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Publisher"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/Publisher",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Publisher"
        }
      ],
      "role": "symbol",
      "title": "Publisher",
      "type": "topic",
      "url": "/documentation/combine/publisher"
    },
    "doc://com.apple.Combine/documentation/Combine/Publisher/sink(receiveValue:)": {
      "abstract": [
        {
          "text": "Attaches a subscriber with closure-based behavior to a publisher that never fails.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Never",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "sink"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "receiveValue"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine9PublisherP6OutputQa",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine14AnyCancellableC",
          "text": "AnyCancellable"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/Publisher/sink(receiveValue:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "sink(receiveValue:)",
      "type": "topic",
      "url": "/documentation/combine/publisher/sink(receivevalue:)"
    },
    "doc://com.apple.Combine/documentation/Combine/Subject": {
      "abstract": [
        {
          "text": "A publisher that exposes a method for outside callers to publish elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Subject"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/Subject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Subject"
        }
      ],
      "role": "symbol",
      "title": "Subject",
      "type": "topic",
      "url": "/documentation/combine/subject"
    },
    "doc://com.apple.Combine/documentation/Combine/Subject/send()": {
      "abstract": [
        {
          "text": "Sends a void value to the subscriber.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "()",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "send"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/Subject/send()",
      "kind": "symbol",
      "role": "symbol",
      "title": "send()",
      "type": "topic",
      "url": "/documentation/combine/subject/send()"
    },
    "doc://com.apple.Combine/documentation/Combine/Subject/send(completion:)": {
      "abstract": [
        {
          "text": "Sends a completion signal to the subscriber.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "send"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "completion"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine11SubscribersO",
          "text": "Subscribers"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine11SubscribersO10CompletionO",
          "text": "Completion"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine9PublisherP7FailureQa",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/Subject/send(completion:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "send(completion:)",
      "type": "topic",
      "url": "/documentation/combine/subject/send(completion:)"
    },
    "doc://com.apple.Combine/documentation/Combine/Subscriber": {
      "abstract": [
        {
          "text": "A protocol that declares a type that can receive input from a publisher.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Subscriber"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/Subscriber",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Subscriber"
        }
      ],
      "role": "symbol",
      "title": "Subscriber",
      "type": "topic",
      "url": "/documentation/combine/subscriber"
    },
    "doc://com.apple.Combine/documentation/Combine/performing-key-value-observing-with-combine": {
      "abstract": [
        {
          "text": "Expose KVO changes with a Combine publisher.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/performing-key-value-observing-with-combine",
      "kind": "article",
      "role": "article",
      "title": "Performing Key-Value Observing with Combine",
      "type": "topic",
      "url": "/documentation/combine/performing-key-value-observing-with-combine"
    },
    "doc://com.apple.Combine/documentation/Combine/replacing-foundation-timers-with-timer-publishers": {
      "abstract": [
        {
          "text": "Publish elements periodically by using a timer.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/replacing-foundation-timers-with-timer-publishers",
      "kind": "article",
      "role": "article",
      "title": "Replacing Foundation Timers with Timer Publishers",
      "type": "topic",
      "url": "/documentation/combine/replacing-foundation-timers-with-timer-publishers"
    },
    "doc://com.apple.Combine/documentation/Combine/routing-notifications-to-combine-subscribers": {
      "abstract": [
        {
          "text": "Deliver notifications to subscribers by using notification centers’ publishers.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Combine/documentation/Combine/routing-notifications-to-combine-subscribers",
      "kind": "article",
      "role": "article",
      "title": "Routing Notifications to Combine Subscribers",
      "type": "topic",
      "url": "/documentation/combine/routing-notifications-to-combine-subscribers"
    },
    "doc://com.apple.documentation/documentation/Swift/AsyncStream": {
      "abstract": [
        {
          "text": "An asynchronous sequence generated from a closure that calls a continuation to produce new elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncStream",
      "kind": "symbol",
      "role": "symbol",
      "title": "AsyncStream",
      "type": "topic",
      "url": "/documentation/Swift/AsyncStream"
    },
    "doc://com.apple.documentation/documentation/Swift/Result": {
      "abstract": [
        {
          "text": "A value that represents either a success or a failure, including an associated value in each case.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": " : ~Copyable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Result",
      "kind": "symbol",
      "role": "symbol",
      "title": "Result",
      "type": "topic",
      "url": "/documentation/Swift/Result"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://docs.swift.org/swift-book/": {
      "identifier": "https://docs.swift.org/swift-book/",
      "title": "The Swift Programming Language",
      "titleInlineContent": [
        {
          "text": "The Swift Programming Language",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://docs.swift.org/swift-book/"
    },
    "https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html": {
      "identifier": "https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html",
      "title": "Concurrency",
      "titleInlineContent": [
        {
          "text": "Concurrency",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Combine-Migration",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Combine/documentation/Combine/routing-notifications-to-combine-subscribers",
        "doc://com.apple.Combine/documentation/Combine/replacing-foundation-timers-with-timer-publishers",
        "doc://com.apple.Combine/documentation/Combine/performing-key-value-observing-with-combine"
      ],
      "title": "Combine Migration"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/combine/using-combine-for-your-app-s-asynchronous-code"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
