{
  "abstract": [
    {
      "text": "Returns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.",
      "type": "text"
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/foundation",
        "doc://com.apple.documentation/documentation/foundation/numbers_data_and_basic_values",
        "doc://com.apple.documentation/documentation/foundation/url",
        "doc://com.apple.documentation/documentation/foundation/url/asyncbytes"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767308-min"
  },
  "kind": "symbol",
  "legacy_identifier": 3767308,
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:Sci12_ConcurrencyE3min2by7ElementQzSgSbAE_AEtYaKXE_tYaKF::SYNTHESIZED::s:10Foundation3URLV10AsyncBytesV",
    "fragments": [
      {
        "kind": "text",
        "text": "func "
      },
      {
        "kind": "identifier",
        "text": "min"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "identifier",
        "text": "by"
      },
      {
        "kind": "text",
        "text": ": (UInt8, UInt8) -> Bool) -> UInt8?"
      }
    ],
    "modules": [
      {
        "name": "Foundation"
      }
    ],
    "parent": {
      "title": "URL.AsyncBytes"
    },
    "platforms": [
      {
        "current": "18.4",
        "introducedAt": "13.0",
        "name": "iOS"
      },
      {
        "current": "18.4",
        "introducedAt": "13.0",
        "name": "iPadOS"
      },
      {
        "current": "18.4",
        "introducedAt": "15.0",
        "name": "Mac Catalyst"
      },
      {
        "current": "15.4",
        "introducedAt": "10.15",
        "name": "macOS"
      },
      {
        "current": "18.4",
        "introducedAt": "13.0",
        "name": "tvOS"
      },
      {
        "current": "2.4",
        "introducedAt": "1.0",
        "name": "visionOS"
      },
      {
        "current": "11.4",
        "introducedAt": "6.0",
        "name": "watchOS"
      },
      {
        "current": "16.3",
        "introducedAt": "13.0",
        "name": "Xcode"
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "structm",
    "title": "min(by:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@warn_unqualified_access"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "min"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "by"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "areInIncreasingOrder"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s5UInt8V",
              "text": "UInt8"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s5UInt8V",
              "text": "UInt8"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "throws"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Bool",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "rethrows"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s5UInt8V",
              "text": "UInt8"
            },
            {
              "kind": "text",
              "text": "?"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "languages": [
        "swift"
      ],
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A predicate that returns ",
                  "type": "text"
                },
                {
                  "code": "true",
                  "type": "codeVoice"
                },
                {
                  "text": " if its first argument should be ordered before its second argument; otherwise, ",
                  "type": "text"
                },
                {
                  "code": "false",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "areInIncreasingOrder"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return_value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The sequence’s minimum element, according to ",
              "type": "text"
            },
            {
              "code": "areInIncreasingOrder",
              "type": "codeVoice"
            },
            {
              "text": ". If the sequence has no elements, returns ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this method when the asynchronous sequence’s values don’t conform to ",
              "type": "text"
            },
            {
              "code": "Comparable",
              "type": "codeVoice"
            },
            {
              "text": ", or when you want to apply a custom ordering to the sequence.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The predicate must be a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "strict weak ordering",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " over the elements. That is, for any elements ",
              "type": "text"
            },
            {
              "code": "a",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "b",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "c",
              "type": "codeVoice"
            },
            {
              "text": ", the following conditions must hold:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "areInIncreasingOrder(a, a)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is always ",
                      "type": "text"
                    },
                    {
                      "code": "false",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (Irreflexivity)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If ",
                      "type": "text"
                    },
                    {
                      "code": "areInIncreasingOrder(a, b)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "areInIncreasingOrder(b, c)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are both ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", then ",
                      "type": "text"
                    },
                    {
                      "code": "areInIncreasingOrder(a, c)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is also ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (Transitive comparability)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Two elements are ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "incomparable",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " if neither is ordered before the other according to the predicate. If ",
                      "type": "text"
                    },
                    {
                      "code": "a",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "b",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are incomparable, and ",
                      "type": "text"
                    },
                    {
                      "code": "b",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "c",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are incomparable, then ",
                      "type": "text"
                    },
                    {
                      "code": "a",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "c",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are also incomparable. (Transitive incomparability)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The following example uses an enumeration of playing cards ranks, ",
              "type": "text"
            },
            {
              "code": "Rank",
              "type": "codeVoice"
            },
            {
              "text": ", which ranges from ",
              "type": "text"
            },
            {
              "code": "ace",
              "type": "codeVoice"
            },
            {
              "text": " (low) to ",
              "type": "text"
            },
            {
              "code": "king",
              "type": "codeVoice"
            },
            {
              "text": " (high). An asynchronous sequence called ",
              "type": "text"
            },
            {
              "code": "RankCounter",
              "type": "codeVoice"
            },
            {
              "text": " produces all elements of the array. The predicate provided to the ",
              "type": "text"
            },
            {
              "code": "min(by:)",
              "type": "codeVoice"
            },
            {
              "text": " method sorts ranks based on their ",
              "type": "text"
            },
            {
              "code": "rawValue",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum Rank: Int {",
            "    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king",
            "}",
            "",
            "let min = await RankCounter()",
            "    .min { $0.rawValue < $1.rawValue }",
            "print(min ?? \"none\")",
            "// Prints \"ace\""
          ],
          "metadata": {
            "anchor": "4104730",
            "title": "Listing 1"
          },
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.Swift/documentation/Swift/Bool": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Bool",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/swift/bool"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8",
      "kind": "symbol",
      "role": "symbol",
      "title": "UInt8",
      "type": "topic",
      "url": "/documentation/swift/uint8"
    },
    "doc://com.apple.documentation/documentation/foundation": {
      "identifier": "doc://com.apple.documentation/documentation/foundation",
      "kind": "symbol",
      "role": "collection",
      "title": "Foundation",
      "type": "topic",
      "url": "/documentation/foundation"
    },
    "doc://com.apple.documentation/documentation/foundation/numbers_data_and_basic_values": {
      "identifier": "doc://com.apple.documentation/documentation/foundation/numbers_data_and_basic_values",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Numbers, Data, and Basic Values",
      "type": "topic",
      "url": "/documentation/foundation/numbers_data_and_basic_values"
    },
    "doc://com.apple.documentation/documentation/foundation/url": {
      "identifier": "doc://com.apple.documentation/documentation/foundation/url",
      "kind": "symbol",
      "role": "symbol",
      "title": "URL",
      "type": "topic",
      "url": "/documentation/foundation/url"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes": {
      "abstract": [
        {
          "text": "An asynchronous sequence of bytes loaded from the URL.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes",
      "kind": "symbol",
      "role": "symbol",
      "title": "URL.AsyncBytes",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767289-allsatisfy": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "allSatisfy"
        },
        {
          "kind": "text",
          "text": "((UInt8) -> Bool) -> Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767289-allsatisfy",
      "kind": "symbol",
      "role": "symbol",
      "title": "allSatisfy(_:)",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes/3767289-allsatisfy"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767293-contains": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the asynchronous sequence contains the given element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "(UInt8) -> Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767293-contains",
      "kind": "symbol",
      "role": "symbol",
      "title": "contains(_:)",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes/3767293-contains"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767294-contains": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": (UInt8) -> Bool) -> Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767294-contains",
      "kind": "symbol",
      "role": "symbol",
      "title": "contains(where:)",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes/3767294-contains"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767298-first": {
      "abstract": [
        {
          "text": "Returns the first element of the sequence that satisfies the given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "first"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": (UInt8) -> Bool) -> UInt8?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767298-first",
      "kind": "symbol",
      "role": "symbol",
      "title": "first(where:)",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes/3767298-first"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767305-max": {
      "abstract": [
        {
          "text": "Returns the maximum element in an asynchronous sequence of comparable elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "() -> UInt8?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767305-max",
      "kind": "symbol",
      "role": "symbol",
      "title": "max()",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes/3767305-max"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767306-max": {
      "abstract": [
        {
          "text": "Returns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": (UInt8, UInt8) -> Bool) -> UInt8?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767306-max",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(by:)",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes/3767306-max"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767307-min": {
      "abstract": [
        {
          "text": "Returns the minimum element in an asynchronous sequence of comparable elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "() -> UInt8?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767307-min",
      "kind": "symbol",
      "role": "symbol",
      "title": "min()",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes/3767307-min"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767308-min": {
      "abstract": [
        {
          "text": "Returns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": (UInt8, UInt8) -> Bool) -> UInt8?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767308-min",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(by:)",
      "type": "topic",
      "url": "/documentation/foundation/url/asyncbytes/3767308-min"
    },
    "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767308-min#4104730": {
      "identifier": "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767308-min#4104730",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 1",
      "type": "section",
      "url": "/documentation/foundation/url/asyncbytes/3767308-min#4104730"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "generated": true,
      "identifiers": [
        "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767293-contains",
        "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767294-contains",
        "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767289-allsatisfy",
        "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767298-first",
        "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767307-min",
        "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767305-max",
        "doc://com.apple.documentation/documentation/foundation/url/asyncbytes/3767306-max"
      ],
      "title": "Finding Elements"
    }
  ],
  "variants": [
    {
      "paths": [
        "documentation/foundation/url/asyncbytes/3767308-min"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
