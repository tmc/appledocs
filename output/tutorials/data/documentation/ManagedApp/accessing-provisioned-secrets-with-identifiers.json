{
  "abstract": [
    {
      "text": "Specify the secrets your app requires for device management features, receive secrets from MDM servers and use secrets in your app.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.managedapp/documentation/ManagedApp"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "occ",
    "url": "doc://com.apple.managedapp/documentation/ManagedApp/accessing-provisioned-secrets-with-identifiers"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "ManagedApp"
      }
    ],
    "platforms": [
      {
        "beta": true,
        "introducedAt": "18.4",
        "name": "iOS"
      },
      {
        "beta": true,
        "introducedAt": "18.4",
        "name": "iPadOS"
      },
      {
        "beta": true,
        "introducedAt": "2.4",
        "name": "visionOS"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Accessing provisioned secrets with identifiers"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Some device management features rely on ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "secrets",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ", that is, secure credentials provisioned by an administrator (MDM admin) for your app, such as passwords, certificates, and identities. Secrets can support:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Automatically logging in a person",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Cryptographic signing",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Certificate pinning to improve trust evaluation of servers and signatures",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Your app accesses secrets by their identifier using the framework supplied secret ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "provider",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " classes. Each provider offers a list of identifiers that catalogs all the currently available secrets, of a particular type, that an MDM admin provisions. You can access secrets using predefined identifiers, or identifiers that you add to your app’s configuration.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The provider’s list of identifiers is an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncSequence",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". If your app requires notification when the available secrets change, or if your app supports dynamic lists of secrets, iterate the sequence for the lifetime of the app using ",
              "type": "text"
            },
            {
              "code": "for await",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Specify-the-secrets-your-app-supports",
          "level": 2,
          "text": "Specify the secrets your app supports",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To implement features with secrets, identify the provisions that you require from MDM admins. Publish a specification that details the requirements in a location accessible to MDM admins; for example, hosting it on your app website.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "If your app also defines a configuration specification for general information, you can add your secrets requirements to the same document. For more information about general configuration, see ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.managedapp/documentation/ManagedApp/specifying-and-decoding-a-configuration",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "When an admin provisions secrets on their MDM server according to your specification, they use ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/DeviceManagement",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". The device’s operating system works with ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/DeviceManagement",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to ingest the secrets on the device. From the perspective of your app, ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.managedapp/documentation/ManagedApp",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " receives the secrets automatically.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Retrieve-secrets-using-a-known-identifier",
          "level": 2,
          "text": "Retrieve secrets using a known identifier",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The framework defines a provider class for each type of secret:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "ManagedAppPasswordsProvider",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "ManagedAppCertificatesProvider",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "ManagedAppIdentitiesProvider",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "A provider contains:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "An accessor that returns secrets by ID",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "A list of identifiers that contains all of the currently available secrets",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The following code acquires a password using the ",
              "type": "text"
            },
            {
              "code": "ManagedAppPasswordsProvider/password(withIdentifier:)",
              "type": "codeVoice"
            },
            {
              "text": " accessor with a predefined identifier:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let loginPasswordIdentifier = \"mainLoginPassword\"",
            "let loginPassword: String?",
            "do { /* Attempt to look up the login password. */",
            "    loginPassword = try await passwordsProvider.password(",
            "        withIdentifier: loginPasswordIdentifier)",
            "} catch {",
            "    // Handle the password-lookup error.",
            "    loginPassword = nil",
            "}",
            "// Use the password."
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Another task that often uses known identifiers is responding to client certificate authentication challenges. The following example responds to a client certificate challenge within the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/foundation/urlsessiondelegate",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " callback, and requests an identity using the ",
              "type": "text"
            },
            {
              "code": "ManagedAppIdentitiesProvider",
              "type": "codeVoice"
            },
            {
              "text": " accessor:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "public func urlSession(_ session: URLSession, ",
            "            didReceive challenge: URLAuthenticationChallenge) ",
            "                async -> (URLSession.AuthChallengeDisposition, ",
            "                          URLCredential?) {",
            "    switch challenge.protectionSpace.authenticationMethod {",
            "    case NSURLAuthenticationMethodClientCertificate:",
            "        // Look up the identity. ",
            "        guard let identity = try? await identitiesProvider.identity(",
            "                withIdentifier: identityIdentifier) else {",
            "            return (.cancelAuthenticationChallenge, nil)",
            "        }",
            "        // Use the identity to authenticate.",
            "        return (.useCredential, URLCredential(identity: identity, ",
            "                                          certificates: nil, ",
            "                                           persistence: .forSession))",
            "    case NSURLAuthenticationMethodServerTrust:",
            "        // Perform server trust evaluation.",
            "        break;",
            "    default:",
            "        return (.performDefaultHandling, nil)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "For security reasons, only request a secret from the framework when your app needs it immediately. This minimizes the amount of time that the secret is in your app’s memory. Avoid logging sensitive information such as passwords or private-key data.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "anchor": "Retrieve-secrets-using-the-providers-identifiers-sequence",
          "level": 2,
          "text": "Retrieve secrets using the provider’s identifiers sequence",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If your app needs a notification when the available secrets change, or if your app maintains dynamic lists of secrets, use the provider’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncSequence",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".  Use a ",
              "type": "text"
            },
            {
              "code": "for await",
              "type": "codeVoice"
            },
            {
              "text": " construct on the provider’s ",
              "type": "text"
            },
            {
              "code": "identifiers",
              "type": "codeVoice"
            },
            {
              "text": " property to listen for changes. The following example builds a list of available usernames by iterating the  ",
              "type": "text"
            },
            {
              "code": "ManagedAppIdentitiesProvider",
              "type": "codeVoice"
            },
            {
              "text": " sequence:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let accountUsernameIdentifierPrefix = \"User:\"",
            "Task {",
            "    var accountUsernames: [String] = []",
            "    let identitiesProvider = ManagedAppIdentitiesProvider()",
            "    for await identityIdentifiers in await identitiesProvider.identifiers {",
            "        accountUsernames = identityIdentifiers.filter { ",
            "            $0.hasPrefix(accountUsernameIdentifierPrefix) ",
            "        }.map { String($0.dropFirst(accountUsernameIdentifierPrefix.count)) }",
            "        // Update the UI to list the available accounts.",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Instead of predefining identifiers, you can add identifiers to your configuration specification so the identifiers are flexible and MDM admins can configure them. For more information, see ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.managedapp/documentation/ManagedApp/specifying-and-decoding-a-configuration",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Access-an-identity-for-authentication-or-signing",
          "level": 2,
          "text": "Access an identity for authentication or signing",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To log someone in, an app needs to authenticate with a server. To acquire the person’s identity to authenticate, pass the person’s username as the identifier argument of the identity provider’s accessor, for example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@ObservationIgnored let idsProvider = ManagedAppIdentitiesProvider()",
            "let identityID = selectedUsername",
            "...",
            "let identity: SecIdentity",
            "do { /* Access the identity. */",
            "    identity = try await idsProvider.identity( ",
            "        withIdentifier: identityID)",
            "} catch {",
            "    // Handle identity-lookup error.",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, your app can use the identity for cryptographic signing. Because ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Security/SecIdentity",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " is in the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Security",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " framework, you can create a cryptographic signature using other ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Security",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " framework API. The following code begins a signature by acquiring a reference to the identity’s private key:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Access the private key. ",
            "var privateKey: SecKey? = nil",
            "SecIdentityCopyPrivateKey(identity, &privateKey)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Security/SecKey",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " object is an opaque reference to the underlying private key data that’s in system memory. Don’t load actual private key data in your app’s memory unless absolutely necessary; for example, when using the  ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Security/SecKeyCopyExternalRepresentation(_:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "While choosing the signing algorithm, call ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Security/SecKeyIsAlgorithmSupported(_:_:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to ensure the admin-provisioned key supports the algorithm:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Choose signing algorithm. ",
            "let algorithm: SecKeyAlgorithm = isRSAKey(secKey: privateKey) ? .rsaSignatureMessagePKCS1v15SHA256 : .ecdsaSignatureMessageX962SHA256",
            "guard SecKeyIsAlgorithmSupported(privateKey, .sign, algorithm) else {",
            "    // Handle incompatible algorithm.",
            "    return",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To facilitate compatibility, document the algorithms and associated key types your app supports in your specification.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, create the signature:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Perform the signing operation.",
            "let message = Data(\"This is a secret message.\".utf8) ",
            "let signature = SecKeyCreateSignature(privateKey, algorithm, message as CFData, &error)",
            "// Use the signature."
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/DeviceManagement": {
      "abstract": [
        {
          "text": "Manage your organization’s devices remotely.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/DeviceManagement",
      "kind": "symbol",
      "role": "collection",
      "title": "Device Management",
      "type": "topic",
      "url": "/documentation/DeviceManagement"
    },
    "doc://com.apple.documentation/documentation/Security": {
      "abstract": [
        {
          "text": "Secure the data your app manages, and control access to your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Security",
      "kind": "symbol",
      "role": "collection",
      "title": "Security",
      "type": "topic",
      "url": "/documentation/Security"
    },
    "doc://com.apple.documentation/documentation/Security/SecIdentity": {
      "abstract": [
        {
          "text": "An abstract Core Foundation-type object representing an identity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SecIdentity"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Security/SecIdentity",
      "kind": "symbol",
      "role": "symbol",
      "title": "SecIdentity",
      "type": "topic",
      "url": "/documentation/Security/SecIdentity"
    },
    "doc://com.apple.documentation/documentation/Security/SecKey": {
      "abstract": [
        {
          "text": "An object that represents a cryptographic key.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SecKey"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Security/SecKey",
      "kind": "symbol",
      "role": "symbol",
      "title": "SecKey",
      "type": "topic",
      "url": "/documentation/Security/SecKey"
    },
    "doc://com.apple.documentation/documentation/Security/SecKeyCopyExternalRepresentation(_:_:)": {
      "abstract": [
        {
          "text": "Returns an external representation of the given key suitable for the key’s type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SecKeyCopyExternalRepresentation"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "key"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@SecKeyRef",
          "text": "SecKey"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "error"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sp",
          "text": "UnsafeMutablePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s9UnmanagedV",
          "text": "Unmanaged"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@CFErrorRef",
          "text": "CFError"
        },
        {
          "kind": "text",
          "text": ">?>?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@CFDataRef",
          "text": "CFData"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Security/SecKeyCopyExternalRepresentation(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "SecKeyCopyExternalRepresentation(_:_:)",
      "type": "topic",
      "url": "/documentation/Security/SecKeyCopyExternalRepresentation(_:_:)"
    },
    "doc://com.apple.documentation/documentation/Security/SecKeyIsAlgorithmSupported(_:_:_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean indicating whether a key is suitable for an operation using a certain algorithm.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SecKeyIsAlgorithmSupported"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "key"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@SecKeyRef",
          "text": "SecKey"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "operation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@SecKeyOperationType",
          "text": "SecKeyOperationType"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "algorithm"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@SecKeyAlgorithm",
          "text": "SecKeyAlgorithm"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Security/SecKeyIsAlgorithmSupported(_:_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "SecKeyIsAlgorithmSupported(_:_:_:)",
      "type": "topic",
      "url": "/documentation/Security/SecKeyIsAlgorithmSupported(_:_:_:)"
    },
    "doc://com.apple.documentation/documentation/Swift/AsyncSequence": {
      "abstract": [
        {
          "text": "A type that provides asynchronous, sequential, iterated access to its elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7FailureQa",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncSequence",
      "kind": "symbol",
      "role": "symbol",
      "title": "AsyncSequence",
      "type": "topic",
      "url": "/documentation/Swift/AsyncSequence"
    },
    "doc://com.apple.documentation/documentation/foundation/urlsessiondelegate": {
      "abstract": [
        {
          "text": "A protocol that defines methods that URL session instances call on their delegates to handle session-level events, like session life cycle changes. ",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "protocol "
        },
        {
          "kind": "identifier",
          "text": "URLSessionDelegate"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/urlsessiondelegate",
      "kind": "symbol",
      "role": "symbol",
      "title": "URLSessionDelegate",
      "type": "topic",
      "url": "/documentation/foundation/urlsessiondelegate"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.managedapp/documentation/ManagedApp": {
      "abstract": [
        {
          "text": "Customize your app for managed deployments by providing configurable features that rely on secure access to secrets and data that an administrator provisions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.managedapp/documentation/ManagedApp",
      "kind": "symbol",
      "role": "collection",
      "title": "ManagedApp",
      "type": "topic",
      "url": "/documentation/managedapp"
    },
    "doc://com.apple.managedapp/documentation/ManagedApp/specifying-and-decoding-a-configuration": {
      "abstract": [
        {
          "text": "Publish a configuration specification and implement a decoder that parses and validates configuration provided by an MDM admin.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.managedapp/documentation/ManagedApp/specifying-and-decoding-a-configuration",
      "kind": "article",
      "role": "article",
      "title": "Specifying and decoding a configuration",
      "type": "topic",
      "url": "/documentation/managedapp/specifying-and-decoding-a-configuration"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Security~1SecKey/title",
          "value": "SecKeyRef"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Security~1SecKey/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "typedef"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@S@__SecKey",
              "text": "__SecKey"
            },
            {
              "kind": "text",
              "text": " * "
            },
            {
              "kind": "identifier",
              "text": "SecKeyRef"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Security~1SecIdentity/title",
          "value": "SecIdentityRef"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Security~1SecIdentity/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "typedef"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@S@__SecIdentity",
              "text": "__SecIdentity"
            },
            {
              "kind": "text",
              "text": " * "
            },
            {
              "kind": "identifier",
              "text": "SecIdentityRef"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Security~1SecKeyCopyExternalRepresentation(_:_:)/title",
          "value": "SecKeyCopyExternalRepresentation"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Security~1SecKeyCopyExternalRepresentation(_:_:)/fragments",
          "value": [
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@CFDataRef",
              "text": "CFDataRef"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "SecKeyCopyExternalRepresentation"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@SecKeyRef",
              "text": "SecKeyRef"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "key"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@CFErrorRef",
              "text": "CFErrorRef"
            },
            {
              "kind": "text",
              "text": " * "
            },
            {
              "kind": "internalParam",
              "text": "error"
            },
            {
              "kind": "text",
              "text": ");"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Security~1SecKeyIsAlgorithmSupported(_:_:_:)/title",
          "value": "SecKeyIsAlgorithmSupported"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Security~1SecKeyIsAlgorithmSupported(_:_:_:)/fragments",
          "value": [
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@Boolean",
              "text": "Boolean"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "SecKeyIsAlgorithmSupported"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@SecKeyRef",
              "text": "SecKeyRef"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "key"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@E@SecKeyOperationType",
              "text": "SecKeyOperationType"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "operation"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@SecKeyAlgorithm",
              "text": "SecKeyAlgorithm"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "algorithm"
            },
            {
              "kind": "text",
              "text": ");"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1foundation~1urlsessiondelegate/title",
          "value": "NSURLSessionDelegate"
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/managedapp/accessing-provisioned-secrets-with-identifiers"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
