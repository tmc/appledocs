{
  "abstract": [
    {
      "text": "Retrieve information from a QuickTime VR node with QuickTime atom container functions.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.qtff/documentation/quicktime-file-format",
        "doc://com.apple.qtff/documentation/QuickTime-File-Format/Deprecated_atoms",
        "doc://com.apple.qtff/documentation/QuickTime-File-Format/QuickTime_VR_file_format"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.qtff/documentation/QuickTime-File-Format/Getting_the_name_of_a_QuickTime_VR_node"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "QuickTime File Format"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Getting the name of a QuickTime VR node"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can use standard QuickTime atom container functions to retrieve the information in a QuickTime VR node header atom. For example, the ",
              "type": "text"
            },
            {
              "code": "MyGetNodeName",
              "type": "codeVoice"
            },
            {
              "text": " function defined in the following listing returns the name of a node, given its node ID.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "OSErr MyGetNodeName (QTVRInstance theInstance, UInt32 theNodeID,",
            "                                                                 StringPtr  theStringPtr)",
            "{",
            "    OSErr                   theErr = noErr;",
            "    QTAtomContainer         theNodeInfo;",
            "    QTVRNodeHeaderAtomPtr   theNodeHeader;",
            "    QTAtom                  theNodeHeaderAtom = 0;",
            " ",
            "    //Get the node information atom container.",
            "    theErr = QTVRGetNodeInfo(theInstance, theNodeID, &theNodeInfo);",
            " ",
            "    //Get the node header atom.",
            "    if (!theErr)",
            "        theNodeHeaderAtom = QTFindChildByID(theNodeInfo, kParentAtomIsContainer,",
            "                                                    kQTVRNodeHeaderAtomType,  1,  nil);",
            "    if (theNodeHeaderAtom != 0) {",
            "        QTLockContainer(theNodeInfo);",
            " ",
            "        //Get a pointer to the node header atom data.",
            "        theErr = QTGetAtomDataPtr(theNodeInfo, theNodeHeaderAtom,  nil,",
            "                                                            (Ptr  *)&theNodeHeader);",
            "        //See if there is a name atom.",
            "        if (!theErr && theNodeHeader->nameAtomID != 0)  {",
            "            QTAtom theNameAtom;",
            "            theNameAtom = QTFindChildByID(theNodeInfo, kParentAtomIsContainer,",
            "                                kQTVRStringAtomType, theNodeHeader->nameAtomID,  nil);",
            "            if (theNameAtom != 0) {",
            "                VRStringAtomPtr theStringAtomPtr;",
            " ",
            "                //Get a pointer to the name atom data; copy it into  the string.",
            "                theErr = QTGetAtomDataPtr(theNodeInfo, theNameAtom,  nil,",
            "                                                            (Ptr  *)&theStringAtomPtr);",
            "                if (!theErr) {",
            "                    short theLen = theStringAtomPtr->stringLength;",
            "                    if (theLen > 255)",
            "                        theLen = 255;",
            "                    BlockMove(theStringAtomPtr->string, &theStringPtr[1],  theLen);",
            "                    theStringPtr[0] = theLen;",
            "                }",
            "            }",
            "        }",
            "        QTUnlockContainer(theNodeInfo);",
            "    }",
            " ",
            "    QTDisposeAtomContainer(theNodeInfo);",
            "    return(theErr);",
            "}"
          ],
          "syntax": "c",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "MyGetNodeName",
              "type": "codeVoice"
            },
            {
              "text": " function defined in the preceeding listing retrieves the node information atom container (by calling ",
              "type": "text"
            },
            {
              "code": "QTVRGetNodeInfo",
              "type": "codeVoice"
            },
            {
              "text": ") and then looks inside that container for the node header atom with atom ID ",
              "type": "text"
            },
            {
              "code": "1",
              "type": "codeVoice"
            },
            {
              "text": ". If it finds one, it locks the container and then gets a pointer to the node header atom data. The desired information, the node name, is contained in the string atom whose atom ID is specified by the ",
              "type": "text"
            },
            {
              "code": "nameAtomID",
              "type": "codeVoice"
            },
            {
              "text": " field of the node header structure. Accordingly, the ",
              "type": "text"
            },
            {
              "code": "MyGetNodeName",
              "type": "codeVoice"
            },
            {
              "text": " function then calls ",
              "type": "text"
            },
            {
              "code": "QTFindChildByID",
              "type": "codeVoice"
            },
            {
              "text": " once again to find that string atom. If the string atom is found, ",
              "type": "text"
            },
            {
              "code": "MyGetNodeName",
              "type": "codeVoice"
            },
            {
              "text": " calls ",
              "type": "text"
            },
            {
              "code": "QTGetAtomDataPtr",
              "type": "codeVoice"
            },
            {
              "text": " to get a pointer to the string atom data. Finally, ",
              "type": "text"
            },
            {
              "code": "MyGetNodeName",
              "type": "codeVoice"
            },
            {
              "text": " copies the string data into the appropriate location and cleans up after itself before returning.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.qtff/documentation/QuickTime-File-Format/Adding_atom_containers_in_a_QuickTime_VR_Movie": {
      "abstract": [
        {
          "text": "Add node information to your QuickTime VR world.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/QuickTime-File-Format/Adding_atom_containers_in_a_QuickTime_VR_Movie",
      "kind": "article",
      "role": "article",
      "title": "Adding atom containers in a QuickTime VR Movie",
      "type": "topic",
      "url": "/documentation/quicktime-file-format/adding_atom_containers_in_a_quicktime_vr_movie"
    },
    "doc://com.apple.qtff/documentation/QuickTime-File-Format/Adding_custom_atoms_in_a_QuickTime_VR_movie": {
      "abstract": [
        {
          "text": "Provide additional information about a QuickTime VR movie using custom atoms.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/QuickTime-File-Format/Adding_custom_atoms_in_a_QuickTime_VR_movie",
      "kind": "article",
      "role": "article",
      "title": "Adding custom atoms in a QuickTime VR movie",
      "type": "topic",
      "url": "/documentation/quicktime-file-format/adding_custom_atoms_in_a_quicktime_vr_movie"
    },
    "doc://com.apple.qtff/documentation/QuickTime-File-Format/Deprecated_atoms": {
      "abstract": [
        {
          "text": "Review unsupported atoms.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/QuickTime-File-Format/Deprecated_atoms",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Deprecated atoms",
      "type": "topic",
      "url": "/documentation/quicktime-file-format/deprecated_atoms"
    },
    "doc://com.apple.qtff/documentation/QuickTime-File-Format/Multinode_movies": {
      "abstract": [
        {
          "text": "Store any number of object and panoramic nodes in a multinode QuickTime VR movie.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/QuickTime-File-Format/Multinode_movies",
      "kind": "article",
      "role": "article",
      "title": "Multinode movies",
      "type": "topic",
      "url": "/documentation/quicktime-file-format/multinode_movies"
    },
    "doc://com.apple.qtff/documentation/QuickTime-File-Format/Optimizing_QuickTime_VR_movies_for_web_playback": {
      "abstract": [
        {
          "text": "Prevent having to download an entire movie before starting playback.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/QuickTime-File-Format/Optimizing_QuickTime_VR_movies_for_web_playback",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Optimizing QuickTime VR movies for web playback",
      "type": "topic",
      "url": "/documentation/quicktime-file-format/optimizing_quicktime_vr_movies_for_web_playback"
    },
    "doc://com.apple.qtff/documentation/QuickTime-File-Format/QuickTime_VR_file_format": {
      "abstract": [
        {
          "text": "A file format used to store a QuickTime VR movie on disk.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/QuickTime-File-Format/QuickTime_VR_file_format",
      "kind": "article",
      "role": "collectionGroup",
      "title": "QuickTime VR file format",
      "type": "topic",
      "url": "/documentation/quicktime-file-format/quicktime_vr_file_format"
    },
    "doc://com.apple.qtff/documentation/QuickTime-File-Format/Single-node_object_movies": {
      "abstract": [
        {
          "text": "Store a QTVR track, an object track, and an object image track in a single-node object movie.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/QuickTime-File-Format/Single-node_object_movies",
      "kind": "article",
      "role": "article",
      "title": "Single-node object movies",
      "type": "topic",
      "url": "/documentation/quicktime-file-format/single-node_object_movies"
    },
    "doc://com.apple.qtff/documentation/QuickTime-File-Format/Single-node_panoramic_movies": {
      "abstract": [
        {
          "text": "Store a QTVR track, a panorama track, and a panorama image track in a single-node panoramic movie.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/QuickTime-File-Format/Single-node_panoramic_movies",
      "kind": "article",
      "role": "article",
      "title": "Single-node panoramic movies",
      "type": "topic",
      "url": "/documentation/quicktime-file-format/single-node_panoramic_movies"
    },
    "doc://com.apple.qtff/documentation/quicktime-file-format": {
      "abstract": [
        {
          "text": "An object-oriented file format for the storage and exchange of digital media between devices, applications, and operating systems.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.qtff/documentation/quicktime-file-format",
      "kind": "symbol",
      "role": "collection",
      "title": "QuickTime File Format",
      "type": "topic",
      "url": "/documentation/quicktime-file-format"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Storing-QuickTime-VR-files",
      "generated": true,
      "identifiers": [
        "doc://com.apple.qtff/documentation/QuickTime-File-Format/Single-node_panoramic_movies",
        "doc://com.apple.qtff/documentation/QuickTime-File-Format/Single-node_object_movies",
        "doc://com.apple.qtff/documentation/QuickTime-File-Format/Multinode_movies",
        "doc://com.apple.qtff/documentation/QuickTime-File-Format/Adding_custom_atoms_in_a_QuickTime_VR_movie",
        "doc://com.apple.qtff/documentation/QuickTime-File-Format/Adding_atom_containers_in_a_QuickTime_VR_Movie",
        "doc://com.apple.qtff/documentation/QuickTime-File-Format/Optimizing_QuickTime_VR_movies_for_web_playback"
      ],
      "title": "Storing QuickTime VR files"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/quicktime-file-format/getting_the_name_of_a_quicktime_vr_node"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
