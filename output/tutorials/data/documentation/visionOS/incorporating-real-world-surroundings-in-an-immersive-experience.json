{
  "abstract": [
    {
      "text": "Create an immersive experience by making your app’s content respond to the local shape of the world.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.visionOS/documentation/visionOS"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.visionOS/documentation/visionOS/incorporating-real-world-surroundings-in-an-immersive-experience"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "platforms": [
      {
        "beta": false,
        "introducedAt": "1.0",
        "name": "visionOS"
      },
      {
        "beta": false,
        "introducedAt": "15.1",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Incorporating real-world surroundings in an immersive experience"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Scene reconstruction helps bridge the gap between the rendered 3D content in your app and the person’s surroundings. Use scene reconstruction in ARKit to give your app an idea of the shape of the person’s surroundings and to bring your app experience into their world. Immersive experiences  — those that use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/mixed",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " space style — are best positioned to incorporate this kind of contextual information: scene reconstruction is only available in spaces and isn’t as relevant for the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/full",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " space style.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In addition to providing a 3D mesh of the shape of different nearby objects, ARKit gives a classification to each mesh face it detects. For example, it might classify a face of a mesh as being part of an appliance, a piece of furniture, or structural information about the room like the position of walls and floors. The following video shows virtual cubes colliding with the scene reconstruction mesh, which makes the cubes appear to land on a table:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "identifier": "visionos-spatial-gesture-direct.mp4",
          "type": "video"
        },
        {
          "anchor": "Configure-a-scene-reconstruction-session",
          "level": 3,
          "text": "Configure a scene reconstruction session",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Scene reconstruction requires the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/ARKit/ARKitSession/AuthorizationType/worldSensing",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " authorization type and corresponding usage description that you supply in your app’s ",
              "type": "text"
            },
            {
              "code": "Info.plist",
              "type": "codeVoice"
            },
            {
              "text": " file. The following starts a session and processes updates as ARKit refines its reconstruction of the person’s surroundings:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "RealityView { content in",
            "    content.add(model.setupContentEntity())",
            "}",
            ".task {",
            "    do {",
            "        if model.dataProvidersAreSupported && model.isReadyToRun {",
            "            try await model.session.run([model.sceneReconstruction, model.handTracking])",
            "        } else {",
            "            await dismissImmersiveSpace()",
            "        }",
            "    } catch {",
            "        logger.error(\"Failed to start session: \\(error)\")",
            "        await dismissImmersiveSpace()",
            "        openWindow(id: \"error\")",
            "    }",
            "}",
            ".task {",
            "    await model.processHandUpdates()",
            "}",
            ".task {",
            "    await model.monitorSessionEvents()",
            "}",
            ".task(priority: .low) {",
            "    await model.processReconstructionUpdates()",
            "}",
            ".gesture(SpatialTapGesture().targetedToAnyEntity().onEnded { value in",
            "    let location3D = value.convert(value.location3D, from: .global, to: .scene)",
            "    model.addCube(tapLocation: location3D)",
            "})"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Add-real-world-interactivity-using-collision-components",
          "level": 3,
          "text": "Add real-world interactivity using collision components",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can make rendered 3D content more lifelike by having it appear to interact physically with objects in the person’s surroundings, like furniture and floors. Use RealityKit’s collision components and physics support to provide these interactions in your app. The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/ShapeResource/generateStaticMesh(from:)-693dx",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method bridges between scene reconstruction and RealityKit’s physics simulation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Be mindful of how much content you include in immersive scenes that use the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/mixed",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " style. Content that fills a significant portion of the screen, even if that content is partially transparent, can prevent the person from seeing potential hazards in their surroundings. If you want to immerse the person in your content, configure your space with the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/full",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " style. For more information, see ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.visionOS/documentation/visionOS/creating-fully-immersive-experiences",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Warning",
          "style": "warning",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "Use low-priority tasks to generate meshes, because generating them is a computationally expensive operation. The following creates a mesh entity with collision shapes using scene reconstruction:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func processReconstructionUpdates() async {",
            "    for await update in sceneReconstruction.anchorUpdates {",
            "        let meshAnchor = update.anchor",
            "",
            "        guard let shape = try? await ShapeResource.generateStaticMesh(from: meshAnchor) else { continue }",
            "        switch update.event {",
            "        case .added:",
            "            let entity = ModelEntity()",
            "            entity.transform = Transform(matrix: meshAnchor.originFromAnchorTransform)",
            "            entity.collision = CollisionComponent(shapes: [shape], isStatic: true)",
            "            entity.components.set(InputTargetComponent())",
            "            ",
            "            entity.physicsBody = PhysicsBodyComponent(mode: .static)",
            "            ",
            "            meshEntities[meshAnchor.id] = entity",
            "            contentEntity.addChild(entity)",
            "        case .updated:",
            "            guard let entity = meshEntities[meshAnchor.id] else { continue }",
            "            entity.transform = Transform(matrix: meshAnchor.originFromAnchorTransform)",
            "            entity.collision?.shapes = [shape]",
            "        case .removed:",
            "            meshEntities[meshAnchor.id]?.removeFromParent()",
            "            meshEntities.removeValue(forKey: meshAnchor.id)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Scene reconstruction meshes only support the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/RealityKit/PhysicsBodyMode/static",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " physics body component mode.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "Each object in the scene reconstruction mesh updates its ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/ARKit/MeshAnchor/originFromAnchorTransform",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " information independently and requires a separate static mesh because ARKit subdivides its representation of the world into multiple, distinct sections.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Display-scene-reconstruction-meshes-during-debugging",
          "level": 3,
          "text": "Display scene reconstruction meshes during debugging",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "People using an app that leverages scene reconstruction typically don’t need to see a visual rendering of the scene reconstruction mesh. The system already shows passthrough video in an immersive experience. However, temporarily displaying the scene reconstruction mesh can help while you’re developing and debugging your app. In Xcode’s debugging toolbar, click the Enable Visualizations button and select Collision Shapes. Because each element of the scene reconstruction mesh has a collision component, the details of the mesh appear in the debug visualization. For more information, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Xcode/diagnosing-issues-in-the-appearance-of-your-running-app",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "04a6ee5b7e6f/SceneReconstructionExample.zip": {
      "checksum": "04a6ee5b7e6f05beda4078c90768fc6432d9cab17f9e4caa44cf33020b467b86628171936b913db64c8076e224b0a42c6b9cb9cecddb5a3d679beba682039f0d",
      "identifier": "04a6ee5b7e6f/SceneReconstructionExample.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/04a6ee5b7e6f/SceneReconstructionExample.zip"
    },
    "Building-local-experiences-with-room-tracking-PageImage-card.png": {
      "alt": "A view into the corner of a room with an open doorway, where one wall is a portal to a virtual universe.",
      "identifier": "Building-local-experiences-with-room-tracking-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/ecb2f88d37f7bba036c739568409febf/Building-local-experiences-with-room-tracking-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/af99ba5e2e307907caed07d89553f518/Building-local-experiences-with-room-tracking-PageImage-card~dark@2x.png"
        }
      ]
    },
    "Happy-Beam-intro.png": {
      "alt": "A screenshot showing the Happy Beam game. A player makes a heart gesture with their hands, a beam projects from it aimed at nearby clouds, and a scoreboard window shows seven points.",
      "identifier": "Happy-Beam-intro.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/52b497b6d705af322726d7371dee6ddd/Happy-Beam-intro@2x.png"
        }
      ]
    },
    "Object-Tracking-PageImage-card.png": {
      "alt": "An image of a room with several rectangular tiers on which glowing and textured, reflective spheres rest.",
      "identifier": "Object-Tracking-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/dfd3696d1b7df884ded8407cef3e8045/Object-Tracking-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/2332d74827799a86de0261e14c5a61f5/Object-Tracking-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/ARKit/ARKitSession/AuthorizationType/worldSensing": {
      "abstract": [
        {
          "text": "The authorization for access to plane detection, scene reconstruction, and image tracking.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "worldSensing"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/ARKit/ARKitSession/AuthorizationType/worldSensing",
      "kind": "symbol",
      "role": "symbol",
      "title": "ARKitSession.AuthorizationType.worldSensing",
      "type": "topic",
      "url": "/documentation/ARKit/ARKitSession/AuthorizationType/worldSensing"
    },
    "doc://com.apple.documentation/documentation/ARKit/MeshAnchor/originFromAnchorTransform": {
      "abstract": [
        {
          "text": "The location and orientation of a mesh in world space.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "originFromAnchorTransform"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@simd_float4x4",
          "text": "simd_float4x4"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/ARKit/MeshAnchor/originFromAnchorTransform",
      "kind": "symbol",
      "role": "symbol",
      "title": "originFromAnchorTransform",
      "type": "topic",
      "url": "/documentation/ARKit/MeshAnchor/originFromAnchorTransform"
    },
    "doc://com.apple.documentation/documentation/RealityKit/PhysicsBodyMode/static": {
      "abstract": [
        {
          "text": "The body never moves.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "`static`"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit/PhysicsBodyMode/static",
      "kind": "symbol",
      "role": "symbol",
      "title": "PhysicsBodyMode.static",
      "type": "topic",
      "url": "/documentation/RealityKit/PhysicsBodyMode/static"
    },
    "doc://com.apple.documentation/documentation/RealityKit/ShapeResource/generateStaticMesh(from:)-693dx": {
      "abstract": [
        {
          "text": "Creates a mesh-based collision shape derived from an ARKit scene-understanding mesh anchor.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "nonisolated"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "generateStaticMesh"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "meshAnchor"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:5ARKit10MeshAnchorV",
          "text": "MeshAnchor"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation13ShapeResourceC",
          "text": "ShapeResource"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit/ShapeResource/generateStaticMesh(from:)-693dx",
      "kind": "symbol",
      "role": "symbol",
      "title": "generateStaticMesh(from:)",
      "type": "topic",
      "url": "/documentation/RealityKit/ShapeResource/generateStaticMesh(from:)-693dx"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/full": {
      "abstract": [
        {
          "text": "An immersion style that displays unbounded content that completely replaces passthrough video.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "full"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI18FullImmersionStyleV",
          "text": "FullImmersionStyle"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/full",
      "kind": "symbol",
      "role": "symbol",
      "title": "full",
      "type": "topic",
      "url": "/documentation/SwiftUI/ImmersionStyle/full"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/mixed": {
      "abstract": [
        {
          "text": "An immersion style that displays unbounded content intermixed with other app content, along with passthrough video.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "mixed"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI19MixedImmersionStyleV",
          "text": "MixedImmersionStyle"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/mixed",
      "kind": "symbol",
      "role": "symbol",
      "title": "mixed",
      "type": "topic",
      "url": "/documentation/SwiftUI/ImmersionStyle/mixed"
    },
    "doc://com.apple.documentation/documentation/Xcode/diagnosing-issues-in-the-appearance-of-your-running-app": {
      "abstract": [
        {
          "text": "Inspect your running app to investigate issues in the appearance and placement of the content it displays.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Xcode/diagnosing-issues-in-the-appearance-of-your-running-app",
      "kind": "article",
      "role": "article",
      "title": "Diagnosing issues in the appearance of a running app",
      "type": "topic",
      "url": "/documentation/Xcode/diagnosing-issues-in-the-appearance-of-your-running-app"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.visionOS/documentation/visionOS": {
      "abstract": [
        {
          "text": "Create a new universe of apps and games for Apple Vision Pro.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS",
      "images": [
        {
          "identifier": "headset-orange.svg",
          "type": "icon"
        },
        {
          "identifier": "visionOS-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "collection",
      "title": "visionOS",
      "type": "topic",
      "url": "/documentation/visionos"
    },
    "doc://com.apple.visionOS/documentation/visionOS/building_local_experiences_with_room_tracking": {
      "abstract": [
        {
          "text": "Use room tracking in visionOS to provide custom interactions with physical spaces.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/building_local_experiences_with_room_tracking",
      "images": [
        {
          "identifier": "Building-local-experiences-with-room-tracking-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "sampleCode",
      "title": "Building local experiences with room tracking",
      "type": "topic",
      "url": "/documentation/visionos/building_local_experiences_with_room_tracking"
    },
    "doc://com.apple.visionOS/documentation/visionOS/creating-fully-immersive-experiences": {
      "abstract": [
        {
          "text": "Build fully immersive experiences by combining spaces with",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "content you create using RealityKit or Metal.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/creating-fully-immersive-experiences",
      "kind": "article",
      "role": "article",
      "title": "Creating fully immersive experiences in your app",
      "type": "topic",
      "url": "/documentation/visionos/creating-fully-immersive-experiences"
    },
    "doc://com.apple.visionOS/documentation/visionOS/exploring_object_tracking_with_arkit": {
      "abstract": [
        {
          "text": "Find and track real-world objects in visionOS using reference objects trained with Create ML.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/exploring_object_tracking_with_arkit",
      "images": [
        {
          "identifier": "Object-Tracking-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "sampleCode",
      "title": "Exploring object tracking with ARKit",
      "type": "topic",
      "url": "/documentation/visionos/exploring_object_tracking_with_arkit"
    },
    "doc://com.apple.visionOS/documentation/visionOS/happybeam": {
      "abstract": [
        {
          "text": "Leverage a Full Space to create a fun game using ARKit.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/happybeam",
      "images": [
        {
          "identifier": "Happy-Beam-intro.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "sampleCode",
      "title": "Happy Beam",
      "type": "topic",
      "url": "/documentation/visionos/happybeam"
    },
    "doc://com.apple.visionOS/documentation/visionOS/object-tracking-with-reality-composer-pro-experiences": {
      "abstract": [
        {
          "text": "Use object tracking in visionOS to attach digital content to real objects to create engaging experiences.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/object-tracking-with-reality-composer-pro-experiences",
      "kind": "article",
      "role": "sampleCode",
      "title": "Object tracking with Reality Composer Pro experiences",
      "type": "topic",
      "url": "/documentation/visionos/object-tracking-with-reality-composer-pro-experiences"
    },
    "doc://com.apple.visionOS/documentation/visionOS/placing-content-on-detected-planes": {
      "abstract": [
        {
          "text": "Detect horizontal surfaces like tables and floors, as well as vertical planes like walls and doors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/placing-content-on-detected-planes",
      "kind": "article",
      "role": "sampleCode",
      "title": "Placing content on detected planes",
      "type": "topic",
      "url": "/documentation/visionos/placing-content-on-detected-planes"
    },
    "doc://com.apple.visionOS/documentation/visionOS/placing-entities-using-head-and-device-transform": {
      "abstract": [
        {
          "text": "Query and react to changes in the position and rotation of Apple Vision Pro.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/placing-entities-using-head-and-device-transform",
      "kind": "article",
      "role": "sampleCode",
      "title": "Placing entities using head and device transform",
      "type": "topic",
      "url": "/documentation/visionos/placing-entities-using-head-and-device-transform"
    },
    "doc://com.apple.visionOS/documentation/visionOS/setting-up-access-to-arkit-data": {
      "abstract": [
        {
          "text": "Check whether your app can use ARKit and respect people’s privacy.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/setting-up-access-to-arkit-data",
      "kind": "article",
      "role": "article",
      "title": "Setting up access to ARKit data",
      "type": "topic",
      "url": "/documentation/visionos/setting-up-access-to-arkit-data"
    },
    "doc://com.apple.visionOS/documentation/visionOS/tracking-images-in-3d-space": {
      "abstract": [
        {
          "text": "Place content based on the current position of a known image in a person’s surroundings.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/tracking-images-in-3d-space",
      "kind": "article",
      "role": "article",
      "title": "Tracking preregistered images in 3D space",
      "type": "topic",
      "url": "/documentation/visionos/tracking-images-in-3d-space"
    },
    "doc://com.apple.visionOS/documentation/visionOS/tracking-points-in-world-space": {
      "abstract": [
        {
          "text": "Retrieve the position and orientation of anchors your app stores in ARKit.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/tracking-points-in-world-space",
      "kind": "article",
      "role": "sampleCode",
      "title": "Tracking specific points in world space",
      "type": "topic",
      "url": "/documentation/visionos/tracking-points-in-world-space"
    },
    "headset-orange.svg": {
      "alt": "An icon representing visionOS.",
      "identifier": "headset-orange.svg",
      "type": "image",
      "variants": [
        {
          "svgID": "a",
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/77dc6a0821bfb2da8db4a3b2033e6f6b/headset-orange.svg"
        }
      ]
    },
    "visionOS-PageImage-card.png": {
      "alt": "A stylized illustration of an Apple Vision Pro with the word 'hello' written across the front in cursive.",
      "identifier": "visionOS-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/90294957b44e5508a55fe39373eea478/visionOS-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/90fe463571fd45badfabacbb07f30591/visionOS-PageImage-card~dark@2x.png"
        }
      ]
    },
    "visionos-spatial-gesture-direct.mp4": {
      "alt": "A recording showing a table with a vertical stack of three virtual cubic blocks on it in visionOS. A person moves their hand toward the blocks from right to left, and their extended fingers touch and push aside the center block. The center block falls to the side, and the other block also tumbles onto the tabletop.",
      "identifier": "visionos-spatial-gesture-direct.mp4",
      "poster": "visionos-spatial-gesture-direct.png",
      "type": "video",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/936efb1057888e3d20b0035cff16a234/visionos-spatial-gesture-direct.mp4"
        }
      ]
    },
    "visionos-spatial-gesture-direct.png": {
      "alt": null,
      "identifier": "visionos-spatial-gesture-direct.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/cc2759963d1dcc824a917aec0d090527/visionos-spatial-gesture-direct@2x.png"
        }
      ]
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "04a6ee5b7e6f/SceneReconstructionExample.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "ARKit",
      "generated": true,
      "identifiers": [
        "doc://com.apple.visionOS/documentation/visionOS/happybeam",
        "doc://com.apple.visionOS/documentation/visionOS/setting-up-access-to-arkit-data",
        "doc://com.apple.visionOS/documentation/visionOS/placing-content-on-detected-planes",
        "doc://com.apple.visionOS/documentation/visionOS/tracking-points-in-world-space",
        "doc://com.apple.visionOS/documentation/visionOS/tracking-images-in-3d-space",
        "doc://com.apple.visionOS/documentation/visionOS/exploring_object_tracking_with_arkit",
        "doc://com.apple.visionOS/documentation/visionOS/object-tracking-with-reality-composer-pro-experiences",
        "doc://com.apple.visionOS/documentation/visionOS/building_local_experiences_with_room_tracking",
        "doc://com.apple.visionOS/documentation/visionOS/placing-entities-using-head-and-device-transform"
      ],
      "title": "ARKit"
    }
  ]
}
