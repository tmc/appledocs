{
  "abstract": [
    {
      "text": "Design scenes for your visionOS app using Reality Composer Pro.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.visionOS/documentation/visionOS"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.visionOS/documentation/visionOS/diorama"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "images": [
      {
        "identifier": "Diorama-intro.png",
        "type": "card"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "2.0",
        "name": "visionOS"
      },
      {
        "beta": false,
        "introducedAt": "16.1",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Diorama"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use Reality Composer Pro to compose, edit, and preview RealityKit content for your visionOS app. In your Reality Composer Pro project, you can create one or more scenes, each of which contains a hierarchy of virtual objects called entities that your app can efficiently load and display.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In addition to helping you compose entity hierarchies, Reality Composer Pro also gives you the ability to add and configure components — even custom components that you’ve written — to the entities in your scenes.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "identifier": "Diorama-overview.mp4",
          "type": "video"
        },
        {
          "inlineContent": [
            {
              "text": "You can also design the visual appearance of entities using ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "Shader Graph",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ", a node-based visual tool for creating RealityKit materials. Shader Graph gives you a tremendous amount of control over the surface details and shape of entities. You can even create animated materials and dynamic materials that change based on the state of your app or user input.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Diorama demonstrates many of RealityKit and Reality Composer Pro’s features. It displays an interactive, virtual topographical trail map, much like the real-world dioramas you find at trailheads and ranger stations in national parks. This virtual map has points of interest you can tap to bring up more detailed information. You can also smoothly transition between two trail maps: Yosemite and Catalina Island.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Import-assets-for-building-the-scene",
          "level": 3,
          "text": "Import assets for building the scene",
          "type": "heading"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Your Reality Composer Pro project must contain assets, which you use to compose scenes for your app. Diorama’s project has several assets, including 3D models like the diorama table, trail map, some birds and clouds that fly over the map, and a number of sounds and images. Reality Composer Pro provides a library of 3D models you can use. Access the library by clicking the Add (+) button on the right side of the toolbar. Selecting objects from the library imports them into your project.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "rcpro-library-cropped.png",
                      "type": "image"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "Diorama uses custom assets instead of the available library assets. To use custom assets in your own Reality Composer Pro scenes, import them into your project in one of three ways: by dragging them to Reality Composer Pro’s project browser, using File > Import from the File menu, or copying the assets into the ",
              "type": "text"
            },
            {
              "code": ".rkassets",
              "type": "codeVoice"
            },
            {
              "text": " bundle inside your project’s Swift package.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "rcpro-assets.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Although you can still load USDZ files and other assets directly in visionOS, RealityKit compiles assets in your Reality Composer Pro project into a binary format that loads considerably faster than loading from individual files.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Create-scenes-containing-the-apps-entities",
          "level": 3,
          "text": "Create scenes containing the app’s entities",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A single Reality Composer Pro project can have multiple scenes. A ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "scene",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " is an entity hierarchy stored in the project as a ",
              "type": "text"
            },
            {
              "code": ".usda",
              "type": "codeVoice"
            },
            {
              "text": " file that you can load and display in a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". You can use Reality Composer’s scenes to build an entire RealityKit scene, or to store reusable entity hierarchies that you can use as building block for composing scenes at runtime — the approach Diorama uses. You can add as many different scenes to your project as you need by selecting File > New > Scene, or pressing ⌘N.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "At the top of the Reality Composer Pro window, there’s a separate tab for every scene that’s currently open. To open a scene, double-click the scene’s ",
              "type": "text"
            },
            {
              "code": ".usda",
              "type": "codeVoice"
            },
            {
              "text": " file in the project browser. To edit a scene, select its tab, and make changes using the hierarchy viewer, the 3D view, and the inspector.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "rcpro-scene-tabs.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Add-assets-to-your-scenes",
          "level": 3,
          "text": "Add assets to your scenes",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "RealityKit can only include entities in a scene, but it can’t use every type of asset that Reality Composer Pro supports as an entity. Reality Composer Pro automatically turns some assets, like 3D models, into an entity when you place them in a scene. It uses other assets indirectly. It uses image files, for example, primarily to define the surface details of model entities.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Diorama uses multiple scenes to group assets together and then, at runtime, combines those scenes into a single immersive experience. For example, the diorama table has its own scene that includes the table, the map surface, and the trail lines. There are separate scenes for the birds that flock over the table, and for the clouds that float above it.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "rcpro-manipulator.png",
                      "type": "image"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "To add entities to a scene, drag assets from the project browser to the scene’s hierarchy view or 3D view. If the asset you drag is a type that can be represented as an entity, Reality Composer Pro adds it to your scene. You can select any asset in the scene hierarchy or the 3D view and change its location, rotation, and scale using the inspector on the right side of the window or the manipulator in the 3D view.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "anchor": "Add-components-to-entities",
          "level": 3,
          "text": "Add components to entities",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "RealityKit follows a design pattern called Entity Component System (ECS). In an ECS app, you store additional data on an entity using components and can implement entity behavior by writing systems that use the data from those components. You can add and configure components to entities in Reality Composer Pro, including both shipped components like ",
              "type": "text"
            },
            {
              "code": "PhysicsBodyComponent",
              "type": "codeVoice"
            },
            {
              "text": ", and custom components that you write and place in the Sources folder of your Reality Composer Pro Swift package. You can even create new components in Reality Composer Pro and then edit them in Xcode. For more information about ECS, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.visionOS/documentation/visionOS/understanding-the-realitykit-modular-architecture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Diorama uses custom components to identify which transforms are points of interest, to mark the birds so the app can make sure they flock together, and to control the opacity of entities that are specific to just one of the two maps.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To add a component to an entity, select that entity in the hierarchy view or 3D view. At the bottom right of the inspector window, click on the Add Component button. A list of available components appears and the first item in that list is New Component. This item creates a new component class, and optionally a new system class, and adds the component to the selected entity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If you look at the list of components, you see the ",
                      "type": "text"
                    },
                    {
                      "code": "PointOfInterestComponent",
                      "type": "codeVoice"
                    },
                    {
                      "text": " that Diorama uses to indicate which transforms are points of interest. If the selected entity doesn’t already contain a ",
                      "type": "text"
                    },
                    {
                      "code": "PointOfInterestComponent",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", selecting that adds it to the selected entity. Each entity can only have one component of a specific type. You can edit the values of the existing component in the inspector, which changes what shows up when you tap that point of interest in the app.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 5
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "rcpro-new-component.png",
                      "type": "image"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 3
            }
          ],
          "numberOfColumns": 8,
          "type": "row"
        },
        {
          "anchor": "Use-transforms-to-mark-locations",
          "level": 3,
          "text": "Use transforms to mark locations",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In Reality Composer Pro, a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "transform",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " is an empty entity that marks a point in space. A transform contains a location, rotation, and scale, and its child entities inherit those. But, transforms have no visual representation and do nothing by themselves. Use transforms to mark locations in your scene or organize your entity hierarchy. For example, you might make several entities that need to move together into child entities of the same transform, so you can move them together by moving the parent transform.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Diorama uses transforms with a ",
                      "type": "text"
                    },
                    {
                      "code": "PointOfInterestComponent",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to indicate points of interest on the map. When the app runs, those transforms mark the location of the floating placards with the name of the location. Tapping on a placard expands it to show more detailed information. To turn transforms into an interactive view, the app looks for a specific component on transforms called a ",
                      "type": "text"
                    },
                    {
                      "code": "PointOfInterestComponent",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Because a transform contains no data other than location, orientation, and scale, it uses this component to hold the data the app needs to display on the placards. If you open the ",
                      "type": "text"
                    },
                    {
                      "code": "DioramaAssembled",
                      "type": "codeVoice"
                    },
                    {
                      "text": " scene in Reality Composer Pro and click on the transform called ",
                      "type": "text"
                    },
                    {
                      "code": "Cathedral_Rocks",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", you see the ",
                      "type": "text"
                    },
                    {
                      "code": "PointOfInterestComponent",
                      "type": "codeVoice"
                    },
                    {
                      "text": " in the inspector.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 5
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "rcpro-point-of-interest-component.png",
                      "type": "image"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 3
            }
          ],
          "numberOfColumns": 8,
          "type": "row"
        },
        {
          "anchor": "Load-a-scene-at-runtime",
          "level": 3,
          "text": "Load a scene at runtime",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To load a Reality Composer Pro scene, use ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/Entity/load(named:in:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", passing the name of the scene you want to load and the project’s bundle. Reality Composer Pro Swift packages define a constant that provides ready access to its bundle. The constant is the name of the Reality Composer Pro project with “Bundle” appended to the end. In this case, the project is called ",
              "type": "text"
            },
            {
              "code": "RealityKitContent",
              "type": "codeVoice"
            },
            {
              "text": ", so the constant is called ",
              "type": "text"
            },
            {
              "code": "RealityKitContentBundle",
              "type": "codeVoice"
            },
            {
              "text": ". Here’s how Diorama loads the map table in the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " initializer:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let entity = try await Entity.load(named: \"DioramaAssembled\", ",
            "                                   in: RealityKitContent.RealityKitContentBundle)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/Entity/load(named:in:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function is asynchronous when called from an asynchronous context. Because the content closure of the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " initializer is asynchronous, it automatically uses the ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": " version to load the scene.  Note that when using it asynchronously, you must call it using the ",
              "type": "text"
            },
            {
              "code": "await",
              "type": "codeVoice"
            },
            {
              "text": " keyword.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-the-floating-view",
          "level": 3,
          "text": "Create the floating view",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Diorama adds a ",
              "type": "text"
            },
            {
              "code": "PointOfInterestComponent",
              "type": "codeVoice"
            },
            {
              "text": " to a transform to display details about interesting places. Every point of interest’s name appears in a view that floats above its location on the map. When you tap the floating view, it expands to show detailed information, which the app pulls from the ",
              "type": "text"
            },
            {
              "code": "PointOfInterestComponent",
              "type": "codeVoice"
            },
            {
              "text": ". The app shows these details by creating a SwiftUI view for each point of interest and querying for all entities that have a ",
              "type": "text"
            },
            {
              "code": "PointOfInterestComponent",
              "type": "codeVoice"
            },
            {
              "text": " using this query declared in ",
              "type": "text"
            },
            {
              "code": "ImmersiveView.swift",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "static let markersQuery = EntityQuery(where: .has(PointOfInterestComponent.self))"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " initializer, Diorama queries to retrieve the points of interest entities and passes them to a function called ",
              "type": "text"
            },
            {
              "code": "createLearnMoreView(for:)",
              "type": "codeVoice"
            },
            {
              "text": ", which creates the view and saves it for display when it’s tapped.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "subscriptions.append(content.subscribe(to: ComponentEvents.DidAdd.self, componentType: PointOfInterestComponent.self, { event in",
            "    createLearnMoreView(for: event.entity)",
            "}))"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Create-attachments-for-points-of-interest",
          "level": 3,
          "text": "Create attachments for points of interest",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Diorama displays the information added to a ",
              "type": "text"
            },
            {
              "code": "PointOfInterestComponent",
              "type": "codeVoice"
            },
            {
              "text": " in a ",
              "type": "text"
            },
            {
              "code": "LearnMoreView",
              "type": "codeVoice"
            },
            {
              "text": ", which it stores as an attachment. ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "Attachments",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " are SwiftUI views that are also RealityKit entities and that you can place into a RealityKit scene at a specific location. Diorama uses attachments to position the view that floats above each point of interest.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The app first checks to see if the entity has a component called ",
              "type": "text"
            },
            {
              "code": "PointOfInterestRuntimeComponent",
              "type": "codeVoice"
            },
            {
              "text": ". If it doesn’t, it creates a new one and adds it to the entity. This new component contains a value you only use at runtime that you don’t need to edit in Reality Composer Pro.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "By putting this value into a separate component and adding it to entities at runtime, Reality Composer Pro never displays it in the inspector. The ",
              "type": "text"
            },
            {
              "code": "PointOfInterestRuntimeComponent",
              "type": "codeVoice"
            },
            {
              "text": " stores an identifier called an ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "attachment tag",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ", which uniquely identifies an attachment so the app can retrieve and display it at the appropriate time.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct PointOfInterestRuntimeComponent: Component {",
            "    let attachmentTag: ObjectIdentifier",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Next, Diorama creates a SwiftUI view called a ",
              "type": "text"
            },
            {
              "code": "LearnMoreView",
              "type": "codeVoice"
            },
            {
              "text": " with the information from the ",
              "type": "text"
            },
            {
              "code": "PointOfInterestComponent",
              "type": "codeVoice"
            },
            {
              "text": ", tags that view, and stores the tag in the ",
              "type": "text"
            },
            {
              "code": "PointOfInterestRuntimeComponent",
              "type": "codeVoice"
            },
            {
              "text": ". Finally, it stores the view in an ",
              "type": "text"
            },
            {
              "code": "AttachmentProvider",
              "type": "codeVoice"
            },
            {
              "text": ", which is a custom class that maintains references to the attachment views so they don’t get deallocated when they’re not in a scene.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let tag: ObjectIdentifier = entity.id",
            "",
            "let view = LearnMoreView(name: pointOfInterest.name,",
            "                         description: pointOfInterest.description ?? \"\",",
            "                         imageNames: pointOfInterest.imageNames,",
            "                         trail: trailEntity,",
            "                         viewModel: viewModel)",
            "    .tag(tag)",
            "entity.components[PointOfInterestRuntimeComponent.self] = PointOfInterestRuntimeComponent(attachmentTag: tag)",
            "",
            "attachmentsProvider.attachments[tag] = AnyView(view)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Display-point-of-interest-attachments",
          "level": 3,
          "text": "Display point of interest attachments",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Assigning a view to an attachment provider doesn’t actually display that view in the scene. The initializer for ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " has an optional view builder called ",
              "type": "text"
            },
            {
              "code": "attachments",
              "type": "codeVoice"
            },
            {
              "text": " that’s used to specify the attachments.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "ForEach(attachmentsProvider.sortedTagViewPairs, id: \\.tag) { pair in",
            "    pair.view",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In the ",
              "type": "text"
            },
            {
              "code": "update",
              "type": "codeVoice"
            },
            {
              "text": " closure of the initializer, which RealityKit calls when the contents of the view change, the app queries for entities with a ",
              "type": "text"
            },
            {
              "code": "PointOfInterestRuntimeComponent",
              "type": "codeVoice"
            },
            {
              "text": ", uses the tag from that component to retrieve the correct attachment for it, and then adds that attachment and places it above its location on the map.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "viewModel.rootEntity?.scene?.performQuery(Self.runtimeQuery).forEach { entity in",
            "",
            "    guard let attachmentEntity = attachments.entity(for: component.attachmentTag) else { return }",
            "    ",
            "    if let pointOfInterestComponent = entity.components[PointOfInterestComponent.self] {",
            "        attachmentEntity.components.set(RegionSpecificComponent(region: pointOfInterestComponent.region))",
            "        attachmentEntity.components.set(OpacityComponent(opacity: 0))",
            "    }",
            "    ",
            "    viewModel.rootEntity?.addChild(attachmentEntity)",
            "    attachmentEntity.setPosition([0, 0.2, 0], relativeTo: entity)",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Create-custom-materials-with-Shader-Graph",
          "level": 3,
          "text": "Create custom materials with Shader Graph",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To switch between the two different topographical maps, Diorama shows a slider that morphs the map between the two locations. To accomplish this, and to draw elevation lines on the map, the ",
              "type": "text"
            },
            {
              "code": "FlatTerrain",
              "type": "codeVoice"
            },
            {
              "text": " entity in the ",
              "type": "text"
            },
            {
              "code": "DioramaAssembled",
              "type": "codeVoice"
            },
            {
              "text": " scene uses a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "Shader Graph material",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ". Shader Graph is a node-based material editor that’s built into Reality Composer Pro. Shader Graph gives you the ability to create dynamic materials that you can change at runtime. Prior to Reality Composer Pro, the only way to implement a dynamic material like this was to create a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/CustomMaterial",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and write Metal shaders to implement the necessary logic.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Diorama’s ",
              "type": "text"
            },
            {
              "code": "DynamicTerrainMaterialEnhanced",
              "type": "codeVoice"
            },
            {
              "text": " does two things. It draws contour lines on the map based on height data stored in displacement map images, and it also offsets the vertices of the flat disk based on the same data. By interpolating between two different height maps, the app achieves a smooth transition between the two different sets of height data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "When you build Shader Graph materials, you can give them input parameters called ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "promoted inputs",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " that you set from Swift code. This allows you to implement logic that previously required writing a Metal shader. The materials you build in the editor can affect both the look of an entity using the custom surface output node, which equates to writing Metal code in a fragment shader, or the position of vertices using the geometry modifier output, which equates to Metal code running in a vertex shader.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 5
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "rcpro-shader-graph-output-node.png",
                      "type": "image"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              "size": 3
            }
          ],
          "numberOfColumns": 8,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "Node graphs can contain ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "subgraphs",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ", which are similar to functions. They contain reusable sets of nodes with inputs and outputs. Subgraphs contain the logic to draw the contour lines and the logic to offset the vertices. Double-click a subgraph to edit it. For more information about building materials using Shader Graph, see ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/wwdc23/10202",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Update-the-Shader-Graph-material-at-runtime",
          "level": 3,
          "text": "Update the Shader Graph material at runtime",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To change the map, ",
              "type": "text"
            },
            {
              "code": "DynamicTerrainMaterialEnhanced",
              "type": "codeVoice"
            },
            {
              "text": " has a promoted input called ",
              "type": "text"
            },
            {
              "code": "Progress",
              "type": "codeVoice"
            },
            {
              "text": ". If that parameter is set to ",
              "type": "text"
            },
            {
              "code": "1.0",
              "type": "codeVoice"
            },
            {
              "text": ", it displays Catalina Island. If it’s set to ",
              "type": "text"
            },
            {
              "code": "0",
              "type": "codeVoice"
            },
            {
              "text": ", it displays Yosemite. Any other number shows a state in transition between the two. When someone manipulates the slider, the app updates that input parameter based on the slider’s value.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Shader Graph material parameters are case-sensitive. If the capitalization is wrong, your code won’t actually update the material.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "The app sets the value of the input parameter in a function called ",
              "type": "text"
            },
            {
              "code": "handleMaterial()",
              "type": "codeVoice"
            },
            {
              "text": " that the slider’s ",
              "type": "text"
            },
            {
              "code": ".onChanged",
              "type": "codeVoice"
            },
            {
              "text": " closure calls. That function retrieves the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/ShaderGraphMaterial",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " from the terrain entity and calls ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/RealityKit/ShaderGraphMaterial/setParameter(name:value:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " on it.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "private func handleMaterial() {",
            "    guard let terrain = viewModel.rootEntity?.terrain,",
            "            let terrainMaterial = terrainMaterial else { return }",
            "    do {",
            "        var material = terrainMaterial",
            "        try material.setParameter(name: materialParameterName, value: .float(viewModel.sliderValue))",
            "        ",
            "        if var component = terrain.modelComponent {",
            "            component.materials = [material]",
            "            terrain.components.set(component)",
            "        }",
            "        ",
            "        try terrain.update(shaderGraphMaterial: terrainMaterial, { m in",
            "            try m.setParameter(name: materialParameterName, value: .float(viewModel.sliderValue))",
            "        })",
            "    } catch {",
            "        print(\"problem: \\(error)\")",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "anchor": "See-Also",
                  "level": 2,
                  "text": "See Also",
                  "type": "heading"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 1,
          "type": "row"
        },
        {
          "anchor": "Related-samples",
          "level": 4,
          "text": "Related samples",
          "type": "heading"
        },
        {
          "items": [
            "doc://com.apple.visionOS/documentation/visionOS/World",
            "doc://com.apple.visionOS/documentation/visionOS/destination-video",
            "doc://com.apple.visionOS/documentation/visionOS/happybeam"
          ],
          "style": "list",
          "type": "links"
        },
        {
          "anchor": "Related-articles",
          "level": 4,
          "text": "Related articles",
          "type": "heading"
        },
        {
          "items": [
            "doc://com.apple.visionOS/documentation/visionOS/adding-3d-content-to-your-app",
            "doc://com.apple.visionOS/documentation/visionOS/understanding-the-realitykit-modular-architecture",
            "doc://com.apple.visionOS/documentation/visionOS/designing-realitykit-content-with-reality-composer-pro",
            "doc://com.apple.documentation/documentation/RealityKit/implementing-systems-for-entities-in-a-scene"
          ],
          "style": "list",
          "type": "links"
        },
        {
          "anchor": "Related-videos",
          "level": 4,
          "text": "Related videos",
          "type": "heading"
        },
        {
          "items": [
            "doc://com.apple.documentation/videos/play/wwdc2023/10083",
            "doc://com.apple.documentation/videos/play/wwdc2023/10202",
            "doc://com.apple.documentation/videos/play/wwdc2023/10273"
          ],
          "style": "compactGrid",
          "type": "links"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "03989E04-AE81-449A-B33A-4C335A300EA7": {
      "alt": null,
      "identifier": "03989E04-AE81-449A-B33A-4C335A300EA7",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/03989E04-AE81-449A-B33A-4C335A300EA7/8264_wide_250x141_1x.jpg"
        },
        {
          "traits": [
            "2x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/03989E04-AE81-449A-B33A-4C335A300EA7/8264_wide_250x141_2x.jpg"
        },
        {
          "traits": [
            "3x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/03989E04-AE81-449A-B33A-4C335A300EA7/8264_wide_250x141_3x.jpg"
        }
      ]
    },
    "6E0DDBF9-93E1-49DB-8290-D95CC83AE165": {
      "alt": null,
      "identifier": "6E0DDBF9-93E1-49DB-8290-D95CC83AE165",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/6E0DDBF9-93E1-49DB-8290-D95CC83AE165/8137_wide_250x141_1x.jpg"
        },
        {
          "traits": [
            "2x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/6E0DDBF9-93E1-49DB-8290-D95CC83AE165/8137_wide_250x141_2x.jpg"
        },
        {
          "traits": [
            "3x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/6E0DDBF9-93E1-49DB-8290-D95CC83AE165/8137_wide_250x141_3x.jpg"
        }
      ]
    },
    "946E2995-A717-457B-83C5-BC4CC9654781": {
      "alt": null,
      "identifier": "946E2995-A717-457B-83C5-BC4CC9654781",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/946E2995-A717-457B-83C5-BC4CC9654781/8342_wide_250x141_1x.jpg"
        },
        {
          "traits": [
            "2x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/946E2995-A717-457B-83C5-BC4CC9654781/8342_wide_250x141_2x.jpg"
        },
        {
          "traits": [
            "3x"
          ],
          "url": "https://devimages-cdn.apple.com/wwdc-services/images/D35E0E85-CCB6-41A1-B227-7995ECD83ED5/946E2995-A717-457B-83C5-BC4CC9654781/8342_wide_250x141_3x.jpg"
        }
      ]
    },
    "Destination-Video-intro.png": {
      "alt": "An image showing Destination Video on visionOS.",
      "identifier": "Destination-Video-intro.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/648c665254129674ce04bbc64dbeeb2d/Destination-Video-intro@2x.png"
        }
      ]
    },
    "Diorama-intro.png": {
      "alt": null,
      "identifier": "Diorama-intro.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/80d69390976dca0e5d70a493312d475a/Diorama-intro@2x.png"
        }
      ]
    },
    "Diorama-overview-poster.png": {
      "alt": null,
      "identifier": "Diorama-overview-poster.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/70fbe7106e7dfe30ce7b983401934f93/Diorama-overview-poster@2x.png"
        }
      ]
    },
    "Diorama-overview.mp4": {
      "alt": "A video that demonstrates the Diorama sample code project.",
      "identifier": "Diorama-overview.mp4",
      "poster": "Diorama-overview-poster.png",
      "type": "video",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/c106f0741656e1984ef4ebafc62f03ef/Diorama-overview.mp4"
        }
      ]
    },
    "Happy-Beam-intro.png": {
      "alt": "A screenshot showing the Happy Beam game. A player makes a heart gesture with their hands, a beam projects from it aimed at nearby clouds, and a scoreboard window shows seven points.",
      "identifier": "Happy-Beam-intro.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/52b497b6d705af322726d7371dee6ddd/Happy-Beam-intro@2x.png"
        }
      ]
    },
    "Hello-World-intro.png": {
      "alt": "",
      "identifier": "Hello-World-intro.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/770e1d0451ba3b86de3b05eb0ce728b7/Hello-World-intro@2x.png"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/RealityKit/CustomMaterial": {
      "abstract": [
        {
          "text": "A material that works with custom Metal shader functions.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomMaterial"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit/CustomMaterial",
      "kind": "symbol",
      "role": "symbol",
      "title": "CustomMaterial",
      "type": "topic",
      "url": "/documentation/RealityKit/CustomMaterial"
    },
    "doc://com.apple.documentation/documentation/RealityKit/Entity/load(named:in:)": {
      "abstract": [
        {
          "text": "Returns an entity by synchronously loading it from a bundle.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "load"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "named"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "name"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "bundle"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSBundle",
          "text": "Bundle"
        },
        {
          "kind": "text",
          "text": "? = nil) "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation6EntityC",
          "text": "Entity"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit/Entity/load(named:in:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "load(named:in:)",
      "type": "topic",
      "url": "/documentation/RealityKit/Entity/load(named:in:)"
    },
    "doc://com.apple.documentation/documentation/RealityKit/RealityView": {
      "abstract": [
        {
          "text": "A view that contains RealityKit content.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RealityView"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Content"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Content"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit/RealityView",
      "kind": "symbol",
      "role": "symbol",
      "title": "RealityView",
      "type": "topic",
      "url": "/documentation/RealityKit/RealityView"
    },
    "doc://com.apple.documentation/documentation/RealityKit/ShaderGraphMaterial": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ShaderGraphMaterial"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit/ShaderGraphMaterial",
      "kind": "symbol",
      "role": "symbol",
      "title": "ShaderGraphMaterial",
      "type": "topic",
      "url": "/documentation/RealityKit/ShaderGraphMaterial"
    },
    "doc://com.apple.documentation/documentation/RealityKit/ShaderGraphMaterial/setParameter(name:value:)": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "mutating"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "setParameter"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "name"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "value"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation18MaterialParametersV",
          "text": "MaterialParameters"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation18MaterialParametersV5ValueO",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit/ShaderGraphMaterial/setParameter(name:value:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "setParameter(name:value:)",
      "type": "topic",
      "url": "/documentation/RealityKit/ShaderGraphMaterial/setParameter(name:value:)"
    },
    "doc://com.apple.documentation/documentation/RealityKit/implementing-systems-for-entities-in-a-scene": {
      "abstract": [
        {
          "text": "Apply behaviors and physical effects to the objects and characters in a RealityKit scene with the Entity Component System (ECS).",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/RealityKit/implementing-systems-for-entities-in-a-scene",
      "kind": "article",
      "role": "article",
      "title": "Implementing systems for entities in a scene",
      "type": "topic",
      "url": "/documentation/RealityKit/implementing-systems-for-entities-in-a-scene"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.documentation/videos/play/wwdc2023/10083": {
      "abstract": [
        {
          "text": "Discover how to easily compose, edit, and preview 3D content with Reality Composer Pro. Follow along as we explore this developer tool by setting up a new project, composing scenes, adding particle emitters and audio, and even previewing content on device.\n\nOnce you’re familiar with the basics of Reality Composer Pro, check out \"Explore Materials in Reality Composer Pro\" and \"Work with Reality Composer Pro content in Xcode\" to learn more advanced techniques and tips.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/videos/play/wwdc2023/10083",
      "images": [
        {
          "identifier": "6E0DDBF9-93E1-49DB-8290-D95CC83AE165",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "article",
      "title": "Meet Reality Composer Pro",
      "type": "topic",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10083"
    },
    "doc://com.apple.documentation/videos/play/wwdc2023/10202": {
      "abstract": [
        {
          "text": "Learn how Reality Composer Pro can help you alter the appearance of your 3D objects using RealityKit materials. We’ll introduce you to MaterialX and physically-based (PBR) shaders, show you how to design dynamic materials using the shader graph editor, and explore adding custom inputs to a material so that you can control it in your visionOS app.\n\nTo get the most out of this session, we recommend first watching “Meet Reality Composer Pro.” Once you’re ready to learn how you can incorporate your models and materials into an Xcode project, check out \"Work with Reality Composer Pro content in Xcode.\"",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/videos/play/wwdc2023/10202",
      "images": [
        {
          "identifier": "03989E04-AE81-449A-B33A-4C335A300EA7",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "article",
      "title": "Explore materials in Reality Composer Pro",
      "type": "topic",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10202"
    },
    "doc://com.apple.documentation/videos/play/wwdc2023/10273": {
      "abstract": [
        {
          "text": "Learn how to bring content from Reality Composer Pro to life in Xcode. We’ll show you how to load 3D scenes into Xcode, integrate your content with your code, and add interactivity to your app. We’ll also share best practices and tips for using these tools together in your development workflow.\n\nTo get the most out of this session, we recommend first watching “Meet Reality Composer Pro” and “Explore materials in Reality Composer Pro\" to learn more about creating 3D scenes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/videos/play/wwdc2023/10273",
      "images": [
        {
          "identifier": "946E2995-A717-457B-83C5-BC4CC9654781",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "article",
      "title": "Work with Reality Composer Pro content in Xcode",
      "type": "topic",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10273"
    },
    "doc://com.apple.visionOS/documentation/visionOS": {
      "abstract": [
        {
          "text": "Create a new universe of apps and games for Apple Vision Pro.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS",
      "images": [
        {
          "identifier": "headset-orange.svg",
          "type": "icon"
        },
        {
          "identifier": "visionOS-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "collection",
      "title": "visionOS",
      "type": "topic",
      "url": "/documentation/visionos"
    },
    "doc://com.apple.visionOS/documentation/visionOS/World": {
      "abstract": [
        {
          "text": "Use windows, volumes, and immersive spaces to teach people about the Earth.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/World",
      "images": [
        {
          "identifier": "Hello-World-intro.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "sampleCode",
      "title": "Hello World",
      "type": "topic",
      "url": "/documentation/visionos/world"
    },
    "doc://com.apple.visionOS/documentation/visionOS/adding-3d-content-to-your-app": {
      "abstract": [
        {
          "text": "Add depth and dimension to your visionOS app and discover how",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to incorporate your app’s content into a person’s surroundings.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/adding-3d-content-to-your-app",
      "kind": "article",
      "role": "article",
      "title": "Adding 3D content to your app",
      "type": "topic",
      "url": "/documentation/visionos/adding-3d-content-to-your-app"
    },
    "doc://com.apple.visionOS/documentation/visionOS/designing-realitykit-content-with-reality-composer-pro": {
      "abstract": [
        {
          "text": "Design RealityKit scenes for your visionOS app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/designing-realitykit-content-with-reality-composer-pro",
      "kind": "article",
      "role": "article",
      "title": "Designing RealityKit content with Reality Composer Pro",
      "type": "topic",
      "url": "/documentation/visionos/designing-realitykit-content-with-reality-composer-pro"
    },
    "doc://com.apple.visionOS/documentation/visionOS/destination-video": {
      "abstract": [
        {
          "text": "Leverage SwiftUI to build an immersive media experience in a multiplatform app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/destination-video",
      "images": [
        {
          "identifier": "Destination-Video-intro.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "sampleCode",
      "title": "Destination Video",
      "type": "topic",
      "url": "/documentation/visionos/destination-video"
    },
    "doc://com.apple.visionOS/documentation/visionOS/happybeam": {
      "abstract": [
        {
          "text": "Leverage a Full Space to create a fun game using ARKit.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/happybeam",
      "images": [
        {
          "identifier": "Happy-Beam-intro.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "sampleCode",
      "title": "Happy Beam",
      "type": "topic",
      "url": "/documentation/visionos/happybeam"
    },
    "doc://com.apple.visionOS/documentation/visionOS/understanding-the-realitykit-modular-architecture": {
      "abstract": [
        {
          "text": "Learn how everything fits together in RealityKit.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.visionOS/documentation/visionOS/understanding-the-realitykit-modular-architecture",
      "kind": "article",
      "role": "article",
      "title": "Understanding the modular architecture of RealityKit",
      "type": "topic",
      "url": "/documentation/visionos/understanding-the-realitykit-modular-architecture"
    },
    "f60567d1cc7d/Diorama.zip": {
      "checksum": "f60567d1cc7d643b0bb6f85a4330112097e4ac98380e2bb71b0f1fa8da886cc11723829bbc7ddecbf3725b62cfa27e3d6b890b7db20cd3c8c059154cc3c15eb2",
      "identifier": "f60567d1cc7d/Diorama.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/f60567d1cc7d/Diorama.zip"
    },
    "headset-orange.svg": {
      "alt": "An icon representing visionOS.",
      "identifier": "headset-orange.svg",
      "type": "image",
      "variants": [
        {
          "svgID": "a",
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/77dc6a0821bfb2da8db4a3b2033e6f6b/headset-orange.svg"
        }
      ]
    },
    "https://developer.apple.com/wwdc23/10202": {
      "identifier": "https://developer.apple.com/wwdc23/10202",
      "title": "Explore Materials in Reality Composer Pro",
      "titleInlineContent": [
        {
          "text": "Explore Materials in Reality Composer Pro",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/wwdc23/10202"
    },
    "rcpro-assets.png": {
      "alt": "A screenshot that shows Reality Composer Pro with multiple scenes open. At the top of the window are several tabs, one for each open scene. The project browser is showing a selection of assets including sound files, images, and 3D models.",
      "identifier": "rcpro-assets.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/e31f4da3e3aadabb15f50ace406f6b81/rcpro-assets@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/31ec839072d19ea5dc93dec192e155c6/rcpro-assets~dark@2x.png"
        }
      ]
    },
    "rcpro-library-cropped.png": {
      "alt": "An illustration showing Reality Composer Pro with the library visible.",
      "identifier": "rcpro-library-cropped.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/254710e01fa59567a0913456bc970333/rcpro-library-cropped~dark@2x.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/68c8d792b69ef000f6c70a0b8724ee44/rcpro-library-cropped@2x.png"
        }
      ]
    },
    "rcpro-manipulator.png": {
      "alt": "A screenshot that shows Reality Composer Pro with a diorama asset selected. There is a circle and three small cones pointing along each of the cartesian axes.",
      "identifier": "rcpro-manipulator.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/fec30baec8190980df687aa9d5ee6758/rcpro-manipulator~dark@2x.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/03bdd6cd0d9b758ce7dc87d4f9122844/rcpro-manipulator@2x.png"
        }
      ]
    },
    "rcpro-new-component.png": {
      "alt": "A screenshot showing Reality Composer Pro's inspector with a new component button and the list of available components showing.",
      "identifier": "rcpro-new-component.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/5b880670ece2e4d51e0343bb9592f26e/rcpro-new-component@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/67f5acd29d8fdea98ea1752ec489821b/rcpro-new-component~dark@2x.png"
        }
      ]
    },
    "rcpro-point-of-interest-component.png": {
      "alt": "A screenshot showing the `PointOfInterestComponent` as represented in Reality Composer Pro's inspector. It contains a menu called region, currently set to yosemite, a text field called name that reads Cathedral Rocks, a text field called description that reads A prominent rock formation, and three blank text fields called mainImageName, secondImageName, and thirdImageName.",
      "identifier": "rcpro-point-of-interest-component.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/481feec7fa1f1ce0bb84e6b0236d729f/rcpro-point-of-interest-component@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/17fdc8167f9ef33259f84e839df6839b/rcpro-point-of-interest-component~dark@2x.png"
        }
      ]
    },
    "rcpro-scene-tabs.png": {
      "alt": "A screenshot showing Reality Composer Pro with multiple scenes open. At the top of the window are several tabs, one for each open scene.",
      "identifier": "rcpro-scene-tabs.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/7b08ca4b0e489767d821e0ae7b79d895/rcpro-scene-tabs@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/a441c73a82a386476daf2e6c96f7b2c2/rcpro-scene-tabs~dark@2x.png"
        }
      ]
    },
    "rcpro-shader-graph-output-node.png": {
      "alt": "A screenshot showing the Shader Graph output node with pins for the two types of outputs a material can have: surface shaders and geometry modifiers.",
      "identifier": "rcpro-shader-graph-output-node.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/de06e6ab95eaf46129dab538dfec72c4/rcpro-shader-graph-output-node@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/10de4a285be14673340841a7d4da37d2/rcpro-shader-graph-output-node~dark@2x.png"
        }
      ]
    },
    "visionOS-PageImage-card.png": {
      "alt": "A stylized illustration of an Apple Vision Pro with the word 'hello' written across the front in cursive.",
      "identifier": "visionOS-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/90294957b44e5508a55fe39373eea478/visionOS-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/90fe463571fd45badfabacbb07f30591/visionOS-PageImage-card~dark@2x.png"
        }
      ]
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "f60567d1cc7d/Diorama.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": []
}
