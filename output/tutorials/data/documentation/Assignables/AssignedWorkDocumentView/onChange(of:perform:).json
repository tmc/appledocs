{
  "abstract": [
    {
      "text": "Performs an action when a specified value changes.",
      "type": "text"
    }
  ],
  "deprecationSummary": [
    {
      "inlineContent": [
        {
          "text": "Use `onChange` with a two or zero parameter action closure instead.",
          "type": "text"
        }
      ],
      "type": "paragraph"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Assignables/documentation/Assignables",
        "doc://com.apple.Assignables/documentation/Assignables/AssignedWorkDocumentView"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Assignables/documentation/Assignables/AssignedWorkDocumentView/onChange(of:perform:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "extendedModule": "SwiftUI",
    "externalID": "s:7SwiftUI4ViewPAAE8onChange2of7performQrqd___yqd__ctSQRd__lF::SYNTHESIZED::s:11Assignables24AssignedWorkDocumentViewV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "onChange"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "genericParameter",
        "text": "V"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "externalParam",
        "text": "of"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "text": "V"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "perform"
      },
      {
        "kind": "text",
        "text": ": ("
      },
      {
        "kind": "typeIdentifier",
        "text": "V"
      },
      {
        "kind": "text",
        "text": ") -> "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:s4Voida",
        "text": "Void"
      },
      {
        "kind": "text",
        "text": ") -> "
      },
      {
        "kind": "keyword",
        "text": "some"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7SwiftUI4ViewP",
        "text": "View"
      }
    ],
    "modules": [
      {
        "name": "Assignables",
        "relatedModules": [
          "SwiftUI"
        ]
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "deprecatedAt": "17.0",
        "introducedAt": "14.0",
        "message": "Use `onChange` with a two or zero parameter action closure instead.",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "deprecatedAt": "17.0",
        "introducedAt": "14.0",
        "message": "Use `onChange` with a two or zero parameter action closure instead.",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "deprecatedAt": "17.0",
        "introducedAt": "14.0",
        "message": "Use `onChange` with a two or zero parameter action closure instead.",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "deprecatedAt": "14.0",
        "introducedAt": "11.0",
        "message": "Use `onChange` with a two or zero parameter action closure instead.",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "deprecatedAt": "17.0",
        "introducedAt": "14.0",
        "message": "Use `onChange` with a two or zero parameter action closure instead.",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "deprecatedAt": "1.0",
        "message": "Use `onChange` with a two or zero parameter action closure instead.",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "deprecatedAt": "10.0",
        "introducedAt": "7.0",
        "message": "Use `onChange` with a two or zero parameter action closure instead.",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "method",
    "title": "onChange(of:perform:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "visionOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "nonisolated"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "onChange"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "V"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "of"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "value"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "typeIdentifier",
              "text": "V"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "perform"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "action"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "keyword",
              "text": "@escaping"
            },
            {
              "kind": "text",
              "text": " ("
            },
            {
              "kind": "typeIdentifier",
              "text": "V"
            },
            {
              "kind": "text",
              "text": ") -> "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:s4Voida",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s4Voida",
              "text": "Void"
            },
            {
              "kind": "text",
              "text": ") -> "
            },
            {
              "kind": "keyword",
              "text": "some"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI4ViewP",
              "text": "View"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "V"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:SQ",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SQ",
              "text": "Equatable"
            },
            {
              "kind": "text",
              "text": "\n"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The value to check when determining whether to run the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "closure. The value must conform to the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "protocol.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "value"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A closure to run when the value changes. The closure",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "takes a ",
                  "type": "text"
                },
                {
                  "code": "newValue",
                  "type": "codeVoice"
                },
                {
                  "text": " parameter that indicates the updated",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "value.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "action"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return-value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A view that runs an action when the specified value changes.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this modifier to run a closure when a value like",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an ",
              "type": "text"
            },
            {
              "code": "Environment",
              "type": "codeVoice"
            },
            {
              "text": " value or a ",
              "type": "text"
            },
            {
              "code": "Binding",
              "type": "codeVoice"
            },
            {
              "text": " changes.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, you can clear a cache when you notice",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that the view’s scene moves to the background:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ContentView: View {",
            "    @Environment(\\.scenePhase) private var scenePhase",
            "    @StateObject private var cache = DataCache()",
            "",
            "    var body: some View {",
            "        MyView()",
            "            .onChange(of: scenePhase) { newScenePhase in",
            "                if newScenePhase == .background {",
            "                    cache.empty()",
            "                }",
            "            }",
            "    }",
            "}"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "SwiftUI passes the new value into the closure. You can also capture the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "previous value to compare it to the new value. For example, in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the following code example, ",
              "type": "text"
            },
            {
              "code": "PlayerView",
              "type": "codeVoice"
            },
            {
              "text": " passes both the old and new",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "values to the model.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct PlayerView: View {",
            "    var episode: Episode",
            "    @State private var playState: PlayState = .paused",
            "",
            "    var body: some View {",
            "        VStack {",
            "            Text(episode.title)",
            "            Text(episode.showTitle)",
            "            PlayButton(playState: $playState)",
            "        }",
            "        .onChange(of: playState) { [playState] newState in",
            "            model.playStateDidChange(from: playState, to: newState)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The system may call the action closure on the main actor, so avoid",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "long-running tasks in the closure. If you need to perform such tasks,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "detach an asynchronous background task.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Important: This modifier is deprecated and has been replaced with new",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "versions that include either zero or two parameters within the closure,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "unlike this version that includes one parameter. This deprecated version",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and the new versions behave differently with respect to how they execute",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the action closure, specifically when the closure captures other values.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Using the deprecated API, the closure is run with captured values that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "represent the “old” state. With the replacement API, the closure is run",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with captured values that represent the “new” state, which makes it",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "easier to correctly perform updates that rely on supplementary values",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(that may or may not have changed) in addition to the changed value that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "triggered the action.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "This modifier is deprecated and has been replaced with new",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "versions that include either zero or two parameters within the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "closure, unlike this version that includes one parameter. This",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "deprecated version and the new versions behave differently with",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "respect to how they execute the action closure, specifically when the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "closure captures other values. Using the deprecated API, the closure",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "is run with captured values that represent the “old” state. With the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "replacement API, the closure is run with captured values that",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "represent the “new” state, which makes it easier to correctly perform",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "updates that rely on supplementary values (that may or may not have",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "changed) in addition to the changed value that triggered the action.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.Assignables/documentation/Assignables": {
      "abstract": [
        {
          "text": "A framework that contain wrappers to a PDF to allow creation",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "of an assessment and student work on that assessment.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Assignables/documentation/Assignables",
      "kind": "symbol",
      "role": "collection",
      "title": "Assignables",
      "type": "topic",
      "url": "/documentation/assignables"
    },
    "doc://com.apple.Assignables/documentation/Assignables/AssignedWorkDocumentView": {
      "abstract": [
        {
          "text": "SwiftUI View to display an ",
          "type": "text"
        },
        {
          "code": "AssignedWorkDocument",
          "type": "codeVoice"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AssignedWorkDocumentView"
        }
      ],
      "identifier": "doc://com.apple.Assignables/documentation/Assignables/AssignedWorkDocumentView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AssignedWorkDocumentView"
        }
      ],
      "role": "symbol",
      "title": "AssignedWorkDocumentView",
      "type": "topic",
      "url": "/documentation/assignables/assignedworkdocumentview"
    },
    "doc://com.apple.Assignables/documentation/Assignables/AssignedWorkDocumentView/onChange(of:perform:)": {
      "abstract": [
        {
          "text": "Performs an action when a specified value changes.",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "onChange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "perform"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.Assignables/documentation/Assignables/AssignedWorkDocumentView/onChange(of:perform:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "onChange(of:perform:)",
      "type": "topic",
      "url": "/documentation/assignables/assignedworkdocumentview/onchange(of:perform:)"
    },
    "doc://com.apple.documentation/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/Swift/Equatable"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP": {
      "abstract": [
        {
          "text": "A type that represents part of your app’s user interface and provides modifiers that you use to configure views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
      "kind": "symbol",
      "role": "symbol",
      "title": "View",
      "type": "topic",
      "url": "/documentation/SwiftUI/View"
    },
    "doc://com.externally.resolved.symbol/s:SQ": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SQ",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/Swift/Equatable"
    },
    "doc://com.externally.resolved.symbol/s:s4Voida": {
      "abstract": [
        {
          "text": "The return type of functions that don’t explicitly specify a return type, that is, an empty tuple `()`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": " = ()"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s4Voida",
      "kind": "symbol",
      "role": "symbol",
      "title": "Void",
      "type": "topic",
      "url": "/documentation/Swift/Void"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/assignables/assignedworkdocumentview/onchange(of:perform:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
