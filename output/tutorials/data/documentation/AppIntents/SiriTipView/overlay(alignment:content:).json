{
  "abstract": [
    {
      "text": "Layers the views that you specify in front of this view.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.AppIntents/documentation/AppIntents",
        "doc://com.apple.AppIntents/documentation/AppIntents/SiriTipView"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.AppIntents/documentation/AppIntents/SiriTipView/overlay(alignment:content:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "extendedModule": "SwiftUI",
    "externalID": "s:7SwiftUI4ViewPAAE7overlay9alignment7contentQrAA9AlignmentV_qd__yXEtAaBRd__lF::SYNTHESIZED::s:19_AppIntents_SwiftUI11SiriTipViewV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "overlay"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "genericParameter",
        "text": "V"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "externalParam",
        "text": "alignment"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7SwiftUI9AlignmentV",
        "text": "Alignment"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "content"
      },
      {
        "kind": "text",
        "text": ": () -> "
      },
      {
        "kind": "typeIdentifier",
        "text": "V"
      },
      {
        "kind": "text",
        "text": ") -> "
      },
      {
        "kind": "keyword",
        "text": "some"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7SwiftUI4ViewP",
        "text": "View"
      }
    ],
    "modules": [
      {
        "name": "AppIntents",
        "relatedModules": [
          "SwiftUI"
        ]
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "12.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "method",
    "title": "overlay(alignment:content:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "nonisolated"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "overlay"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "V"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "alignment"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI9AlignmentV",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI9AlignmentV",
              "text": "Alignment"
            },
            {
              "kind": "text",
              "text": " = .center, "
            },
            {
              "kind": "attribute",
              "text": "@"
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI11ViewBuilderV",
              "kind": "attribute",
              "preciseIdentifier": "s:7SwiftUI11ViewBuilderV",
              "text": "ViewBuilder"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "externalParam",
              "text": "content"
            },
            {
              "kind": "text",
              "text": ": () -> "
            },
            {
              "kind": "typeIdentifier",
              "text": "V"
            },
            {
              "kind": "text",
              "text": ") -> "
            },
            {
              "kind": "keyword",
              "text": "some"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI4ViewP",
              "text": "View"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "V"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI4ViewP",
              "text": "View"
            },
            {
              "kind": "text",
              "text": "\n"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The alignment that the modifier uses to position the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "implicit ",
                  "type": "text"
                },
                {
                  "code": "ZStack",
                  "type": "codeVoice"
                },
                {
                  "text": " that groups the foreground views. The default",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "is ",
                  "type": "text"
                },
                {
                  "code": "Alignment/center",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "alignment"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A ",
                  "type": "text"
                },
                {
                  "code": "ViewBuilder",
                  "type": "codeVoice"
                },
                {
                  "text": " that you use to declare the views to",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "draw in front of this view, stacked in the order that you list them.",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "The last view that you list appears at the front of the stack.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "content"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return-value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A view that uses the specified content as a foreground.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this modifier to place one or more views in front of another view.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, you can place a group of stars on a ",
              "type": "text"
            },
            {
              "code": "RoundedRectangle",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "RoundedRectangle(cornerRadius: 8)",
            "    .frame(width: 200, height: 100)",
            "    .overlay(alignment: .topLeading) { Star(color: .red) }",
            "    .overlay(alignment: .topTrailing) { Star(color: .yellow) }",
            "    .overlay(alignment: .bottomLeading) { Star(color: .green) }",
            "    .overlay(alignment: .bottomTrailing) { Star(color: .blue) }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The example above assumes that you’ve defined a ",
              "type": "text"
            },
            {
              "code": "Star",
              "type": "codeVoice"
            },
            {
              "text": " view with a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "parameterized color:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct Star: View {",
            "    var color = Color.yellow",
            "",
            "    var body: some View {",
            "        Image(systemName: \"star.fill\")",
            "            .foregroundStyle(color)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "By setting different ",
              "type": "text"
            },
            {
              "code": "alignment",
              "type": "codeVoice"
            },
            {
              "text": " values for each modifier, you make the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "stars appear in different places on the rectangle:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you specify more than one view in the ",
              "type": "text"
            },
            {
              "code": "content",
              "type": "codeVoice"
            },
            {
              "text": " closure, the modifier",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "collects all of the views in the closure into an implicit ",
              "type": "text"
            },
            {
              "code": "ZStack",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "taking them in order from back to front. For example, you can place a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "star and a ",
              "type": "text"
            },
            {
              "code": "Circle",
              "type": "codeVoice"
            },
            {
              "text": " on a field of ",
              "type": "text"
            },
            {
              "code": "ShapeStyle/blue",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Color.blue",
            "    .frame(width: 200, height: 200)",
            "    .overlay {",
            "        Circle()",
            "            .frame(width: 100, height: 100)",
            "        Star()",
            "    }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Both the overlay modifier and the implicit ",
              "type": "text"
            },
            {
              "code": "ZStack",
              "type": "codeVoice"
            },
            {
              "text": " composed from the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "overlay content — the circle and the star — use a default",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Alignment/center",
              "type": "codeVoice"
            },
            {
              "text": " alignment. The star appears centered on the circle,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and both appear as a composite view centered in front of the square:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you specify an alignment for the overlay, it applies to the implicit",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "stack rather than to the individual views in the closure. You can see",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "this if you add the ",
              "type": "text"
            },
            {
              "code": "Alignment/bottom",
              "type": "codeVoice"
            },
            {
              "text": " alignment:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Color.blue",
            "    .frame(width: 200, height: 200)",
            "    .overlay(alignment: .bottom) {",
            "        Circle()",
            "            .frame(width: 100, height: 100)",
            "        Star()",
            "    }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The circle and the star move down as a unit to align the stack’s bottom",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "edge with the bottom edge of the square, while the star remains",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "centered on the circle:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To control the placement of individual items inside the ",
              "type": "text"
            },
            {
              "code": "content",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "closure, either use a different overlay modifier for each item, as the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "earlier example of stars in the corners of a rectangle demonstrates, or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "add an explicit ",
              "type": "text"
            },
            {
              "code": "ZStack",
              "type": "codeVoice"
            },
            {
              "text": " inside the content closure with its own",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "alignment:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Color.blue",
            "    .frame(width: 200, height: 200)",
            "    .overlay(alignment: .bottom) {",
            "        ZStack(alignment: .bottom) {",
            "            Circle()",
            "                .frame(width: 100, height: 100)",
            "            Star()",
            "        }",
            "    }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The stack alignment ensures that the star’s bottom edge aligns with the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "circle’s, while the overlay aligns the composite view with the square:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can achieve layering without an overlay modifier by putting both the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "modified view and the overlay content into a ",
              "type": "text"
            },
            {
              "code": "ZStack",
              "type": "codeVoice"
            },
            {
              "text": ". This can",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "produce a simpler view hierarchy, but changes the layout priority that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "SwiftUI applies to the views. Use the overlay modifier when you want the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "modified view to dominate the layout.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you want to specify a ",
              "type": "text"
            },
            {
              "code": "ShapeStyle",
              "type": "codeVoice"
            },
            {
              "text": " like a ",
              "type": "text"
            },
            {
              "code": "Color",
              "type": "codeVoice"
            },
            {
              "text": " or a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Material",
              "type": "codeVoice"
            },
            {
              "text": " as the overlay, use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "View/overlay(_:ignoresSafeAreaEdges:)",
              "type": "codeVoice"
            },
            {
              "text": " instead. To specify a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Shape",
              "type": "codeVoice"
            },
            {
              "text": ", use ",
              "type": "text"
            },
            {
              "code": "View/overlay(_:in:fillStyle:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.AppIntents/documentation/AppIntents": {
      "abstract": [
        {
          "text": "Make your app’s content and actions discoverable with system experiences like Spotlight, widgets, and enhanced action capabilities of Siri, powered by Apple Intelligence.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.AppIntents/documentation/AppIntents",
      "kind": "symbol",
      "role": "collection",
      "title": "App Intents",
      "type": "topic",
      "url": "/documentation/appintents"
    },
    "doc://com.apple.AppIntents/documentation/AppIntents/SiriTipView": {
      "abstract": [
        {
          "text": "A SwiftUI view that displays the phrase someone uses to invoke an App Shortcut.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SiriTipView"
        }
      ],
      "identifier": "doc://com.apple.AppIntents/documentation/AppIntents/SiriTipView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SiriTipView"
        }
      ],
      "role": "symbol",
      "title": "SiriTipView",
      "type": "topic",
      "url": "/documentation/appintents/siritipview"
    },
    "doc://com.apple.AppIntents/documentation/AppIntents/SiriTipView/overlay(alignment:content:)": {
      "abstract": [
        {
          "text": "Layers the views that you specify in front of this view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "overlay"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "alignment"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI9AlignmentV",
          "text": "Alignment"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "content"
        },
        {
          "kind": "text",
          "text": ": () -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.AppIntents/documentation/AppIntents/SiriTipView/overlay(alignment:content:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "overlay(alignment:content:)",
      "type": "topic",
      "url": "/documentation/appintents/siritipview/overlay(alignment:content:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI11ViewBuilderV": {
      "abstract": [
        {
          "text": "A custom parameter attribute that constructs views from closures.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@resultBuilder"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ViewBuilder"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI11ViewBuilderV",
      "kind": "symbol",
      "role": "symbol",
      "title": "ViewBuilder",
      "type": "topic",
      "url": "/documentation/SwiftUI/ViewBuilder"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP": {
      "abstract": [
        {
          "text": "A type that represents part of your app’s user interface and provides modifiers that you use to configure views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
      "kind": "symbol",
      "role": "symbol",
      "title": "View",
      "type": "topic",
      "url": "/documentation/SwiftUI/View"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI9AlignmentV": {
      "abstract": [
        {
          "text": "An alignment in both axes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Alignment"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI9AlignmentV",
      "kind": "symbol",
      "role": "symbol",
      "title": "Alignment",
      "type": "topic",
      "url": "/documentation/SwiftUI/Alignment"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/appintents/siritipview/overlay(alignment:content:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
