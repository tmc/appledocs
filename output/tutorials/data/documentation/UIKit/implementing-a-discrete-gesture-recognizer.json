{
  "abstract": [
    {
      "text": "If your gesture involves a specific pattern of events, consider implementing a discrete gesture recognizer for it.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.uikit/documentation/UIKit",
        "doc://com.apple.uikit/documentation/UIKit/touches-presses-and-gestures",
        "doc://com.apple.uikit/documentation/UIKit/implementing-a-custom-gesture-recognizer"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.uikit/documentation/UIKit/implementing-a-discrete-gesture-recognizer"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "UIKit"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Implementing a Discrete Gesture Recognizer"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A gesture recognizer remains in the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/State-swift.enum/possible",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " state until events indicate that your gesture succeeded or failed, at which point you change its state. The advantage of discrete gesture recognizers is that they are simpler to implement because they require fewer state transitions. One disadvantage is that because the state change typically occurs later in the event sequence, recognition can easily be preempted by continuous gestures attached to the same view.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following image shows a checkmark gesture, which is created by tracing one finger down and to the right and then back up and to the right. Because the gesture follows a specific path, it makes sense to use a discrete gesture recognizer.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "media-3004410",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Defining-the-Conditions-for-Success",
          "level": 3,
          "text": "Defining the Conditions for Success",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Before implementing your gesture recognizer code, define the conditions for which recognition should occur. The conditions for matching a checkmark gesture are as follows:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Only the first finger to touch the screen is tracked. All others are ignored.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The touch always moves left to right.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The touch moves downward initially but then changes direction and moves upward.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The upward stroke ends higher on the screen than the initial touch point.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Saving-Gesture-Related-Data",
          "level": 3,
          "text": "Saving Gesture-Related Data",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "With the conditions defined, add properties to your gesture recognizer to track any needed information. For the checkmark gesture, the gesture recognizer needs to know the starting point of the gesture so that it can compare that point to the final point. It also needs to know whether the userâ€™s finger is moving downward or upward.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following code shows the first part of a custom ",
              "type": "text"
            },
            {
              "code": "CheckmarkGestureRecognizer",
              "type": "codeVoice"
            },
            {
              "text": " class definition. This class stores the initial touch point and the current phase of the gesture. The class also stores the  ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UITouch",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " object associated with the first finger so that it can ignore any other touches.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum CheckmarkPhases {",
            "    case notStarted",
            "    case initialPoint",
            "    case downStroke",
            "    case upStroke",
            "} ",
            "class CheckmarkGestureRecognizer : UIGestureRecognizer {",
            "    var strokePhase : CheckmarkPhases = .notStarted",
            "    var initialTouchPoint : CGPoint = CGPoint.zero",
            "    var trackedTouch : UITouch? = nil",
            "   // Overridden methods to come..."
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Processing-Touch-Events",
          "level": 3,
          "text": "Processing Touch Events",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The following code shows the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesBegan(_:with:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method, which sets up the initial conditions for recognizing the gesture. The gesture fails immediately if the initial event contains two touches. If there is only one touch, the touch object is saved in the ",
              "type": "text"
            },
            {
              "code": "trackedTouch",
              "type": "codeVoice"
            },
            {
              "text": " property. Because UIKit reuses ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UITouch",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " objects, and therefore overwrites their properties, this method also saves the location of the touch in the ",
              "type": "text"
            },
            {
              "code": "initialTouchPoint",
              "type": "codeVoice"
            },
            {
              "text": " property. After the first touch occurs, any new touches added to the event sequence are ignored.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent) {",
            "   super.touchesBegan(touches, with: event)",
            "   if touches.count != 1 {",
            "      self.state = .failed",
            "   } ",
            " ",
            "   // Capture the first touch and store some information about it.",
            "   if self.trackedTouch == nil {",
            "      self.trackedTouch = touches.first",
            "      self.strokePhase = .initialPoint",
            "      self.initialTouchPoint = (self.trackedTouch?.location(in: self.view))!",
            "   } else {",
            "      // Ignore all but the first touch.",
            "      for touch in touches {",
            "         if touch != self.trackedTouch {",
            "            self.ignore(touch, for: event)",
            "         }",
            "      }",
            "   }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When touch information changes, UIKit calls the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesMoved(_:with:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. The following code shows the implementation of this method for the checkmark gesture. This method verifies that the first touch is the correct one, which it should be because all subsequent touches were ignored. It then looks at the movement of that touch. When the initial movement is down and to the right, this method sets the ",
              "type": "text"
            },
            {
              "code": "strokePhase",
              "type": "codeVoice"
            },
            {
              "text": " property to ",
              "type": "text"
            },
            {
              "code": "downStroke",
              "type": "codeVoice"
            },
            {
              "text": ". When the motion changes direction and starts moving upward, the method changes the stroke phase to ",
              "type": "text"
            },
            {
              "code": "upStroke",
              "type": "codeVoice"
            },
            {
              "text": ". If the gesture deviates from this pattern in any way, the method sets the gestureâ€™s state to failed.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent) {",
            "   super.touchesMoved(touches, with: event)",
            "   let newTouch = touches.first ",
            "   // There should be only the first touch.",
            "   guard newTouch == self.trackedTouch else { ",
            "      self.state = .failed ",
            "      return",
            "   } ",
            "   let newPoint = (newTouch?.location(in: self.view))!",
            "   let previousPoint = (newTouch?.previousLocation(in: self.view))!",
            "   if self.strokePhase == .initialPoint {",
            "      // Make sure the initial movement is down and to the right.",
            "      if newPoint.x >= initialTouchPoint.x && newPoint.y >= initialTouchPoint.y {",
            "         self.strokePhase = .downStroke",
            "      } else {         self.state = .failed",
            "      }",
            "   } else if self.strokePhase == .downStroke {",
            "      // Always keep moving left to right.",
            "      if newPoint.x >= previousPoint.x {",
            "         // If the y direction changes, the gesture is moving up again.",
            "         // Otherwise, the down stroke continues.",
            "         if newPoint.y < previousPoint.y {",
            "            self.strokePhase = .upStroke",
            "         }",
            "      } else {",
            "        // If the new x value is to the left, the gesture fails.",
            "        self.state = .failed",
            "      }",
            "   } else if self.strokePhase == .upStroke {",
            "      // If the new x value is to the left, or the new y value",
            "      // changed directions again, the gesture fails.]",
            "      if newPoint.x < previousPoint.x || newPoint.y > previousPoint.y {",
            "         self.state = .failed",
            "      }",
            "   }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "At the end of the touch sequence, UIKit calls the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesEnded(_:with:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. The following code shows the implementation of this method for the checkmark gesture. If the gesture has not already failed, this method determines whether the gesture was moving upward when it ended and determines whether the final point is higher than the initial point. If both conditions are true, the method sets the state to ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/State-swift.enum/recognized",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": "; otherwise, the gesture fails.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent) {",
            "   super.touchesEnded(touches, with: event) ",
            "   let newTouch = touches.first",
            "   let newPoint = (newTouch?.location(in: self.view))!",
            "   // There should be only the first touch.",
            "   guard newTouch == self.trackedTouch else { ",
            "      self.state = .failed ",
            "      return",
            "   } ",
            "   // If the stroke was moving up and the final point is",
            "   // above the initial point, the gesture succeeds.",
            "   if self.state == .possible && ",
            "         self.strokePhase == .upStroke && ",
            "         newPoint.y < initialTouchPoint.y {",
            "      self.state = .recognized",
            "   } else {",
            "      self.state = .failed",
            "   }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Resetting-the-Gesture-Recognizer",
          "level": 3,
          "text": "Resetting the Gesture Recognizer",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In addition to tracking the touches, the ",
              "type": "text"
            },
            {
              "code": "CheckmarkGestureRecognizer",
              "type": "codeVoice"
            },
            {
              "text": " class implements the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesCancelled(_:with:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/reset()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " methods. The class uses these methods to reset the gesture recognizerâ€™s local properties to appropriate values. The following code shows the implementations of these methods.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent) {",
            "   super.touchesCancelled(touches, with: event)",
            "   self.initialTouchPoint = CGPoint.zero",
            "   self.strokePhase = .notStarted",
            "   self.trackedTouch = nil",
            "   self.state = .cancelled",
            "}",
            " ",
            "override func reset() {",
            "   super.reset()",
            "   self.initialTouchPoint = CGPoint.zero",
            "   self.strokePhase = .notStarted",
            "   self.trackedTouch = nil",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.uikit/documentation/UIKit": {
      "abstract": [
        {
          "text": "Construct and manage a graphical, event-driven user interface for your iOS, iPadOS, or tvOS app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit",
      "kind": "symbol",
      "role": "collection",
      "title": "UIKit",
      "type": "topic",
      "url": "/documentation/uikit"
    },
    "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/State-swift.enum/possible": {
      "abstract": [
        {
          "text": "The gesture recognizer hasnâ€™t yet recognized its gesture, but may be evaluating touch events.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "possible"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/State-swift.enum/possible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UIGestureRecognizerStatePossible"
        }
      ],
      "role": "symbol",
      "title": "UIGestureRecognizer.State.possible",
      "type": "topic",
      "url": "/documentation/uikit/uigesturerecognizer/state-swift.enum/possible"
    },
    "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/State-swift.enum/recognized": {
      "abstract": [
        {
          "text": "The gesture recognizer has received a multitouch sequence that it recognizes as its gesture.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "recognized"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIGestureRecognizer",
          "text": "UIGestureRecognizer"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@UIGestureRecognizerState",
          "text": "State"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/State-swift.enum/recognized",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UIGestureRecognizerStateRecognized"
        }
      ],
      "role": "symbol",
      "title": "recognized",
      "type": "topic",
      "url": "/documentation/uikit/uigesturerecognizer/state-swift.enum/recognized"
    },
    "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/reset()": {
      "abstract": [
        {
          "text": "Overridden to reset internal state when a gesture recognition attempt completes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "reset"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/UIGestureRecognizer/reset()",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "reset"
        }
      ],
      "role": "symbol",
      "title": "reset()",
      "type": "topic",
      "url": "/documentation/uikit/uigesturerecognizer/reset()"
    },
    "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesBegan(_:with:)": {
      "abstract": [
        {
          "text": "Tells this object that one or more new touches occurred in a view or window.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "touchesBegan"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sh",
          "text": "Set"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UITouch",
          "text": "UITouch"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIEvent",
          "text": "UIEvent"
        },
        {
          "kind": "text",
          "text": "?)"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesBegan(_:with:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "touchesBegan:withEvent:"
        }
      ],
      "role": "symbol",
      "title": "touchesBegan(_:with:)",
      "type": "topic",
      "url": "/documentation/uikit/uiresponder/touchesbegan(_:with:)"
    },
    "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesCancelled(_:with:)": {
      "abstract": [
        {
          "text": "Tells the responder when a system event (such as a system alert) cancels a touch sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "touchesCancelled"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sh",
          "text": "Set"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UITouch",
          "text": "UITouch"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIEvent",
          "text": "UIEvent"
        },
        {
          "kind": "text",
          "text": "?)"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesCancelled(_:with:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "touchesCancelled:withEvent:"
        }
      ],
      "role": "symbol",
      "title": "touchesCancelled(_:with:)",
      "type": "topic",
      "url": "/documentation/uikit/uiresponder/touchescancelled(_:with:)"
    },
    "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesEnded(_:with:)": {
      "abstract": [
        {
          "text": "Tells the responder when one or more fingers are raised from a view or window.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "touchesEnded"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sh",
          "text": "Set"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UITouch",
          "text": "UITouch"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIEvent",
          "text": "UIEvent"
        },
        {
          "kind": "text",
          "text": "?)"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesEnded(_:with:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "touchesEnded:withEvent:"
        }
      ],
      "role": "symbol",
      "title": "touchesEnded(_:with:)",
      "type": "topic",
      "url": "/documentation/uikit/uiresponder/touchesended(_:with:)"
    },
    "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesMoved(_:with:)": {
      "abstract": [
        {
          "text": "Tells the responder when one or more touches associated with an event changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "touchesMoved"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sh",
          "text": "Set"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UITouch",
          "text": "UITouch"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIEvent",
          "text": "UIEvent"
        },
        {
          "kind": "text",
          "text": "?)"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/UIResponder/touchesMoved(_:with:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "touchesMoved:withEvent:"
        }
      ],
      "role": "symbol",
      "title": "touchesMoved(_:with:)",
      "type": "topic",
      "url": "/documentation/uikit/uiresponder/touchesmoved(_:with:)"
    },
    "doc://com.apple.uikit/documentation/UIKit/UITouch": {
      "abstract": [
        {
          "text": "An object representing the location, size, movement, and force of a touch occurring on the screen.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UITouch"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/UITouch",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UITouch"
        }
      ],
      "role": "symbol",
      "title": "UITouch",
      "type": "topic",
      "url": "/documentation/uikit/uitouch"
    },
    "doc://com.apple.uikit/documentation/UIKit/about-the-gesture-recognizer-state-machine": {
      "abstract": [
        {
          "text": "Learn about the states and transitions of the state machine that underlies gesture recognizers.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/about-the-gesture-recognizer-state-machine",
      "kind": "article",
      "role": "article",
      "title": "About the Gesture Recognizer State Machine",
      "type": "topic",
      "url": "/documentation/uikit/about-the-gesture-recognizer-state-machine"
    },
    "doc://com.apple.uikit/documentation/UIKit/implementing-a-continuous-gesture-recognizer": {
      "abstract": [
        {
          "text": "For gestures that do not easily match a specific pattern, or when you want to use a gesture recognizer to gather touch input, create a continuous gesture recognizer.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/implementing-a-continuous-gesture-recognizer",
      "kind": "article",
      "role": "article",
      "title": "Implementing a Continuous Gesture Recognizer",
      "type": "topic",
      "url": "/documentation/uikit/implementing-a-continuous-gesture-recognizer"
    },
    "doc://com.apple.uikit/documentation/UIKit/implementing-a-custom-gesture-recognizer": {
      "abstract": [
        {
          "text": "Discover when and how to build your own gesture recognizers.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/implementing-a-custom-gesture-recognizer",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Implementing a custom gesture recognizer",
      "type": "topic",
      "url": "/documentation/uikit/implementing-a-custom-gesture-recognizer"
    },
    "doc://com.apple.uikit/documentation/UIKit/touches-presses-and-gestures": {
      "abstract": [
        {
          "text": "Encapsulate your appâ€™s event-handling logic in gesture recognizers so that you can reuse that code throughout your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.uikit/documentation/UIKit/touches-presses-and-gestures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Touches, presses, and gestures",
      "type": "topic",
      "url": "/documentation/uikit/touches-presses-and-gestures"
    },
    "media-3004410": {
      "alt": "A diagram demonstrating a user triggering a custom checkmark gesture recogniser",
      "identifier": "media-3004410",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/df946833eec7adc4bca211758e93774e/media-3004410@2x.png"
        }
      ]
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Creating-Custom-Gesture-Recognizers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.uikit/documentation/UIKit/about-the-gesture-recognizer-state-machine",
        "doc://com.apple.uikit/documentation/UIKit/implementing-a-continuous-gesture-recognizer"
      ],
      "title": "Creating Custom Gesture Recognizers"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Creating-Custom-Gesture-Recognizers",
              "generated": true,
              "identifiers": [
                "doc://com.apple.uikit/documentation/UIKit/about-the-gesture-recognizer-state-machine",
                "doc://com.apple.uikit/documentation/UIKit/implementing-a-continuous-gesture-recognizer"
              ],
              "title": "Creating Custom Gesture Recognizers"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIGestureRecognizer~1State-swift.enum~1possible/title",
          "value": "UIGestureRecognizerStatePossible"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIGestureRecognizer~1State-swift.enum~1possible/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "UIGestureRecognizerStatePossible"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIGestureRecognizer~1State-swift.enum~1recognized/title",
          "value": "UIGestureRecognizerStateRecognized"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIGestureRecognizer~1State-swift.enum~1recognized/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "UIGestureRecognizerStateRecognized"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIResponder~1touchesMoved(_:with:)/title",
          "value": "touchesMoved:withEvent:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIResponder~1touchesMoved(_:with:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "touchesMoved:withEvent:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIResponder~1touchesBegan(_:with:)/title",
          "value": "touchesBegan:withEvent:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIResponder~1touchesBegan(_:with:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "touchesBegan:withEvent:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIResponder~1touchesEnded(_:with:)/title",
          "value": "touchesEnded:withEvent:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIResponder~1touchesEnded(_:with:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "touchesEnded:withEvent:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIResponder~1touchesCancelled(_:with:)/title",
          "value": "touchesCancelled:withEvent:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIResponder~1touchesCancelled(_:with:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "touchesCancelled:withEvent:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UITouch/title",
          "value": "UITouch"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UITouch/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "UITouch"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UITouch/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "UITouch"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIGestureRecognizer~1reset()/title",
          "value": "reset"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.uikit~1documentation~1UIKit~1UIGestureRecognizer~1reset()/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "reset"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/uikit/implementing-a-discrete-gesture-recognizer"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/uikit/implementing-a-discrete-gesture-recognizer"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
