{
  "abstract": [
    {
      "text": "Use nullability annotations or mark regions as annotated to control how Objective-C",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "declarations are imported into Swift.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift",
        "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/designating-nullability-in-objective-c-apis"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Designating Nullability in Objective-C APIs"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In Objective-C, you work with references to objects by using pointers that can be",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "null, called ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " in Objective-C. In Swift, all values — including object instances",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "— are guaranteed to be non-null. Instead, you represent a value that could be missing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as wrapped in an optional type. When you need to indicate that a value is missing,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you use the value ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can annotate declarations in your Objective-C code to indicate whether an instance",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can have a null or ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " value. Those annotations change how Swift imports your declarations.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For an example of how Swift imports unannotated declarations, consider the following",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "code:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@interface MyList : NSObject",
            "- (MyListItem *)itemWithName:(NSString *)name;",
            "- (NSString *)nameForItem:(MyListItem *)item;",
            "@property (copy) NSArray<MyListItem *> *allItems;",
            "@end"
          ],
          "syntax": "occ",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Swift imports each object instance parameter, return value, and property as an implicitly",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "wrapped optional:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class MyList: NSObject {",
            "    func item(withName name: String!) -> MyListItem!",
            "    func name(for item: MyListItem!) -> String!",
            "    var allItems: [MyListItem]!",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Annotate-Nullability-of-Individual-Declarations",
          "level": 3,
          "text": "Annotate Nullability of Individual Declarations",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can use nullability annotations in your Objective-C code to designate whether",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a parameter type, property type, or return type is nullable. Annotate property declarations,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "parameter types, and return types that are simple objects or block pointers using",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the ",
              "type": "text"
            },
            {
              "code": "nullable",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "nonnull",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "null_resettable",
              "type": "codeVoice"
            },
            {
              "text": " property attributes. If no nullability",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "information is provided for a type, Swift doesn’t distinguish between optional and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "nonoptional references, and imports the type as an implicitly unwrapped optional.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This list describes how Swift imports types with different nullability annotations:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Nonnullable—Imported as nonoptionals, whether annotated directly or by inclusion",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in an annotated region",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Nullable—Imported as optionals",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Without a nullability annotation or with a null_resettable annotation—Imported",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "as implicitly unwrapped optionals",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The following code shows the ",
              "type": "text"
            },
            {
              "code": "MyList",
              "type": "codeVoice"
            },
            {
              "text": " type after annotation. The return types of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the two methods are annotated as ",
              "type": "text"
            },
            {
              "code": "nullable",
              "type": "codeVoice"
            },
            {
              "text": ", because the methods return ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " if",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the list doesn’t contain the given list item or name. All other object instances",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are annotated as ",
              "type": "text"
            },
            {
              "code": "nonnull",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@interface MyList : NSObject",
            "- (nullable MyListItem *)itemWithName:(nonnull NSString *)name;",
            "- (nullable NSString *)nameForItem:(nonnull MyListItem *)item;",
            "@property (copy, nonnull) NSArray<MyListItem *> *allItems;",
            "@end"
          ],
          "syntax": "occ",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "With these annotations, Swift imports the ",
              "type": "text"
            },
            {
              "code": "MyList",
              "type": "codeVoice"
            },
            {
              "text": " type without using any implicitly",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "wrapped optionals:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class MyList: NSObject {",
            "    func item(withName name: String) -> MyListItem?",
            "    func name(for item: MyListItem) -> String?",
            "    var allItems: [MyListItem]",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "nullable",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "nonnull",
              "type": "codeVoice"
            },
            {
              "text": " annotations are simplified forms of the ",
              "type": "text"
            },
            {
              "code": "_Nullable",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "code": "_Nonnull",
              "type": "codeVoice"
            },
            {
              "text": " annotations, which you can use in almost any context that you would",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use the ",
              "type": "text"
            },
            {
              "code": "const",
              "type": "codeVoice"
            },
            {
              "text": " keyword with a pointer type. Complex pointer types, such as ",
              "type": "text"
            },
            {
              "code": "id *",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "must be explicitly annotated using these annotations. For example, to specify a nonnullable",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointer to a nullable object reference, use ",
              "type": "text"
            },
            {
              "code": "_Nullable id * _Nonnull",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Annotate-Regions-as-Nonnullable",
          "level": 3,
          "text": "Annotate Regions as Nonnullable",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can simplify the process of annotating your Objective-C code by marking entire",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "regions as audited for nullability. Within a section of code demarcated by the ",
              "type": "text"
            },
            {
              "code": "NS_ASSUME_NONNULL_BEGIN",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "code": "NS_ASSUME_NONNULL_END",
              "type": "codeVoice"
            },
            {
              "text": " macros, you only need to annotate the nullable type declarations.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Unannotated declarations within the audited region are treated as nonnullable.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Marking the ",
              "type": "text"
            },
            {
              "code": "MyList",
              "type": "codeVoice"
            },
            {
              "text": " declaration as audited for nullability reduces the number of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "annotations that are required. Swift imports the type the same way as in the previous",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "section.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "NS_ASSUME_NONNULL_BEGIN",
            "",
            "@interface MyList : NSObject",
            "- (nullable MyListItem *)itemWithName:(NSString *)name;",
            "- (nullable NSString *)nameForItem:(MyListItem *)item;",
            "@property (copy) NSArray<MyListItem *> *allItems;",
            "@end",
            "",
            "NS_ASSUME_NONNULL_END"
          ],
          "syntax": "occ",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Note that ",
              "type": "text"
            },
            {
              "code": "typedef",
              "type": "codeVoice"
            },
            {
              "text": " types aren’t assumed to be nonnull, even within audited regions,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "because they aren’t inherently nullable.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/grouping-related-objective-c-constants": {
      "abstract": [
        {
          "text": "Add macros to your Objective-C types to group their values in Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/grouping-related-objective-c-constants",
      "kind": "article",
      "role": "article",
      "title": "Grouping Related Objective-C Constants",
      "type": "topic",
      "url": "/documentation/swift/grouping-related-objective-c-constants"
    },
    "doc://com.apple.Swift/documentation/Swift/improving-objective-c-api-declarations-for-swift": {
      "abstract": [
        {
          "text": "Use the ",
          "type": "text"
        },
        {
          "code": "NS_REFINED_FOR_SWIFT",
          "type": "codeVoice"
        },
        {
          "text": " macro to change how an API is imported into Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/improving-objective-c-api-declarations-for-swift",
      "kind": "article",
      "role": "article",
      "title": "Improving Objective-C API Declarations for Swift",
      "type": "topic",
      "url": "/documentation/swift/improving-objective-c-api-declarations-for-swift"
    },
    "doc://com.apple.Swift/documentation/Swift/making-objective-c-apis-unavailable-in-swift": {
      "abstract": [
        {
          "text": "Use the ",
          "type": "text"
        },
        {
          "code": "NS_SWIFT_UNAVAILABLE",
          "type": "codeVoice"
        },
        {
          "text": " macro to prevent an API from being used in Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/making-objective-c-apis-unavailable-in-swift",
      "kind": "article",
      "role": "article",
      "title": "Making Objective-C APIs Unavailable in Swift",
      "type": "topic",
      "url": "/documentation/swift/making-objective-c-apis-unavailable-in-swift"
    },
    "doc://com.apple.Swift/documentation/Swift/marking-api-availability-in-objective-c": {
      "abstract": [
        {
          "text": "Use ",
          "type": "text"
        },
        {
          "code": "a",
          "type": "codeVoice"
        },
        {
          "text": " macro to denote the availability of an Objective-C API.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/marking-api-availability-in-objective-c",
      "kind": "article",
      "role": "article",
      "title": "Marking API Availability in Objective-C",
      "type": "topic",
      "url": "/documentation/swift/marking-api-availability-in-objective-c"
    },
    "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization": {
      "abstract": [
        {
          "text": "Apply macros to your Objective-C APIs to customize how they’re imported into Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Objective-C and C Code Customization",
      "type": "topic",
      "url": "/documentation/swift/objective-c-and-c-code-customization"
    },
    "doc://com.apple.Swift/documentation/Swift/renaming-objective-c-apis-for-swift": {
      "abstract": [
        {
          "text": "Use the ",
          "type": "text"
        },
        {
          "code": "NS_SWIFT_NAME",
          "type": "codeVoice"
        },
        {
          "text": " macro to customize API names for Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/renaming-objective-c-apis-for-swift",
      "kind": "article",
      "role": "article",
      "title": "Renaming Objective-C APIs for Swift",
      "type": "topic",
      "url": "/documentation/swift/renaming-objective-c-apis-for-swift"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Customizing-Objective-C-APIs",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/renaming-objective-c-apis-for-swift",
        "doc://com.apple.Swift/documentation/Swift/improving-objective-c-api-declarations-for-swift",
        "doc://com.apple.Swift/documentation/Swift/grouping-related-objective-c-constants",
        "doc://com.apple.Swift/documentation/Swift/marking-api-availability-in-objective-c",
        "doc://com.apple.Swift/documentation/Swift/making-objective-c-apis-unavailable-in-swift"
      ],
      "title": "Customizing Objective-C APIs"
    }
  ]
}
