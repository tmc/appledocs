{
  "abstract": [
    {
      "text": "A type that represents either a wrapped value or the absence of a value.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    },
    "minor": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.2",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/Optional"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:Sq",
    "fragments": [
      {
        "kind": "keyword",
        "text": "enum"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Optional"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "Optional"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Enumeration",
    "symbolKind": "enum",
    "title": "Optional"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "enum"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Optional"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Wrapped"
            },
            {
              "kind": "text",
              "text": "> "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "Wrapped"
            },
            {
              "kind": "text",
              "text": " : ~Copyable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You use the ",
              "type": "text"
            },
            {
              "code": "Optional",
              "type": "codeVoice"
            },
            {
              "text": " type whenever you use optional values, even if you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "never type the word ",
              "type": "text"
            },
            {
              "code": "Optional",
              "type": "codeVoice"
            },
            {
              "text": ". Swift’s type system usually shows the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "wrapped type’s name with a trailing question mark (",
              "type": "text"
            },
            {
              "code": "?",
              "type": "codeVoice"
            },
            {
              "text": ") instead of showing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the full type name. For example, if a variable has the type ",
              "type": "text"
            },
            {
              "code": "Int?",
              "type": "codeVoice"
            },
            {
              "text": ", that’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "just another way of writing ",
              "type": "text"
            },
            {
              "code": "Optional<Int>",
              "type": "codeVoice"
            },
            {
              "text": ". The shortened form is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "preferred for ease of reading and writing code.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The types of ",
              "type": "text"
            },
            {
              "code": "shortForm",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "longForm",
              "type": "codeVoice"
            },
            {
              "text": " in the following code sample are",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the same:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let shortForm: Int? = Int(\"42\")",
            "let longForm: Optional<Int> = Int(\"42\")"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "Optional",
              "type": "codeVoice"
            },
            {
              "text": " type is an enumeration with two cases. ",
              "type": "text"
            },
            {
              "code": "Optional.none",
              "type": "codeVoice"
            },
            {
              "text": " is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "equivalent to the ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " literal. ",
              "type": "text"
            },
            {
              "code": "Optional.some(Wrapped)",
              "type": "codeVoice"
            },
            {
              "text": " stores a wrapped",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "value. For example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let number: Int? = Optional.some(42)",
            "let noNumber: Int? = Optional.none",
            "print(noNumber == nil)",
            "// Prints \"true\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You must unwrap the value of an ",
              "type": "text"
            },
            {
              "code": "Optional",
              "type": "codeVoice"
            },
            {
              "text": " instance before you can use it",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in many contexts. Because Swift provides several ways to safely unwrap",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "optional values, you can choose the one that helps you write clear,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "concise code.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following examples use this dictionary of image names and file paths:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let imagePaths = [\"star\": \"/glyphs/star.png\",",
            "                  \"portrait\": \"/images/content/portrait.jpg\",",
            "                  \"spacer\": \"/images/shared/spacer.gif\"]"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Getting a dictionary’s value using a key returns an optional value, so",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "imagePaths[\"star\"]",
              "type": "codeVoice"
            },
            {
              "text": " has type ",
              "type": "text"
            },
            {
              "code": "Optional<String>",
              "type": "codeVoice"
            },
            {
              "text": " or, written in the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "preferred manner, ",
              "type": "text"
            },
            {
              "code": "String?",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Optional-Binding",
          "level": 2,
          "text": "Optional Binding",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To conditionally bind the wrapped value of an ",
              "type": "text"
            },
            {
              "code": "Optional",
              "type": "codeVoice"
            },
            {
              "text": " instance to a new",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "variable, use one of the optional binding control structures, including",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "if let",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "guard let",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "switch",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "if let starPath = imagePaths[\"star\"] {",
            "    print(\"The star image is at '\\(starPath)'\")",
            "} else {",
            "    print(\"Couldn't find the star image\")",
            "}",
            "// Prints \"The star image is at '/glyphs/star.png'\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Optional-Chaining",
          "level": 2,
          "text": "Optional Chaining",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To safely access the properties and methods of a wrapped instance, use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "postfix optional chaining operator (postfix ",
              "type": "text"
            },
            {
              "code": "?",
              "type": "codeVoice"
            },
            {
              "text": "). The following example uses",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "optional chaining to access the ",
              "type": "text"
            },
            {
              "code": "hasSuffix(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method on a ",
              "type": "text"
            },
            {
              "code": "String?",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "if imagePaths[\"star\"]?.hasSuffix(\".png\") == true {",
            "    print(\"The star image is in PNG format\")",
            "}",
            "// Prints \"The star image is in PNG format\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Using-the-Nil-Coalescing-Operator",
          "level": 2,
          "text": "Using the Nil-Coalescing Operator",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use the nil-coalescing operator (",
              "type": "text"
            },
            {
              "code": "??",
              "type": "codeVoice"
            },
            {
              "text": ") to supply a default value in case",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the ",
              "type": "text"
            },
            {
              "code": "Optional",
              "type": "codeVoice"
            },
            {
              "text": " instance is ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ". Here a default path is supplied for an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "image that is missing from ",
              "type": "text"
            },
            {
              "code": "imagePaths",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let defaultImagePath = \"/images/default.png\"",
            "let heartPath = imagePaths[\"heart\"] ?? defaultImagePath",
            "print(heartPath)",
            "// Prints \"/images/default.png\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "??",
              "type": "codeVoice"
            },
            {
              "text": " operator also works with another ",
              "type": "text"
            },
            {
              "code": "Optional",
              "type": "codeVoice"
            },
            {
              "text": " instance on the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "right-hand side. As a result, you can chain multiple ",
              "type": "text"
            },
            {
              "code": "??",
              "type": "codeVoice"
            },
            {
              "text": " operators",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "together.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let shapePath = imagePaths[\"cir\"] ?? imagePaths[\"squ\"] ?? defaultImagePath",
            "print(shapePath)",
            "// Prints \"/images/default.png\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Unconditional-Unwrapping",
          "level": 2,
          "text": "Unconditional Unwrapping",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you’re certain that an instance of ",
              "type": "text"
            },
            {
              "code": "Optional",
              "type": "codeVoice"
            },
            {
              "text": " contains a value, you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can unconditionally unwrap the value by using the forced",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "unwrap operator (postfix ",
              "type": "text"
            },
            {
              "code": "!",
              "type": "codeVoice"
            },
            {
              "text": "). For example, the result of the failable ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initializer is unconditionally unwrapped in the example below.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let number = Int(\"42\")!",
            "print(number)",
            "// Prints \"42\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can also perform unconditional optional chaining by using the postfix",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "!",
              "type": "codeVoice"
            },
            {
              "text": " operator.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let isPNG = imagePaths[\"star\"]!.hasSuffix(\".png\")",
            "print(isPNG)",
            "// Prints \"true\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Unconditionally unwrapping a ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " instance with ",
              "type": "text"
            },
            {
              "code": "!",
              "type": "codeVoice"
            },
            {
              "text": " triggers a runtime",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "error.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BitwiseCopyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "role": "symbol",
      "title": "BitwiseCopyable",
      "type": "topic",
      "url": "/documentation/swift/bitwisecopyable"
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/swift/copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation suitable for debugging",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "purposes.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomDebugStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customdebugstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomReflectable": {
      "abstract": [
        {
          "text": "A type that explicitly supplies its own mirror.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "role": "symbol",
      "title": "CustomReflectable",
      "type": "topic",
      "url": "/documentation/swift/customreflectable"
    },
    "doc://com.apple.Swift/documentation/Swift/Decodable": {
      "abstract": [
        {
          "text": "A type that can decode itself from an external representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Decodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Decodable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Decodable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Decodable"
        }
      ],
      "role": "symbol",
      "title": "Decodable",
      "type": "topic",
      "url": "/documentation/swift/decodable"
    },
    "doc://com.apple.Swift/documentation/Swift/Encodable": {
      "abstract": [
        {
          "text": "A type that can encode itself to an external representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Encodable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ],
      "role": "symbol",
      "title": "Encodable",
      "type": "topic",
      "url": "/documentation/swift/encodable"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/swift/equatable"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByNilLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized using the nil literal, ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByNilLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByNilLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByNilLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByNilLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebynilliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a ",
          "type": "text"
        },
        {
          "code": "Hasher",
          "type": "codeVoice"
        },
        {
          "text": " to produce an integer hash value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/swift/hashable"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional": {
      "abstract": [
        {
          "text": "A type that represents either a wrapped value or the absence of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "role": "symbol",
      "title": "Optional",
      "type": "topic",
      "url": "/documentation/swift/optional"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/!=(_:_:)-38b38": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the left-hand-side argument is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "not ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "!="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "borrowing"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "typeIdentifier",
          "text": "_OptionalNilComparisonType"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/!=(_:_:)-38b38",
      "kind": "symbol",
      "role": "symbol",
      "title": "!=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/!=(_:_:)-38b38"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/!=(_:_:)-6xpzw": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the right-hand-side argument is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "not ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "!="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "_OptionalNilComparisonType"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "keyword",
          "text": "borrowing"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": "?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/!=(_:_:)-6xpzw",
      "kind": "symbol",
      "role": "symbol",
      "title": "!=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/!=(_:_:)-6xpzw"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/==(_:_:)-5uee5": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the left-hand-side argument is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "=="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "borrowing"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "typeIdentifier",
          "text": "_OptionalNilComparisonType"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/==(_:_:)-5uee5",
      "kind": "symbol",
      "role": "symbol",
      "title": "==(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/==(_:_:)-5uee5"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/==(_:_:)-6ztpi": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the right-hand-side argument is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "=="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "_OptionalNilComparisonType"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "keyword",
          "text": "borrowing"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": "?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/==(_:_:)-6ztpi",
      "kind": "symbol",
      "role": "symbol",
      "title": "==(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/==(_:_:)-6ztpi"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/AtomicRepresentable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/AtomicRepresentable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "AtomicRepresentable Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/atomicrepresentable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/AttachmentContent-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/AttachmentContent-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "AttachmentContent Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/attachmentcontent-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/Body-4zi6s": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "ToolbarContent",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Body"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/Body-4zi6s",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Body"
        }
      ],
      "role": "symbol",
      "title": "Optional.Body",
      "type": "topic",
      "url": "/documentation/swift/optional/body-4zi6s"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/CustomDebugStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/CustomDebugStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomDebugStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/customdebugstringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/CustomReflectable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/CustomReflectable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomReflectable Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/customreflectable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/CustomTestStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/CustomTestStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomTestStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/customteststringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/Decodable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/Decodable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Decodable Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/decodable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/Encodable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/Encodable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Encodable Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/encodable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/Equatable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/Equatable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Equatable Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/equatable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/ExpressibleByNilLiteral-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/ExpressibleByNilLiteral-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "ExpressibleByNilLiteral Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/expressiblebynilliteral-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/Hashable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/Hashable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Hashable Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/hashable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/Publisher-swift.struct": {
      "abstract": [
        {
          "text": "The type of a Combine publisher that publishes the value of a Swift optional instance to each subscriber exactly once, if the instance has any value at all.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Publisher"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/Publisher-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Publisher"
        }
      ],
      "role": "symbol",
      "title": "Optional.Publisher",
      "type": "topic",
      "url": "/documentation/swift/optional/publisher-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/RelationshipCollection-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/RelationshipCollection-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "RelationshipCollection Implementations",
      "type": "topic",
      "url": "/documentation/swift/optional/relationshipcollection-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/Specification": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "_IntentValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Specification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/Specification",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Specification"
        }
      ],
      "role": "symbol",
      "title": "Optional.Specification",
      "type": "topic",
      "url": "/documentation/swift/optional/specification"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/TableRowBody": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "TableRowContent",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TableRowBody"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/TableRowBody",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TableRowBody"
        }
      ],
      "role": "symbol",
      "title": "Optional.TableRowBody",
      "type": "topic",
      "url": "/documentation/swift/optional/tablerowbody"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/UnwrappedType": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "_IntentValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnwrappedType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/UnwrappedType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnwrappedType"
        }
      ],
      "role": "symbol",
      "title": "Optional.UnwrappedType",
      "type": "topic",
      "url": "/documentation/swift/optional/unwrappedtype"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/ValueType": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "_IntentValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ValueType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/ValueType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ValueType"
        }
      ],
      "role": "symbol",
      "title": "Optional.ValueType",
      "type": "topic",
      "url": "/documentation/swift/optional/valuetype"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/customMirror": {
      "abstract": [
        {
          "text": "The custom mirror for this instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "customMirror"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6MirrorV",
          "text": "Mirror"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/customMirror",
      "kind": "symbol",
      "role": "symbol",
      "title": "customMirror",
      "type": "topic",
      "url": "/documentation/swift/optional/custommirror"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/debugDescription": {
      "abstract": [
        {
          "text": "A textual representation of this instance, suitable for debugging.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "debugDescription"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/debugDescription",
      "kind": "symbol",
      "role": "symbol",
      "title": "debugDescription",
      "type": "topic",
      "url": "/documentation/swift/optional/debugdescription"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/defaultResolverSpecification": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "_IntentValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "defaultResolverSpecification"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10AppIntents12_IntentValueP13UnwrappedTypeQa",
          "text": "UnwrappedType"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10AppIntents12_IntentValueP13SpecificationQa",
          "text": "Specification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/defaultResolverSpecification",
      "kind": "symbol",
      "role": "symbol",
      "title": "defaultResolverSpecification",
      "type": "topic",
      "url": "/documentation/swift/optional/defaultresolverspecification"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/encode(to:)": {
      "abstract": [
        {
          "text": "Encodes this optional value into the given encoder.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "encode"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7EncoderP",
          "text": "Encoder"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/encode(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "encode(to:)",
      "type": "topic",
      "url": "/documentation/swift/optional/encode(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/flatMap(_:)": {
      "abstract": [
        {
          "text": "Evaluates the given closure when this ",
          "type": "text"
        },
        {
          "code": "Optional",
          "type": "codeVoice"
        },
        {
          "text": " instance is not ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ",",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "passing the unwrapped value as a parameter.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "flatMap"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "U"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "U"
        },
        {
          "kind": "text",
          "text": "?) "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "U"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/flatMap(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "flatMap(_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/flatmap(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/hash(into:)": {
      "abstract": [
        {
          "text": "Hashes the essential components of this value by feeding them into the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given hasher.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "into"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6HasherV",
          "text": "Hasher"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/hash(into:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "hash(into:)",
      "type": "topic",
      "url": "/documentation/swift/optional/hash(into:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/hashValue": {
      "abstract": [
        {
          "text": "The hash value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hashValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/hashValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "hashValue",
      "type": "topic",
      "url": "/documentation/swift/optional/hashvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/init(_:)": {
      "abstract": [
        {
          "text": "Creates an instance that stores the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/init(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/init(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/init(from:)": {
      "abstract": [
        {
          "text": "Creates a new instance by decoding from the given decoder.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Decodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7DecoderP",
          "text": "Decoder"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/init(from:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(from:)",
      "type": "topic",
      "url": "/documentation/swift/optional/init(from:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/init(nilLiteral:)": {
      "abstract": [
        {
          "text": "Creates an instance initialized with ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "nilLiteral"
        },
        {
          "kind": "text",
          "text": ": ())"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/init(nilLiteral:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(nilLiteral:)",
      "type": "topic",
      "url": "/documentation/swift/optional/init(nilliteral:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/map(_:)": {
      "abstract": [
        {
          "text": "Evaluates the given closure when this ",
          "type": "text"
        },
        {
          "code": "Optional",
          "type": "codeVoice"
        },
        {
          "text": " instance is not ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ",",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "passing the unwrapped value as a parameter.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "map"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "U"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "U"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "U"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/map(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "map(_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/map(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/none": {
      "abstract": [
        {
          "text": "The absence of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "none"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/none",
      "kind": "symbol",
      "role": "symbol",
      "title": "Optional.none",
      "type": "topic",
      "url": "/documentation/swift/optional/none"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/publisher-swift.property": {
      "abstract": [
        {
          "text": "A Combine publisher that publishes this instance’s value to each subscriber exactly once, if it has any value at all.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "publisher"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sq",
          "text": "Optional"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sq7CombineE9PublisherV",
          "text": "Publisher"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/publisher-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "publisher",
      "type": "topic",
      "url": "/documentation/swift/optional/publisher-swift.property"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/some(_:)": {
      "abstract": [
        {
          "text": "The presence of a value, stored as ",
          "type": "text"
        },
        {
          "code": "Wrapped",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "some"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/some(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "Optional.some(_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/some(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/take()": {
      "abstract": [
        {
          "text": "Takes the wrapped value being stored in this instance and returns it while",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "also setting the instance to ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ". If there is no value being stored in",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "this instance, this returns ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": " instead.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "take"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sq",
          "text": "Optional"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/take()",
      "kind": "symbol",
      "role": "symbol",
      "title": "take()",
      "type": "topic",
      "url": "/documentation/swift/optional/take()"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/unsafelyUnwrapped": {
      "abstract": [
        {
          "text": "The wrapped value of this instance, unwrapped without checking whether",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the instance is ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "unsafelyUnwrapped"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/unsafelyUnwrapped",
      "kind": "symbol",
      "role": "symbol",
      "title": "unsafelyUnwrapped",
      "type": "topic",
      "url": "/documentation/swift/optional/unsafelyunwrapped"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/~=(_:_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether an argument matches ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "~="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "_OptionalNilComparisonType"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "keyword",
          "text": "borrowing"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": "?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/~=(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "~=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/optional/~=(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Swift/__(_:_:)-1fjjj": {
      "abstract": [
        {
          "text": "Performs a nil-coalescing operation, returning the wrapped value of an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Optional",
          "type": "codeVoice"
        },
        {
          "text": " instance or a default ",
          "type": "text"
        },
        {
          "code": "Optional",
          "type": "codeVoice"
        },
        {
          "text": " value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "??"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": "?) "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/__(_:_:)-1fjjj",
      "kind": "symbol",
      "role": "symbol",
      "title": "??(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/__(_:_:)-1fjjj"
    },
    "doc://com.apple.Swift/documentation/Swift/__(_:_:)-9xjze": {
      "abstract": [
        {
          "text": "Performs a nil-coalescing operation, returning the wrapped value of an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Optional",
          "type": "codeVoice"
        },
        {
          "text": " instance or a default value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "??"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/__(_:_:)-9xjze",
      "kind": "symbol",
      "role": "symbol",
      "title": "??(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/__(_:_:)-9xjze"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable": {
      "abstract": [
        {
          "text": "A type that supports atomic operations through a separate atomic storage",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicOptionalRepresentable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicRepresentable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicRepresentable"
        }
      ],
      "role": "symbol",
      "title": "AtomicRepresentable",
      "type": "topic",
      "url": "/documentation/synchronization/atomicrepresentable"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:10Foundation26DecodableWithConfigurationP": {
      "abstract": [
        {
          "text": "A protocol for types that support decoding when supplied with an additional configuration type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "protocol "
        },
        {
          "kind": "identifier",
          "text": "DecodableWithConfiguration"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation26DecodableWithConfigurationP",
      "kind": "symbol",
      "role": "symbol",
      "title": "DecodableWithConfiguration",
      "type": "topic",
      "url": "/documentation/foundation/decodablewithconfiguration"
    },
    "doc://com.externally.resolved.symbol/s:10Foundation26EncodableWithConfigurationP": {
      "abstract": [
        {
          "text": "A protocol for types that support encoding when supplied with an additional configuration type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "protocol "
        },
        {
          "kind": "identifier",
          "text": "EncodableWithConfiguration"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation26EncodableWithConfigurationP",
      "kind": "symbol",
      "role": "symbol",
      "title": "EncodableWithConfiguration",
      "type": "topic",
      "url": "/documentation/foundation/encodablewithconfiguration"
    },
    "doc://com.externally.resolved.symbol/s:15_MapKit_SwiftUI0A7ContentP": {
      "abstract": [
        {
          "text": "A protocol used to construct map content such as controls, markers, and annotations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MapContent"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:15_MapKit_SwiftUI0A7ContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "MapContent",
      "type": "topic",
      "url": "/documentation/MapKit/MapContent"
    },
    "doc://com.externally.resolved.symbol/s:17_StoreKit_SwiftUI0A7ContentP": {
      "abstract": [
        {
          "text": "A type that represents the content of a store.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StoreContent"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:17_StoreKit_SwiftUI0A7ContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "StoreContent",
      "type": "topic",
      "url": "/documentation/StoreKit/StoreContent"
    },
    "doc://com.externally.resolved.symbol/s:19_RealityKit_SwiftUI17AttachmentContentP": {
      "abstract": [
        {
          "text": "A type that provides content for an attachment content builder.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AttachmentContent"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:19_RealityKit_SwiftUI17AttachmentContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "AttachmentContent",
      "type": "topic",
      "url": "/documentation/RealityKit/AttachmentContent"
    },
    "doc://com.externally.resolved.symbol/s:6Charts11AxisContentP": {
      "abstract": [
        {
          "text": "A type that represents the elements you use to build a chart’s axes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AxisContent"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts11AxisContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "AxisContent",
      "type": "topic",
      "url": "/documentation/Charts/AxisContent"
    },
    "doc://com.externally.resolved.symbol/s:6Charts12ChartContentP": {
      "abstract": [
        {
          "text": "A type that represents the content that you draw on a chart.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ChartContent"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts12ChartContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "ChartContent",
      "type": "topic",
      "url": "/documentation/Charts/ChartContent"
    },
    "doc://com.externally.resolved.symbol/s:6Charts8AxisMarkP": {
      "abstract": [
        {
          "text": "A type that serves as the basic building block for the elements of an axis.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AxisMark"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts8AxisMarkP",
      "kind": "symbol",
      "role": "symbol",
      "title": "AxisMark",
      "type": "topic",
      "url": "/documentation/Charts/AxisMark"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI10TabContentP": {
      "abstract": [
        {
          "text": "A type that provides content for programmatically selectable tabs in a tab view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TabContent"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10TabContentP0C5ValueQa",
          "text": "TabValue"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI10TabContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "TabContent",
      "type": "topic",
      "url": "/documentation/SwiftUI/TabContent"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI14ToolbarContentP": {
      "abstract": [
        {
          "text": "Conforming types represent items that can be placed in various locations in a toolbar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ToolbarContent"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI14ToolbarContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "ToolbarContent",
      "type": "topic",
      "url": "/documentation/SwiftUI/ToolbarContent"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI15TableRowContentP": {
      "abstract": [
        {
          "text": "A type used to represent table rows.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TableRowContent"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI15TableRowContentP0cD5ValueQa",
          "text": "TableRowValue"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI15TableRowContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "TableRowContent",
      "type": "topic",
      "url": "/documentation/SwiftUI/TableRowContent"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI18TableColumnContentP": {
      "abstract": [
        {
          "text": "A type used to represent columns within a table.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TableColumnContent"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI18TableColumnContentP0C8RowValueQa",
          "text": "TableRowValue"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI18TableColumnContentP0cD14SortComparatorQa",
          "text": "TableColumnSortComparator"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI18TableColumnContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "TableColumnContent",
      "type": "topic",
      "url": "/documentation/SwiftUI/TableColumnContent"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI26CustomizableToolbarContentP": {
      "abstract": [
        {
          "text": "Conforming types represent items that can be placed in various locations in a customizable toolbar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomizableToolbarContent"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI14ToolbarContentP",
          "text": "ToolbarContent"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI14ToolbarContentP4BodyQa",
          "text": "Body"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI26CustomizableToolbarContentP",
          "text": "CustomizableToolbarContent"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI26CustomizableToolbarContentP",
      "kind": "symbol",
      "role": "symbol",
      "title": "CustomizableToolbarContent",
      "type": "topic",
      "url": "/documentation/SwiftUI/CustomizableToolbarContent"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP": {
      "abstract": [
        {
          "text": "A type that represents part of your app’s user interface and provides modifiers that you use to configure views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
      "kind": "symbol",
      "role": "symbol",
      "title": "View",
      "type": "topic",
      "url": "/documentation/SwiftUI/View"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI7GestureP": {
      "abstract": [
        {
          "text": "An instance that matches a sequence of events to a gesture, and returns a stream of values for each of its states.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Gesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7GestureP5ValueQa",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI7GestureP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Gesture",
      "type": "topic",
      "url": "/documentation/SwiftUI/Gesture"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI8CommandsP": {
      "abstract": [
        {
          "text": "Conforming types represent a group of related commands that can be exposed to the user via the main menu on macOS and key commands on iOS.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Commands"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI8CommandsP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Commands",
      "type": "topic",
      "url": "/documentation/SwiftUI/Commands"
    },
    "doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP": {
      "abstract": [
        {
          "text": "A protocol describing types with a custom string representation when presented as part of a test’s output.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomTestStringConvertible"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP",
      "kind": "symbol",
      "role": "symbol",
      "title": "CustomTestStringConvertible",
      "type": "topic",
      "url": "/documentation/Testing/CustomTestStringConvertible"
    },
    "doc://com.externally.resolved.symbol/s:9SwiftData22RelationshipCollectionP": {
      "abstract": [
        {
          "text": "An interface for describing a collection of related models.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RelationshipCollection"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:9SwiftData22RelationshipCollectionP",
      "kind": "symbol",
      "role": "symbol",
      "title": "RelationshipCollection",
      "type": "topic",
      "url": "/documentation/SwiftData/RelationshipCollection"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
        "doc://com.externally.resolved.symbol/s:19_RealityKit_SwiftUI17AttachmentContentP",
        "doc://com.externally.resolved.symbol/s:6Charts11AxisContentP",
        "doc://com.externally.resolved.symbol/s:6Charts8AxisMarkP",
        "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
        "doc://com.externally.resolved.symbol/s:6Charts12ChartContentP",
        "doc://com.externally.resolved.symbol/s:7SwiftUI8CommandsP",
        "doc://com.apple.Swift/documentation/Swift/Copyable",
        "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
        "doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP",
        "doc://com.externally.resolved.symbol/s:7SwiftUI26CustomizableToolbarContentP",
        "doc://com.apple.Swift/documentation/Swift/Decodable",
        "doc://com.externally.resolved.symbol/s:10Foundation26DecodableWithConfigurationP",
        "doc://com.apple.Swift/documentation/Swift/Encodable",
        "doc://com.externally.resolved.symbol/s:10Foundation26EncodableWithConfigurationP",
        "doc://com.apple.Swift/documentation/Swift/Equatable",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByNilLiteral",
        "doc://com.externally.resolved.symbol/s:7SwiftUI7GestureP",
        "doc://com.apple.Swift/documentation/Swift/Hashable",
        "doc://com.externally.resolved.symbol/s:15_MapKit_SwiftUI0A7ContentP",
        "doc://com.externally.resolved.symbol/s:9SwiftData22RelationshipCollectionP",
        "doc://com.apple.Swift/documentation/Swift/Sendable",
        "doc://com.externally.resolved.symbol/s:17_StoreKit_SwiftUI0A7ContentP",
        "doc://com.externally.resolved.symbol/s:7SwiftUI10TabContentP",
        "doc://com.externally.resolved.symbol/s:7SwiftUI18TableColumnContentP",
        "doc://com.externally.resolved.symbol/s:7SwiftUI15TableRowContentP",
        "doc://com.externally.resolved.symbol/s:7SwiftUI14ToolbarContentP",
        "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "topicSections": [
    {
      "anchor": "Creating-an-Optional-Value",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/some(_:)",
        "doc://com.apple.Swift/documentation/Swift/Optional/init(_:)"
      ],
      "title": "Creating an Optional Value"
    },
    {
      "anchor": "Creating-a-Nil-Value",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/none",
        "doc://com.apple.Swift/documentation/Swift/Optional/init(nilLiteral:)"
      ],
      "title": "Creating a Nil Value"
    },
    {
      "anchor": "Transforming-an-Optional-Value",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/map(_:)",
        "doc://com.apple.Swift/documentation/Swift/Optional/flatMap(_:)"
      ],
      "title": "Transforming an Optional Value"
    },
    {
      "anchor": "Coalescing-Nil-Values",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/__(_:_:)-9xjze",
        "doc://com.apple.Swift/documentation/Swift/__(_:_:)-1fjjj"
      ],
      "title": "Coalescing Nil Values"
    },
    {
      "anchor": "Comparing-Optional-Values",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/==(_:_:)-5uee5",
        "doc://com.apple.Swift/documentation/Swift/Optional/==(_:_:)-6ztpi",
        "doc://com.apple.Swift/documentation/Swift/Optional/!=(_:_:)-38b38",
        "doc://com.apple.Swift/documentation/Swift/Optional/!=(_:_:)-6xpzw",
        "doc://com.apple.Swift/documentation/Swift/Optional/~=(_:_:)"
      ],
      "title": "Comparing Optional Values"
    },
    {
      "anchor": "Encoding-and-Decoding",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/encode(to:)",
        "doc://com.apple.Swift/documentation/Swift/Optional/init(from:)"
      ],
      "title": "Encoding and Decoding"
    },
    {
      "anchor": "Inspecting-an-Optional",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/hash(into:)",
        "doc://com.apple.Swift/documentation/Swift/Optional/unsafelyUnwrapped",
        "doc://com.apple.Swift/documentation/Swift/Optional/debugDescription",
        "doc://com.apple.Swift/documentation/Swift/Optional/customMirror"
      ],
      "title": "Inspecting an Optional"
    },
    {
      "anchor": "Publishing-an-Optional",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/publisher-swift.property",
        "doc://com.apple.Swift/documentation/Swift/Optional/Publisher-swift.struct"
      ],
      "title": "Publishing an Optional"
    },
    {
      "anchor": "Deprecated",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/hashValue"
      ],
      "title": "Deprecated"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/take()"
      ],
      "title": "Instance Methods"
    },
    {
      "anchor": "Type-Aliases",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/Body-4zi6s",
        "doc://com.apple.Swift/documentation/Swift/Optional/Specification",
        "doc://com.apple.Swift/documentation/Swift/Optional/TableRowBody",
        "doc://com.apple.Swift/documentation/Swift/Optional/UnwrappedType",
        "doc://com.apple.Swift/documentation/Swift/Optional/ValueType"
      ],
      "title": "Type Aliases"
    },
    {
      "anchor": "Type-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/defaultResolverSpecification"
      ],
      "title": "Type Properties"
    },
    {
      "anchor": "Default-Implementations",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Optional/AtomicRepresentable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/AttachmentContent-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/CustomDebugStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/CustomReflectable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/CustomTestStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/Decodable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/Encodable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/Equatable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/ExpressibleByNilLiteral-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/Hashable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Optional/RelationshipCollection-Implementations"
      ],
      "title": "Default Implementations"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/optional"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
