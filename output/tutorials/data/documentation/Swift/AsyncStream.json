{
  "abstract": [
    {
      "text": "An asynchronous sequence generated from a closure that calls a continuation",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "to produce new elements.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    },
    "minor": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.2",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/AsyncStream"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:ScS",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "AsyncStream"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "AsyncStream"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.15",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "6.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "AsyncStream"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "AsyncStream"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Element"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "code": "AsyncStream",
              "type": "codeVoice"
            },
            {
              "text": " conforms to ",
              "type": "text"
            },
            {
              "code": "AsyncSequence",
              "type": "codeVoice"
            },
            {
              "text": ", providing a convenient way to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "create an asynchronous sequence without manually implementing an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "asynchronous iterator. In particular, an asynchronous stream is well-suited",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to adapt callback- or delegation-based APIs to participate with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "await",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You initialize an ",
              "type": "text"
            },
            {
              "code": "AsyncStream",
              "type": "codeVoice"
            },
            {
              "text": " with a closure that receives an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "AsyncStream.Continuation",
              "type": "codeVoice"
            },
            {
              "text": ". Produce elements in this closure, then provide",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "them to the stream by calling the continuation’s ",
              "type": "text"
            },
            {
              "code": "yield(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method. When",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "there are no further elements to produce, call the continuation’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "finish()",
              "type": "codeVoice"
            },
            {
              "text": " method. This causes the sequence iterator to produce a ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "which terminates the sequence. The continuation conforms to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": ", which permits",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "calling it from concurrent contexts external to the iteration of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "AsyncStream",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "An arbitrary source of elements can produce elements faster than they are",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "consumed by a caller iterating over them. Because of this, ",
              "type": "text"
            },
            {
              "code": "AsyncStream",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "defines a buffering behavior, allowing the stream to buffer a specific",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "number of oldest or newest elements. By default, the buffer limit is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Int.max",
              "type": "codeVoice"
            },
            {
              "text": ", which means the value is unbounded.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Adapting-Existing-Code-to-Use-Streams",
          "level": 3,
          "text": "Adapting Existing Code to Use Streams",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To adapt existing callback code to use ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "await",
              "type": "codeVoice"
            },
            {
              "text": ", use the callbacks",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to provide values to the stream, by using the continuation’s ",
              "type": "text"
            },
            {
              "code": "yield(_:)",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Consider a hypothetical ",
              "type": "text"
            },
            {
              "code": "QuakeMonitor",
              "type": "codeVoice"
            },
            {
              "text": " type that provides callers with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Quake",
              "type": "codeVoice"
            },
            {
              "text": " instances every time it detects an earthquake. To receive callbacks,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "callers set a custom closure as the value of the monitor’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "quakeHandler",
              "type": "codeVoice"
            },
            {
              "text": " property, which the monitor calls back as necessary.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class QuakeMonitor {",
            "    var quakeHandler: ((Quake) -> Void)?",
            "",
            "    func startMonitoring() {…}",
            "    func stopMonitoring() {…}",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To adapt this to use ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "await",
              "type": "codeVoice"
            },
            {
              "text": ", extend the ",
              "type": "text"
            },
            {
              "code": "QuakeMonitor",
              "type": "codeVoice"
            },
            {
              "text": " to add a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "quakes",
              "type": "codeVoice"
            },
            {
              "text": " property, of type ",
              "type": "text"
            },
            {
              "code": "AsyncStream<Quake>",
              "type": "codeVoice"
            },
            {
              "text": ". In the getter for this",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property, return an ",
              "type": "text"
            },
            {
              "code": "AsyncStream",
              "type": "codeVoice"
            },
            {
              "text": ", whose ",
              "type": "text"
            },
            {
              "code": "build",
              "type": "codeVoice"
            },
            {
              "text": " closure – called at",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "runtime to create the stream – uses the continuation to perform the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "following steps:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Creates a ",
                      "type": "text"
                    },
                    {
                      "code": "QuakeMonitor",
                      "type": "codeVoice"
                    },
                    {
                      "text": " instance.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Sets the monitor’s ",
                      "type": "text"
                    },
                    {
                      "code": "quakeHandler",
                      "type": "codeVoice"
                    },
                    {
                      "text": " property to a closure that receives",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "each ",
                      "type": "text"
                    },
                    {
                      "code": "Quake",
                      "type": "codeVoice"
                    },
                    {
                      "text": " instance and forwards it to the stream by calling the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "continuation’s ",
                      "type": "text"
                    },
                    {
                      "code": "yield(_:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Sets the continuation’s ",
                      "type": "text"
                    },
                    {
                      "code": "onTermination",
                      "type": "codeVoice"
                    },
                    {
                      "text": " property to a closure that",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "calls ",
                      "type": "text"
                    },
                    {
                      "code": "stopMonitoring()",
                      "type": "codeVoice"
                    },
                    {
                      "text": " on the monitor.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Calls ",
                      "type": "text"
                    },
                    {
                      "code": "startMonitoring",
                      "type": "codeVoice"
                    },
                    {
                      "text": " on the ",
                      "type": "text"
                    },
                    {
                      "code": "QuakeMonitor",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "orderedList"
        },
        {
          "code": [
            "extension QuakeMonitor {",
            "",
            "    static var quakes: AsyncStream<Quake> {",
            "        AsyncStream { continuation in",
            "            let monitor = QuakeMonitor()",
            "            monitor.quakeHandler = { quake in",
            "                continuation.yield(quake)",
            "            }",
            "            continuation.onTermination = { @Sendable _ in",
            "                 monitor.stopMonitoring()",
            "            }",
            "            monitor.startMonitoring()",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Because the stream is an ",
              "type": "text"
            },
            {
              "code": "AsyncSequence",
              "type": "codeVoice"
            },
            {
              "text": ", the call point can use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "await",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " syntax to process each ",
              "type": "text"
            },
            {
              "code": "Quake",
              "type": "codeVoice"
            },
            {
              "text": " instance as the stream",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "produces it:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "for await quake in QuakeMonitor.quakes {",
            "    print(\"Quake: \\(quake.date)\")",
            "}",
            "print(\"Stream finished.\")"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncSequence": {
      "abstract": [
        {
          "text": "A type that provides asynchronous, sequential, iterated access to its",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream": {
      "abstract": [
        {
          "text": "An asynchronous sequence generated from a closure that calls a continuation",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to produce new elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncStream"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncStream"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream",
      "type": "topic",
      "url": "/documentation/swift/asyncstream"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/AsyncIterator": {
      "abstract": [
        {
          "text": "The type of asynchronous iterator that produces elements of this",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/AsyncIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncIterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.AsyncIterator",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/asynciterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/AsyncSequence-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/AsyncSequence-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "AsyncSequence Implementations",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/asyncsequence-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation": {
      "abstract": [
        {
          "text": "A mechanism to interface between synchronous code and an asynchronous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "stream.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Continuation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Continuation"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Continuation",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/continuation"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/BufferingPolicy": {
      "abstract": [
        {
          "text": "A strategy that handles exhaustion of a buffer’s capacity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BufferingPolicy"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/BufferingPolicy",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BufferingPolicy"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Continuation.BufferingPolicy",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/continuation/bufferingpolicy"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Iterator": {
      "abstract": [
        {
          "text": "The asynchronous iterator for iterating an asynchronous stream.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/allSatisfy(_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether all elements produced by the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous sequence satisfy the given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "allSatisfy"
        },
        {
          "kind": "text",
          "text": "(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/allSatisfy(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "allSatisfy(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/allsatisfy(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/compactMap(_:)-7mgjd": {
      "abstract": [
        {
          "text": "Creates an asynchronous sequence that maps the given closure over the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous sequence’s elements, omitting results that don’t return a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compactMap"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "ElementOfResult"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "ElementOfResult"
        },
        {
          "kind": "text",
          "text": "?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency23AsyncCompactMapSequenceV",
          "text": "AsyncCompactMapSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "ElementOfResult"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/compactMap(_:)-7mgjd",
      "kind": "symbol",
      "role": "symbol",
      "title": "compactMap(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/compactmap(_:)-7mgjd"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/compactMap(_:)-944op": {
      "abstract": [
        {
          "text": "Creates an asynchronous sequence that maps an error-throwing closure over",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the base sequence’s elements, omitting results that don’t return a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compactMap"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "ElementOfResult"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "ElementOfResult"
        },
        {
          "kind": "text",
          "text": "?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency31AsyncThrowingCompactMapSequenceV",
          "text": "AsyncThrowingCompactMapSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "ElementOfResult"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/compactMap(_:)-944op",
      "kind": "symbol",
      "role": "symbol",
      "title": "compactMap(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/compactmap(_:)-944op"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/contains(_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the asynchronous sequence",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contains the given element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/contains(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "contains(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/contains(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/contains(where:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the asynchronous sequence",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contains an element that satisfies the given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/contains(where:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "contains(where:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/contains(where:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/drop(while:)": {
      "abstract": [
        {
          "text": "Omits elements from the base asynchronous sequence until a given closure",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "returns false, after which it passes through all remaining elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "drop"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "while"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency22AsyncDropWhileSequenceV",
          "text": "AsyncDropWhileSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/drop(while:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "drop(while:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/drop(while:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/dropFirst(_:)": {
      "abstract": [
        {
          "text": "Omits a specified number of elements from the base asynchronous sequence,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "then passes through all remaining elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "dropFirst"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency22AsyncDropFirstSequenceV",
          "text": "AsyncDropFirstSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/dropFirst(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "dropFirst(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/dropfirst(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/filter(_:)": {
      "abstract": [
        {
          "text": "Creates an asynchronous sequence that contains, in order, the elements of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the base sequence that satisfy the given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "filter"
        },
        {
          "kind": "text",
          "text": "(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency19AsyncFilterSequenceV",
          "text": "AsyncFilterSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/filter(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "filter(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/filter(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/first(where:)": {
      "abstract": [
        {
          "text": "Returns the first element of the sequence that satisfies the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "first"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/first(where:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "first(where:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/first(where:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/flatMap(_:)-vhhr": {
      "abstract": [
        {
          "text": "Creates an asynchronous sequence that concatenates the results of calling",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the given error-throwing transformation with each element of this",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "flatMap"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "SegmentOfResult"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "SegmentOfResult"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency28AsyncThrowingFlatMapSequenceV",
          "text": "AsyncThrowingFlatMapSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "SegmentOfResult"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/flatMap(_:)-vhhr",
      "kind": "symbol",
      "role": "symbol",
      "title": "flatMap(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/flatmap(_:)-vhhr"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/init(_:bufferingPolicy:_:)": {
      "abstract": [
        {
          "text": "Constructs an asynchronous stream for an element type, using the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "specified buffering policy and element-producing closure.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ".Type, "
        },
        {
          "kind": "externalParam",
          "text": "bufferingPolicy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS12ContinuationV",
          "text": "Continuation"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS12ContinuationV15BufferingPolicyO",
          "text": "BufferingPolicy"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS12ContinuationV",
          "text": "Continuation"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/init(_:bufferingPolicy:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:bufferingPolicy:_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/init(_:bufferingpolicy:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/init(unfolding:onCancel:)": {
      "abstract": [
        {
          "text": "Constructs an asynchronous stream from a given element-producing",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "closure, with an optional closure to handle cancellation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "unfolding"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "onCancel"
        },
        {
          "kind": "text",
          "text": ": (() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ")?)"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/init(unfolding:onCancel:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(unfolding:onCancel:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/init(unfolding:oncancel:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/makeAsyncIterator()": {
      "abstract": [
        {
          "text": "Creates the asynchronous iterator that produces elements of this",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "makeAsyncIterator"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS8IteratorV",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/makeAsyncIterator()",
      "kind": "symbol",
      "role": "symbol",
      "title": "makeAsyncIterator()",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/makeasynciterator()"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/makeStream(of:bufferingPolicy:)": {
      "abstract": [
        {
          "text": "Initializes a new ",
          "type": "text"
        },
        {
          "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": " and an ",
          "type": "text"
        },
        {
          "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "makeStream"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ".Type, "
        },
        {
          "kind": "externalParam",
          "text": "bufferingPolicy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS12ContinuationV",
          "text": "Continuation"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS12ContinuationV15BufferingPolicyO",
          "text": "BufferingPolicy"
        },
        {
          "kind": "text",
          "text": ") -> (stream"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">, continuation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS12ContinuationV",
          "text": "Continuation"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/makeStream(of:bufferingPolicy:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "makeStream(of:bufferingPolicy:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/makestream(of:bufferingpolicy:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/map(_:)-4a4la": {
      "abstract": [
        {
          "text": "Creates an asynchronous sequence that maps the given closure over the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous sequence’s elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "map"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Transformed"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Transformed"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency16AsyncMapSequenceV",
          "text": "AsyncMapSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Transformed"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/map(_:)-4a4la",
      "kind": "symbol",
      "role": "symbol",
      "title": "map(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/map(_:)-4a4la"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/map(_:)-58nsf": {
      "abstract": [
        {
          "text": "Creates an asynchronous sequence that maps the given error-throwing",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "closure over the asynchronous sequence’s elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "map"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Transformed"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Transformed"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency24AsyncThrowingMapSequenceV",
          "text": "AsyncThrowingMapSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Transformed"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/map(_:)-58nsf",
      "kind": "symbol",
      "role": "symbol",
      "title": "map(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/map(_:)-58nsf"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/max()": {
      "abstract": [
        {
          "text": "Returns the maximum element in an asynchronous sequence of comparable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/max()",
      "kind": "symbol",
      "role": "symbol",
      "title": "max()",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/max()"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/max(by:)": {
      "abstract": [
        {
          "text": "Returns the maximum element in the asynchronous sequence, using the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "predicate as the comparison between elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/max(by:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(by:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/max(by:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/min()": {
      "abstract": [
        {
          "text": "Returns the minimum element in an asynchronous sequence of comparable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/min()",
      "kind": "symbol",
      "role": "symbol",
      "title": "min()",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/min()"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/min(by:)": {
      "abstract": [
        {
          "text": "Returns the minimum element in the asynchronous sequence, using the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "predicate as the comparison between elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/min(by:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(by:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/min(by:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/prefix(_:)": {
      "abstract": [
        {
          "text": "Returns an asynchronous sequence, up to the specified maximum length,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "containing the initial elements of the base asynchronous sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "prefix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency19AsyncPrefixSequenceV",
          "text": "AsyncPrefixSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/prefix(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "prefix(_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/prefix(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/prefix(while:)": {
      "abstract": [
        {
          "text": "Returns an asynchronous sequence, containing the initial, consecutive",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of the base sequence that satisfy the given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "prefix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "while"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency24AsyncPrefixWhileSequenceV",
          "text": "AsyncPrefixWhileSequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/prefix(while:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "prefix(while:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/prefix(while:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/reduce(_:_:)": {
      "abstract": [
        {
          "text": "Returns the result of combining the elements of the asynchronous sequence",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "using the given closure.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "reduce"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/reduce(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "reduce(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/reduce(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/reduce(into:_:)": {
      "abstract": [
        {
          "text": "Returns the result of combining the elements of the asynchronous sequence",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "using the given closure, given a mutable initial value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "reduce"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "into"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sci7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/reduce(into:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "reduce(into:_:)",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/reduce(into:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream": {
      "abstract": [
        {
          "text": "An asynchronous sequence generated from an error-throwing closure that",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "calls a continuation to produce new elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingStream"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingStream"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingStream",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingstream"
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/swift/copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncSequence",
        "doc://com.apple.Swift/documentation/Swift/Copyable",
        "doc://com.apple.Swift/documentation/Swift/Sendable"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Asynchronous-Sequences",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream"
      ],
      "title": "Asynchronous Sequences"
    }
  ],
  "topicSections": [
    {
      "anchor": "Creating-a-Continuation-Based-Stream",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/init(_:bufferingPolicy:_:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/BufferingPolicy",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation"
      ],
      "title": "Creating a Continuation-Based Stream"
    },
    {
      "anchor": "Creating-a-Stream-from-an-Asynchronous-Function",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/init(unfolding:onCancel:)"
      ],
      "title": "Creating a Stream from an Asynchronous Function"
    },
    {
      "anchor": "Finding-Elements",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/contains(_:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/contains(where:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/allSatisfy(_:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/first(where:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/min()",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/min(by:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/max()",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/max(by:)"
      ],
      "title": "Finding Elements"
    },
    {
      "anchor": "Selecting-Elements",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/prefix(_:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/prefix(while:)"
      ],
      "title": "Selecting Elements"
    },
    {
      "anchor": "Excluding-Elements",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/dropFirst(_:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/drop(while:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/filter(_:)"
      ],
      "title": "Excluding Elements"
    },
    {
      "anchor": "Transforming-a-Sequence",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/map(_:)-58nsf",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/map(_:)-4a4la",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/compactMap(_:)-7mgjd",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/compactMap(_:)-944op",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/flatMap(_:)-vhhr",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/reduce(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/reduce(into:_:)"
      ],
      "title": "Transforming a Sequence"
    },
    {
      "anchor": "Creating-an-Iterator",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/makeAsyncIterator()",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Iterator"
      ],
      "title": "Creating an Iterator"
    },
    {
      "anchor": "Supporting-Types",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/AsyncIterator"
      ],
      "title": "Supporting Types"
    },
    {
      "anchor": "Type-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/makeStream(of:bufferingPolicy:)"
      ],
      "title": "Type Methods"
    },
    {
      "anchor": "Default-Implementations",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/AsyncSequence-Implementations"
      ],
      "title": "Default Implementations"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/asyncstream"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
