{
  "abstract": [
    {
      "text": "A floating-point numeric type.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/FloatingPoint"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:SF",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "FloatingPoint"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "FloatingPoint"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "FloatingPoint"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "FloatingPoint"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SH",
              "text": "Hashable"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/SignedNumeric",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s13SignedNumericP",
              "text": "SignedNumeric"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Strideable",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sx",
              "text": "Strideable"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "Self"
            },
            {
              "kind": "text",
              "text": " == "
            },
            {
              "kind": "typeIdentifier",
              "text": "Self"
            },
            {
              "kind": "text",
              "text": "."
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Numeric/Magnitude-swift.associatedtype",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sj9MagnitudeQa",
              "text": "Magnitude"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Floating-point types are used to represent fractional numbers, like 5.5,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "100.0, or 3.14159274. Each floating-point type has its own possible range",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and precision. The floating-point types in the standard library are",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Float",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "Double",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "Float80",
              "type": "codeVoice"
            },
            {
              "text": " where available.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Create new instances of floating-point types using integer or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "floating-point literals. For example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let temperature = 33.2",
            "let recordHigh = 37.5"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "FloatingPoint",
              "type": "codeVoice"
            },
            {
              "text": " protocol declares common arithmetic operations, so you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can write functions and algorithms that work on any floating-point type.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The following example declares a function that calculates the length of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the hypotenuse of a right triangle given its two perpendicular sides.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Because the ",
              "type": "text"
            },
            {
              "code": "hypotenuse(_:_:)",
              "type": "codeVoice"
            },
            {
              "text": " function uses a generic parameter",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "constrained to the ",
              "type": "text"
            },
            {
              "code": "FloatingPoint",
              "type": "codeVoice"
            },
            {
              "text": " protocol, you can call it using any",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "floating-point type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func hypotenuse<T: FloatingPoint>(_ a: T, _ b: T) -> T {",
            "    return (a * a + b * b).squareRoot()",
            "}",
            "",
            "let (dx, dy) = (3.0, 4.0)",
            "let distance = hypotenuse(dx, dy)",
            "// distance == 5.0"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Floating-point values are represented as a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "sign",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "magnitude",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ", where",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the magnitude is calculated using the type’s ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "radix",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and the instance’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "significand",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "exponent",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ". This magnitude calculation takes the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "following form for a floating-point value ",
              "type": "text"
            },
            {
              "code": "x",
              "type": "codeVoice"
            },
            {
              "text": " of type ",
              "type": "text"
            },
            {
              "code": "F",
              "type": "codeVoice"
            },
            {
              "text": ", where ",
              "type": "text"
            },
            {
              "code": "**",
              "type": "codeVoice"
            },
            {
              "text": " is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "exponentiation:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "x.significand * (F.radix ** x.exponent)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s an example of the number -8.5 represented as an instance of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Double",
              "type": "codeVoice"
            },
            {
              "text": " type, which defines a radix of 2.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let y = -8.5",
            "// y.sign == .minus",
            "// y.significand == 1.0625",
            "// y.exponent == 3",
            "",
            "let magnitude = 1.0625 * Double(2 ** 3)",
            "// magnitude == 8.5"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Types that conform to the ",
              "type": "text"
            },
            {
              "code": "FloatingPoint",
              "type": "codeVoice"
            },
            {
              "text": " protocol provide most basic",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(clause 5) operations of the ",
              "type": "text"
            },
            {
              "identifier": "http://ieeexplore.ieee.org/servlet/opac?punumber=4610933",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". The base,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "precision, and exponent range are not fixed in any way by this protocol,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "but it enforces the basic requirements of any IEEE 754 floating-point",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Additional-Considerations",
          "level": 1,
          "text": "Additional Considerations",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In addition to representing specific numbers, floating-point types also",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "have special values for working with overflow and nonnumeric results of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "calculation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Infinity",
          "level": 2,
          "text": "Infinity",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Any value whose magnitude is so great that it would round to a value",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "outside the range of representable numbers is rounded to ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "infinity",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ". For a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type ",
              "type": "text"
            },
            {
              "code": "F",
              "type": "codeVoice"
            },
            {
              "text": ", positive and negative infinity are represented as ",
              "type": "text"
            },
            {
              "code": "F.infinity",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "code": "-F.infinity",
              "type": "codeVoice"
            },
            {
              "text": ", respectively. Positive infinity compares greater than",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "every finite value and negative infinity, while negative infinity compares",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "less than every finite value and positive infinity. Infinite values with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the same sign are equal to each other.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let values: [Double] = [10.0, 25.0, -10.0, .infinity, -.infinity]",
            "print(values.sorted())",
            "// Prints \"[-inf, -10.0, 10.0, 25.0, inf]\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Operations with infinite values follow real arithmetic as much as possible:",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Adding or subtracting a finite value, or multiplying or dividing infinity",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "by a nonzero finite value, results in infinity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "NaN-not-a-number",
          "level": 2,
          "text": "NaN (“not a number”)",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Floating-point types represent values that are neither finite numbers nor",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "infinity as NaN, an abbreviation for “not a number.” Comparing a NaN with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "any value, including another NaN, results in ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let myNaN = Double.nan",
            "print(myNaN > 0)",
            "// Prints \"false\"",
            "print(myNaN < 0)",
            "// Prints \"false\"",
            "print(myNaN == .nan)",
            "// Prints \"false\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Because testing whether one NaN is equal to another NaN results in ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use the ",
              "type": "text"
            },
            {
              "code": "isNaN",
              "type": "codeVoice"
            },
            {
              "text": " property to test whether a value is NaN.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "print(myNaN.isNaN)",
            "// Prints \"true\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "NaN propagates through many arithmetic operations. When you are operating",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "on many values, this behavior is valuable because operations on NaN simply",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "forward the value and don’t cause runtime errors. The following example",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "shows how NaN values operate in different contexts.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Imagine you have a set of temperature data for which you need to report",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "some general statistics: the total number of observations, the number of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "valid observations, and the average temperature. First, a set of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "observations in Celsius is parsed from strings to ",
              "type": "text"
            },
            {
              "code": "Double",
              "type": "codeVoice"
            },
            {
              "text": " values:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let temperatureData = [\"21.5\", \"19.25\", \"27\", \"no data\", \"28.25\", \"no data\", \"23\"]",
            "let tempsCelsius = temperatureData.map { Double($0) ?? .nan }",
            "print(tempsCelsius)",
            "// Prints \"[21.5, 19.25, 27, nan, 28.25, nan, 23.0]\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Note that some elements in the ",
              "type": "text"
            },
            {
              "code": "temperatureData ",
              "type": "codeVoice"
            },
            {
              "text": " array are not valid",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "numbers. When these invalid strings are parsed by the ",
              "type": "text"
            },
            {
              "code": "Double",
              "type": "codeVoice"
            },
            {
              "text": " failable",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initializer, the example uses the nil-coalescing operator (",
              "type": "text"
            },
            {
              "code": "??",
              "type": "codeVoice"
            },
            {
              "text": ") to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "provide NaN as a fallback value.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Next, the observations in Celsius are converted to Fahrenheit:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let tempsFahrenheit = tempsCelsius.map { $0 * 1.8 + 32 }",
            "print(tempsFahrenheit)",
            "// Prints \"[70.7, 66.65, 80.6, nan, 82.85, nan, 73.4]\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The NaN values in the ",
              "type": "text"
            },
            {
              "code": "tempsCelsius",
              "type": "codeVoice"
            },
            {
              "text": " array are propagated through the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "conversion and remain NaN in ",
              "type": "text"
            },
            {
              "code": "tempsFahrenheit",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Because calculating the average of the observations involves combining",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "every value of the ",
              "type": "text"
            },
            {
              "code": "tempsFahrenheit",
              "type": "codeVoice"
            },
            {
              "text": " array, any NaN values cause the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "result to also be NaN, as seen in this example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let badAverage = tempsFahrenheit.reduce(0.0, +) / Double(tempsFahrenheit.count)",
            "// badAverage.isNaN == true"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Instead, when you need an operation to have a specific numeric result,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "filter out any NaN values using the ",
              "type": "text"
            },
            {
              "code": "isNaN",
              "type": "codeVoice"
            },
            {
              "text": " property.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let validTemps = tempsFahrenheit.filter { !$0.isNaN }",
            "let average = validTemps.reduce(0.0, +) / Double(validTemps.count)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, report the average temperature and observation counts:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "print(\"Average: \\(average)°F in \\(validTemps.count) \" +",
            "      \"out of \\(tempsFahrenheit.count) observations.\")",
            "// Prints \"Average: 74.84°F in 5 out of 7 observations.\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AdditiveArithmetic": {
      "abstract": [
        {
          "text": "A type with values that support addition and subtraction.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AdditiveArithmetic"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AdditiveArithmetic",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AdditiveArithmetic"
        }
      ],
      "role": "symbol",
      "title": "AdditiveArithmetic",
      "type": "topic",
      "url": "/documentation/swift/additivearithmetic"
    },
    "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint": {
      "abstract": [
        {
          "text": "A radix-2 (binary) floating-point type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BinaryFloatingPoint"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BinaryFloatingPoint"
        }
      ],
      "role": "symbol",
      "title": "BinaryFloatingPoint",
      "type": "topic",
      "url": "/documentation/swift/binaryfloatingpoint"
    },
    "doc://com.apple.Swift/documentation/Swift/Comparable": {
      "abstract": [
        {
          "text": "A type that can be compared using the relational operators ",
          "type": "text"
        },
        {
          "code": "<",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "<=",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": ">=",
          "type": "codeVoice"
        },
        {
          "text": ",",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and ",
          "type": "text"
        },
        {
          "code": ">",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Comparable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Comparable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Comparable"
        }
      ],
      "role": "symbol",
      "title": "Comparable",
      "type": "topic",
      "url": "/documentation/swift/comparable"
    },
    "doc://com.apple.Swift/documentation/Swift/Double": {
      "abstract": [
        {
          "text": "A double-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "role": "symbol",
      "title": "Double",
      "type": "topic",
      "url": "/documentation/swift/double"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/swift/equatable"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByIntegerLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with an integer literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByIntegerLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByIntegerLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByIntegerLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByIntegerLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyintegerliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/Float": {
      "abstract": [
        {
          "text": "A single-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "role": "symbol",
      "title": "Float",
      "type": "topic",
      "url": "/documentation/swift/float"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16": {
      "abstract": [
        {
          "text": "A half-precision (16b), floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "role": "symbol",
      "title": "Float16",
      "type": "topic",
      "url": "/documentation/swift/float16"
    },
    "doc://com.apple.Swift/documentation/Swift/Float80": {
      "abstract": [
        {
          "text": "An extended-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float80",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "role": "symbol",
      "title": "Float80",
      "type": "topic",
      "url": "/documentation/swift/float80"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint": {
      "abstract": [
        {
          "text": "A floating-point numeric type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPoint"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPoint"
        }
      ],
      "role": "symbol",
      "title": "FloatingPoint",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/*(_:_:)": {
      "abstract": [
        {
          "text": "Multiplies two values and produces their product, rounding to a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "*"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/*(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "*(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/*(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/*=(_:_:)": {
      "abstract": [
        {
          "text": "Multiplies two values and stores the result in the left-hand-side",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "variable, rounding to a representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "*="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/*=(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "*=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/*=(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/+(_:_:)": {
      "abstract": [
        {
          "text": "Adds two values and produces their sum, rounded to a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "+"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/+(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "+(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/+(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/+=(_:_:)": {
      "abstract": [
        {
          "text": "Adds two values and stores the result in the left-hand-side variable,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "rounded to a representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "+="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/+=(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "+=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/+=(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-(_:)": {
      "abstract": [
        {
          "text": "Calculates the additive inverse of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "-"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "-(_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/-(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-(_:_:)": {
      "abstract": [
        {
          "text": "Subtracts one value from another and produces their difference, rounded",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to a representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "-"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "-(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/-(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-=(_:_:)": {
      "abstract": [
        {
          "text": "Subtracts the second value from the first and stores the difference in",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the left-hand-side variable, rounding to a representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "-="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-=(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "-=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/-=(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/Exponent-swift.associatedtype": {
      "abstract": [
        {
          "text": "A type that can represent any written exponent.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Exponent"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SZ",
          "text": "SignedInteger"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/Exponent-swift.associatedtype",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "Exponent",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/exponent-swift.associatedtype"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/_(_:_:)": {
      "abstract": [
        {
          "text": "Returns the quotient of dividing the first value by the second, rounded",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to a representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "/"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/_(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "/(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/_(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/_=(_:_:)": {
      "abstract": [
        {
          "text": "Divides the first value by the second and stores the quotient in the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "left-hand-side variable, rounding to a representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "/="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/_=(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "/=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/_=(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/addProduct(_:_:)": {
      "abstract": [
        {
          "text": "Adds the product of the two given values to this value in place, computed",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "without intermediate rounding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "addProduct"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/addProduct(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "addProduct(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/addproduct(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/addingProduct(_:_:)": {
      "abstract": [
        {
          "text": "Returns the result of adding the product of the two given values to this",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, computed without intermediate rounding.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "addingProduct"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/addingProduct(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "addingProduct(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/addingproduct(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/exponent-swift.property": {
      "abstract": [
        {
          "text": "The exponent of the floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exponent"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SF8ExponentQa",
          "text": "Exponent"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/exponent-swift.property",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "exponent",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/exponent-swift.property"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/floatingPointClass": {
      "abstract": [
        {
          "text": "The classification of this value.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "floatingPointClass"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s27FloatingPointClassificationO",
          "text": "FloatingPointClassification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/floatingPointClass",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "floatingPointClass",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/floatingpointclass"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formRemainder(dividingBy:)": {
      "abstract": [
        {
          "text": "Replaces this value with the remainder of itself divided by the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formRemainder"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "dividingBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formRemainder(dividingBy:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "formRemainder(dividingBy:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/formremainder(dividingby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formSquareRoot()": {
      "abstract": [
        {
          "text": "Replaces this value with its square root, rounded to a representable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formSquareRoot"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formSquareRoot()",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "formSquareRoot()",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/formsquareroot()"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formTruncatingRemainder(dividingBy:)": {
      "abstract": [
        {
          "text": "Replaces this value with the remainder of itself divided by the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value using truncating division.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formTruncatingRemainder"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "dividingBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formTruncatingRemainder(dividingBy:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "formTruncatingRemainder(dividingBy:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/formtruncatingremainder(dividingby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/greatestFiniteMagnitude": {
      "abstract": [
        {
          "text": "The greatest finite number representable by this type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "greatestFiniteMagnitude"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/greatestFiniteMagnitude",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "greatestFiniteMagnitude",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/greatestfinitemagnitude"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/infinity": {
      "abstract": [
        {
          "text": "Positive infinity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "infinity"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/infinity",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "infinity",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/infinity"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(_:)-2f8bx": {
      "abstract": [
        {
          "text": "Creates a new value, rounded to the closest possible representation.",
          "type": "text"
        }
      ],
      "defaultImplementations": 2,
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(_:)-2f8bx",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/init(_:)-2f8bx"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(_:)-2xwlo": {
      "abstract": [
        {
          "text": "Creates a new value, rounded to the closest possible representation.",
          "type": "text"
        }
      ],
      "defaultImplementations": 2,
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(_:)-2xwlo",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/init(_:)-2xwlo"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(exactly:)": {
      "abstract": [
        {
          "text": "Creates a new value, if the given integer can be represented exactly.",
          "type": "text"
        }
      ],
      "defaultImplementations": 2,
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(exactly:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/init(exactly:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(sign:exponent:significand:)": {
      "abstract": [
        {
          "text": "Creates a new value from the given sign, exponent, and significand.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "sign"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s17FloatingPointSignO",
          "text": "FloatingPointSign"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "exponent"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SF8ExponentQa",
          "text": "Exponent"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "significand"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(sign:exponent:significand:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(sign:exponent:significand:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/init(sign:exponent:significand:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(signOf:magnitudeOf:)": {
      "abstract": [
        {
          "text": "Creates a new floating-point value using the sign of one value and the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "magnitude of another.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "signOf"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "magnitudeOf"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(signOf:magnitudeOf:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(signOf:magnitudeOf:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/init(signof:magnitudeof:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isCanonical": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance’s representation is in",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "its canonical form.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isCanonical"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isCanonical",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isCanonical",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/iscanonical"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isEqual(to:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this instance is equal to the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isEqual"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isEqual(to:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isEqual(to:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/isequal(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isFinite": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether this instance is finite.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isFinite"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isFinite",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isFinite",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/isfinite"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isInfinite": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is infinite.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isInfinite"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isInfinite",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isInfinite",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/isinfinite"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isLess(than:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this instance is less than the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isLess"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "than"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isLess(than:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isLess(than:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/isless(than:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isLessThanOrEqualTo(_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this instance is less than or",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "equal to the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isLessThanOrEqualTo"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isLessThanOrEqualTo(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isLessThanOrEqualTo(_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/islessthanorequalto(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isNaN": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is NaN (“not a number”).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isNaN"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isNaN",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isNaN",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/isnan"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isNormal": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether this instance is normal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isNormal"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isNormal",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isNormal",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/isnormal"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isSignalingNaN": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is a signaling NaN.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isSignalingNaN"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isSignalingNaN",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isSignalingNaN",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/issignalingnan"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isSubnormal": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is subnormal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isSubnormal"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isSubnormal",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isSubnormal",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/issubnormal"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isTotallyOrdered(belowOrEqualTo:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this instance should precede",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "or tie positions with the given value in an ascending sort.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isTotallyOrdered"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "belowOrEqualTo"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isTotallyOrdered(belowOrEqualTo:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isTotallyOrdered(belowOrEqualTo:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/istotallyordered(beloworequalto:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isZero": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is equal to zero.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isZero"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isZero",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isZero",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/iszero"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/leastNonzeroMagnitude": {
      "abstract": [
        {
          "text": "The least positive number.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "leastNonzeroMagnitude"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/leastNonzeroMagnitude",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "leastNonzeroMagnitude",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/leastnonzeromagnitude"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/leastNormalMagnitude": {
      "abstract": [
        {
          "text": "The least positive normal number.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "leastNormalMagnitude"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/leastNormalMagnitude",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "leastNormalMagnitude",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/leastnormalmagnitude"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/maximum(_:_:)": {
      "abstract": [
        {
          "text": "Returns the greater of the two given values.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "maximum"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/maximum(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "maximum(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/maximum(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/maximumMagnitude(_:_:)": {
      "abstract": [
        {
          "text": "Returns the value with greater magnitude.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "maximumMagnitude"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/maximumMagnitude(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "maximumMagnitude(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/maximummagnitude(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/minimum(_:_:)": {
      "abstract": [
        {
          "text": "Returns the lesser of the two given values.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "minimum"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/minimum(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "minimum(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/minimum(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/minimumMagnitude(_:_:)": {
      "abstract": [
        {
          "text": "Returns the value with lesser magnitude.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "minimumMagnitude"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/minimumMagnitude(_:_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "minimumMagnitude(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/minimummagnitude(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nan": {
      "abstract": [
        {
          "text": "A quiet NaN (“not a number”).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "nan"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nan",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "nan",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/nan"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/negate()": {
      "abstract": [
        {
          "text": "Replaces this value with its additive inverse.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "negate"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/negate()",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "negate()",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/negate()"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nextDown": {
      "abstract": [
        {
          "text": "The greatest representable value that compares less than this value.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "nextDown"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nextDown",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "nextDown",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/nextdown"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nextUp": {
      "abstract": [
        {
          "text": "The least representable value that compares greater than this value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "nextUp"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nextUp",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "nextUp",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/nextup"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/pi": {
      "abstract": [
        {
          "text": "The mathematical constant pi (π), approximately equal to 3.14159.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "pi"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/pi",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "pi",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/pi"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/radix": {
      "abstract": [
        {
          "text": "The radix, or base of exponentiation, for a floating-point type.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "radix"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/radix",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "radix",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/radix"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/remainder(dividingBy:)": {
      "abstract": [
        {
          "text": "Returns the remainder of this value divided by the given value.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "remainder"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "dividingBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/remainder(dividingBy:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "remainder(dividingBy:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/remainder(dividingby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/round()": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "round"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/round()",
      "kind": "symbol",
      "role": "symbol",
      "title": "round()",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/round()"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/round(_:)": {
      "abstract": [
        {
          "text": "Rounds the value to an integral value using the specified rounding rule.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "round"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s25FloatingPointRoundingRuleO",
          "text": "FloatingPointRoundingRule"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/round(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "round(_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/round(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/rounded()": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "rounded"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/rounded()",
      "kind": "symbol",
      "role": "symbol",
      "title": "rounded()",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/rounded()"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/rounded(_:)": {
      "abstract": [
        {
          "text": "Returns this value rounded to an integral value using the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "rounding rule.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "rounded"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s25FloatingPointRoundingRuleO",
          "text": "FloatingPointRoundingRule"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/rounded(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "rounded(_:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/rounded(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/sign": {
      "abstract": [
        {
          "text": "The sign of the floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "sign"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s17FloatingPointSignO",
          "text": "FloatingPointSign"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/sign",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "sign",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/sign"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/signalingNaN": {
      "abstract": [
        {
          "text": "A signaling NaN (“not a number”).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "signalingNaN"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/signalingNaN",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "signalingNaN",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/signalingnan"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/significand": {
      "abstract": [
        {
          "text": "The significand of the floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "significand"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/significand",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "significand",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/significand"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/squareRoot()": {
      "abstract": [
        {
          "text": "Returns the square root of the value, rounded to a representable value.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "squareRoot"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/squareRoot()",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "squareRoot()",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/squareroot()"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/truncatingRemainder(dividingBy:)": {
      "abstract": [
        {
          "text": "Returns the remainder of this value divided by the given value using",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "truncating division.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "truncatingRemainder"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "dividingBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/truncatingRemainder(dividingBy:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "truncatingRemainder(dividingBy:)",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/truncatingremainder(dividingby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/ulp": {
      "abstract": [
        {
          "text": "The unit in the last place of this value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ulp"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/ulp",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "ulp",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/ulp"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint/ulpOfOne": {
      "abstract": [
        {
          "text": "The unit in the last place of 1.0.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ulpOfOne"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint/ulpOfOne",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "ulpOfOne",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint/ulpofone"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a ",
          "type": "text"
        },
        {
          "code": "Hasher",
          "type": "codeVoice"
        },
        {
          "text": " to produce an integer hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/swift/hashable"
    },
    "doc://com.apple.Swift/documentation/Swift/Numeric": {
      "abstract": [
        {
          "text": "A type with values that support multiplication.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Numeric"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Numeric",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Numeric"
        }
      ],
      "role": "symbol",
      "title": "Numeric",
      "type": "topic",
      "url": "/documentation/swift/numeric"
    },
    "doc://com.apple.Swift/documentation/Swift/Numeric/Magnitude-swift.associatedtype": {
      "abstract": [
        {
          "text": "A type that can represent the absolute value of any possible value of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "conforming type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Magnitude"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SL",
          "text": "Comparable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sj",
          "text": "Numeric"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Numeric/Magnitude-swift.associatedtype",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "Magnitude",
      "type": "topic",
      "url": "/documentation/swift/numeric/magnitude-swift.associatedtype"
    },
    "doc://com.apple.Swift/documentation/Swift/SignedNumeric": {
      "abstract": [
        {
          "text": "A numeric type with a negation operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SignedNumeric"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SignedNumeric",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SignedNumeric"
        }
      ],
      "role": "symbol",
      "title": "SignedNumeric",
      "type": "topic",
      "url": "/documentation/swift/signednumeric"
    },
    "doc://com.apple.Swift/documentation/Swift/Strideable": {
      "abstract": [
        {
          "text": "A type representing continuous, one-dimensional values that can be offset",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and measured.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Strideable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Strideable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Strideable"
        }
      ],
      "role": "symbol",
      "title": "Strideable",
      "type": "topic",
      "url": "/documentation/swift/strideable"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "http://ieeexplore.ieee.org/servlet/opac?punumber=4610933": {
      "identifier": "http://ieeexplore.ieee.org/servlet/opac?punumber=4610933",
      "title": "IEEE 754 specification",
      "titleInlineContent": [
        {
          "text": "IEEE 754 specification",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "http://ieeexplore.ieee.org/servlet/opac?punumber=4610933"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AdditiveArithmetic",
        "doc://com.apple.Swift/documentation/Swift/Comparable",
        "doc://com.apple.Swift/documentation/Swift/Equatable",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByIntegerLiteral",
        "doc://com.apple.Swift/documentation/Swift/Hashable",
        "doc://com.apple.Swift/documentation/Swift/Numeric",
        "doc://com.apple.Swift/documentation/Swift/SignedNumeric",
        "doc://com.apple.Swift/documentation/Swift/Strideable"
      ],
      "kind": "relationships",
      "title": "Inherits From",
      "type": "inheritsFrom"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint"
      ],
      "kind": "relationships",
      "title": "Inherited By",
      "type": "inheritedBy"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double",
        "doc://com.apple.Swift/documentation/Swift/Float",
        "doc://com.apple.Swift/documentation/Swift/Float16",
        "doc://com.apple.Swift/documentation/Swift/Float80"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Floating-Point",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint"
      ],
      "title": "Floating Point"
    }
  ],
  "topicSections": [
    {
      "anchor": "Operators",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/*(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/*=(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/+(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/+=(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-(_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/-=(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/_(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/_=(_:_:)"
      ],
      "title": "Operators"
    },
    {
      "anchor": "Associated-Types",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/Exponent-swift.associatedtype"
      ],
      "title": "Associated Types"
    },
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(_:)-2f8bx",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(_:)-2xwlo",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(exactly:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(sign:exponent:significand:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/init(signOf:magnitudeOf:)"
      ],
      "title": "Initializers"
    },
    {
      "anchor": "Instance-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/exponent-swift.property",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/floatingPointClass",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isCanonical",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isFinite",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isInfinite",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isNaN",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isNormal",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isSignalingNaN",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isSubnormal",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isZero",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nextDown",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nextUp",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/sign",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/significand",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/ulp"
      ],
      "title": "Instance Properties"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/addProduct(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/addingProduct(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formRemainder(dividingBy:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formSquareRoot()",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/formTruncatingRemainder(dividingBy:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isEqual(to:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isLess(than:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isLessThanOrEqualTo(_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/isTotallyOrdered(belowOrEqualTo:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/negate()",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/remainder(dividingBy:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/round()",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/round(_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/rounded()",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/rounded(_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/squareRoot()",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/truncatingRemainder(dividingBy:)"
      ],
      "title": "Instance Methods"
    },
    {
      "anchor": "Type-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/greatestFiniteMagnitude",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/infinity",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/leastNonzeroMagnitude",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/leastNormalMagnitude",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/nan",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/pi",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/radix",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/signalingNaN",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/ulpOfOne"
      ],
      "title": "Type Properties"
    },
    {
      "anchor": "Type-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/maximum(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/maximumMagnitude(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/minimum(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint/minimumMagnitude(_:_:)"
      ],
      "title": "Type Methods"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/floatingpoint"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
