{
  "abstract": [
    {
      "text": "Returns the dynamic type of a value.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/type(of:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s4type2ofq_x_tr0_lF",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "type"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "genericParameter",
        "text": "T"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "genericParameter",
        "text": "Metatype"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "externalParam",
        "text": "of"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "text": "T"
      },
      {
        "kind": "text",
        "text": ") -> "
      },
      {
        "kind": "typeIdentifier",
        "text": "Metatype"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Function",
    "symbolKind": "func",
    "title": "type(of:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "type"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "T"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "genericParameter",
              "text": "Metatype"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "of"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "value"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "typeIdentifier",
              "text": "T"
            },
            {
              "kind": "text",
              "text": ") -> "
            },
            {
              "kind": "typeIdentifier",
              "text": "Metatype"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The value for which to find the dynamic type.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "value"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return-value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The dynamic type, which is a metatype instance.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can use the ",
              "type": "text"
            },
            {
              "code": "type(of:)",
              "type": "codeVoice"
            },
            {
              "text": " function to find the dynamic type of a value,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "particularly when the dynamic type is different from the static type. The",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "static type",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " of a value is the known, compile-time type of the value. The",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "dynamic type",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " of a value is the valueâ€™s actual type at run-time, which",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can be a subtype of its concrete type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In the following code, the ",
              "type": "text"
            },
            {
              "code": "count",
              "type": "codeVoice"
            },
            {
              "text": " variable has the same static and dynamic",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type: ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": ". When ",
              "type": "text"
            },
            {
              "code": "count",
              "type": "codeVoice"
            },
            {
              "text": " is passed to the ",
              "type": "text"
            },
            {
              "code": "printInfo(_:)",
              "type": "codeVoice"
            },
            {
              "text": " function,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "however, the ",
              "type": "text"
            },
            {
              "code": "value",
              "type": "codeVoice"
            },
            {
              "text": " parameter has a static type of ",
              "type": "text"
            },
            {
              "code": "Any",
              "type": "codeVoice"
            },
            {
              "text": " (the type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "declared for the parameter) and a dynamic type of ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func printInfo(_ value: Any) {",
            "    let t = type(of: value)",
            "    print(\"'\\(value)' of type '\\(t)'\")",
            "}",
            "",
            "let count: Int = 5",
            "printInfo(count)",
            "// '5' of type 'Int'"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The dynamic type returned from ",
              "type": "text"
            },
            {
              "code": "type(of:)",
              "type": "codeVoice"
            },
            {
              "text": " is a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "concrete metatype",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(",
              "type": "text"
            },
            {
              "code": "T.Type",
              "type": "codeVoice"
            },
            {
              "text": ") for a class, structure, enumeration, or other nonprotocol type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "T",
              "type": "codeVoice"
            },
            {
              "text": ", or an ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "existential metatype",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " (",
              "type": "text"
            },
            {
              "code": "P.Type",
              "type": "codeVoice"
            },
            {
              "text": ") for a protocol or protocol",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "composition ",
              "type": "text"
            },
            {
              "code": "P",
              "type": "codeVoice"
            },
            {
              "text": ". When the static type of the value passed to ",
              "type": "text"
            },
            {
              "code": "type(of:)",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "is constrained to a class or protocol, you can use that metatype to access",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initializers or other static members of the class or protocol.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, the parameter passed as ",
              "type": "text"
            },
            {
              "code": "value",
              "type": "codeVoice"
            },
            {
              "text": " to the ",
              "type": "text"
            },
            {
              "code": "printSmileyInfo(_:)",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function in the example below is an instance of the ",
              "type": "text"
            },
            {
              "code": "Smiley",
              "type": "codeVoice"
            },
            {
              "text": " class or one",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of its subclasses. The function uses ",
              "type": "text"
            },
            {
              "code": "type(of:)",
              "type": "codeVoice"
            },
            {
              "text": " to find the dynamic type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of ",
              "type": "text"
            },
            {
              "code": "value",
              "type": "codeVoice"
            },
            {
              "text": ", which itself is an instance of the ",
              "type": "text"
            },
            {
              "code": "Smiley.Type",
              "type": "codeVoice"
            },
            {
              "text": " metatype.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class Smiley {",
            "    class var text: String {",
            "        return \":)\"",
            "    }",
            "}",
            "",
            "class EmojiSmiley: Smiley {",
            "     override class var text: String {",
            "        return \"ðŸ˜€\"",
            "    }",
            "}",
            "",
            "func printSmileyInfo(_ value: Smiley) {",
            "    let smileyType = type(of: value)",
            "    print(\"Smile!\", smileyType.text)",
            "}",
            "",
            "let emojiSmiley = EmojiSmiley()",
            "printSmileyInfo(emojiSmiley)",
            "// Smile! ðŸ˜€"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In this example, accessing the ",
              "type": "text"
            },
            {
              "code": "text",
              "type": "codeVoice"
            },
            {
              "text": " property of the ",
              "type": "text"
            },
            {
              "code": "smileyType",
              "type": "codeVoice"
            },
            {
              "text": " metatype",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "retrieves the overridden value from the ",
              "type": "text"
            },
            {
              "code": "EmojiSmiley",
              "type": "codeVoice"
            },
            {
              "text": " subclass, instead of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the ",
              "type": "text"
            },
            {
              "code": "Smiley",
              "type": "codeVoice"
            },
            {
              "text": " classâ€™s original definition.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Finding-the-Dynamic-Type-in-a-Generic-Context",
          "level": 1,
          "text": "Finding the Dynamic Type in a Generic Context",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Normally, you donâ€™t need to be aware of the difference between concrete and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "existential metatypes, but calling ",
              "type": "text"
            },
            {
              "code": "type(of:)",
              "type": "codeVoice"
            },
            {
              "text": " can yield unexpected",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "results in a generic context with a type parameter bound to a protocol. In",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a case like this, where a generic parameter ",
              "type": "text"
            },
            {
              "code": "T",
              "type": "codeVoice"
            },
            {
              "text": " is bound to a protocol",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "P",
              "type": "codeVoice"
            },
            {
              "text": ", the type parameter is not statically known to be a protocol type in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the body of the generic function. As a result, ",
              "type": "text"
            },
            {
              "code": "type(of:)",
              "type": "codeVoice"
            },
            {
              "text": " can only",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "produce the concrete metatype ",
              "type": "text"
            },
            {
              "code": "P.Protocol",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following example defines a ",
              "type": "text"
            },
            {
              "code": "printGenericInfo(_:)",
              "type": "codeVoice"
            },
            {
              "text": " function that takes",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a generic parameter and declares the ",
              "type": "text"
            },
            {
              "code": "String",
              "type": "codeVoice"
            },
            {
              "text": " typeâ€™s conformance to a new",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "protocol ",
              "type": "text"
            },
            {
              "code": "P",
              "type": "codeVoice"
            },
            {
              "text": ". When ",
              "type": "text"
            },
            {
              "code": "printGenericInfo(_:)",
              "type": "codeVoice"
            },
            {
              "text": " is called with a string that has",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "P",
              "type": "codeVoice"
            },
            {
              "text": " as its static type, the call to ",
              "type": "text"
            },
            {
              "code": "type(of:)",
              "type": "codeVoice"
            },
            {
              "text": " returns ",
              "type": "text"
            },
            {
              "code": "P.self",
              "type": "codeVoice"
            },
            {
              "text": " instead",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of ",
              "type": "text"
            },
            {
              "code": "String.self",
              "type": "codeVoice"
            },
            {
              "text": " (the dynamic type inside the parameter).",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func printGenericInfo<T>(_ value: T) {",
            "    let t = type(of: value)",
            "    print(\"'\\(value)' of type '\\(t)'\")",
            "}",
            "",
            "protocol P {}",
            "extension String: P {}",
            "",
            "let stringAsP: P = \"Hello!\"",
            "printGenericInfo(stringAsP)",
            "// 'Hello!' of type 'P'"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "This unexpected result occurs because the call to ",
              "type": "text"
            },
            {
              "code": "type(of: value)",
              "type": "codeVoice"
            },
            {
              "text": " inside",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "printGenericInfo(_:)",
              "type": "codeVoice"
            },
            {
              "text": " must return a metatype that is an instance of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "T.Type",
              "type": "codeVoice"
            },
            {
              "text": ", but ",
              "type": "text"
            },
            {
              "code": "String.self",
              "type": "codeVoice"
            },
            {
              "text": " (the expected dynamic type) is not an instance",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of ",
              "type": "text"
            },
            {
              "code": "P.Type",
              "type": "codeVoice"
            },
            {
              "text": " (the concrete metatype of ",
              "type": "text"
            },
            {
              "code": "value",
              "type": "codeVoice"
            },
            {
              "text": "). To get the dynamic type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "inside ",
              "type": "text"
            },
            {
              "code": "value",
              "type": "codeVoice"
            },
            {
              "text": " in this generic context, cast the parameter to ",
              "type": "text"
            },
            {
              "code": "Any",
              "type": "codeVoice"
            },
            {
              "text": " when",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "calling ",
              "type": "text"
            },
            {
              "code": "type(of:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func betterPrintGenericInfo<T>(_ value: T) {",
            "    let t = type(of: value as Any)",
            "    print(\"'\\(value)' of type '\\(t)'\")",
            "}",
            "",
            "betterPrintGenericInfo(stringAsP)",
            "// 'Hello!' of type 'String'"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/!=(_:_:)-6s4z0": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether two types are not identical.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "!="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "((any "
        },
        {
          "kind": "keyword",
          "text": "Any"
        },
        {
          "kind": "text",
          "text": ".Type)?, (any "
        },
        {
          "kind": "keyword",
          "text": "Any"
        },
        {
          "kind": "text",
          "text": ".Type)?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/!=(_:_:)-6s4z0",
      "kind": "symbol",
      "role": "symbol",
      "title": "!=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/!=(_:_:)-6s4z0"
    },
    "doc://com.apple.Swift/documentation/Swift/==(_:_:)-w1qf": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether two types are identical.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "=="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "((any "
        },
        {
          "kind": "keyword",
          "text": "Any"
        },
        {
          "kind": "text",
          "text": ".Type)?, (any "
        },
        {
          "kind": "keyword",
          "text": "Any"
        },
        {
          "kind": "text",
          "text": ".Type)?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/==(_:_:)-w1qf",
      "kind": "symbol",
      "role": "symbol",
      "title": "==(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/==(_:_:)-w1qf"
    },
    "doc://com.apple.Swift/documentation/Swift/Mirror": {
      "abstract": [
        {
          "text": "A representation of the substructure and display style of an instance of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "any type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Mirror"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Mirror",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Mirror"
        }
      ],
      "role": "symbol",
      "title": "Mirror",
      "type": "topic",
      "url": "/documentation/swift/mirror"
    },
    "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier": {
      "abstract": [
        {
          "text": "A unique identifier for a class instance or metatype.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "role": "symbol",
      "title": "ObjectIdentifier",
      "type": "topic",
      "url": "/documentation/swift/objectidentifier"
    },
    "doc://com.apple.Swift/documentation/Swift/type(of:)": {
      "abstract": [
        {
          "text": "Returns the dynamic type of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "type"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Metatype"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Metatype"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/type(of:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "type(of:)",
      "type": "topic",
      "url": "/documentation/swift/type(of:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Querying-Runtime-Values",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Mirror",
        "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
        "doc://com.apple.Swift/documentation/Swift/==(_:_:)-w1qf",
        "doc://com.apple.Swift/documentation/Swift/!=(_:_:)-6s4z0"
      ],
      "title": "Querying Runtime Values"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/type(of:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
