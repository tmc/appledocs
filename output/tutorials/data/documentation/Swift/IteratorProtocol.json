{
  "abstract": [
    {
      "text": "A type that supplies the values of a sequence one at a time.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/IteratorProtocol"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:St",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "IteratorProtocol"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "IteratorProtocol"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "IteratorProtocol"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "IteratorProtocol"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/IteratorProtocol/Element",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:St7ElementQa",
              "text": "Element"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "IteratorProtocol",
              "type": "codeVoice"
            },
            {
              "text": " protocol is tightly linked with the ",
              "type": "text"
            },
            {
              "code": "Sequence",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "protocol. Sequences provide access to their elements by creating an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "iterator, which keeps track of its iteration process and returns one",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "element at a time as it advances through the sequence.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Whenever you use a ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " loop with an array, set, or any other",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "collection or sequence, you’re using that type’s iterator. Swift uses a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "sequence’s or collection’s iterator internally to enable the ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "loop language construct.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Using a sequence’s iterator directly gives you access to the same elements",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in the same order as iterating over that sequence using a ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " loop.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, you might typically use a ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " loop to print each of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the elements in an array.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let animals = [\"Antelope\", \"Butterfly\", \"Camel\", \"Dolphin\"]",
            "for animal in animals {",
            "    print(animal)",
            "}",
            "// Prints \"Antelope\"",
            "// Prints \"Butterfly\"",
            "// Prints \"Camel\"",
            "// Prints \"Dolphin\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Behind the scenes, Swift uses the ",
              "type": "text"
            },
            {
              "code": "animals",
              "type": "codeVoice"
            },
            {
              "text": " array’s iterator to loop over",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the contents of the array.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var animalIterator = animals.makeIterator()",
            "while let animal = animalIterator.next() {",
            "    print(animal)",
            "}",
            "// Prints \"Antelope\"",
            "// Prints \"Butterfly\"",
            "// Prints \"Camel\"",
            "// Prints \"Dolphin\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The call to ",
              "type": "text"
            },
            {
              "code": "animals.makeIterator()",
              "type": "codeVoice"
            },
            {
              "text": " returns an instance of the array’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "iterator. Next, the ",
              "type": "text"
            },
            {
              "code": "while",
              "type": "codeVoice"
            },
            {
              "text": " loop calls the iterator’s ",
              "type": "text"
            },
            {
              "code": "next()",
              "type": "codeVoice"
            },
            {
              "text": " method",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "repeatedly, binding each element that is returned to ",
              "type": "text"
            },
            {
              "code": "animal",
              "type": "codeVoice"
            },
            {
              "text": " and exiting",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "when the ",
              "type": "text"
            },
            {
              "code": "next()",
              "type": "codeVoice"
            },
            {
              "text": " method returns ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Using-Iterators-Directly",
          "level": 1,
          "text": "Using Iterators Directly",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You rarely need to use iterators directly, because a ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " loop is the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "more idiomatic approach to traversing a sequence in Swift. Some",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "algorithms, however, may call for direct iterator use.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "One example is the ",
              "type": "text"
            },
            {
              "code": "reduce1(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method. Similar to the ",
              "type": "text"
            },
            {
              "code": "reduce(_:_:)",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method defined in the standard library, which takes an initial value and a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "combining closure, ",
              "type": "text"
            },
            {
              "code": "reduce1(_:)",
              "type": "codeVoice"
            },
            {
              "text": " uses the first element of the sequence as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the initial value.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s an implementation of the ",
              "type": "text"
            },
            {
              "code": "reduce1(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method. The sequence’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "iterator is used directly to retrieve the initial value before looping",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "over the rest of the sequence.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "extension Sequence {",
            "    func reduce1(",
            "        _ nextPartialResult: (Element, Element) -> Element",
            "    ) -> Element?",
            "    {",
            "        var i = makeIterator()",
            "        guard var accumulated = i.next() else {",
            "            return nil",
            "        }",
            "",
            "        while let element = i.next() {",
            "            accumulated = nextPartialResult(accumulated, element)",
            "        }",
            "        return accumulated",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "reduce1(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method makes certain kinds of sequence operations",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "simpler. Here’s how to find the longest string in a sequence, using the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "animals",
              "type": "codeVoice"
            },
            {
              "text": " array introduced earlier as an example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let longestAnimal = animals.reduce1 { current, element in",
            "    if current.count > element.count {",
            "        return current",
            "    } else {",
            "        return element",
            "    }",
            "}",
            "print(longestAnimal)",
            "// Prints Optional(\"Butterfly\")"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Using-Multiple-Iterators",
          "level": 1,
          "text": "Using Multiple Iterators",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Whenever you use multiple iterators (or ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " loops) over a single",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "sequence, be sure you know that the specific sequence supports repeated",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "iteration, either because you know its concrete type or because the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "sequence is also constrained to the ",
              "type": "text"
            },
            {
              "code": "Collection",
              "type": "codeVoice"
            },
            {
              "text": " protocol.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Obtain each separate iterator from separate calls to the sequence’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "makeIterator()",
              "type": "codeVoice"
            },
            {
              "text": " method rather than by copying. Copying an iterator is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "safe, but advancing one copy of an iterator by calling its ",
              "type": "text"
            },
            {
              "code": "next()",
              "type": "codeVoice"
            },
            {
              "text": " method",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "may invalidate other copies of that iterator. ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " loops are safe in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "this regard.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Adding-IteratorProtocol-Conformance-to-Your-Type",
          "level": 1,
          "text": "Adding IteratorProtocol Conformance to Your Type",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Implementing an iterator that conforms to ",
              "type": "text"
            },
            {
              "code": "IteratorProtocol",
              "type": "codeVoice"
            },
            {
              "text": " is simple.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Declare a ",
              "type": "text"
            },
            {
              "code": "next()",
              "type": "codeVoice"
            },
            {
              "text": " method that advances one step in the related sequence",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and returns the current element. When the sequence has been exhausted, the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "next()",
              "type": "codeVoice"
            },
            {
              "text": " method returns ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, consider a custom ",
              "type": "text"
            },
            {
              "code": "Countdown",
              "type": "codeVoice"
            },
            {
              "text": " sequence. You can initialize the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Countdown",
              "type": "codeVoice"
            },
            {
              "text": " sequence with a starting integer and then iterate over the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "count down to zero. The ",
              "type": "text"
            },
            {
              "code": "Countdown",
              "type": "codeVoice"
            },
            {
              "text": " structure’s definition is short: It",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "contains only the starting count and the ",
              "type": "text"
            },
            {
              "code": "makeIterator()",
              "type": "codeVoice"
            },
            {
              "text": " method required",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "by the ",
              "type": "text"
            },
            {
              "code": "Sequence",
              "type": "codeVoice"
            },
            {
              "text": " protocol.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct Countdown: Sequence {",
            "    let start: Int",
            "",
            "    func makeIterator() -> CountdownIterator {",
            "        return CountdownIterator(self)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "makeIterator()",
              "type": "codeVoice"
            },
            {
              "text": " method returns another custom type, an iterator named",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "CountdownIterator",
              "type": "codeVoice"
            },
            {
              "text": ". The ",
              "type": "text"
            },
            {
              "code": "CountdownIterator",
              "type": "codeVoice"
            },
            {
              "text": " type keeps track of both the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Countdown",
              "type": "codeVoice"
            },
            {
              "text": " sequence that it’s iterating and the number of times it has",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "returned a value.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct CountdownIterator: IteratorProtocol {",
            "    let countdown: Countdown",
            "    var times = 0",
            "",
            "    init(_ countdown: Countdown) {",
            "        self.countdown = countdown",
            "    }",
            "",
            "    mutating func next() -> Int? {",
            "        let nextNumber = countdown.start - times",
            "        guard nextNumber > 0",
            "            else { return nil }",
            "",
            "        times += 1",
            "        return nextNumber",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Each time the ",
              "type": "text"
            },
            {
              "code": "next()",
              "type": "codeVoice"
            },
            {
              "text": " method is called on a ",
              "type": "text"
            },
            {
              "code": "CountdownIterator",
              "type": "codeVoice"
            },
            {
              "text": " instance,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it calculates the new next value, checks to see whether it has reached",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "zero, and then returns either the number, or ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " if the iterator is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "finished returning elements of the sequence.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Creating and iterating over a ",
              "type": "text"
            },
            {
              "code": "Countdown",
              "type": "codeVoice"
            },
            {
              "text": " sequence uses a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "CountdownIterator",
              "type": "codeVoice"
            },
            {
              "text": " to handle the iteration.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let threeTwoOne = Countdown(start: 3)",
            "for count in threeTwoOne {",
            "    print(\"\\(count)...\")",
            "}",
            "// Prints \"3...\"",
            "// Prints \"2...\"",
            "// Prints \"1...\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyIterator": {
      "abstract": [
        {
          "text": "A type-erased iterator of ",
          "type": "text"
        },
        {
          "code": "Element",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyIterator"
        }
      ],
      "role": "symbol",
      "title": "AnyIterator",
      "type": "topic",
      "url": "/documentation/swift/anyiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator": {
      "abstract": [
        {
          "text": "An iterator that produces one or zero instances of an element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "CollectionOfOne.Iterator",
      "type": "topic",
      "url": "/documentation/swift/collectionofone/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the members of a ",
          "type": "text"
        },
        {
          "code": "Dictionary<Key, Value>",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dictionary/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Keys.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dictionary/keys-swift.struct/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Values.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dictionary/values-swift.struct/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "DropWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dropwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator": {
      "abstract": [
        {
          "text": "An iterator that never produces an element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "EmptyCollection.Iterator",
      "type": "topic",
      "url": "/documentation/swift/emptycollection/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator for ",
          "type": "text"
        },
        {
          "code": "EnumeratedSequence",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "EnumeratedSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/enumeratedsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "FlattenSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/flattensequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/IndexingIterator": {
      "abstract": [
        {
          "text": "A type that iterates over a collection using its indices.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Elements",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "IndexingIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IndexingIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "IndexingIterator"
        }
      ],
      "role": "symbol",
      "title": "IndexingIterator",
      "type": "topic",
      "url": "/documentation/swift/indexingiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/IteratorProtocol": {
      "abstract": [
        {
          "text": "A type that supplies the values of a sequence one at a time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "IteratorProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IteratorProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "IteratorProtocol"
        }
      ],
      "role": "symbol",
      "title": "IteratorProtocol",
      "type": "topic",
      "url": "/documentation/swift/iteratorprotocol"
    },
    "doc://com.apple.Swift/documentation/Swift/IteratorProtocol/Element": {
      "abstract": [
        {
          "text": "The type of element traversed by the iterator.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Element"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IteratorProtocol/Element",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "Element",
      "type": "topic",
      "url": "/documentation/swift/iteratorprotocol/element"
    },
    "doc://com.apple.Swift/documentation/Swift/IteratorProtocol/next()": {
      "abstract": [
        {
          "text": "Advances to the next element and returns it, or ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": " if no next element",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "exists.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "next"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:St7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IteratorProtocol/next()",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "next()",
      "type": "topic",
      "url": "/documentation/swift/iteratorprotocol/next()"
    },
    "doc://com.apple.Swift/documentation/Swift/IteratorSequence": {
      "abstract": [
        {
          "text": "A sequence built around an iterator of type ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "IteratorProtocol",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "IteratorSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IteratorSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "IteratorSequence"
        }
      ],
      "role": "symbol",
      "title": "IteratorSequence",
      "type": "topic",
      "url": "/documentation/swift/iteratorsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator that presents the elements of the sequences traversed",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "by a base iterator, concatenated using a given separator.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "JoinedSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/joinedsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the elements traversed by a base iterator that follow the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "initial consecutive elements that satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "LazyDropWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/lazydropwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the elements traversed by some base iterator that also",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "LazyFilterSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/lazyfiltersequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyMapSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyMapSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "LazyMapSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/lazymapsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the initial elements traversed by a base iterator that",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "LazyPrefixWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/lazyprefixwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Iterator": {
      "abstract": [
        {
          "text": "The iterator for a ",
          "type": "text"
        },
        {
          "code": "PartialRangeFrom",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeFrom.Iterator",
      "type": "topic",
      "url": "/documentation/swift/partialrangefrom/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "PrefixSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/prefixsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "ReversedCollection.Iterator",
      "type": "topic",
      "url": "/documentation/swift/reversedcollection/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Set/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the members of a ",
          "type": "text"
        },
        {
          "code": "Set<Element>",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Set.Iterator",
      "type": "topic",
      "url": "/documentation/swift/set/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator": {
      "abstract": [
        {
          "text": "An iterator for a ",
          "type": "text"
        },
        {
          "code": "StrideThrough",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideThroughIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideThroughIterator"
        }
      ],
      "role": "symbol",
      "title": "StrideThroughIterator",
      "type": "topic",
      "url": "/documentation/swift/stridethroughiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideToIterator": {
      "abstract": [
        {
          "text": "An iterator for a ",
          "type": "text"
        },
        {
          "code": "StrideTo",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideToIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideToIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideToIterator"
        }
      ],
      "role": "symbol",
      "title": "StrideToIterator",
      "type": "topic",
      "url": "/documentation/swift/stridetoiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "String.Iterator",
      "type": "topic",
      "url": "/documentation/swift/string/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UTF16View/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UTF16View/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "String.UTF16View.Iterator",
      "type": "topic",
      "url": "/documentation/swift/string/utf16view/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "String.UnicodeScalarView.Iterator",
      "type": "topic",
      "url": "/documentation/swift/string/unicodescalarview/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/UnfoldSequence": {
      "abstract": [
        {
          "text": "A sequence whose elements are produced via repeated applications of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "closure to some mutable state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnfoldSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnfoldSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnfoldSequence"
        }
      ],
      "role": "symbol",
      "title": "UnfoldSequence",
      "type": "topic",
      "url": "/documentation/swift/unfoldsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer/Iterator": {
      "abstract": [
        {
          "text": "An iterator for the elements in the buffer referenced by an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "UnsafeBufferPointer",
          "type": "codeVoice"
        },
        {
          "text": " or ",
          "type": "text"
        },
        {
          "code": "UnsafeMutableBufferPointer",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "UnsafeBufferPointer.Iterator",
      "type": "topic",
      "url": "/documentation/swift/unsafebufferpointer/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the bytes viewed by a raw buffer pointer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "UnsafeRawBufferPointer.Iterator",
      "type": "topic",
      "url": "/documentation/swift/unsaferawbufferpointer/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator for ",
          "type": "text"
        },
        {
          "code": "Zip2Sequence",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Sequence1",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sequence2",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Zip2Sequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/zip2sequence/iterator"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AnyIterator",
        "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct/Iterator",
        "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator",
        "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/IndexingIterator",
        "doc://com.apple.Swift/documentation/Swift/IteratorSequence",
        "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/LazyMapSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Iterator",
        "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Set/Iterator",
        "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator",
        "doc://com.apple.Swift/documentation/Swift/StrideToIterator",
        "doc://com.apple.Swift/documentation/Swift/String/Iterator",
        "doc://com.apple.Swift/documentation/Swift/String/UTF16View/Iterator",
        "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView/Iterator",
        "doc://com.apple.Swift/documentation/Swift/UnfoldSequence",
        "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer/Iterator",
        "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "topicSections": [
    {
      "anchor": "Associated-Types",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/IteratorProtocol/Element"
      ],
      "title": "Associated Types"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/IteratorProtocol/next()"
      ],
      "title": "Instance Methods"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/iteratorprotocol"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
