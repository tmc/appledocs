{
  "abstract": [
    {
      "text": "A half-open interval from a lower bound up to, but not including, an upper",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "bound.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    },
    "minor": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.2",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/Range"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:Sn",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Range"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "Range"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "Range"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Range"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Bound"
            },
            {
              "kind": "text",
              "text": "> "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "Bound"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Comparable",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SL",
              "text": "Comparable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You create a ",
              "type": "text"
            },
            {
              "code": "Range",
              "type": "codeVoice"
            },
            {
              "text": " instance by using the half-open range operator",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(",
              "type": "text"
            },
            {
              "code": "..<",
              "type": "codeVoice"
            },
            {
              "text": ").",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let underFive = 0.0..<5.0"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can use a ",
              "type": "text"
            },
            {
              "code": "Range",
              "type": "codeVoice"
            },
            {
              "text": " instance to quickly check if a value is contained in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a particular range of values. For example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "underFive.contains(3.14)",
            "// true",
            "underFive.contains(6.28)",
            "// false",
            "underFive.contains(5.0)",
            "// false"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "code": "Range",
              "type": "codeVoice"
            },
            {
              "text": " instances can represent an empty interval, unlike ",
              "type": "text"
            },
            {
              "code": "ClosedRange",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let empty = 0.0..<0.0",
            "empty.contains(0.0)",
            "// false",
            "empty.isEmpty",
            "// true"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Using-a-Range-as-a-Collection-of-Consecutive-Values",
          "level": 2,
          "text": "Using a Range as a Collection of Consecutive Values",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When a range uses integers as its lower and upper bounds, or any other type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that conforms to the ",
              "type": "text"
            },
            {
              "code": "Strideable",
              "type": "codeVoice"
            },
            {
              "text": " protocol with an integer stride, you can",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use that range in a ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " loop or with any sequence or collection",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method. The elements of the range are the consecutive values from its",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "lower bound up to, but not including, its upper bound.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "for n in 3..<5 {",
            "    print(n)",
            "}",
            "// Prints \"3\"",
            "// Prints \"4\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Because floating-point types such as ",
              "type": "text"
            },
            {
              "code": "Float",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "Double",
              "type": "codeVoice"
            },
            {
              "text": " are their own",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Stride",
              "type": "codeVoice"
            },
            {
              "text": " types, they cannot be used as the bounds of a countable range. If",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you need to iterate over consecutive floating-point values, see the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "stride(from:to:by:)",
              "type": "codeVoice"
            },
            {
              "text": " function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection": {
      "abstract": [
        {
          "text": "A collection that supports backward as well as forward traversal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BidirectionalCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BidirectionalCollection"
        }
      ],
      "role": "symbol",
      "title": "BidirectionalCollection",
      "type": "topic",
      "url": "/documentation/swift/bidirectionalcollection"
    },
    "doc://com.apple.Swift/documentation/Swift/ClosedRange": {
      "abstract": [
        {
          "text": "An interval from a lower bound up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ClosedRange",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "role": "symbol",
      "title": "ClosedRange",
      "type": "topic",
      "url": "/documentation/swift/closedrange"
    },
    "doc://com.apple.Swift/documentation/Swift/Collection": {
      "abstract": [
        {
          "text": "A sequence whose elements can be traversed multiple times,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "nondestructively, and accessed by an indexed subscript.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Collection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Collection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Collection"
        }
      ],
      "role": "symbol",
      "title": "Collection",
      "type": "topic",
      "url": "/documentation/swift/collection"
    },
    "doc://com.apple.Swift/documentation/Swift/Comparable": {
      "abstract": [
        {
          "text": "A type that can be compared using the relational operators ",
          "type": "text"
        },
        {
          "code": "<",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "<=",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": ">=",
          "type": "codeVoice"
        },
        {
          "text": ",",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and ",
          "type": "text"
        },
        {
          "code": ">",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Comparable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Comparable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Comparable"
        }
      ],
      "role": "symbol",
      "title": "Comparable",
      "type": "topic",
      "url": "/documentation/swift/comparable"
    },
    "doc://com.apple.Swift/documentation/Swift/Comparable/...(_:_:)": {
      "abstract": [
        {
          "text": "Returns a closed range that contains both of its bounds.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "..."
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SN",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Comparable/...(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "...(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/comparable/'...(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Comparable/.._(_:_:)": {
      "abstract": [
        {
          "text": "Returns a half-open range that contains its lower bound but not its upper",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "..<"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Comparable/.._(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "..<(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/comparable/'.._(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/swift/copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation suitable for debugging",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "purposes.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomDebugStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customdebugstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomReflectable": {
      "abstract": [
        {
          "text": "A type that explicitly supplies its own mirror.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "role": "symbol",
      "title": "CustomReflectable",
      "type": "topic",
      "url": "/documentation/swift/customreflectable"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/Decodable": {
      "abstract": [
        {
          "text": "A type that can decode itself from an external representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Decodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Decodable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Decodable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Decodable"
        }
      ],
      "role": "symbol",
      "title": "Decodable",
      "type": "topic",
      "url": "/documentation/swift/decodable"
    },
    "doc://com.apple.Swift/documentation/Swift/Encodable": {
      "abstract": [
        {
          "text": "A type that can encode itself to an external representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Encodable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ],
      "role": "symbol",
      "title": "Encodable",
      "type": "topic",
      "url": "/documentation/swift/encodable"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/swift/equatable"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a ",
          "type": "text"
        },
        {
          "code": "Hasher",
          "type": "codeVoice"
        },
        {
          "text": " to produce an integer hash value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/swift/hashable"
    },
    "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection": {
      "abstract": [
        {
          "text": "A collection that supports efficient random-access index traversal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RandomAccessCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RandomAccessCollection"
        }
      ],
      "role": "symbol",
      "title": "RandomAccessCollection",
      "type": "topic",
      "url": "/documentation/swift/randomaccesscollection"
    },
    "doc://com.apple.Swift/documentation/Swift/Range": {
      "abstract": [
        {
          "text": "A half-open interval from a lower bound up to, but not including, an upper",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "role": "symbol",
      "title": "Range",
      "type": "topic",
      "url": "/documentation/swift/range"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/!=(_:_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether two values are not equal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "!="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/!=(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "!=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/range/!=(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/==(_:_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether two ranges are equal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "=="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/==(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "==(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/range/==(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/BidirectionalCollection-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/BidirectionalCollection-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "BidirectionalCollection Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/bidirectionalcollection-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/Collection-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/Collection-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Collection Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/collection-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/CustomDebugStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/CustomDebugStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomDebugStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/customdebugstringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/CustomReflectable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/CustomReflectable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomReflectable Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/customreflectable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/CustomStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/CustomStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/customstringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/CustomTestStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/CustomTestStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomTestStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/customteststringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/Decodable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/Decodable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Decodable Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/decodable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/Encodable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/Encodable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Encodable Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/encodable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/Equatable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/Equatable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Equatable Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/equatable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/Hashable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/Hashable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Hashable Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/hashable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/RangeExpression-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/RangeExpression-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "RangeExpression Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/rangeexpression-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/Sequence-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/Sequence-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Sequence Implementations",
      "type": "topic",
      "url": "/documentation/swift/range/sequence-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/clamped(to:)": {
      "abstract": [
        {
          "text": "Returns a copy of this range clamped to the given limiting range.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "clamped"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/clamped(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "clamped(to:)",
      "type": "topic",
      "url": "/documentation/swift/range/clamped(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-4xxju": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the given range is contained",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "within this range.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-4xxju",
      "kind": "symbol",
      "role": "symbol",
      "title": "contains(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/contains(_:)-4xxju"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-680jp": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the given closed range is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contained within this range.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SN",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-680jp",
      "kind": "symbol",
      "role": "symbol",
      "title": "contains(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/contains(_:)-680jp"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-76nb4": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether the given element is contained",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "within the range.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-76nb4",
      "kind": "symbol",
      "role": "symbol",
      "title": "contains(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/contains(_:)-76nb4"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/customMirror": {
      "abstract": [
        {
          "text": "The custom mirror for this instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "customMirror"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6MirrorV",
          "text": "Mirror"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/customMirror",
      "kind": "symbol",
      "role": "symbol",
      "title": "customMirror",
      "type": "topic",
      "url": "/documentation/swift/range/custommirror"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/debugDescription": {
      "abstract": [
        {
          "text": "A textual representation of the range, suitable for debugging.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "debugDescription"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/debugDescription",
      "kind": "symbol",
      "role": "symbol",
      "title": "debugDescription",
      "type": "topic",
      "url": "/documentation/swift/range/debugdescription"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/description": {
      "abstract": [
        {
          "text": "A textual representation of the range.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "description"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/description",
      "kind": "symbol",
      "role": "symbol",
      "title": "description",
      "type": "topic",
      "url": "/documentation/swift/range/description"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/encode(to:)": {
      "abstract": [
        {
          "text": "Encodes this value into the given encoder.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "encode"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7EncoderP",
          "text": "Encoder"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/encode(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "encode(to:)",
      "type": "topic",
      "url": "/documentation/swift/range/encode(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/formatted()": {
      "abstract": [
        {
          "text": "Formats the date range as an interval.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Date",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formatted"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/formatted()",
      "kind": "symbol",
      "role": "symbol",
      "title": "formatted()",
      "type": "topic",
      "url": "/documentation/swift/range/formatted()"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/formatted(_:)": {
      "abstract": [
        {
          "text": "Formats the date range using the specified style.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Date",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formatted"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation11FormatStyleP0B6OutputQa",
          "text": "FormatOutput"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/formatted(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "formatted(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/formatted(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/formatted(date:time:)": {
      "abstract": [
        {
          "text": "Formats the date range using the specified date and time format styles.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Date",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formatted"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "date"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV",
          "text": "Date"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV19IntervalFormatStyleV",
          "text": "IntervalFormatStyle"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV19IntervalFormatStyleV0bE0a",
          "text": "DateStyle"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "time"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV",
          "text": "Date"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV19IntervalFormatStyleV",
          "text": "IntervalFormatStyle"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV19IntervalFormatStyleV04TimeE0a",
          "text": "TimeStyle"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/formatted(date:time:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "formatted(date:time:)",
      "type": "topic",
      "url": "/documentation/swift/range/formatted(date:time:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/hash(into:)": {
      "abstract": [
        {
          "text": "Hashes the essential components of this value by feeding them into the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given hasher.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "into"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6HasherV",
          "text": "Hasher"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/hash(into:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "hash(into:)",
      "type": "topic",
      "url": "/documentation/swift/range/hash(into:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/hashValue": {
      "abstract": [
        {
          "text": "The hash value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hashValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/hashValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "hashValue",
      "type": "topic",
      "url": "/documentation/swift/range/hashvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-15u6b": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "typeIdentifier",
          "text": "NSRange"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-15u6b",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:)-15u6b"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-1q7lu": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BinaryInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "typeIdentifier",
          "text": "NSRange"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-1q7lu",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:)-1q7lu"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-35b1j": {
      "abstract": [
        {
          "text": "Now that Range is conditionally a collection when Bound: Strideable,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "CountableRange is no longer needed. This is a deprecated initializer",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "for any remaining uses of Range(countableRange).",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-35b1j",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:)-35b1j"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-79g1a": {
      "abstract": [
        {
          "text": "Creates an instance equivalent to the given ",
          "type": "text"
        },
        {
          "code": "ClosedRange",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SN",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-79g1a",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:)-79g1a"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-24465": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "AttributedString.Index",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "NSRange"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-24465",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:in:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:in:)-24465"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-5cclx": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "String.Index",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "typeIdentifier",
          "text": "NSRange"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-5cclx",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:in:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:in:)-5cclx"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-5qfor": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "String.Index",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "NSRange"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-5qfor",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:in:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:in:)-5qfor"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-612lr": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "AttributedString.Index",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-612lr",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:in:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:in:)-612lr"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-75xo3": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "String.Index",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-75xo3",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:in:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:in:)-75xo3"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-9vre5": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "String.Index",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation16AttributedStringV",
          "text": "AttributedString"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation16AttributedStringV22MarkdownSourcePositionV",
          "text": "MarkdownSourcePosition"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-9vre5",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:in:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(_:in:)-9vre5"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(from:)": {
      "abstract": [
        {
          "text": "Creates a new instance by decoding from the given decoder.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Decodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7DecoderP",
          "text": "Decoder"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(from:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(from:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(from:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/init(uncheckedBounds:)": {
      "abstract": [
        {
          "text": "Creates an instance with the given bounds.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "uncheckedBounds"
        },
        {
          "kind": "text",
          "text": ": (lower"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ", upper"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "))"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/init(uncheckedBounds:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(uncheckedBounds:)",
      "type": "topic",
      "url": "/documentation/swift/range/init(uncheckedbounds:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/isEmpty": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the range contains no elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isEmpty"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/isEmpty",
      "kind": "symbol",
      "role": "symbol",
      "title": "isEmpty",
      "type": "topic",
      "url": "/documentation/swift/range/isempty"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/lowerBound": {
      "abstract": [
        {
          "text": "The range’s lower bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "let"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "lowerBound"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/lowerBound",
      "kind": "symbol",
      "role": "symbol",
      "title": "lowerBound",
      "type": "topic",
      "url": "/documentation/swift/range/lowerbound"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/overlaps(_:)-7osha": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this range and the given range",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contain an element in common.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "overlaps"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/overlaps(_:)-7osha",
      "kind": "symbol",
      "role": "symbol",
      "title": "overlaps(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/overlaps(_:)-7osha"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/overlaps(_:)-9fkb2": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this range and the given closed",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "range contain an element in common.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "overlaps"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SN",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/overlaps(_:)-9fkb2",
      "kind": "symbol",
      "role": "symbol",
      "title": "overlaps(_:)",
      "type": "topic",
      "url": "/documentation/swift/range/overlaps(_:)-9fkb2"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/relative(to:)": {
      "abstract": [
        {
          "text": "Returns the range of indices described by this range expression within",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the given collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "relative"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/relative(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "relative(to:)",
      "type": "topic",
      "url": "/documentation/swift/range/relative(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/upToNextMajor(from:)": {
      "abstract": [
        {
          "text": "Returns a requirement for a version range, starting at the given minimum",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "version and going up to the next major version. This is the recommended version requirement.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "upToNextMajor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:18PackageDescription7VersionV",
          "text": "Version"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/upToNextMajor(from:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "upToNextMajor(from:)",
      "type": "topic",
      "url": "/documentation/swift/range/uptonextmajor(from:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/upToNextMinor(from:)": {
      "abstract": [
        {
          "text": "Returns a requirement for a version range, starting at the given minimum",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "version and going up to the next minor version.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "upToNextMinor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:18PackageDescription7VersionV",
          "text": "Version"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/upToNextMinor(from:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "upToNextMinor(from:)",
      "type": "topic",
      "url": "/documentation/swift/range/uptonextminor(from:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/upperBound": {
      "abstract": [
        {
          "text": "The range’s upper bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "let"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "upperBound"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/upperBound",
      "kind": "symbol",
      "role": "symbol",
      "title": "upperBound",
      "type": "topic",
      "url": "/documentation/swift/range/upperbound"
    },
    "doc://com.apple.Swift/documentation/Swift/Range/~=(_:_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether a value is included in a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "range.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "~="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SX5BoundQa",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range/~=(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "~=(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/range/~=(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeExpression": {
      "abstract": [
        {
          "text": "A type that can be used to slice a collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeExpression"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeExpression",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RangeExpression"
        }
      ],
      "role": "symbol",
      "title": "RangeExpression",
      "type": "topic",
      "url": "/documentation/swift/rangeexpression"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeSet": {
      "abstract": [
        {
          "text": "A set of values of any comparable type, represented by ranges.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeSet"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeSet",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RangeSet"
        }
      ],
      "role": "symbol",
      "title": "RangeSet",
      "type": "topic",
      "url": "/documentation/swift/rangeset"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Swift/Sequence": {
      "abstract": [
        {
          "text": "A type that provides sequential, iterated access to its elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sequence"
        }
      ],
      "role": "symbol",
      "title": "Sequence",
      "type": "topic",
      "url": "/documentation/swift/sequence"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:6CoreML23MLTensorRangeExpressionP": {
      "abstract": [
        {
          "text": "A type that can be used to slice a dimension of a tensor. Don’t use this type directly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MLTensorRangeExpression"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8SendableP",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6CoreML23MLTensorRangeExpressionP",
      "kind": "symbol",
      "role": "symbol",
      "title": "MLTensorRangeExpression",
      "type": "topic",
      "url": "/documentation/CoreML/MLTensorRangeExpression"
    },
    "doc://com.externally.resolved.symbol/s:6CoreML28MLShapedArrayRangeExpressionP": {
      "abstract": [
        {
          "text": "An interface for a range expression, which you typically use with subscripts of shaped array types.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MLShapedArrayRangeExpression"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6CoreML28MLShapedArrayRangeExpressionP",
      "kind": "symbol",
      "role": "symbol",
      "title": "MLShapedArrayRangeExpression",
      "type": "topic",
      "url": "/documentation/CoreML/MLShapedArrayRangeExpression"
    },
    "doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP": {
      "abstract": [
        {
          "text": "A protocol describing types with a custom string representation when presented as part of a test’s output.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomTestStringConvertible"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP",
      "kind": "symbol",
      "role": "symbol",
      "title": "CustomTestStringConvertible",
      "type": "topic",
      "url": "/documentation/Testing/CustomTestStringConvertible"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection",
        "doc://com.apple.Swift/documentation/Swift/Collection",
        "doc://com.apple.Swift/documentation/Swift/Copyable",
        "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
        "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
        "doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP",
        "doc://com.apple.Swift/documentation/Swift/Decodable",
        "doc://com.apple.Swift/documentation/Swift/Encodable",
        "doc://com.apple.Swift/documentation/Swift/Equatable",
        "doc://com.apple.Swift/documentation/Swift/Hashable",
        "doc://com.externally.resolved.symbol/s:6CoreML28MLShapedArrayRangeExpressionP",
        "doc://com.externally.resolved.symbol/s:6CoreML23MLTensorRangeExpressionP",
        "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection",
        "doc://com.apple.Swift/documentation/Swift/RangeExpression",
        "doc://com.apple.Swift/documentation/Swift/Sendable",
        "doc://com.apple.Swift/documentation/Swift/Sequence"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Ranges",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Comparable/.._(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/RangeSet",
        "doc://com.apple.Swift/documentation/Swift/Comparable/...(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/ClosedRange"
      ],
      "title": "Ranges"
    }
  ],
  "topicSections": [
    {
      "abstract": [
        {
          "text": "Create a new range using the half-open range operator (",
          "type": "text"
        },
        {
          "code": "..<",
          "type": "codeVoice"
        },
        {
          "text": ").",
          "type": "text"
        }
      ],
      "anchor": "Creating-a-Range",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Comparable/.._(_:_:)"
      ],
      "title": "Creating a Range"
    },
    {
      "anchor": "Converting-Ranges",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/relative(to:)",
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-5cclx",
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-5qfor"
      ],
      "title": "Converting Ranges"
    },
    {
      "anchor": "Inspecting-a-Range",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/isEmpty",
        "doc://com.apple.Swift/documentation/Swift/Range/lowerBound",
        "doc://com.apple.Swift/documentation/Swift/Range/upperBound"
      ],
      "title": "Inspecting a Range"
    },
    {
      "anchor": "Checking-for-Containment",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/~=(_:_:)"
      ],
      "title": "Checking for Containment"
    },
    {
      "anchor": "Clamping-a-Range",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/clamped(to:)"
      ],
      "title": "Clamping a Range"
    },
    {
      "anchor": "Working-with-Foundation-Ranges",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-15u6b",
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-1q7lu"
      ],
      "title": "Working with Foundation Ranges"
    },
    {
      "anchor": "Comparing-Ranges",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/==(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Range/!=(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Range/overlaps(_:)-7osha",
        "doc://com.apple.Swift/documentation/Swift/Range/overlaps(_:)-9fkb2"
      ],
      "title": "Comparing Ranges"
    },
    {
      "anchor": "Manipulating-Indices",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/hash(into:)"
      ],
      "title": "Manipulating Indices"
    },
    {
      "anchor": "Describing-a-Range",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/description",
        "doc://com.apple.Swift/documentation/Swift/Range/debugDescription",
        "doc://com.apple.Swift/documentation/Swift/Range/customMirror"
      ],
      "title": "Describing a Range"
    },
    {
      "anchor": "Encoding-and-Decoding-a-Range",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/encode(to:)",
        "doc://com.apple.Swift/documentation/Swift/Range/init(from:)"
      ],
      "title": "Encoding and Decoding a Range"
    },
    {
      "anchor": "Infrequently-Used-Functionality",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/init(uncheckedBounds:)",
        "doc://com.apple.Swift/documentation/Swift/Range/hashValue"
      ],
      "title": "Infrequently Used Functionality"
    },
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-35b1j",
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:)-79g1a",
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-24465",
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-612lr",
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-75xo3",
        "doc://com.apple.Swift/documentation/Swift/Range/init(_:in:)-9vre5"
      ],
      "title": "Initializers"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-4xxju",
        "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-680jp",
        "doc://com.apple.Swift/documentation/Swift/Range/contains(_:)-76nb4",
        "doc://com.apple.Swift/documentation/Swift/Range/formatted()",
        "doc://com.apple.Swift/documentation/Swift/Range/formatted(_:)",
        "doc://com.apple.Swift/documentation/Swift/Range/formatted(date:time:)"
      ],
      "title": "Instance Methods"
    },
    {
      "anchor": "Type-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/upToNextMajor(from:)",
        "doc://com.apple.Swift/documentation/Swift/Range/upToNextMinor(from:)"
      ],
      "title": "Type Methods"
    },
    {
      "anchor": "Default-Implementations",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Range/BidirectionalCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/Collection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/CustomDebugStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/CustomReflectable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/CustomStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/CustomTestStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/Decodable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/Encodable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/Equatable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/Hashable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/RangeExpression-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Range/Sequence-Implementations"
      ],
      "title": "Default Implementations"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/range"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
