{
  "abstract": [
    {
      "text": "Vend results as part of an API when you can’t return errors synchronously.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift",
        "doc://com.apple.Swift/documentation/Swift/swift-standard-library",
        "doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values",
        "doc://com.apple.Swift/documentation/Swift/Result"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/writing-failable-asynchronous-apis"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Writing Failable Asynchronous APIs"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When writing a function, method, or other API that might fail, you use the ",
              "type": "text"
            },
            {
              "code": "throws",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "keyword on the declaration to indicate that the API call can throw an error. However,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you can’t use the ",
              "type": "text"
            },
            {
              "code": "throws",
              "type": "codeVoice"
            },
            {
              "text": " keyword to model APIs that return asynchronously. Instead,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Result",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " enumeration to capture information about whether an asychronous",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "call succeeds or fails, and use the associated values for the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Result/success(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Result/failure(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " cases to carry information about the result of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "call.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Return-Result-Instances-Asynchronously",
          "level": 3,
          "text": "Return Result Instances Asynchronously",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The following example models an asynchronous source of random numbers. The ",
              "type": "text"
            },
            {
              "code": "fetchRemoteRandomNumber(completion:)",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method returns ",
              "type": "text"
            },
            {
              "code": "Void",
              "type": "codeVoice"
            },
            {
              "text": " synchronously, and asynchronously calls a completion handler",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with a ",
              "type": "text"
            },
            {
              "code": "Result<Int, EntropyError>",
              "type": "codeVoice"
            },
            {
              "text": " instance that contains either a random result",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or information about the failure.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let queue = DispatchQueue(label: \"com.example.queue\")",
            "",
            "enum EntropyError: Error {",
            "    case entropyDepleted",
            "}",
            "",
            "struct AsyncRandomGenerator {",
            "    static let entropyLimit = 5",
            "    var count = 0",
            "",
            "    mutating func fetchRemoteRandomNumber(",
            "        completion: @escaping (Result<Int, EntropyError>) -> Void",
            "    ) {",
            "        let result: Result<Int, EntropyError>",
            "        if count < AsyncRandomGenerator.entropyLimit {",
            "            // Produce numbers until reaching the entropy limit.",
            "            result = .success(Int.random(in: 1...100))",
            "        } else {",
            "            // Supply a failure reason when the caller hits the limit.",
            "            result = .failure(.entropyDepleted)",
            "        }",
            "",
            "        count += 1",
            "",
            "        // Delay to simulate an asynchronous source of entropy.",
            "        queue.asyncAfter(deadline: .now() + 2) {",
            "            completion(result)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Users of your remote random number generator can decide how to handle both the success",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and failure cases:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var generator = AsyncRandomGenerator()",
            "",
            "// Request one more number than the limit to trigger a failure.",
            "(0..<AsyncRandomGenerator.entropyLimit + 1).forEach { _ in",
            "    generator.fetchRemoteRandomNumber { result in",
            "        switch result {",
            "        case .success(let number):",
            "            print(number)",
            "        case .failure(let error):",
            "            print(\"Source of randomness failed: \\(error)\")",
            "        }",
            "    }",
            "}",
            "",
            "print(\"Waiting on some numbers.\")",
            "",
            "dispatchMain()",
            "/* Prints:",
            "success(29)",
            "success(46)",
            "success(85)",
            "success(39)",
            "success(84)",
            "Source of randomness failed: entropyDepleted",
            "*/"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/Result": {
      "abstract": [
        {
          "text": "A value that represents either a success or a failure, including an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "associated value in each case.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "role": "symbol",
      "title": "Result",
      "type": "topic",
      "url": "/documentation/swift/result"
    },
    "doc://com.apple.Swift/documentation/Swift/Result/failure(_:)": {
      "abstract": [
        {
          "text": "A failure, storing a ",
          "type": "text"
        },
        {
          "code": "Failure",
          "type": "codeVoice"
        },
        {
          "text": " value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "failure"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result/failure(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "Result.failure(_:)",
      "type": "topic",
      "url": "/documentation/swift/result/failure(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Result/success(_:)": {
      "abstract": [
        {
          "text": "A success, storing a ",
          "type": "text"
        },
        {
          "code": "Success",
          "type": "codeVoice"
        },
        {
          "text": " value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "success"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result/success(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "Result.success(_:)",
      "type": "topic",
      "url": "/documentation/swift/result/success(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values": {
      "abstract": [
        {
          "text": "Model data with numbers, Boolean values, and other fundamental types.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Numbers and Basic Values",
      "type": "topic",
      "url": "/documentation/swift/numbers-and-basic-values"
    },
    "doc://com.apple.Swift/documentation/Swift/swift-standard-library": {
      "abstract": [
        {
          "text": "Solve complex problems and write high-performance, readable code.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/swift-standard-library",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Swift Standard Library",
      "type": "topic",
      "url": "/documentation/swift/swift-standard-library"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Representing-a-Result",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Result/success(_:)",
        "doc://com.apple.Swift/documentation/Swift/Result/failure(_:)"
      ],
      "title": "Representing a Result"
    }
  ]
}
