{
  "abstract": [
    {
      "text": "Creates a new instance from the given string.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift",
        "doc://com.apple.Swift/documentation/Swift/Float16"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/Float16/init(_:)-9qp1z"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "extendedModule": "Swift",
    "externalID": "s:s7Float16VyABSgxcSyRzlufc",
    "fragments": [
      {
        "kind": "identifier",
        "text": "init"
      },
      {
        "kind": "text",
        "text": "?<"
      },
      {
        "kind": "genericParameter",
        "text": "S"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "typeIdentifier",
        "text": "S"
      },
      {
        "kind": "text",
        "text": ")"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "11.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "7.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Initializer",
    "symbolKind": "init",
    "title": "init(_:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "init"
            },
            {
              "kind": "text",
              "text": "?<"
            },
            {
              "kind": "genericParameter",
              "text": "S"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "text"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "typeIdentifier",
              "text": "S"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "S"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/StringProtocol",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sy",
              "text": "StringProtocol"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "An input string to convert to a ",
                  "type": "text"
                },
                {
                  "code": "Float16?",
                  "type": "codeVoice"
                },
                {
                  "text": " instance.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "text"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The string passed as ",
              "type": "text"
            },
            {
              "code": "text",
              "type": "codeVoice"
            },
            {
              "text": " can represent a real number in decimal or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "hexadecimal format or can be in a special format representing infinity",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or NaN (“not a number”). If ",
              "type": "text"
            },
            {
              "code": "text",
              "type": "codeVoice"
            },
            {
              "text": " is not in a recognized format,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the optional initializer will fail and return ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "text",
              "type": "codeVoice"
            },
            {
              "text": " string consists of an optional",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "plus or minus sign character (",
              "type": "text"
            },
            {
              "code": "+",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "-",
              "type": "codeVoice"
            },
            {
              "text": ")",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "followed by one of the following:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "A ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "decimal string",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " contains a significand consisting of one",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "or more decimal digits that may include a decimal point:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let c = Float16(\"-1.0\")",
                    "// c == -1.0",
                    "",
                    "let d = Float16(\"28.375\")",
                    "// d == 28.375"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "A decimal string may also include an exponent following the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "significand, indicating the power of 10 by which the significand should",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "be multiplied. If included, the exponent is separated by a single",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "character, ",
                      "type": "text"
                    },
                    {
                      "code": "e",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "E",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", and consists of an optional plus or minus sign",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "character and a sequence of decimal digits.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let e = Float16(\"2837.5e-2\")",
                    "// e == 28.375"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "A ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "hexadecimal string",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " contains a significand consisting of",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "0X",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "0x",
                      "type": "codeVoice"
                    },
                    {
                      "text": " followed by one or more hexadecimal digits that may",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "include a decimal point.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let f = Float16(\"0x1c.6\")",
                    "// f == 28.375"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "A hexadecimal string may also include an exponent",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "indicating the power of 2 by which the significand should",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "be multiplied. If included, the exponent is separated by a single",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "character, ",
                      "type": "text"
                    },
                    {
                      "code": "p",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "P",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", and consists of an optional plus or minus sign",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "character and a sequence of decimal digits.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let g = Float16(\"0x1.c6p4\")",
                    "// g == 28.375"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The input strings ",
                      "type": "text"
                    },
                    {
                      "code": "\"inf\"",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "\"infinity\"",
                      "type": "codeVoice"
                    },
                    {
                      "text": " (case insensitive)",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "are converted to an infinite result:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let i = Float16(\"inf\")",
                    "// i == Float16.infinity",
                    "",
                    "let j = Float16(\"-Infinity\")",
                    "// j == -Float16.infinity"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "An input string of ",
                      "type": "text"
                    },
                    {
                      "code": "\"nan\"",
                      "type": "codeVoice"
                    },
                    {
                      "text": " (case insensitive) is converted",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "into a ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "NaN",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " value:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let n = Float16(\"-nan\")",
                    "// n?.isNaN == true",
                    "// n?.sign == .minus"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "A NaN string may also include a payload in parentheses following the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "\"nan\"",
                      "type": "codeVoice"
                    },
                    {
                      "text": " keyword. The payload consists of a sequence of decimal digits,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "or the characters ",
                      "type": "text"
                    },
                    {
                      "code": "0X",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "0x",
                      "type": "codeVoice"
                    },
                    {
                      "text": " followed by a sequence of hexadecimal",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "digits. If the payload contains any other characters, it is ignored.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "If the value of the payload is larger than can be stored as the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "payload of a ",
                      "type": "text"
                    },
                    {
                      "code": "Float16.nan",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", the least significant bits are used.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let p = Float16(\"nan(0x10)\")",
                    "// p?.isNaN == true",
                    "// String(p!) == \"nan(0x10)\""
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "A string in any other format than those described above",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or containing additional characters",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "results in a ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " value. For example, the following conversions",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "result in ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "  Float16(\" 5.0\")      // Includes whitespace",
            "  Float16(\"±2.0\")      // Invalid character",
            "  Float16(\"0x1.25e4\")  // Incorrect exponent format"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "A decimal or hexadecimal string is converted to a ",
              "type": "text"
            },
            {
              "code": "Float16",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance using the IEEE 754 roundTiesToEven (default) rounding",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "attribute.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Values with absolute value smaller than ",
              "type": "text"
            },
            {
              "code": "Float16.leastNonzeroMagnitude",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are rounded to plus or minus zero.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Values with absolute value larger than ",
              "type": "text"
            },
            {
              "code": "Float16.greatestFiniteMagnitude",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are rounded to plus or minus infinity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "  let y = Float16(\"1.23e-9999\")",
            "  // y == 0.0",
            "  // y?.sign == .plus",
            "",
            "  let z = Float16(\"-7.89e-7206\")",
            "  // z == -0.0",
            "  // z?.sign == .minus",
            "",
            "  let r = Float16(\"1.23e17802\")",
            "  // r == Float16.infinity",
            "",
            "  let s = Float16(\"-7.89e7206\")",
            "  // s == Float16.-infinity"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Prior to Swift 5.4, a decimal or",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "hexadecimal input string whose value was too large to represent",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "as a finite ",
                  "type": "text"
                },
                {
                  "code": "Float16",
                  "type": "codeVoice"
                },
                {
                  "text": " instance returned ",
                  "type": "text"
                },
                {
                  "code": "nil",
                  "type": "codeVoice"
                },
                {
                  "text": " instead of",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "code": "Float16.infinity",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16": {
      "abstract": [
        {
          "text": "A half-precision (16b), floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "role": "symbol",
      "title": "Float16",
      "type": "topic",
      "url": "/documentation/swift/float16"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16/init(_:)-9qp1z": {
      "abstract": [
        {
          "text": "Creates a new instance from the given string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16/init(_:)-9qp1z",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/float16/init(_:)-9qp1z"
    },
    "doc://com.apple.Swift/documentation/Swift/StringProtocol": {
      "abstract": [
        {
          "text": "A type that can represent a string as a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StringProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StringProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StringProtocol"
        }
      ],
      "role": "symbol",
      "title": "StringProtocol",
      "type": "topic",
      "url": "/documentation/swift/stringprotocol"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/swift/float16/init(_:)-9qp1z"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
