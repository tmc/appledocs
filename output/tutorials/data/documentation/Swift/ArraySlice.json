{
  "abstract": [
    {
      "text": "A slice of an ",
      "type": "text"
    },
    {
      "code": "Array",
      "type": "codeVoice"
    },
    {
      "text": ", ",
      "type": "text"
    },
    {
      "code": "ContiguousArray",
      "type": "codeVoice"
    },
    {
      "text": ", or ",
      "type": "text"
    },
    {
      "code": "ArraySlice",
      "type": "codeVoice"
    },
    {
      "text": " instance.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    },
    "minor": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.2",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/ArraySlice"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s10ArraySliceV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "ArraySlice"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "ArraySlice"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "ArraySlice"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "ArraySlice"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Element"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "ArraySlice",
              "type": "codeVoice"
            },
            {
              "text": " type makes it fast and efficient for you to perform",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "operations on sections of a larger array. Instead of copying over the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "elements of a slice to new storage, an ",
              "type": "text"
            },
            {
              "code": "ArraySlice",
              "type": "codeVoice"
            },
            {
              "text": " instance presents a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "view onto the storage of a larger array. And because ",
              "type": "text"
            },
            {
              "code": "ArraySlice",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "presents the same interface as ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": ", you can generally perform the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "same operations on a slice as you could on the original array.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about using arrays, see ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "ContiguousArray",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with which ",
              "type": "text"
            },
            {
              "code": "ArraySlice",
              "type": "codeVoice"
            },
            {
              "text": " shares most properties and methods.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Slices-Are-Views-onto-Arrays",
          "level": 1,
          "text": "Slices Are Views onto Arrays",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "For example, suppose you have an array holding the number of absences",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "from each class during a session.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let absences = [0, 2, 0, 4, 0, 3, 1, 0]"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You want to compare the absences in the first half of the session with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "those in the second half. To do so, start by creating two slices of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "absences",
              "type": "codeVoice"
            },
            {
              "text": " array.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let midpoint = absences.count / 2",
            "",
            "let firstHalf = absences[..<midpoint]",
            "let secondHalf = absences[midpoint...]"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Neither the ",
              "type": "text"
            },
            {
              "code": "firstHalf",
              "type": "codeVoice"
            },
            {
              "text": " nor ",
              "type": "text"
            },
            {
              "code": "secondHalf",
              "type": "codeVoice"
            },
            {
              "text": " slices allocate any new storage",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of their own. Instead, each presents a view onto the storage of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "absences",
              "type": "codeVoice"
            },
            {
              "text": " array.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can call any method on the slices that you might have called on the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "absences",
              "type": "codeVoice"
            },
            {
              "text": " array. To learn which half had more absences, use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "reduce(_:_:)",
              "type": "codeVoice"
            },
            {
              "text": " method to calculate each sum.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let firstHalfSum = firstHalf.reduce(0, +)",
            "let secondHalfSum = secondHalf.reduce(0, +)",
            "",
            "if firstHalfSum > secondHalfSum {",
            "    print(\"More absences in the first half.\")",
            "} else {",
            "    print(\"More absences in the second half.\")",
            "}",
            "// Prints \"More absences in the first half.\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Long-term storage of ",
                  "type": "text"
                },
                {
                  "code": "ArraySlice",
                  "type": "codeVoice"
                },
                {
                  "text": " instances is discouraged. A",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "slice holds a reference to the entire storage of a larger array, not",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "just to the portion it presents, even after the original array’s lifetime",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "ends. Long-term storage of a slice may therefore prolong the lifetime of",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "elements that are no longer otherwise accessible, which can appear to be",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "memory and object leakage.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "anchor": "Slices-Maintain-Indices",
          "level": 1,
          "text": "Slices Maintain Indices",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Unlike ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "ContiguousArray",
              "type": "codeVoice"
            },
            {
              "text": ", the starting index for an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "ArraySlice",
              "type": "codeVoice"
            },
            {
              "text": " instance isn’t always zero. Slices maintain the same",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "indices of the larger array for the same elements, so the starting",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "index of a slice depends on how it was created, letting you perform",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "index-based operations on either a full array or a slice.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Sharing indices between collections and their subsequences is an important",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "part of the design of Swift’s collection algorithms. Suppose you are",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "tasked with finding the first two days with absences in the session. To",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "find the indices of the two days in question, follow these steps:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Call ",
                      "type": "text"
                    },
                    {
                      "code": "firstIndex(where:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to find the index of the first element in the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "absences",
                      "type": "codeVoice"
                    },
                    {
                      "text": " array that is greater than zero.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Create a slice of the ",
                      "type": "text"
                    },
                    {
                      "code": "absences",
                      "type": "codeVoice"
                    },
                    {
                      "text": " array starting after the index found in",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "step 1.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Call ",
                      "type": "text"
                    },
                    {
                      "code": "firstIndex(where:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " again, this time on the slice created in step",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "2. Where in some languages you might pass a starting index into an",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "indexOf",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method to find the second day, in Swift you perform the same",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "operation on a slice of the original array.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Print the results using the indices found in steps 1 and 3 on the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "original ",
                      "type": "text"
                    },
                    {
                      "code": "absences",
                      "type": "codeVoice"
                    },
                    {
                      "text": " array.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "orderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s an implementation of those steps:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "if let i = absences.firstIndex(where: { $0 > 0 }) {                 // 1",
            "    let absencesAfterFirst = absences[(i + 1)...]                   // 2",
            "    if let j = absencesAfterFirst.firstIndex(where: { $0 > 0 }) {   // 3",
            "        print(\"The first day with absences had \\(absences[i]).\")    // 4",
            "        print(\"The second day with absences had \\(absences[j]).\")",
            "    }",
            "}",
            "// Prints \"The first day with absences had 2.\"",
            "// Prints \"The second day with absences had 4.\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In particular, note that ",
              "type": "text"
            },
            {
              "code": "j",
              "type": "codeVoice"
            },
            {
              "text": ", the index of the second day with absences,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "was found in a slice of the original array and then used to access a value",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in the original ",
              "type": "text"
            },
            {
              "code": "absences",
              "type": "codeVoice"
            },
            {
              "text": " array itself.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "To safely reference the starting and ending indices of a slice,",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "always use the ",
                  "type": "text"
                },
                {
                  "code": "startIndex",
                  "type": "codeVoice"
                },
                {
                  "text": " and ",
                  "type": "text"
                },
                {
                  "code": "endIndex",
                  "type": "codeVoice"
                },
                {
                  "text": " properties instead of",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "specific values.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice": {
      "abstract": [
        {
          "text": "A slice of an ",
          "type": "text"
        },
        {
          "code": "Array",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "ContiguousArray",
          "type": "codeVoice"
        },
        {
          "text": ", or ",
          "type": "text"
        },
        {
          "code": "ArraySlice",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "role": "symbol",
      "title": "ArraySlice",
      "type": "topic",
      "url": "/documentation/swift/arrayslice"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/BidirectionalCollection-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/BidirectionalCollection-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "BidirectionalCollection Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/bidirectionalcollection-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/Collection-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/Collection-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Collection Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/collection-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomDebugStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomDebugStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomDebugStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/customdebugstringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomReflectable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomReflectable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomReflectable Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/customreflectable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/customstringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/Equatable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/Equatable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Equatable Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/equatable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/ExpressibleByArrayLiteral-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/ExpressibleByArrayLiteral-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "ExpressibleByArrayLiteral Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/expressiblebyarrayliteral-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/Hashable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/Hashable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Hashable Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/hashable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/MutableCollection-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/MutableCollection-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "MutableCollection Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/mutablecollection-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/RandomAccessCollection-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/RandomAccessCollection-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "RandomAccessCollection Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/randomaccesscollection-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/RangeReplaceableCollection-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/RangeReplaceableCollection-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "RangeReplaceableCollection Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/rangereplaceablecollection-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/Sequence-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/Sequence-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Sequence Implementations",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/sequence-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/capacity": {
      "abstract": [
        {
          "text": "The total number of elements that the array can contain without",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "allocating new storage.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "capacity"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/capacity",
      "kind": "symbol",
      "role": "symbol",
      "title": "capacity",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/capacity"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/init(_:)": {
      "abstract": [
        {
          "text": "Creates an array containing the elements of a sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/init(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/init(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/insert(_:at:)": {
      "abstract": [
        {
          "text": "Inserts a new element at the specified position.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "insert"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "at"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/insert(_:at:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "insert(_:at:)",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/insert(_:at:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/remove(at:)": {
      "abstract": [
        {
          "text": "Removes and returns the element at the specified position.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "remove"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "at"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/remove(at:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "remove(at:)",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/remove(at:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/reserveCapacity(_:)": {
      "abstract": [
        {
          "text": "Reserves enough space to store the specified number of elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "reserveCapacity"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/reserveCapacity(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "reserveCapacity(_:)",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/reservecapacity(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeBufferPointer(_:)": {
      "abstract": [
        {
          "text": "Calls a closure with a pointer to the array’s contiguous storage.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withUnsafeBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SR",
          "text": "UnsafeBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">) "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeBufferPointer(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withUnsafeBufferPointer(_:)",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/withunsafebufferpointer(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeBytes(_:)": {
      "abstract": [
        {
          "text": "Calls the given closure with a pointer to the underlying bytes of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "array’s contiguous storage.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withUnsafeBytes"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SW",
          "text": "UnsafeRawBufferPointer"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeBytes(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withUnsafeBytes(_:)",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/withunsafebytes(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeMutableBufferPointer(_:)": {
      "abstract": [
        {
          "text": "Calls the given closure with a pointer to the array’s mutable contiguous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "storage.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withUnsafeMutableBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sr",
          "text": "UnsafeMutableBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">) "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeMutableBufferPointer(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withUnsafeMutableBufferPointer(_:)",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/withunsafemutablebufferpointer(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeMutableBytes(_:)": {
      "abstract": [
        {
          "text": "Calls the given closure with a pointer to the underlying bytes of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "array’s mutable contiguous storage.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withUnsafeMutableBytes"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sw",
          "text": "UnsafeMutableRawBufferPointer"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeMutableBytes(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withUnsafeMutableBytes(_:)",
      "type": "topic",
      "url": "/documentation/swift/arrayslice/withunsafemutablebytes(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection": {
      "abstract": [
        {
          "text": "A collection that supports backward as well as forward traversal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BidirectionalCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BidirectionalCollection"
        }
      ],
      "role": "symbol",
      "title": "BidirectionalCollection",
      "type": "topic",
      "url": "/documentation/swift/bidirectionalcollection"
    },
    "doc://com.apple.Swift/documentation/Swift/Collection": {
      "abstract": [
        {
          "text": "A sequence whose elements can be traversed multiple times,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "nondestructively, and accessed by an indexed subscript.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Collection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Collection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Collection"
        }
      ],
      "role": "symbol",
      "title": "Collection",
      "type": "topic",
      "url": "/documentation/swift/collection"
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray": {
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "role": "symbol",
      "title": "ContiguousArray",
      "type": "topic",
      "url": "/documentation/swift/contiguousarray"
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/swift/copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation suitable for debugging",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "purposes.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomDebugStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customdebugstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomReflectable": {
      "abstract": [
        {
          "text": "A type that explicitly supplies its own mirror.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "role": "symbol",
      "title": "CustomReflectable",
      "type": "topic",
      "url": "/documentation/swift/customreflectable"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/swift/equatable"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized using an array literal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByArrayLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByArrayLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByArrayLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyarrayliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a ",
          "type": "text"
        },
        {
          "code": "Hasher",
          "type": "codeVoice"
        },
        {
          "text": " to produce an integer hash value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/swift/hashable"
    },
    "doc://com.apple.Swift/documentation/Swift/MutableCollection": {
      "abstract": [
        {
          "text": "A collection that supports subscript assignment.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MutableCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/MutableCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MutableCollection"
        }
      ],
      "role": "symbol",
      "title": "MutableCollection",
      "type": "topic",
      "url": "/documentation/swift/mutablecollection"
    },
    "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection": {
      "abstract": [
        {
          "text": "A collection that supports efficient random-access index traversal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RandomAccessCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RandomAccessCollection"
        }
      ],
      "role": "symbol",
      "title": "RandomAccessCollection",
      "type": "topic",
      "url": "/documentation/swift/randomaccesscollection"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeReplaceableCollection": {
      "abstract": [
        {
          "text": "A collection that supports replacement of an arbitrary subrange of elements",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "with the elements of another collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeReplaceableCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeReplaceableCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RangeReplaceableCollection"
        }
      ],
      "role": "symbol",
      "title": "RangeReplaceableCollection",
      "type": "topic",
      "url": "/documentation/swift/rangereplaceablecollection"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Swift/Sequence": {
      "abstract": [
        {
          "text": "A type that provides sequential, iterated access to its elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sequence"
        }
      ],
      "role": "symbol",
      "title": "Sequence",
      "type": "topic",
      "url": "/documentation/swift/sequence"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate0A13MutableBufferP": {
      "abstract": [
        {
          "text": "A type that represents a mutable buffer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AccelerateMutableBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate0A6BufferP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate0A6BufferP",
          "text": "AccelerateBuffer"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate0A13MutableBufferP",
      "kind": "symbol",
      "role": "symbol",
      "title": "AccelerateMutableBuffer",
      "type": "topic",
      "url": "/documentation/Accelerate/AccelerateMutableBuffer"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate0A6BufferP": {
      "abstract": [
        {
          "text": "A type that represents an immutable buffer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AccelerateBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate0A6BufferP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate0A6BufferP",
      "kind": "symbol",
      "role": "symbol",
      "title": "AccelerateBuffer",
      "type": "topic",
      "url": "/documentation/Accelerate/AccelerateBuffer"
    },
    "doc://com.externally.resolved.symbol/s:10Foundation12DataProtocolP": {
      "abstract": [
        {
          "text": "A protocol that provides consistent data access to the bytes underlying contiguous and noncontiguous data buffers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "protocol "
        },
        {
          "kind": "identifier",
          "text": "DataProtocol"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation12DataProtocolP",
      "kind": "symbol",
      "role": "symbol",
      "title": "DataProtocol",
      "type": "topic",
      "url": "/documentation/foundation/dataprotocol"
    },
    "doc://com.externally.resolved.symbol/s:10Foundation15ContiguousBytesP": {
      "abstract": [
        {
          "text": "A protocol that declares the type offers direct access to the underlying raw bytes in a contiguous manner.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "protocol "
        },
        {
          "kind": "identifier",
          "text": "ContiguousBytes"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation15ContiguousBytesP",
      "kind": "symbol",
      "role": "symbol",
      "title": "ContiguousBytes",
      "type": "topic",
      "url": "/documentation/foundation/contiguousbytes"
    },
    "doc://com.externally.resolved.symbol/s:6Charts10ScaleRangeP": {
      "abstract": [
        {
          "text": "A type that you can use to configure the range of a chart.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ScaleRange"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts10ScaleRangeP",
      "kind": "symbol",
      "role": "symbol",
      "title": "ScaleRange",
      "type": "topic",
      "url": "/documentation/Charts/ScaleRange"
    },
    "doc://com.externally.resolved.symbol/s:6Charts11ScaleDomainP": {
      "abstract": [
        {
          "text": "A type that you can use to configure the domain of a chart.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ScaleDomain"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts11ScaleDomainP",
      "kind": "symbol",
      "role": "symbol",
      "title": "ScaleDomain",
      "type": "topic",
      "url": "/documentation/Charts/ScaleDomain"
    },
    "doc://com.externally.resolved.symbol/s:6Charts18PositionScaleRangeP": {
      "abstract": [
        {
          "text": "A type that configures the x-axis and y-axis values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PositionScaleRange"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:6Charts10ScaleRangeP",
          "text": "ScaleRange"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:6Charts10ScaleRangeP11VisualValueQa",
          "text": "VisualValue"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:14CoreFoundation7CGFloatV",
          "text": "CGFloat"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts18PositionScaleRangeP",
      "kind": "symbol",
      "role": "symbol",
      "title": "PositionScaleRange",
      "type": "topic",
      "url": "/documentation/Charts/PositionScaleRange"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.externally.resolved.symbol/s:10Accelerate0A6BufferP",
        "doc://com.externally.resolved.symbol/s:10Accelerate0A13MutableBufferP",
        "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection",
        "doc://com.apple.Swift/documentation/Swift/Collection",
        "doc://com.externally.resolved.symbol/s:10Foundation15ContiguousBytesP",
        "doc://com.apple.Swift/documentation/Swift/Copyable",
        "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
        "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
        "doc://com.externally.resolved.symbol/s:10Foundation12DataProtocolP",
        "doc://com.apple.Swift/documentation/Swift/Equatable",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral",
        "doc://com.apple.Swift/documentation/Swift/Hashable",
        "doc://com.apple.Swift/documentation/Swift/MutableCollection",
        "doc://com.externally.resolved.symbol/s:6Charts18PositionScaleRangeP",
        "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection",
        "doc://com.apple.Swift/documentation/Swift/RangeReplaceableCollection",
        "doc://com.externally.resolved.symbol/s:6Charts11ScaleDomainP",
        "doc://com.externally.resolved.symbol/s:6Charts10ScaleRangeP",
        "doc://com.apple.Swift/documentation/Swift/Sendable",
        "doc://com.apple.Swift/documentation/Swift/Sequence"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Related-Array-Types",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ContiguousArray"
      ],
      "title": "Related Array Types"
    }
  ],
  "topicSections": [
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/init(_:)"
      ],
      "title": "Initializers"
    },
    {
      "anchor": "Instance-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/capacity"
      ],
      "title": "Instance Properties"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/insert(_:at:)",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/remove(at:)",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/reserveCapacity(_:)",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeBufferPointer(_:)",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeBytes(_:)",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeMutableBufferPointer(_:)",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/withUnsafeMutableBytes(_:)"
      ],
      "title": "Instance Methods"
    },
    {
      "anchor": "Default-Implementations",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/BidirectionalCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/Collection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomDebugStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomReflectable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/CustomStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/Equatable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/ExpressibleByArrayLiteral-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/Hashable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/MutableCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/RandomAccessCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/RangeReplaceableCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice/Sequence-Implementations"
      ],
      "title": "Default Implementations"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/arrayslice"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
