{
  "abstract": [
    {
      "text": "A service that executes jobs.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/SerialExecutor"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:Scf",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "SerialExecutor"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "SerialExecutor"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.15",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "6.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "SerialExecutor"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "SerialExecutor"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Executor",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ScF",
              "text": "Executor"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "Custom-Actor-Executors",
          "level": 3,
          "text": "Custom Actor Executors",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "By default, all actor types execute tasks on a shared global concurrent pool.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The global pool does not guarantee any thread (or dispatch queue) affinity,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "so actors are free to use different threads as they execute tasks.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The runtime may perform various optimizations to minimize un-necessary",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "thread switching.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "Sometimes it is important to be able to customize the execution behavior",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of an actor. For example, when an actor is known to perform heavy blocking",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "operations (such as IO), and we would like to keep this work ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "off",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " the global",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "shared pool, as blocking it may prevent other actors from being responsive.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can implement a custom executor, by conforming a type to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol, and implementing the ",
              "type": "text"
            },
            {
              "code": "enqueue(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Once implemented, you can configure an actor to use such executor by",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "implementing the actor’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Actor/unownedExecutor",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " computed property.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, you could accept an executor in the actor’s initializer,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "store it as a variable (in order to retain it for the duration of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "actor’s lifetime), and return it from the ",
              "type": "text"
            },
            {
              "code": "unownedExecutor",
              "type": "codeVoice"
            },
            {
              "text": " computed",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property like this:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "actor MyActor {",
            "  let myExecutor: MyExecutor",
            "",
            "  // accepts an executor to run this actor on.",
            "  init(executor: MyExecutor) {",
            "    self.myExecutor = executor",
            "  }",
            "",
            "  nonisolated var unownedExecutor: UnownedSerialExecutor {",
            "    self.myExecutor.asUnownedSerialExecutor()",
            "  }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "It is also possible to use a form of shared executor, either created as a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "global or static property, which you can then re-use for every MyActor",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "actor MyActor {",
            "  // Serial executor reused by *all* instances of MyActor!",
            "  static let sharedMyActorsExecutor = MyExecutor() // implements SerialExecutor",
            "",
            "",
            "  nonisolated var unownedExecutor: UnownedSerialExecutor {",
            "    Self.sharedMyActorsExecutor.asUnownedSerialExecutor()",
            "  }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In the example above, ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "all",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " “MyActor” instances would be using the same",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "serial executor, which would result in only one of such actors ever being",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "run at the same time. This may be useful if some of your code has some",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "“specific thread” requirement when interoperating with non-Swift runtimes",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for example.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Since the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " returned by the ",
              "type": "text"
            },
            {
              "code": "unownedExecutor",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "does not",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " retain the executor, you must make sure the lifetime of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it extends beyond the lifetime of any actor or task using it, as otherwise",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it may attempt to enqueue work on a released executor object, causing a crash.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The executor returned by unownedExecutor ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "must",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " always be the same object,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and returning different executors can lead to unexpected behavior.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, you can also use existing serial executor implementations,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "such as Dispatch’s ",
              "type": "text"
            },
            {
              "code": "DispatchSerialQueue",
              "type": "codeVoice"
            },
            {
              "text": " or others.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/Actor/unownedExecutor": {
      "abstract": [
        {
          "text": "Retrieve the executor for this actor as an optimized, unowned",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "reference.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "unownedExecutor"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sce",
          "text": "UnownedSerialExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Actor/unownedExecutor",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "unownedExecutor",
      "type": "topic",
      "url": "/documentation/swift/actor/unownedexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/Executor": {
      "abstract": [
        {
          "text": "A service that can execute jobs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Executor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Executor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Executor"
        }
      ],
      "role": "symbol",
      "title": "Executor",
      "type": "topic",
      "url": "/documentation/swift/executor"
    },
    "doc://com.apple.Swift/documentation/Swift/ExecutorJob": {
      "abstract": [
        {
          "text": "A unit of schedulable work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExecutorJob"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExecutorJob",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExecutorJob"
        }
      ],
      "role": "symbol",
      "title": "ExecutorJob",
      "type": "topic",
      "url": "/documentation/swift/executorjob"
    },
    "doc://com.apple.Swift/documentation/Swift/JobPriority": {
      "abstract": [
        {
          "text": "The priority of this job.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "JobPriority"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/JobPriority",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "JobPriority"
        }
      ],
      "role": "symbol",
      "title": "JobPriority",
      "type": "topic",
      "url": "/documentation/swift/jobpriority"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialAsyncTask": {
      "abstract": [],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialAsyncTask"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialAsyncTask",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialAsyncTask"
        }
      ],
      "role": "symbol",
      "title": "PartialAsyncTask",
      "type": "topic",
      "url": "/documentation/swift/partialasynctask"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor": {
      "abstract": [
        {
          "text": "A service that executes jobs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SerialExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SerialExecutor"
        }
      ],
      "role": "symbol",
      "title": "SerialExecutor",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor/asUnownedSerialExecutor()": {
      "abstract": [
        {
          "text": "Convert this executor value to the optimized form of borrowed",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "executor references.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "asUnownedSerialExecutor"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sce",
          "text": "UnownedSerialExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor/asUnownedSerialExecutor()",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "asUnownedSerialExecutor()",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor/asunownedserialexecutor()"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor/assertIsolated(_:file:line:)": {
      "abstract": [
        {
          "text": "Stops program execution if the current task is not executing on this",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "serial executor.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "assertIsolated"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "file"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s12StaticStringV",
          "text": "StaticString"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "line"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor/assertIsolated(_:file:line:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "assertIsolated(_:file:line:)",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor/assertisolated(_:file:line:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor/checkIsolated()": {
      "abstract": [
        {
          "text": "Last resort “fallback” isolation check, called when the concurrency runtime",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "is comparing executors e.g. during ",
          "type": "text"
        },
        {
          "code": "assumeIsolated()",
          "type": "codeVoice"
        },
        {
          "text": " and is unable to prove",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "serial equivalence between the expected (this object), and the current executor.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "checkIsolated"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor/checkIsolated()",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "checkIsolated()",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor/checkisolated()"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-229km": {
      "abstract": [],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "enqueue"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScJ",
          "text": "UnownedJob"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-229km",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "enqueue(_:)",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor/enqueue(_:)-229km"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-2xi5n": {
      "abstract": [],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "enqueue"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency3JobV",
          "text": "Job"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-2xi5n",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "enqueue(_:)",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor/enqueue(_:)-2xi5n"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-7sypu": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "enqueue"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency11ExecutorJobV",
          "text": "ExecutorJob"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-7sypu",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "enqueue(_:)",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor/enqueue(_:)-7sypu"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor/isSameExclusiveExecutionContext(other:)": {
      "abstract": [
        {
          "text": "If this executor has complex equality semantics, and the runtime needs to",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "compare two executors, it will first attempt the usual pointer-based",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "equality / check, / and if it fails it will compare the types of both",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "executors, if they are the same, / it will finally invoke this method,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "attempt to let the executor itself decide / if this and the ",
          "type": "text"
        },
        {
          "code": "other",
          "type": "codeVoice"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "executor represent the same serial, exclusive, isolation context.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isSameExclusiveExecutionContext"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "other"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor/isSameExclusiveExecutionContext(other:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isSameExclusiveExecutionContext(other:)",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor/issameexclusiveexecutioncontext(other:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor/preconditionIsolated(_:file:line:)": {
      "abstract": [
        {
          "text": "Stops program execution if the current task is not executing on this",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "serial executor.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "preconditionIsolated"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "file"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s12StaticStringV",
          "text": "StaticString"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "line"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor/preconditionIsolated(_:file:line:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "preconditionIsolated(_:file:line:)",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor/preconditionisolated(_:file:line:)"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskExecutor": {
      "abstract": [
        {
          "text": "An executor that may be used as preferred executor by a task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TaskExecutor"
        }
      ],
      "role": "symbol",
      "title": "TaskExecutor",
      "type": "topic",
      "url": "/documentation/swift/taskexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedJob": {
      "abstract": [
        {
          "text": "A unit of schedulable work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedJob"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedJob",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedJob"
        }
      ],
      "role": "symbol",
      "title": "UnownedJob",
      "type": "topic",
      "url": "/documentation/swift/unownedjob"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor": {
      "abstract": [
        {
          "text": "An unowned reference to a serial executor (a ",
          "type": "text"
        },
        {
          "code": "SerialExecutor",
          "type": "codeVoice"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedSerialExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedSerialExecutor"
        }
      ],
      "role": "symbol",
      "title": "UnownedSerialExecutor",
      "type": "topic",
      "url": "/documentation/swift/unownedserialexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedTaskExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedTaskExecutor"
        }
      ],
      "role": "symbol",
      "title": "UnownedTaskExecutor",
      "type": "topic",
      "url": "/documentation/swift/unownedtaskexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/globalConcurrentExecutor": {
      "abstract": [
        {
          "text": "The global concurrent executor that is used by default for Swift Concurrency",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "tasks.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "globalConcurrentExecutor"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sch",
          "text": "TaskExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/globalConcurrentExecutor",
      "kind": "symbol",
      "role": "symbol",
      "title": "globalConcurrentExecutor",
      "type": "topic",
      "url": "/documentation/swift/globalconcurrentexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/withTaskExecutorPreference(_:isolation:operation:)": {
      "abstract": [
        {
          "text": "Configure the current task hierarchy’s task executor preference to the passed ",
          "type": "text"
        },
        {
          "identifier": "doc://com.apple.Swift/documentation/Swift/TaskExecutor",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": ",",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and execute the passed in closure by immediately hopping to that executor.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withTaskExecutorPreference"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ">((any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sch",
          "text": "TaskExecutor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "operation"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/withTaskExecutorPreference(_:isolation:operation:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withTaskExecutorPreference(_:isolation:operation:)",
      "type": "topic",
      "url": "/documentation/swift/withtaskexecutorpreference(_:isolation:operation:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Executor",
        "doc://com.apple.Swift/documentation/Swift/Sendable"
      ],
      "kind": "relationships",
      "title": "Inherits From",
      "type": "inheritsFrom"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Executors",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Executor",
        "doc://com.apple.Swift/documentation/Swift/ExecutorJob",
        "doc://com.apple.Swift/documentation/Swift/TaskExecutor",
        "doc://com.apple.Swift/documentation/Swift/PartialAsyncTask",
        "doc://com.apple.Swift/documentation/Swift/UnownedJob",
        "doc://com.apple.Swift/documentation/Swift/JobPriority",
        "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor",
        "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor",
        "doc://com.apple.Swift/documentation/Swift/globalConcurrentExecutor",
        "doc://com.apple.Swift/documentation/Swift/withTaskExecutorPreference(_:isolation:operation:)"
      ],
      "title": "Executors"
    }
  ],
  "topicSections": [
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor/asUnownedSerialExecutor()",
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor/assertIsolated(_:file:line:)",
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor/checkIsolated()",
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-229km",
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-2xi5n",
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor/enqueue(_:)-7sypu",
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor/isSameExclusiveExecutionContext(other:)",
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor/preconditionIsolated(_:file:line:)"
      ],
      "title": "Instance Methods"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/serialexecutor"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
