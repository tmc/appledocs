{
  "abstract": [
    {
      "text": "A type that can be hashed into a ",
      "type": "text"
    },
    {
      "code": "Hasher",
      "type": "codeVoice"
    },
    {
      "text": " to produce an integer hash value.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/Hashable"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:SH",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Hashable"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "Hashable"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "Hashable"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Hashable"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SQ",
              "text": "Equatable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "mentions",
      "mentions": [
        "doc://com.apple.Swift/documentation/Swift/adopting-common-protocols"
      ]
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can use any type that conforms to the ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " protocol in a set or as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a dictionary key. Many types in the standard library conform to ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Strings, integers, floating-point and Boolean values, and even sets are",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "hashable by default. Some other types, such as optionals, arrays and ranges",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "automatically become hashable when their type arguments implement the same.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Your own custom types can be hashable as well. When you define an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "enumeration without associated values, it gains ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " conformance",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "automatically, and you can add ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " conformance to your other custom",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "types by implementing the ",
              "type": "text"
            },
            {
              "code": "hash(into:)",
              "type": "codeVoice"
            },
            {
              "text": " method. For structs whose stored",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "properties are all ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": ", and for enum types that have all-",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "associated values, the compiler is able to provide an implementation of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "hash(into:)",
              "type": "codeVoice"
            },
            {
              "text": " automatically.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Hashing a value means feeding its essential components into a hash function,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "represented by the ",
              "type": "text"
            },
            {
              "code": "Hasher",
              "type": "codeVoice"
            },
            {
              "text": " type. Essential components are those that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "contribute to the typeâ€™s implementation of ",
              "type": "text"
            },
            {
              "code": "Equatable",
              "type": "codeVoice"
            },
            {
              "text": ". Two instances that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are equal must feed the same values to ",
              "type": "text"
            },
            {
              "code": "Hasher",
              "type": "codeVoice"
            },
            {
              "text": " in ",
              "type": "text"
            },
            {
              "code": "hash(into:)",
              "type": "codeVoice"
            },
            {
              "text": ", in the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "same order.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Conforming-to-the-Hashable-Protocol",
          "level": 1,
          "text": "Conforming to the Hashable Protocol",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To use your own custom type in a set or as the key type of a dictionary,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "add ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " conformance to your type. The ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " protocol inherits",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "from the ",
              "type": "text"
            },
            {
              "code": "Equatable",
              "type": "codeVoice"
            },
            {
              "text": " protocol, so you must also satisfy that protocolâ€™s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "requirements.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The compiler automatically synthesizes your custom typeâ€™s ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "requirements when you declare ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " conformance in the typeâ€™s original",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "declaration and your type meets these criteria:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "For a ",
                      "type": "text"
                    },
                    {
                      "code": "struct",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", all its stored properties must conform to ",
                      "type": "text"
                    },
                    {
                      "code": "Hashable",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "For an ",
                      "type": "text"
                    },
                    {
                      "code": "enum",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", all its associated values must conform to ",
                      "type": "text"
                    },
                    {
                      "code": "Hashable",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (An",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "enum",
                      "type": "codeVoice"
                    },
                    {
                      "text": " without associated values has ",
                      "type": "text"
                    },
                    {
                      "code": "Hashable",
                      "type": "codeVoice"
                    },
                    {
                      "text": " conformance even without",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the declaration.)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "To customize your typeâ€™s ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " conformance, to adopt ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " in a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type that doesnâ€™t meet the criteria listed above, or to extend an existing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type to conform to ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": ", implement the ",
              "type": "text"
            },
            {
              "code": "hash(into:)",
              "type": "codeVoice"
            },
            {
              "text": " method in your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "custom type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In your ",
              "type": "text"
            },
            {
              "code": "hash(into:)",
              "type": "codeVoice"
            },
            {
              "text": " implementation, call ",
              "type": "text"
            },
            {
              "code": "combine(_:)",
              "type": "codeVoice"
            },
            {
              "text": " on the provided",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Hasher",
              "type": "codeVoice"
            },
            {
              "text": " instance with the essential components of your type. To ensure",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that your type meets the semantic requirements of the ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Equatable",
              "type": "codeVoice"
            },
            {
              "text": " protocols, itâ€™s a good idea to also customize your typeâ€™s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Equatable",
              "type": "codeVoice"
            },
            {
              "text": " conformance to match.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "As an example, consider a ",
              "type": "text"
            },
            {
              "code": "GridPoint",
              "type": "codeVoice"
            },
            {
              "text": " type that describes a location in a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "grid of buttons. Hereâ€™s the initial declaration of the ",
              "type": "text"
            },
            {
              "code": "GridPoint",
              "type": "codeVoice"
            },
            {
              "text": " type:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "/// A point in an x-y coordinate system.",
            "struct GridPoint {",
            "    var x: Int",
            "    var y: Int",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Youâ€™d like to create a set of the grid points where a user has already",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "tapped. Because the ",
              "type": "text"
            },
            {
              "code": "GridPoint",
              "type": "codeVoice"
            },
            {
              "text": " type is not hashable yet, it canâ€™t be used",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in a set. To add ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " conformance, provide an ",
              "type": "text"
            },
            {
              "code": "==",
              "type": "codeVoice"
            },
            {
              "text": " operator function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and implement the ",
              "type": "text"
            },
            {
              "code": "hash(into:)",
              "type": "codeVoice"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "extension GridPoint: Hashable {",
            "    static func == (lhs: GridPoint, rhs: GridPoint) -> Bool {",
            "        return lhs.x == rhs.x && lhs.y == rhs.y",
            "    }",
            "",
            "    func hash(into hasher: inout Hasher) {",
            "        hasher.combine(x)",
            "        hasher.combine(y)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "hash(into:)",
              "type": "codeVoice"
            },
            {
              "text": " method in this example feeds the grid pointâ€™s ",
              "type": "text"
            },
            {
              "code": "x",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "y",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "properties into the provided hasher. These properties are the same ones",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "used to test for equality in the ",
              "type": "text"
            },
            {
              "code": "==",
              "type": "codeVoice"
            },
            {
              "text": " operator function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Now that ",
              "type": "text"
            },
            {
              "code": "GridPoint",
              "type": "codeVoice"
            },
            {
              "text": " conforms to the ",
              "type": "text"
            },
            {
              "code": "Hashable",
              "type": "codeVoice"
            },
            {
              "text": " protocol, you can create a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "set of previously tapped grid points.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var tappedPoints: Set = [GridPoint(x: 2, y: 3), GridPoint(x: 4, y: 1)]",
            "let nextTap = GridPoint(x: 0, y: 1)",
            "if tappedPoints.contains(nextTap) {",
            "    print(\"Already tapped at (\\(nextTap.x), \\(nextTap.y)).\")",
            "} else {",
            "    tappedPoints.insert(nextTap)",
            "    print(\"New tap detected at (\\(nextTap.x), \\(nextTap.y)).\")",
            "}",
            "// Prints \"New tap detected at (0, 1).\")"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Distributed/DistributedActor": {
      "abstract": [
        {
          "text": "Common protocol to which all distributed actors conform implicitly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DistributedActor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/DistributedActor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DistributedActor"
        }
      ],
      "role": "symbol",
      "title": "DistributedActor",
      "type": "topic",
      "url": "/documentation/distributed/distributedactor"
    },
    "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError/ErrorCode-swift.enum": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ErrorCode"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError/ErrorCode-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ErrorCode"
        }
      ],
      "role": "symbol",
      "title": "ExecuteDistributedTargetError.ErrorCode",
      "type": "topic",
      "url": "/documentation/distributed/executedistributedtargeterror/errorcode-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Distributed/LocalTestingActorID": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LocalTestingActorID"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/LocalTestingActorID",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LocalTestingActorID"
        }
      ],
      "role": "symbol",
      "title": "LocalTestingActorID",
      "type": "topic",
      "url": "/documentation/distributed/localtestingactorid"
    },
    "doc://com.apple.Swift/documentation/Distributed/RemoteCallTarget": {
      "abstract": [
        {
          "text": "Represents a â€˜targetâ€™ of a distributed call, such as a ",
          "type": "text"
        },
        {
          "code": "distributed func",
          "type": "codeVoice"
        },
        {
          "text": " or",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "distributed",
          "type": "codeVoice"
        },
        {
          "text": " computed property. Identification schemes may vary between",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "systems, and are subject to evolution.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RemoteCallTarget"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/RemoteCallTarget",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RemoteCallTarget"
        }
      ],
      "role": "symbol",
      "title": "RemoteCallTarget",
      "type": "topic",
      "url": "/documentation/distributed/remotecalltarget"
    },
    "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar": {
      "abstract": [
        {
          "text": "Provides storage for tracking and access to data changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservationRegistrar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObservationRegistrar"
        }
      ],
      "role": "symbol",
      "title": "ObservationRegistrar",
      "type": "topic",
      "url": "/documentation/observation/observationregistrar"
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyHashable": {
      "abstract": [
        {
          "text": "A type-erased hashable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyHashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyHashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyHashable"
        }
      ],
      "role": "symbol",
      "title": "AnyHashable",
      "type": "topic",
      "url": "/documentation/swift/anyhashable"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyKeyPath": {
      "abstract": [
        {
          "text": "A type-erased key path, from any root type to any resulting value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyKeyPath"
        }
      ],
      "role": "symbol",
      "title": "AnyKeyPath",
      "type": "topic",
      "url": "/documentation/swift/anykeypath"
    },
    "doc://com.apple.Swift/documentation/Swift/Array": {
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "role": "symbol",
      "title": "Array",
      "type": "topic",
      "url": "/documentation/swift/array"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice": {
      "abstract": [
        {
          "text": "A slice of an ",
          "type": "text"
        },
        {
          "code": "Array",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "ContiguousArray",
          "type": "codeVoice"
        },
        {
          "text": ", or ",
          "type": "text"
        },
        {
          "code": "ArraySlice",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "role": "symbol",
      "title": "ArraySlice",
      "type": "topic",
      "url": "/documentation/swift/arrayslice"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination": {
      "abstract": [
        {
          "text": "A type that indicates how the stream terminated.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Termination"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Termination"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Continuation.Termination",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/continuation/termination"
    },
    "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A mutable pointer addressing an Objective-C reference that doesnâ€™t own its",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "target.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AutoreleasingUnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AutoreleasingUnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "AutoreleasingUnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/autoreleasingunsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint": {
      "abstract": [
        {
          "text": "A radix-2 (binary) floating-point type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BinaryFloatingPoint"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BinaryFloatingPoint"
        }
      ],
      "role": "symbol",
      "title": "BinaryFloatingPoint",
      "type": "topic",
      "url": "/documentation/swift/binaryfloatingpoint"
    },
    "doc://com.apple.Swift/documentation/Swift/BinaryInteger": {
      "abstract": [
        {
          "text": "An integer type with a binary representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BinaryInteger"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BinaryInteger",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BinaryInteger"
        }
      ],
      "role": "symbol",
      "title": "BinaryInteger",
      "type": "topic",
      "url": "/documentation/swift/binaryinteger"
    },
    "doc://com.apple.Swift/documentation/Swift/Bool": {
      "abstract": [
        {
          "text": "A value type whose instances are either ",
          "type": "text"
        },
        {
          "code": "true",
          "type": "codeVoice"
        },
        {
          "text": " or ",
          "type": "text"
        },
        {
          "code": "false",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Bool",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/swift/bool"
    },
    "doc://com.apple.Swift/documentation/Swift/Character": {
      "abstract": [
        {
          "text": "A single extended grapheme cluster that approximates a user-perceived",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "character.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Character"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Character",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Character"
        }
      ],
      "role": "symbol",
      "title": "Character",
      "type": "topic",
      "url": "/documentation/swift/character"
    },
    "doc://com.apple.Swift/documentation/Swift/ClosedRange": {
      "abstract": [
        {
          "text": "An interval from a lower bound up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ClosedRange",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "role": "symbol",
      "title": "ClosedRange",
      "type": "topic",
      "url": "/documentation/swift/closedrange"
    },
    "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index": {
      "abstract": [
        {
          "text": "A type that represents a position in the collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "ClosedRange.Index",
      "type": "topic",
      "url": "/documentation/swift/closedrange/index"
    },
    "doc://com.apple.Swift/documentation/Swift/CodingUserInfoKey": {
      "abstract": [
        {
          "text": "A user-defined key for providing context during encoding and decoding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CodingUserInfoKey"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CodingUserInfoKey",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CodingUserInfoKey"
        }
      ],
      "role": "symbol",
      "title": "CodingUserInfoKey",
      "type": "topic",
      "url": "/documentation/swift/codinguserinfokey"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference": {
      "abstract": [
        {
          "text": "A collection of insertions and removals that describe the difference",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "between two ordered collection states.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollectionDifference"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollectionDifference"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change": {
      "abstract": [
        {
          "text": "A single change to a collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Change"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Change"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference.Change",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference/change"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index": {
      "abstract": [
        {
          "text": "The position of a collection difference.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference.Index",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference/index"
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray": {
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "role": "symbol",
      "title": "ContiguousArray",
      "type": "topic",
      "url": "/documentation/swift/contiguousarray"
    },
    "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant": {
      "abstract": [
        {
          "text": "A continuous point in time used for ",
          "type": "text"
        },
        {
          "code": "ContinuousClock",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "role": "symbol",
      "title": "ContinuousClock.Instant",
      "type": "topic",
      "url": "/documentation/swift/continuousclock/instant"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary": {
      "abstract": [
        {
          "text": "A collection whose elements are key-value pairs.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "role": "symbol",
      "title": "Dictionary",
      "type": "topic",
      "url": "/documentation/swift/dictionary"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Index": {
      "abstract": [
        {
          "text": "The position of a key-value pair in a dictionary.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Index",
      "type": "topic",
      "url": "/documentation/swift/dictionary/index"
    },
    "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice": {
      "abstract": [
        {
          "text": "A collection wrapper that provides access to the elements of a collection,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "indexed by a set of indices.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DiscontiguousSlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DiscontiguousSlice"
        }
      ],
      "role": "symbol",
      "title": "DiscontiguousSlice",
      "type": "topic",
      "url": "/documentation/swift/discontiguousslice"
    },
    "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index": {
      "abstract": [
        {
          "text": "A position in a ",
          "type": "text"
        },
        {
          "code": "DiscontiguousSlice",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "DiscontiguousSlice.Index",
      "type": "topic",
      "url": "/documentation/swift/discontiguousslice/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Double": {
      "abstract": [
        {
          "text": "A double-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "role": "symbol",
      "title": "Double",
      "type": "topic",
      "url": "/documentation/swift/double"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration": {
      "abstract": [
        {
          "text": "A representation of high precision time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Duration"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Duration"
        }
      ],
      "role": "symbol",
      "title": "Duration",
      "type": "topic",
      "url": "/documentation/swift/duration"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle": {
      "abstract": [
        {
          "text": "A format style that shows durations in a compact, localized format with separators.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TimeFormatStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TimeFormatStyle"
        }
      ],
      "role": "symbol",
      "title": "Duration.TimeFormatStyle",
      "type": "topic",
      "url": "/documentation/swift/duration/timeformatstyle"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct": {
      "abstract": [
        {
          "text": "A format style that formats durations as attributed strings.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "role": "symbol",
      "title": "Duration.TimeFormatStyle.Attributed",
      "type": "topic",
      "url": "/documentation/swift/duration/timeformatstyle/attributed-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Pattern-swift.struct": {
      "abstract": [
        {
          "text": "The units â€” including hours, minutes, or seconds â€” and the configuration of those units, used to format a duration.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Pattern"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Pattern-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Pattern"
        }
      ],
      "role": "symbol",
      "title": "Duration.TimeFormatStyle.Pattern",
      "type": "topic",
      "url": "/documentation/swift/duration/timeformatstyle/pattern-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle": {
      "abstract": [
        {
          "text": "A format style that shows durations with localized labeled components",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnitsFormatStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnitsFormatStyle"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct": {
      "abstract": [
        {
          "text": "A format style that formats durations as attributed strings.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.Attributed",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/attributed-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/FractionalPartDisplayStrategy": {
      "abstract": [
        {
          "text": "A strategy that determines how to format the fractional part of a duration if the allowed units canâ€™t represent it exactly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FractionalPartDisplayStrategy"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/FractionalPartDisplayStrategy",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FractionalPartDisplayStrategy"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.FractionalPartDisplayStrategy",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/fractionalpartdisplaystrategy"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Unit": {
      "abstract": [
        {
          "text": "A unit to use in formatting a duration.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Unit"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Unit",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Unit"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.Unit",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/unit"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/UnitWidth-swift.struct": {
      "abstract": [
        {
          "text": "The width of a unit to use in formatting a duration.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnitWidth"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/UnitWidth-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnitWidth"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.UnitWidth",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/unitwidth-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/ZeroValueUnitsDisplayStrategy": {
      "abstract": [
        {
          "text": "A strategy that determines how to format a unit whose value is zero.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ZeroValueUnitsDisplayStrategy"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/ZeroValueUnitsDisplayStrategy",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ZeroValueUnitsDisplayStrategy"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/zerovalueunitsdisplaystrategy"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/swift/equatable"
    },
    "doc://com.apple.Swift/documentation/Swift/FixedWidthInteger": {
      "abstract": [
        {
          "text": "An integer type that uses a fixed size for every instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FixedWidthInteger"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FixedWidthInteger",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FixedWidthInteger"
        }
      ],
      "role": "symbol",
      "title": "FixedWidthInteger",
      "type": "topic",
      "url": "/documentation/swift/fixedwidthinteger"
    },
    "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index": {
      "abstract": [
        {
          "text": "A position in a FlattenCollection",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "FlattenSequence.Index",
      "type": "topic",
      "url": "/documentation/swift/flattensequence/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Float": {
      "abstract": [
        {
          "text": "A single-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "role": "symbol",
      "title": "Float",
      "type": "topic",
      "url": "/documentation/swift/float"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16": {
      "abstract": [
        {
          "text": "A half-precision (16b), floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "role": "symbol",
      "title": "Float16",
      "type": "topic",
      "url": "/documentation/swift/float16"
    },
    "doc://com.apple.Swift/documentation/Swift/Float80": {
      "abstract": [
        {
          "text": "An extended-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float80",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "role": "symbol",
      "title": "Float80",
      "type": "topic",
      "url": "/documentation/swift/float80"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint": {
      "abstract": [
        {
          "text": "A floating-point numeric type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPoint"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPoint"
        }
      ],
      "role": "symbol",
      "title": "FloatingPoint",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification": {
      "abstract": [
        {
          "text": "The IEEE 754 floating-point classes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointClassification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointClassification"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointClassification",
      "type": "topic",
      "url": "/documentation/swift/floatingpointclassification"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule": {
      "abstract": [
        {
          "text": "A rule for rounding a floating-point number.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointRoundingRule"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointRoundingRule"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointRoundingRule",
      "type": "topic",
      "url": "/documentation/swift/floatingpointroundingrule"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointSign": {
      "abstract": [
        {
          "text": "The sign of a floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointSign"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointSign",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointSign"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointSign",
      "type": "topic",
      "url": "/documentation/swift/floatingpointsign"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a ",
          "type": "text"
        },
        {
          "code": "Hasher",
          "type": "codeVoice"
        },
        {
          "text": " to produce an integer hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/swift/hashable"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable/hash(into:)": {
      "abstract": [
        {
          "text": "Hashes the essential components of this value by feeding them into the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given hasher.",
          "type": "text"
        }
      ],
      "defaultImplementations": 3,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "into"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6HasherV",
          "text": "Hasher"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable/hash(into:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "hash(into:)",
      "type": "topic",
      "url": "/documentation/swift/hashable/hash(into:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable/hashValue": {
      "abstract": [
        {
          "text": "The hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hashValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable/hashValue",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "hashValue",
      "type": "topic",
      "url": "/documentation/swift/hashable/hashvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/Hasher": {
      "abstract": [
        {
          "text": "The universal hash function used by ",
          "type": "text"
        },
        {
          "code": "Set",
          "type": "codeVoice"
        },
        {
          "text": " and ",
          "type": "text"
        },
        {
          "code": "Dictionary",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hasher"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hasher",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hasher"
        }
      ],
      "role": "symbol",
      "title": "Hasher",
      "type": "topic",
      "url": "/documentation/swift/hasher"
    },
    "doc://com.apple.Swift/documentation/Swift/InstantProtocol": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "InstantProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/InstantProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "InstantProtocol"
        }
      ],
      "role": "symbol",
      "title": "InstantProtocol",
      "type": "topic",
      "url": "/documentation/swift/instantprotocol"
    },
    "doc://com.apple.Swift/documentation/Swift/Int": {
      "abstract": [
        {
          "text": "A signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "role": "symbol",
      "title": "Int",
      "type": "topic",
      "url": "/documentation/swift/int"
    },
    "doc://com.apple.Swift/documentation/Swift/Int128": {
      "abstract": [
        {
          "text": "A 128-bit signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int128"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int128",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int128"
        }
      ],
      "role": "symbol",
      "title": "Int128",
      "type": "topic",
      "url": "/documentation/swift/int128"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16": {
      "abstract": [
        {
          "text": "A 16-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int16"
        }
      ],
      "role": "symbol",
      "title": "Int16",
      "type": "topic",
      "url": "/documentation/swift/int16"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32": {
      "abstract": [
        {
          "text": "A 32-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int32"
        }
      ],
      "role": "symbol",
      "title": "Int32",
      "type": "topic",
      "url": "/documentation/swift/int32"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64": {
      "abstract": [
        {
          "text": "A 64-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int64"
        }
      ],
      "role": "symbol",
      "title": "Int64",
      "type": "topic",
      "url": "/documentation/swift/int64"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8": {
      "abstract": [
        {
          "text": "An 8-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int8"
        }
      ],
      "role": "symbol",
      "title": "Int8",
      "type": "topic",
      "url": "/documentation/swift/int8"
    },
    "doc://com.apple.Swift/documentation/Swift/KeyPath": {
      "abstract": [
        {
          "text": "A key path from a specific root type to a specific resulting value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "KeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/KeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "KeyPath"
        }
      ],
      "role": "symbol",
      "title": "KeyPath",
      "type": "topic",
      "url": "/documentation/swift/keypath"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index": {
      "abstract": [
        {
          "text": "A position in a ",
          "type": "text"
        },
        {
          "code": "LazyPrefixWhileCollection",
          "type": "codeVoice"
        },
        {
          "text": " or",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "LazyPrefixWhileBidirectionalCollection",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "LazyPrefixWhileSequence.Index",
      "type": "topic",
      "url": "/documentation/swift/lazyprefixwhilesequence/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum": {
      "abstract": [
        {
          "text": "A suggestion of how a mirrorâ€™s subject is to be interpreted.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DisplayStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DisplayStyle"
        }
      ],
      "role": "symbol",
      "title": "Mirror.DisplayStyle",
      "type": "topic",
      "url": "/documentation/swift/mirror/displaystyle-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Swift/Never": {
      "abstract": [
        {
          "text": "A type that has no values and canâ€™t be constructed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Never"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Never",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Never"
        }
      ],
      "role": "symbol",
      "title": "Never",
      "type": "topic",
      "url": "/documentation/swift/never"
    },
    "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier": {
      "abstract": [
        {
          "text": "A unique identifier for a class instance or metatype.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "role": "symbol",
      "title": "ObjectIdentifier",
      "type": "topic",
      "url": "/documentation/swift/objectidentifier"
    },
    "doc://com.apple.Swift/documentation/Swift/OpaquePointer": {
      "abstract": [
        {
          "text": "A wrapper around an opaque C pointer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "OpaquePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/OpaquePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "OpaquePointer"
        }
      ],
      "role": "symbol",
      "title": "OpaquePointer",
      "type": "topic",
      "url": "/documentation/swift/opaquepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional": {
      "abstract": [
        {
          "text": "A type that represents either a wrapped value or the absence of a value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "role": "symbol",
      "title": "Optional",
      "type": "topic",
      "url": "/documentation/swift/optional"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialKeyPath": {
      "abstract": [
        {
          "text": "A partially type-erased key path, from a concrete root type to any",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "resulting value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialKeyPath"
        }
      ],
      "role": "symbol",
      "title": "PartialKeyPath",
      "type": "topic",
      "url": "/documentation/swift/partialkeypath"
    },
    "doc://com.apple.Swift/documentation/Swift/Range": {
      "abstract": [
        {
          "text": "A half-open interval from a lower bound up to, but not including, an upper",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "role": "symbol",
      "title": "Range",
      "type": "topic",
      "url": "/documentation/swift/range"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeSet": {
      "abstract": [
        {
          "text": "A set of values of any comparable type, represented by ranges.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeSet"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeSet",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RangeSet"
        }
      ],
      "role": "symbol",
      "title": "RangeSet",
      "type": "topic",
      "url": "/documentation/swift/rangeset"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct": {
      "abstract": [
        {
          "text": "A collection of the ranges that make up a range set.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Ranges"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Ranges"
        }
      ],
      "role": "symbol",
      "title": "RangeSet.Ranges",
      "type": "topic",
      "url": "/documentation/swift/rangeset/ranges-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/ReferenceWritableKeyPath": {
      "abstract": [
        {
          "text": "A key path that supports reading from and writing to the resulting value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "with reference semantics.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ReferenceWritableKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReferenceWritableKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ReferenceWritableKeyPath"
        }
      ],
      "role": "symbol",
      "title": "ReferenceWritableKeyPath",
      "type": "topic",
      "url": "/documentation/swift/referencewritablekeypath"
    },
    "doc://com.apple.Swift/documentation/Swift/RegexRepetitionBehavior": {
      "abstract": [
        {
          "text": "Specifies how much to attempt to match when using a quantifier.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RegexRepetitionBehavior"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RegexRepetitionBehavior",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RegexRepetitionBehavior"
        }
      ],
      "role": "symbol",
      "title": "RegexRepetitionBehavior",
      "type": "topic",
      "url": "/documentation/swift/regexrepetitionbehavior"
    },
    "doc://com.apple.Swift/documentation/Swift/RegexSemanticLevel": {
      "abstract": [
        {
          "text": "A semantic level to use during regex matching.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RegexSemanticLevel"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RegexSemanticLevel",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RegexSemanticLevel"
        }
      ],
      "role": "symbol",
      "title": "RegexSemanticLevel",
      "type": "topic",
      "url": "/documentation/swift/regexsemanticlevel"
    },
    "doc://com.apple.Swift/documentation/Swift/RegexWordBoundaryKind": {
      "abstract": [
        {
          "text": "A word boundary algorithm to use during regex matching.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RegexWordBoundaryKind"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RegexWordBoundaryKind",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RegexWordBoundaryKind"
        }
      ],
      "role": "symbol",
      "title": "RegexWordBoundaryKind",
      "type": "topic",
      "url": "/documentation/swift/regexwordboundarykind"
    },
    "doc://com.apple.Swift/documentation/Swift/Result": {
      "abstract": [
        {
          "text": "A value that represents either a success or a failure, including an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "associated value in each case.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "role": "symbol",
      "title": "Result",
      "type": "topic",
      "url": "/documentation/swift/result"
    },
    "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index": {
      "abstract": [
        {
          "text": "An index that traverses the same positions as an underlying index,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "with inverted traversal direction.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "ReversedCollection.Index",
      "type": "topic",
      "url": "/documentation/swift/reversedcollection/index"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD": {
      "abstract": [
        {
          "text": "A SIMD vector of a fixed number of elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD"
        }
      ],
      "role": "symbol",
      "title": "SIMD",
      "type": "topic",
      "url": "/documentation/swift/simd"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD16": {
      "abstract": [
        {
          "text": "A vector of 16 scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "role": "symbol",
      "title": "SIMD16",
      "type": "topic",
      "url": "/documentation/swift/simd16"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD2": {
      "abstract": [
        {
          "text": "A vector of two scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD2",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "role": "symbol",
      "title": "SIMD2",
      "type": "topic",
      "url": "/documentation/swift/simd2"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD3": {
      "abstract": [
        {
          "text": "A vector of three scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD3",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "role": "symbol",
      "title": "SIMD3",
      "type": "topic",
      "url": "/documentation/swift/simd3"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD32": {
      "abstract": [
        {
          "text": "A vector of 32 scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "role": "symbol",
      "title": "SIMD32",
      "type": "topic",
      "url": "/documentation/swift/simd32"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD4": {
      "abstract": [
        {
          "text": "A vector of four scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD4",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "role": "symbol",
      "title": "SIMD4",
      "type": "topic",
      "url": "/documentation/swift/simd4"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD64": {
      "abstract": [
        {
          "text": "A vector of 64 scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "role": "symbol",
      "title": "SIMD64",
      "type": "topic",
      "url": "/documentation/swift/simd64"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD8": {
      "abstract": [
        {
          "text": "A vector of eight scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "role": "symbol",
      "title": "SIMD8",
      "type": "topic",
      "url": "/documentation/swift/simd8"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMDMask": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMDMask"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMDMask",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMDMask"
        }
      ],
      "role": "symbol",
      "title": "SIMDMask",
      "type": "topic",
      "url": "/documentation/swift/simdmask"
    },
    "doc://com.apple.Swift/documentation/Swift/Set": {
      "abstract": [
        {
          "text": "An unordered collection of unique elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "role": "symbol",
      "title": "Set",
      "type": "topic",
      "url": "/documentation/swift/set"
    },
    "doc://com.apple.Swift/documentation/Swift/Set/Index": {
      "abstract": [
        {
          "text": "The position of an element in a set.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "Set.Index",
      "type": "topic",
      "url": "/documentation/swift/set/index"
    },
    "doc://com.apple.Swift/documentation/Swift/SignedInteger": {
      "abstract": [
        {
          "text": "An integer type that can represent both positive and negative values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SignedInteger"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SignedInteger",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SignedInteger"
        }
      ],
      "role": "symbol",
      "title": "SignedInteger",
      "type": "topic",
      "url": "/documentation/swift/signedinteger"
    },
    "doc://com.apple.Swift/documentation/Swift/String": {
      "abstract": [
        {
          "text": "A Unicode string value that is a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "role": "symbol",
      "title": "String",
      "type": "topic",
      "url": "/documentation/swift/string"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Comparator": {
      "abstract": [
        {
          "text": "A ",
          "type": "text"
        },
        {
          "code": "String",
          "type": "codeVoice"
        },
        {
          "text": " comparison performed using the given comparison options",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and locale.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Comparator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Comparator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Comparator"
        }
      ],
      "role": "symbol",
      "title": "String.Comparator",
      "type": "topic",
      "url": "/documentation/swift/string/comparator"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Encoding": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Encoding"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Encoding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Encoding"
        }
      ],
      "role": "symbol",
      "title": "String.Encoding",
      "type": "topic",
      "url": "/documentation/swift/string/encoding"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Index": {
      "abstract": [
        {
          "text": "A position of a character or code unit in a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "String.Index",
      "type": "topic",
      "url": "/documentation/swift/string/index"
    },
    "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/CapitalizationType-swift.enum": {
      "abstract": [
        {
          "text": "Describes the capitalization modes to apply to text.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CapitalizationType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/CapitalizationType-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CapitalizationType"
        }
      ],
      "role": "symbol",
      "title": "String.IntentInputOptions.CapitalizationType",
      "type": "topic",
      "url": "/documentation/swift/string/intentinputoptions/capitalizationtype-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/KeyboardType-swift.enum": {
      "abstract": [
        {
          "text": "Describes the types of keyboard to use for text entry.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "KeyboardType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/KeyboardType-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "KeyboardType"
        }
      ],
      "role": "symbol",
      "title": "String.IntentInputOptions.KeyboardType",
      "type": "topic",
      "url": "/documentation/swift/string/intentinputoptions/keyboardtype-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue/Placeholder": {
      "abstract": [
        {
          "text": "An enumeration of types that can appear as a placeholder in a string interpolation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Placeholder"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue/Placeholder",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Placeholder"
        }
      ],
      "role": "symbol",
      "title": "String.LocalizationValue.Placeholder",
      "type": "topic",
      "url": "/documentation/swift/string/localizationvalue/placeholder"
    },
    "doc://com.apple.Swift/documentation/Swift/String/StandardComparator": {
      "abstract": [
        {
          "text": "Compares ",
          "type": "text"
        },
        {
          "code": "String",
          "type": "codeVoice"
        },
        {
          "text": "s using one of a fixed set of standard comparison",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "algorithms.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StandardComparator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/StandardComparator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StandardComparator"
        }
      ],
      "role": "symbol",
      "title": "String.StandardComparator",
      "type": "topic",
      "url": "/documentation/swift/string/standardcomparator"
    },
    "doc://com.apple.Swift/documentation/Swift/StringProtocol": {
      "abstract": [
        {
          "text": "A type that can represent a string as a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StringProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StringProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StringProtocol"
        }
      ],
      "role": "symbol",
      "title": "StringProtocol",
      "type": "topic",
      "url": "/documentation/swift/stringprotocol"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring": {
      "abstract": [
        {
          "text": "A slice of a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "role": "symbol",
      "title": "Substring",
      "type": "topic",
      "url": "/documentation/swift/substring"
    },
    "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "role": "symbol",
      "title": "SuspendingClock.Instant",
      "type": "topic",
      "url": "/documentation/swift/suspendingclock/instant"
    },
    "doc://com.apple.Swift/documentation/Swift/Task": {
      "abstract": [
        {
          "text": "A unit of asynchronous work.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Task"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Task",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Task"
        }
      ],
      "role": "symbol",
      "title": "Task",
      "type": "topic",
      "url": "/documentation/swift/task"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt": {
      "abstract": [
        {
          "text": "An unsigned integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt"
        }
      ],
      "role": "symbol",
      "title": "UInt",
      "type": "topic",
      "url": "/documentation/swift/uint"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt128": {
      "abstract": [
        {
          "text": "A 128-bit unsigned integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt128"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt128",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt128"
        }
      ],
      "role": "symbol",
      "title": "UInt128",
      "type": "topic",
      "url": "/documentation/swift/uint128"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16": {
      "abstract": [
        {
          "text": "A 16-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt16"
        }
      ],
      "role": "symbol",
      "title": "UInt16",
      "type": "topic",
      "url": "/documentation/swift/uint16"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32": {
      "abstract": [
        {
          "text": "A 32-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt32"
        }
      ],
      "role": "symbol",
      "title": "UInt32",
      "type": "topic",
      "url": "/documentation/swift/uint32"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64": {
      "abstract": [
        {
          "text": "A 64-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt64"
        }
      ],
      "role": "symbol",
      "title": "UInt64",
      "type": "topic",
      "url": "/documentation/swift/uint64"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8": {
      "abstract": [
        {
          "text": "An 8-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt8"
        }
      ],
      "role": "symbol",
      "title": "UInt8",
      "type": "topic",
      "url": "/documentation/swift/uint8"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/CanonicalCombiningClass": {
      "abstract": [
        {
          "text": "The classification of a scalar used in the Canonical Ordering Algorithm",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "defined by the Unicode Standard.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CanonicalCombiningClass"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/CanonicalCombiningClass",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CanonicalCombiningClass"
        }
      ],
      "role": "symbol",
      "title": "Unicode.CanonicalCombiningClass",
      "type": "topic",
      "url": "/documentation/swift/unicode/canonicalcombiningclass"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory": {
      "abstract": [
        {
          "text": "The most general classification of a Unicode scalar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "GeneralCategory"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "GeneralCategory"
        }
      ],
      "role": "symbol",
      "title": "Unicode.GeneralCategory",
      "type": "topic",
      "url": "/documentation/swift/unicode/generalcategory"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType": {
      "abstract": [
        {
          "text": "The numeric type of a scalar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "NumericType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "NumericType"
        }
      ],
      "role": "symbol",
      "title": "Unicode.NumericType",
      "type": "topic",
      "url": "/documentation/swift/unicode/numerictype"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar": {
      "abstract": [
        {
          "text": "A Unicode scalar value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Scalar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Scalar"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF32"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF32",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf32"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeCurrentTask": {
      "abstract": [
        {
          "text": "An unsafe reference to the current task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeCurrentTask"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeCurrentTask",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeCurrentTask"
        }
      ],
      "role": "symbol",
      "title": "UnsafeCurrentTask",
      "type": "topic",
      "url": "/documentation/swift/unsafecurrenttask"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing and manipulating data of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "specific type.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer": {
      "abstract": [
        {
          "text": "A raw pointer for accessing and manipulating untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableRawPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablerawpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing data of a specific type.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer": {
      "abstract": [
        {
          "text": "A raw pointer for accessing untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeRawPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeRawPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeRawPointer",
      "type": "topic",
      "url": "/documentation/swift/unsaferawpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsignedInteger": {
      "abstract": [
        {
          "text": "An integer type that can represent only nonnegative values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsignedInteger"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsignedInteger",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsignedInteger"
        }
      ],
      "role": "symbol",
      "title": "UnsignedInteger",
      "type": "topic",
      "url": "/documentation/swift/unsignedinteger"
    },
    "doc://com.apple.Swift/documentation/Swift/WritableKeyPath": {
      "abstract": [
        {
          "text": "A key path that supports reading from and writing to the resulting value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "WritableKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/WritableKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "WritableKeyPath"
        }
      ],
      "role": "symbol",
      "title": "WritableKeyPath",
      "type": "topic",
      "url": "/documentation/swift/writablekeypath"
    },
    "doc://com.apple.Swift/documentation/Swift/adopting-common-protocols": {
      "abstract": [
        {
          "text": "Make your custom types easier to use by ensuring that they conform to Swift protocols.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/adopting-common-protocols",
      "kind": "article",
      "role": "article",
      "title": "Adopting Common Protocols",
      "type": "topic",
      "url": "/documentation/swift/adopting-common-protocols"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic load operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicLoadOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicLoadOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicLoadOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicloadordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic store operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicStoreOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicStoreOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicStoreOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicstoreordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic read-modify-write",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicUpdateOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicUpdateOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicUpdateOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicupdateordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/WordPair": {
      "abstract": [
        {
          "text": "A pair of two word sized ",
          "type": "text"
        },
        {
          "code": "UInt",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/WordPair",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "role": "symbol",
      "title": "WordPair",
      "type": "topic",
      "url": "/documentation/synchronization/wordpair"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Equatable"
      ],
      "kind": "relationships",
      "title": "Inherits From",
      "type": "inheritsFrom"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint",
        "doc://com.apple.Swift/documentation/Swift/BinaryInteger",
        "doc://com.apple.Swift/documentation/Distributed/DistributedActor",
        "doc://com.apple.Swift/documentation/Swift/FixedWidthInteger",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint",
        "doc://com.apple.Swift/documentation/Swift/InstantProtocol",
        "doc://com.apple.Swift/documentation/Swift/SIMD",
        "doc://com.apple.Swift/documentation/Swift/SignedInteger",
        "doc://com.apple.Swift/documentation/Swift/StringProtocol",
        "doc://com.apple.Swift/documentation/Swift/UnsignedInteger"
      ],
      "kind": "relationships",
      "title": "Inherited By",
      "type": "inheritedBy"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AnyHashable",
        "doc://com.apple.Swift/documentation/Swift/AnyKeyPath",
        "doc://com.apple.Swift/documentation/Swift/Array",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering",
        "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer",
        "doc://com.apple.Swift/documentation/Swift/Bool",
        "doc://com.apple.Swift/documentation/Swift/Character",
        "doc://com.apple.Swift/documentation/Swift/ClosedRange",
        "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index",
        "doc://com.apple.Swift/documentation/Swift/CodingUserInfoKey",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index",
        "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
        "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant",
        "doc://com.apple.Swift/documentation/Swift/Dictionary",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Index",
        "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice",
        "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index",
        "doc://com.apple.Swift/documentation/Swift/Double",
        "doc://com.apple.Swift/documentation/Swift/Duration",
        "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle",
        "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Pattern-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/FractionalPartDisplayStrategy",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Unit",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/UnitWidth-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/ZeroValueUnitsDisplayStrategy",
        "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError/ErrorCode-swift.enum",
        "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index",
        "doc://com.apple.Swift/documentation/Swift/Float",
        "doc://com.apple.Swift/documentation/Swift/Float16",
        "doc://com.apple.Swift/documentation/Swift/Float80",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointSign",
        "doc://com.apple.Swift/documentation/Swift/Int",
        "doc://com.apple.Swift/documentation/Swift/Int128",
        "doc://com.apple.Swift/documentation/Swift/Int16",
        "doc://com.apple.Swift/documentation/Swift/Int32",
        "doc://com.apple.Swift/documentation/Swift/Int64",
        "doc://com.apple.Swift/documentation/Swift/Int8",
        "doc://com.apple.Swift/documentation/Swift/KeyPath",
        "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index",
        "doc://com.apple.Swift/documentation/Distributed/LocalTestingActorID",
        "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum",
        "doc://com.apple.Swift/documentation/Swift/Never",
        "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
        "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar",
        "doc://com.apple.Swift/documentation/Swift/OpaquePointer",
        "doc://com.apple.Swift/documentation/Swift/Optional",
        "doc://com.apple.Swift/documentation/Swift/PartialKeyPath",
        "doc://com.apple.Swift/documentation/Swift/Range",
        "doc://com.apple.Swift/documentation/Swift/RangeSet",
        "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/ReferenceWritableKeyPath",
        "doc://com.apple.Swift/documentation/Swift/RegexRepetitionBehavior",
        "doc://com.apple.Swift/documentation/Swift/RegexSemanticLevel",
        "doc://com.apple.Swift/documentation/Swift/RegexWordBoundaryKind",
        "doc://com.apple.Swift/documentation/Distributed/RemoteCallTarget",
        "doc://com.apple.Swift/documentation/Swift/Result",
        "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index",
        "doc://com.apple.Swift/documentation/Swift/SIMD16",
        "doc://com.apple.Swift/documentation/Swift/SIMD2",
        "doc://com.apple.Swift/documentation/Swift/SIMD3",
        "doc://com.apple.Swift/documentation/Swift/SIMD32",
        "doc://com.apple.Swift/documentation/Swift/SIMD4",
        "doc://com.apple.Swift/documentation/Swift/SIMD64",
        "doc://com.apple.Swift/documentation/Swift/SIMD8",
        "doc://com.apple.Swift/documentation/Swift/SIMDMask",
        "doc://com.apple.Swift/documentation/Swift/Set",
        "doc://com.apple.Swift/documentation/Swift/Set/Index",
        "doc://com.apple.Swift/documentation/Swift/String",
        "doc://com.apple.Swift/documentation/Swift/String/Comparator",
        "doc://com.apple.Swift/documentation/Swift/String/Encoding",
        "doc://com.apple.Swift/documentation/Swift/String/Index",
        "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/CapitalizationType-swift.enum",
        "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/KeyboardType-swift.enum",
        "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue/Placeholder",
        "doc://com.apple.Swift/documentation/Swift/String/StandardComparator",
        "doc://com.apple.Swift/documentation/Swift/Substring",
        "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant",
        "doc://com.apple.Swift/documentation/Swift/Task",
        "doc://com.apple.Swift/documentation/Swift/UInt",
        "doc://com.apple.Swift/documentation/Swift/UInt128",
        "doc://com.apple.Swift/documentation/Swift/UInt16",
        "doc://com.apple.Swift/documentation/Swift/UInt32",
        "doc://com.apple.Swift/documentation/Swift/UInt64",
        "doc://com.apple.Swift/documentation/Swift/UInt8",
        "doc://com.apple.Swift/documentation/Swift/Unicode/CanonicalCombiningClass",
        "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory",
        "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32",
        "doc://com.apple.Swift/documentation/Swift/UnsafeCurrentTask",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer",
        "doc://com.apple.Swift/documentation/Synchronization/WordPair",
        "doc://com.apple.Swift/documentation/Swift/WritableKeyPath"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Sets-and-Dictionaries",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Hasher"
      ],
      "title": "Sets and Dictionaries"
    }
  ],
  "topicSections": [
    {
      "anchor": "Providing-a-Hash-Value",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Hashable/hash(into:)"
      ],
      "title": "Providing a Hash Value"
    },
    {
      "anchor": "Deprecated",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Hashable/hashValue"
      ],
      "title": "Deprecated"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/hashable"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
