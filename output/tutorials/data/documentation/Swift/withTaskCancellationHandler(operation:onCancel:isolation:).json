{
  "abstract": [
    {
      "text": "Execute an operation with a cancellation handler that’s immediately",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "invoked if the current task is canceled.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/withTaskCancellationHandler(operation:onCancel:isolation:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:12_Concurrency27withTaskCancellationHandler9operation8onCancel9isolationxxyYaKXE_yyYbXEScA_pSgYitYaKlF",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "withTaskCancellationHandler"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "genericParameter",
        "text": "T"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "externalParam",
        "text": "operation"
      },
      {
        "kind": "text",
        "text": ": () "
      },
      {
        "kind": "keyword",
        "text": "async"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "keyword",
        "text": "throws"
      },
      {
        "kind": "text",
        "text": " -> "
      },
      {
        "kind": "typeIdentifier",
        "text": "T"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "onCancel"
      },
      {
        "kind": "text",
        "text": ": () -> "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:s4Voida",
        "text": "Void"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "isolation"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "keyword",
        "text": "isolated"
      },
      {
        "kind": "text",
        "text": " (any "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:ScA",
        "text": "Actor"
      },
      {
        "kind": "text",
        "text": ")?) "
      },
      {
        "kind": "keyword",
        "text": "async"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "keyword",
        "text": "rethrows"
      },
      {
        "kind": "text",
        "text": " -> "
      },
      {
        "kind": "typeIdentifier",
        "text": "T"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.15",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "6.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Function",
    "symbolKind": "func",
    "title": "withTaskCancellationHandler(operation:onCancel:isolation:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "text",
              "text": "@backDeployed(before: macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0)\n"
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "withTaskCancellationHandler"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "T"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "operation"
            },
            {
              "kind": "text",
              "text": ": () "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "throws"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "kind": "typeIdentifier",
              "text": "T"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "onCancel"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "handler"
            },
            {
              "kind": "text",
              "text": ": () -> "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Void",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s4Voida",
              "text": "Void"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "isolation"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "keyword",
              "text": "isolated"
            },
            {
              "kind": "text",
              "text": " (any "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Actor",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ScA",
              "text": "Actor"
            },
            {
              "kind": "text",
              "text": ")? = #isolation) "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "rethrows"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "kind": "typeIdentifier",
              "text": "T"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "This differs from the operation cooperatively checking for cancellation",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and reacting to it in that the cancellation handler is ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "always",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "immediately",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " invoked when the task is canceled. For example, even if the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "operation is running code that never checks for cancellation, a cancellation",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "handler still runs and provides a chance to run some cleanup code:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "await withTaskCancellationHandler {",
            "  var sum = 0",
            "  while condition {",
            "    sum += 1",
            "  }",
            "  return sum",
            "} onCancel: {",
            "  // This onCancel closure might execute concurrently with the operation.",
            "  condition.cancel()",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Execution-order-and-semantics",
          "level": 3,
          "text": "Execution order and semantics",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "operation",
              "type": "codeVoice"
            },
            {
              "text": " closure is always invoked, even when the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "withTaskCancellationHandler(operation:onCancel:)",
              "type": "codeVoice"
            },
            {
              "text": " method is called from a task",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that was already cancelled.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "When ",
              "type": "text"
            },
            {
              "code": "withTaskCancellationHandler(operation:onCancel:)",
              "type": "codeVoice"
            },
            {
              "text": " is used in a task that has already been",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "cancelled, the cancellation handler will be executed",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "immediately before the ",
              "type": "text"
            },
            {
              "code": "operation",
              "type": "codeVoice"
            },
            {
              "text": " closure gets to execute.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This allows the cancellation handler to set some external “cancelled” flag",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that the operation may be ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "atomically",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " checking for in order to avoid",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "performing any actual work once the operation gets to run.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "operation",
              "type": "codeVoice"
            },
            {
              "text": " closure executes on the calling execution context, and doesn’t",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "suspend or change execution context unless code contained within the closure",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "does so. In other words, the potential suspension point of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "withTaskCancellationHandler(operation:onCancel:)",
              "type": "codeVoice"
            },
            {
              "text": " never suspends by itself before",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "executing the operation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If cancellation occurs while the operation is running, the cancellation",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "handler executes ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "concurrently",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " with the operation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Cancellation-handlers-and-locks",
          "level": 3,
          "text": "Cancellation handlers and locks",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Cancellation handlers which acquire locks must take care to avoid deadlock.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The cancellation handler may be invoked while holding internal locks",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "associated with the task or other tasks.  Other operations on the task, such",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as resuming a continuation, may acquire these same internal locks.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Therefore, if a cancellation handler must acquire a lock, other code should",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "not cancel tasks or resume continuations while holding that lock.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/Actor": {
      "abstract": [
        {
          "text": "Common protocol to which all actors conform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Actor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Actor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Actor"
        }
      ],
      "role": "symbol",
      "title": "Actor",
      "type": "topic",
      "url": "/documentation/swift/actor"
    },
    "doc://com.apple.Swift/documentation/Swift/Void": {
      "abstract": [
        {
          "text": "The return type of functions that don’t explicitly specify a return type,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "that is, an empty tuple ",
          "type": "text"
        },
        {
          "code": "()",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Void"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Void",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Void"
        }
      ],
      "role": "symbol",
      "title": "Void",
      "type": "topic",
      "url": "/documentation/swift/void"
    },
    "doc://com.apple.Swift/documentation/Swift/withTaskCancellationHandler(operation:onCancel:isolation:)": {
      "abstract": [
        {
          "text": "Execute an operation with a cancellation handler that’s immediately",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "invoked if the current task is canceled.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withTaskCancellationHandler"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "operation"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "onCancel"
        },
        {
          "kind": "text",
          "text": ": () -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?) "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/withTaskCancellationHandler(operation:onCancel:isolation:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withTaskCancellationHandler(operation:onCancel:isolation:)",
      "type": "topic",
      "url": "/documentation/swift/withtaskcancellationhandler(operation:oncancel:isolation:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/swift/withtaskcancellationhandler(operation:oncancel:isolation:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
