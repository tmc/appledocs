{
  "abstract": [
    {
      "text": "A type whose values can be implicitly or explicitly copied.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/Copyable"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s8CopyableP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Copyable"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "Copyable"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "Copyable"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Copyable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Conforming to this protocol indicates that a type’s value can be copied;",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "this protocol doesn’t have any required methods or properties.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You don’t generally need to write an explicit conformance to ",
              "type": "text"
            },
            {
              "code": "Copyable",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The following places implicitly include ",
              "type": "text"
            },
            {
              "code": "Copyable",
              "type": "codeVoice"
            },
            {
              "text": " conformance:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Structure declarations,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "unless it has a noncopyable stored property",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Enumeration declarations,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "unless it has a case whose associated value isn’t copyable",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Class declarations",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Actor declarations",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Protocol declarations",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Associated type declarations",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "Self",
                      "type": "codeVoice"
                    },
                    {
                      "text": " type in a protocol extension",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In an extension, the generic parameters of the type being extended",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "A class or actor can contain noncopyable stored properties,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "while still being copyable itself —",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "classes and actors are copied by retaining and releasing references.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In a declaration that includes generic type parameters,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "each generic type parameter implicitly includes ",
              "type": "text"
            },
            {
              "code": "Copyable",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in its list of requirements.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Metatypes and tuples of copyable types are also implicitly copyable,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as are boxed protocol types.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "all of the following pairs of declarations are equivalent:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct MyStructure { }",
            "struct MyStructere: Copyable { }",
            "",
            "protocol MyProtocol { }",
            "protocol MyProtocol: Copyable { }",
            "",
            "protocol AnotherProtocol {",
            "    associatedtype MyType",
            "    associatedtype MyType: Copyable",
            "}",
            "",
            "func genericFunction<T>(t: T) { }",
            "func genericFunction<T>(t: T) where T: Copyable { }",
            "",
            "let x: any MyProtocol",
            "let x: any MyProtocol & Copyable"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To suppress an implicit conformance to ",
              "type": "text"
            },
            {
              "code": "Copyable",
              "type": "codeVoice"
            },
            {
              "text": " you write ",
              "type": "text"
            },
            {
              "code": "~Copyable",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "only copyable types can conform to ",
              "type": "text"
            },
            {
              "code": "MyProtocol",
              "type": "codeVoice"
            },
            {
              "text": " in the example above,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "but both copyable and noncopyable types",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can conform ",
              "type": "text"
            },
            {
              "code": "NoRequirements",
              "type": "codeVoice"
            },
            {
              "text": " in the example below:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "protocol NoRequirements: ~Copyable { }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Extensions to the ",
              "type": "text"
            },
            {
              "code": "Copyable",
              "type": "codeVoice"
            },
            {
              "text": " protocol are not allowed.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError/ErrorCode-swift.enum": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ErrorCode"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError/ErrorCode-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ErrorCode"
        }
      ],
      "role": "symbol",
      "title": "ExecuteDistributedTargetError.ErrorCode",
      "type": "topic",
      "url": "/documentation/distributed/executedistributedtargeterror/errorcode-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar": {
      "abstract": [
        {
          "text": "Provides storage for tracking and access to data changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservationRegistrar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObservationRegistrar"
        }
      ],
      "role": "symbol",
      "title": "ObservationRegistrar",
      "type": "topic",
      "url": "/documentation/observation/observationregistrar"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/Anchor": {
      "abstract": [
        {
          "text": "A regex component that matches a specific condition at a particular position",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in an input string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Anchor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/Anchor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Anchor"
        }
      ],
      "role": "symbol",
      "title": "Anchor",
      "type": "topic",
      "url": "/documentation/regexbuilder/anchor"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/Capture": {
      "abstract": [
        {
          "text": "A regex component that saves the matched substring, or a transformed result,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "for access in a regex match.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Capture"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/Capture",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Capture"
        }
      ],
      "role": "symbol",
      "title": "Capture",
      "type": "topic",
      "url": "/documentation/regexbuilder/capture"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/CharacterClass": {
      "abstract": [
        {
          "text": "A class of characters that match in a regex.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CharacterClass"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/CharacterClass",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CharacterClass"
        }
      ],
      "role": "symbol",
      "title": "CharacterClass",
      "type": "topic",
      "url": "/documentation/regexbuilder/characterclass"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/ChoiceOf": {
      "abstract": [
        {
          "text": "A regex component that chooses exactly one of its constituent regex",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "components when matching.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ChoiceOf"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/ChoiceOf",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ChoiceOf"
        }
      ],
      "role": "symbol",
      "title": "ChoiceOf",
      "type": "topic",
      "url": "/documentation/regexbuilder/choiceof"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/Local": {
      "abstract": [
        {
          "text": "A regex component that represents an atomic group.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Local"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/Local",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Local"
        }
      ],
      "role": "symbol",
      "title": "Local",
      "type": "topic",
      "url": "/documentation/regexbuilder/local"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/Lookahead": {
      "abstract": [
        {
          "text": "A regex component that allows a match to continue only if its contents",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "match at the given location.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Lookahead"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/Lookahead",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Lookahead"
        }
      ],
      "role": "symbol",
      "title": "Lookahead",
      "type": "topic",
      "url": "/documentation/regexbuilder/lookahead"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/NegativeLookahead": {
      "abstract": [
        {
          "text": "A regex component that allows a match to continue only if its contents",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "do not match at the given location.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "NegativeLookahead"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/NegativeLookahead",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "NegativeLookahead"
        }
      ],
      "role": "symbol",
      "title": "NegativeLookahead",
      "type": "topic",
      "url": "/documentation/regexbuilder/negativelookahead"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/OneOrMore": {
      "abstract": [
        {
          "text": "A regex component that matches one or more occurrences of its underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "component.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "OneOrMore"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/OneOrMore",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "OneOrMore"
        }
      ],
      "role": "symbol",
      "title": "OneOrMore",
      "type": "topic",
      "url": "/documentation/regexbuilder/oneormore"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/Optionally": {
      "abstract": [
        {
          "text": "A regex component that matches zero or one occurrences of its underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "component.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Optionally"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/Optionally",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Optionally"
        }
      ],
      "role": "symbol",
      "title": "Optionally",
      "type": "topic",
      "url": "/documentation/regexbuilder/optionally"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/Repeat": {
      "abstract": [
        {
          "text": "A regex component that matches a selectable number of occurrences of its",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "underlying component.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Repeat"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/Repeat",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Repeat"
        }
      ],
      "role": "symbol",
      "title": "Repeat",
      "type": "topic",
      "url": "/documentation/regexbuilder/repeat"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/TryCapture": {
      "abstract": [
        {
          "text": "A regex component that attempts to transform a matched substring, saving",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the result if successful and backtracking if the transformation fails.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TryCapture"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/TryCapture",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TryCapture"
        }
      ],
      "role": "symbol",
      "title": "TryCapture",
      "type": "topic",
      "url": "/documentation/regexbuilder/trycapture"
    },
    "doc://com.apple.Swift/documentation/RegexBuilder/ZeroOrMore": {
      "abstract": [
        {
          "text": "A regex component that matches zero or more occurrences of its underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "component.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Output",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ZeroOrMore"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/RegexBuilder/ZeroOrMore",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ZeroOrMore"
        }
      ],
      "role": "symbol",
      "title": "ZeroOrMore",
      "type": "topic",
      "url": "/documentation/regexbuilder/zeroormore"
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyBidirectionalCollection": {
      "abstract": [
        {
          "text": "A type-erased wrapper over any collection with indices that",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "support bidirectional traversal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyBidirectionalCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyBidirectionalCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyBidirectionalCollection"
        }
      ],
      "role": "symbol",
      "title": "AnyBidirectionalCollection",
      "type": "topic",
      "url": "/documentation/swift/anybidirectionalcollection"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyCollection": {
      "abstract": [
        {
          "text": "A type-erased wrapper over any collection with indices that",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "support forward traversal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyCollection"
        }
      ],
      "role": "symbol",
      "title": "AnyCollection",
      "type": "topic",
      "url": "/documentation/swift/anycollection"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyHashable": {
      "abstract": [
        {
          "text": "A type-erased hashable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyHashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyHashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyHashable"
        }
      ],
      "role": "symbol",
      "title": "AnyHashable",
      "type": "topic",
      "url": "/documentation/swift/anyhashable"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyIndex": {
      "abstract": [
        {
          "text": "A wrapper over an underlying index that hides the specific underlying type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyIndex"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyIndex",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyIndex"
        }
      ],
      "role": "symbol",
      "title": "AnyIndex",
      "type": "topic",
      "url": "/documentation/swift/anyindex"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyIterator": {
      "abstract": [
        {
          "text": "A type-erased iterator of ",
          "type": "text"
        },
        {
          "code": "Element",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyIterator"
        }
      ],
      "role": "symbol",
      "title": "AnyIterator",
      "type": "topic",
      "url": "/documentation/swift/anyiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyKeyPath": {
      "abstract": [
        {
          "text": "A type-erased key path, from any root type to any resulting value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyKeyPath"
        }
      ],
      "role": "symbol",
      "title": "AnyKeyPath",
      "type": "topic",
      "url": "/documentation/swift/anykeypath"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyRandomAccessCollection": {
      "abstract": [
        {
          "text": "A type-erased wrapper over any collection with indices that",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "support random access traversal.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyRandomAccessCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyRandomAccessCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyRandomAccessCollection"
        }
      ],
      "role": "symbol",
      "title": "AnyRandomAccessCollection",
      "type": "topic",
      "url": "/documentation/swift/anyrandomaccesscollection"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyRegexOutput": {
      "abstract": [
        {
          "text": "The type-erased, dynamic output of a regular expression match.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyRegexOutput"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyRegexOutput",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyRegexOutput"
        }
      ],
      "role": "symbol",
      "title": "AnyRegexOutput",
      "type": "topic",
      "url": "/documentation/swift/anyregexoutput"
    },
    "doc://com.apple.Swift/documentation/Swift/AnySequence": {
      "abstract": [
        {
          "text": "A type-erased sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnySequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnySequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnySequence"
        }
      ],
      "role": "symbol",
      "title": "AnySequence",
      "type": "topic",
      "url": "/documentation/swift/anysequence"
    },
    "doc://com.apple.Swift/documentation/Swift/Array": {
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "role": "symbol",
      "title": "Array",
      "type": "topic",
      "url": "/documentation/swift/array"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice": {
      "abstract": [
        {
          "text": "A slice of an ",
          "type": "text"
        },
        {
          "code": "Array",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "ContiguousArray",
          "type": "codeVoice"
        },
        {
          "text": ", or ",
          "type": "text"
        },
        {
          "code": "ArraySlice",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "role": "symbol",
      "title": "ArraySlice",
      "type": "topic",
      "url": "/documentation/swift/arrayslice"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that maps a given closure over the asynchronous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence’s elements, omitting results that don’t return a value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncCompactMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncCompactMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncCompactMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asynccompactmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence which omits a specified number of elements from the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "base asynchronous sequence, then passes through all remaining elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncDropFirstSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncDropFirstSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncDropFirstSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncdropfirstsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence which omits elements from the base sequence until a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given closure returns false, after which it passes through all remaining",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncDropWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncDropWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncDropWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncdropwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that contains, in order, the elements of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the base sequence that satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncFilterSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncFilterSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncFilterSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncfiltersequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that concatenates the results of calling a given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "transformation with each element of this sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncFlatMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncFlatMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncFlatMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncflatmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that maps the given closure over the asynchronous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence’s elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence, up to a specified maximum length,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "containing the initial elements of a base asynchronous sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncPrefixSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncPrefixSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncPrefixSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncprefixsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence, containing the initial, consecutive",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of the base sequence that satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncPrefixWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncPrefixWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncPrefixWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncprefixwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream": {
      "abstract": [
        {
          "text": "An asynchronous sequence generated from a closure that calls a continuation",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to produce new elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncStream"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncStream"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream",
      "type": "topic",
      "url": "/documentation/swift/asyncstream"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination": {
      "abstract": [
        {
          "text": "A type that indicates how the stream terminated.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Termination"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Termination"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Continuation.Termination",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/continuation/termination"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that maps an error-throwing closure over the base",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence’s elements, omitting results that don’t return a value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingCompactMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingCompactMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingCompactMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingcompactmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence which omits elements from the base sequence until a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given error-throwing closure returns false, after which it passes through",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "all remaining elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingDropWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingDropWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingDropWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingdropwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that contains, in order, the elements of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the base sequence that satisfy the given error-throwing predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingFilterSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingFilterSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingFilterSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingfiltersequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that concatenates the results of calling a given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "error-throwing transformation with each element of this sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingFlatMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingFlatMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingFlatMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingflatmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that maps the given error-throwing closure over the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous sequence’s elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence, containing the initial, consecutive",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of the base sequence that satisfy the given error-throwing",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingPrefixWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingPrefixWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingPrefixWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingprefixwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream": {
      "abstract": [
        {
          "text": "An asynchronous sequence generated from an error-throwing closure that",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "calls a continuation to produce new elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingStream"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingStream"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingStream",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingstream"
    },
    "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A mutable pointer addressing an Objective-C reference that doesn’t own its",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "target.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AutoreleasingUnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AutoreleasingUnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "AutoreleasingUnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/autoreleasingunsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "role": "symbol",
      "title": "BitwiseCopyable",
      "type": "topic",
      "url": "/documentation/swift/bitwisecopyable"
    },
    "doc://com.apple.Swift/documentation/Swift/Bool": {
      "abstract": [
        {
          "text": "A value type whose instances are either ",
          "type": "text"
        },
        {
          "code": "true",
          "type": "codeVoice"
        },
        {
          "text": " or ",
          "type": "text"
        },
        {
          "code": "false",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Bool",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/swift/bool"
    },
    "doc://com.apple.Swift/documentation/Swift/CVaListPointer": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CVaListPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CVaListPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CVaListPointer"
        }
      ],
      "role": "symbol",
      "title": "CVaListPointer",
      "type": "topic",
      "url": "/documentation/swift/cvalistpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/Character": {
      "abstract": [
        {
          "text": "A single extended grapheme cluster that approximates a user-perceived",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "character.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Character"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Character",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Character"
        }
      ],
      "role": "symbol",
      "title": "Character",
      "type": "topic",
      "url": "/documentation/swift/character"
    },
    "doc://com.apple.Swift/documentation/Swift/ClosedRange": {
      "abstract": [
        {
          "text": "An interval from a lower bound up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ClosedRange",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "role": "symbol",
      "title": "ClosedRange",
      "type": "topic",
      "url": "/documentation/swift/closedrange"
    },
    "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index": {
      "abstract": [
        {
          "text": "A type that represents a position in the collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "ClosedRange.Index",
      "type": "topic",
      "url": "/documentation/swift/closedrange/index"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference": {
      "abstract": [
        {
          "text": "A collection of insertions and removals that describe the difference",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "between two ordered collection states.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollectionDifference"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollectionDifference"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change": {
      "abstract": [
        {
          "text": "A single change to a collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Change"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Change"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference.Change",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference/change"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index": {
      "abstract": [
        {
          "text": "The position of a collection difference.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference.Index",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference/index"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionOfOne": {
      "abstract": [
        {
          "text": "A collection containing a single element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollectionOfOne"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionOfOne",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollectionOfOne"
        }
      ],
      "role": "symbol",
      "title": "CollectionOfOne",
      "type": "topic",
      "url": "/documentation/swift/collectionofone"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator": {
      "abstract": [
        {
          "text": "An iterator that produces one or zero instances of an element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "CollectionOfOne.Iterator",
      "type": "topic",
      "url": "/documentation/swift/collectionofone/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray": {
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "role": "symbol",
      "title": "ContiguousArray",
      "type": "topic",
      "url": "/documentation/swift/contiguousarray"
    },
    "doc://com.apple.Swift/documentation/Swift/ContinuousClock": {
      "abstract": [
        {
          "text": "A clock that measures time that always increments and does not stop",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "incrementing while the system is asleep.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContinuousClock"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContinuousClock",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContinuousClock"
        }
      ],
      "role": "symbol",
      "title": "ContinuousClock",
      "type": "topic",
      "url": "/documentation/swift/continuousclock"
    },
    "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant": {
      "abstract": [
        {
          "text": "A continuous point in time used for ",
          "type": "text"
        },
        {
          "code": "ContinuousClock",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "role": "symbol",
      "title": "ContinuousClock.Instant",
      "type": "topic",
      "url": "/documentation/swift/continuousclock/instant"
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/swift/copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/DecodingError": {
      "abstract": [
        {
          "text": "An error that occurs during the decoding of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DecodingError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DecodingError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DecodingError"
        }
      ],
      "role": "symbol",
      "title": "DecodingError",
      "type": "topic",
      "url": "/documentation/swift/decodingerror"
    },
    "doc://com.apple.Swift/documentation/Swift/DefaultIndices": {
      "abstract": [
        {
          "text": "A collection of indices for an arbitrary collection",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Elements",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "RandomAccessCollection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DefaultIndices"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DefaultIndices",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DefaultIndices"
        }
      ],
      "role": "symbol",
      "title": "DefaultIndices",
      "type": "topic",
      "url": "/documentation/swift/defaultindices"
    },
    "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation": {
      "abstract": [
        {
          "text": "Represents a string literal with interpolations while it is being built up.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DefaultStringInterpolation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DefaultStringInterpolation"
        }
      ],
      "role": "symbol",
      "title": "DefaultStringInterpolation",
      "type": "topic",
      "url": "/documentation/swift/defaultstringinterpolation"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary": {
      "abstract": [
        {
          "text": "A collection whose elements are key-value pairs.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Decodable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Decodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "role": "symbol",
      "title": "Dictionary",
      "type": "topic",
      "url": "/documentation/swift/dictionary"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Index": {
      "abstract": [
        {
          "text": "The position of a key-value pair in a dictionary.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Index",
      "type": "topic",
      "url": "/documentation/swift/dictionary/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the members of a ",
          "type": "text"
        },
        {
          "code": "Dictionary<Key, Value>",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dictionary/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct": {
      "abstract": [
        {
          "text": "A view of a dictionary’s keys.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Keys"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Keys"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Keys",
      "type": "topic",
      "url": "/documentation/swift/dictionary/keys-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct": {
      "abstract": [
        {
          "text": "A view of a dictionary’s values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Values"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Values"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Values",
      "type": "topic",
      "url": "/documentation/swift/dictionary/values-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/DiscardingTaskGroup": {
      "abstract": [
        {
          "text": "A discarding group that contains dynamically created child tasks.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DiscardingTaskGroup"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DiscardingTaskGroup",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DiscardingTaskGroup"
        }
      ],
      "role": "symbol",
      "title": "DiscardingTaskGroup",
      "type": "topic",
      "url": "/documentation/swift/discardingtaskgroup"
    },
    "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice": {
      "abstract": [
        {
          "text": "A collection wrapper that provides access to the elements of a collection,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "indexed by a set of indices.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DiscontiguousSlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DiscontiguousSlice"
        }
      ],
      "role": "symbol",
      "title": "DiscontiguousSlice",
      "type": "topic",
      "url": "/documentation/swift/discontiguousslice"
    },
    "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index": {
      "abstract": [
        {
          "text": "A position in a ",
          "type": "text"
        },
        {
          "code": "DiscontiguousSlice",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "DiscontiguousSlice.Index",
      "type": "topic",
      "url": "/documentation/swift/discontiguousslice/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Double": {
      "abstract": [
        {
          "text": "A double-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "role": "symbol",
      "title": "Double",
      "type": "topic",
      "url": "/documentation/swift/double"
    },
    "doc://com.apple.Swift/documentation/Swift/DropFirstSequence": {
      "abstract": [
        {
          "text": "A sequence that lazily consumes and drops ",
          "type": "text"
        },
        {
          "code": "n",
          "type": "codeVoice"
        },
        {
          "text": " elements from an underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " iterator before possibly returning the first available element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DropFirstSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DropFirstSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DropFirstSequence"
        }
      ],
      "role": "symbol",
      "title": "DropFirstSequence",
      "type": "topic",
      "url": "/documentation/swift/dropfirstsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/DropWhileSequence": {
      "abstract": [
        {
          "text": "A sequence that lazily consumes and drops ",
          "type": "text"
        },
        {
          "code": "n",
          "type": "codeVoice"
        },
        {
          "text": " elements from an underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " iterator before possibly returning the first available element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DropWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DropWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DropWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "DropWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/dropwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "DropWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dropwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration": {
      "abstract": [
        {
          "text": "A representation of high precision time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Duration"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Duration"
        }
      ],
      "role": "symbol",
      "title": "Duration",
      "type": "topic",
      "url": "/documentation/swift/duration"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle": {
      "abstract": [
        {
          "text": "A format style that shows durations in a compact, localized format with separators.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TimeFormatStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TimeFormatStyle"
        }
      ],
      "role": "symbol",
      "title": "Duration.TimeFormatStyle",
      "type": "topic",
      "url": "/documentation/swift/duration/timeformatstyle"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct": {
      "abstract": [
        {
          "text": "A format style that formats durations as attributed strings.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "role": "symbol",
      "title": "Duration.TimeFormatStyle.Attributed",
      "type": "topic",
      "url": "/documentation/swift/duration/timeformatstyle/attributed-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle": {
      "abstract": [
        {
          "text": "A format style that shows durations with localized labeled components",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnitsFormatStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnitsFormatStyle"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct": {
      "abstract": [
        {
          "text": "A format style that formats durations as attributed strings.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.Attributed",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/attributed-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/EmptyCollection": {
      "abstract": [
        {
          "text": "A collection whose element type is ",
          "type": "text"
        },
        {
          "code": "Element",
          "type": "codeVoice"
        },
        {
          "text": " but that is always empty.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EmptyCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EmptyCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EmptyCollection"
        }
      ],
      "role": "symbol",
      "title": "EmptyCollection",
      "type": "topic",
      "url": "/documentation/swift/emptycollection"
    },
    "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator": {
      "abstract": [
        {
          "text": "An iterator that never produces an element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "EmptyCollection.Iterator",
      "type": "topic",
      "url": "/documentation/swift/emptycollection/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/EncodingError": {
      "abstract": [
        {
          "text": "An error that occurs during the encoding of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EncodingError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EncodingError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EncodingError"
        }
      ],
      "role": "symbol",
      "title": "EncodingError",
      "type": "topic",
      "url": "/documentation/swift/encodingerror"
    },
    "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence": {
      "abstract": [
        {
          "text": "An enumeration of the elements of a sequence or collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EnumeratedSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EnumeratedSequence"
        }
      ],
      "role": "symbol",
      "title": "EnumeratedSequence",
      "type": "topic",
      "url": "/documentation/swift/enumeratedsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator for ",
          "type": "text"
        },
        {
          "code": "EnumeratedSequence",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "EnumeratedSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/enumeratedsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/FlattenSequence": {
      "abstract": [
        {
          "text": "A sequence consisting of all the elements contained in each segment",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contained in some ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FlattenSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FlattenSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FlattenSequence"
        }
      ],
      "role": "symbol",
      "title": "FlattenSequence",
      "type": "topic",
      "url": "/documentation/swift/flattensequence"
    },
    "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index": {
      "abstract": [
        {
          "text": "A position in a FlattenCollection",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "FlattenSequence.Index",
      "type": "topic",
      "url": "/documentation/swift/flattensequence/index"
    },
    "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "FlattenSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/flattensequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Float": {
      "abstract": [
        {
          "text": "A single-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "role": "symbol",
      "title": "Float",
      "type": "topic",
      "url": "/documentation/swift/float"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16": {
      "abstract": [
        {
          "text": "A half-precision (16b), floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "role": "symbol",
      "title": "Float16",
      "type": "topic",
      "url": "/documentation/swift/float16"
    },
    "doc://com.apple.Swift/documentation/Swift/Float80": {
      "abstract": [
        {
          "text": "An extended-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float80",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "role": "symbol",
      "title": "Float80",
      "type": "topic",
      "url": "/documentation/swift/float80"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification": {
      "abstract": [
        {
          "text": "The IEEE 754 floating-point classes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointClassification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointClassification"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointClassification",
      "type": "topic",
      "url": "/documentation/swift/floatingpointclassification"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule": {
      "abstract": [
        {
          "text": "A rule for rounding a floating-point number.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointRoundingRule"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointRoundingRule"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointRoundingRule",
      "type": "topic",
      "url": "/documentation/swift/floatingpointroundingrule"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointSign": {
      "abstract": [
        {
          "text": "The sign of a floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointSign"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointSign",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointSign"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointSign",
      "type": "topic",
      "url": "/documentation/swift/floatingpointsign"
    },
    "doc://com.apple.Swift/documentation/Swift/Hasher": {
      "abstract": [
        {
          "text": "The universal hash function used by ",
          "type": "text"
        },
        {
          "code": "Set",
          "type": "codeVoice"
        },
        {
          "text": " and ",
          "type": "text"
        },
        {
          "code": "Dictionary",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hasher"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hasher",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hasher"
        }
      ],
      "role": "symbol",
      "title": "Hasher",
      "type": "topic",
      "url": "/documentation/swift/hasher"
    },
    "doc://com.apple.Swift/documentation/Swift/IndexingIterator": {
      "abstract": [
        {
          "text": "A type that iterates over a collection using its indices.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Elements",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "IndexingIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IndexingIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "IndexingIterator"
        }
      ],
      "role": "symbol",
      "title": "IndexingIterator",
      "type": "topic",
      "url": "/documentation/swift/indexingiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Int": {
      "abstract": [
        {
          "text": "A signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "role": "symbol",
      "title": "Int",
      "type": "topic",
      "url": "/documentation/swift/int"
    },
    "doc://com.apple.Swift/documentation/Swift/Int/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int.Words",
      "type": "topic",
      "url": "/documentation/swift/int/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Int128": {
      "abstract": [
        {
          "text": "A 128-bit signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int128"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int128",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int128"
        }
      ],
      "role": "symbol",
      "title": "Int128",
      "type": "topic",
      "url": "/documentation/swift/int128"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16": {
      "abstract": [
        {
          "text": "A 16-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int16"
        }
      ],
      "role": "symbol",
      "title": "Int16",
      "type": "topic",
      "url": "/documentation/swift/int16"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int16.Words",
      "type": "topic",
      "url": "/documentation/swift/int16/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32": {
      "abstract": [
        {
          "text": "A 32-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int32"
        }
      ],
      "role": "symbol",
      "title": "Int32",
      "type": "topic",
      "url": "/documentation/swift/int32"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int32.Words",
      "type": "topic",
      "url": "/documentation/swift/int32/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64": {
      "abstract": [
        {
          "text": "A 64-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int64"
        }
      ],
      "role": "symbol",
      "title": "Int64",
      "type": "topic",
      "url": "/documentation/swift/int64"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int64.Words",
      "type": "topic",
      "url": "/documentation/swift/int64/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8": {
      "abstract": [
        {
          "text": "An 8-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int8"
        }
      ],
      "role": "symbol",
      "title": "Int8",
      "type": "topic",
      "url": "/documentation/swift/int8"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int8.Words",
      "type": "topic",
      "url": "/documentation/swift/int8/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/IteratorSequence": {
      "abstract": [
        {
          "text": "A sequence built around an iterator of type ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "IteratorProtocol",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "IteratorSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IteratorSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "IteratorSequence"
        }
      ],
      "role": "symbol",
      "title": "IteratorSequence",
      "type": "topic",
      "url": "/documentation/swift/iteratorsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/JobPriority": {
      "abstract": [
        {
          "text": "The priority of this job.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "JobPriority"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/JobPriority",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "JobPriority"
        }
      ],
      "role": "symbol",
      "title": "JobPriority",
      "type": "topic",
      "url": "/documentation/swift/jobpriority"
    },
    "doc://com.apple.Swift/documentation/Swift/JoinedSequence": {
      "abstract": [
        {
          "text": "A sequence that presents the elements of a base sequence of sequences",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "concatenated using a given separator.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "JoinedSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/JoinedSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "JoinedSequence"
        }
      ],
      "role": "symbol",
      "title": "JoinedSequence",
      "type": "topic",
      "url": "/documentation/swift/joinedsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator that presents the elements of the sequences traversed",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "by a base iterator, concatenated using a given separator.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "JoinedSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/joinedsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/KeyValuePairs": {
      "abstract": [
        {
          "text": "A lightweight collection of key-value pairs.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "KeyValuePairs"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/KeyValuePairs",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "KeyValuePairs"
        }
      ],
      "role": "symbol",
      "title": "KeyValuePairs",
      "type": "topic",
      "url": "/documentation/swift/keyvaluepairs"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence": {
      "abstract": [
        {
          "text": "A sequence whose elements consist of the elements that follow the initial",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "consecutive elements of some base sequence that satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LazyDropWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LazyDropWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "LazyDropWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/lazydropwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the elements traversed by a base iterator that follow the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "initial consecutive elements that satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "LazyDropWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/lazydropwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence": {
      "abstract": [
        {
          "text": "A sequence whose elements consist of the elements of some base",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence that also satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LazyFilterSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LazyFilterSequence"
        }
      ],
      "role": "symbol",
      "title": "LazyFilterSequence",
      "type": "topic",
      "url": "/documentation/swift/lazyfiltersequence"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the elements traversed by some base iterator that also",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "LazyFilterSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/lazyfiltersequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyMapSequence": {
      "abstract": [
        {
          "text": "A ",
          "type": "text"
        },
        {
          "code": "Sequence",
          "type": "codeVoice"
        },
        {
          "text": " whose elements consist of those in a ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Sequence",
          "type": "codeVoice"
        },
        {
          "text": " passed through a transform function returning ",
          "type": "text"
        },
        {
          "code": "Element",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "These elements are computed lazily, each time they’re read, by",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "calling the transform function on a base element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LazyMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LazyMapSequence"
        }
      ],
      "role": "symbol",
      "title": "LazyMapSequence",
      "type": "topic",
      "url": "/documentation/swift/lazymapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyMapSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyMapSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "LazyMapSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/lazymapsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence": {
      "abstract": [
        {
          "text": "A sequence whose elements consist of the initial consecutive elements of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "some base sequence that satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LazyPrefixWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LazyPrefixWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "LazyPrefixWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/lazyprefixwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index": {
      "abstract": [
        {
          "text": "A position in a ",
          "type": "text"
        },
        {
          "code": "LazyPrefixWhileCollection",
          "type": "codeVoice"
        },
        {
          "text": " or",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "LazyPrefixWhileBidirectionalCollection",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "LazyPrefixWhileSequence.Index",
      "type": "topic",
      "url": "/documentation/swift/lazyprefixwhilesequence/index"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the initial elements traversed by a base iterator that",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "LazyPrefixWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/lazyprefixwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/LazySequence": {
      "abstract": [
        {
          "text": "A sequence containing the same elements as a ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " sequence, but",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "on which some operations such as ",
          "type": "text"
        },
        {
          "code": "map",
          "type": "codeVoice"
        },
        {
          "text": " and ",
          "type": "text"
        },
        {
          "code": "filter",
          "type": "codeVoice"
        },
        {
          "text": " are",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "implemented lazily.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LazySequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazySequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LazySequence"
        }
      ],
      "role": "symbol",
      "title": "LazySequence",
      "type": "topic",
      "url": "/documentation/swift/lazysequence"
    },
    "doc://com.apple.Swift/documentation/Swift/ManagedBufferPointer": {
      "abstract": [
        {
          "text": "Contains a buffer object, and provides access to an instance of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Header",
          "type": "codeVoice"
        },
        {
          "text": " and contiguous storage for an arbitrary number of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Element",
          "type": "codeVoice"
        },
        {
          "text": " instances stored in that buffer.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Header",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Header",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ManagedBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ManagedBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ManagedBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "ManagedBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/managedbufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/Mirror": {
      "abstract": [
        {
          "text": "A representation of the substructure and display style of an instance of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "any type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Mirror"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Mirror",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Mirror"
        }
      ],
      "role": "symbol",
      "title": "Mirror",
      "type": "topic",
      "url": "/documentation/swift/mirror"
    },
    "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum": {
      "abstract": [
        {
          "text": "A suggestion of how a mirror’s subject is to be interpreted.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DisplayStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DisplayStyle"
        }
      ],
      "role": "symbol",
      "title": "Mirror.DisplayStyle",
      "type": "topic",
      "url": "/documentation/swift/mirror/displaystyle-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Swift/Never": {
      "abstract": [
        {
          "text": "A type that has no values and can’t be constructed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Never"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Never",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Never"
        }
      ],
      "role": "symbol",
      "title": "Never",
      "type": "topic",
      "url": "/documentation/swift/never"
    },
    "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier": {
      "abstract": [
        {
          "text": "A unique identifier for a class instance or metatype.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "role": "symbol",
      "title": "ObjectIdentifier",
      "type": "topic",
      "url": "/documentation/swift/objectidentifier"
    },
    "doc://com.apple.Swift/documentation/Swift/OpaquePointer": {
      "abstract": [
        {
          "text": "A wrapper around an opaque C pointer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "OpaquePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/OpaquePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "OpaquePointer"
        }
      ],
      "role": "symbol",
      "title": "OpaquePointer",
      "type": "topic",
      "url": "/documentation/swift/opaquepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional": {
      "abstract": [
        {
          "text": "A type that represents either a wrapped value or the absence of a value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "role": "symbol",
      "title": "Optional",
      "type": "topic",
      "url": "/documentation/swift/optional"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional/Publisher-swift.struct": {
      "abstract": [
        {
          "text": "The type of a Combine publisher that publishes the value of a Swift optional instance to each subscriber exactly once, if the instance has any value at all.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Publisher"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional/Publisher-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Publisher"
        }
      ],
      "role": "symbol",
      "title": "Optional.Publisher",
      "type": "topic",
      "url": "/documentation/swift/optional/publisher-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom": {
      "abstract": [
        {
          "text": "A partial interval extending upward from a lower bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeFrom"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeFrom"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeFrom",
      "type": "topic",
      "url": "/documentation/swift/partialrangefrom"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough": {
      "abstract": [
        {
          "text": "A partial interval up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeThrough"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeThrough"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeThrough",
      "type": "topic",
      "url": "/documentation/swift/partialrangethrough"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo": {
      "abstract": [
        {
          "text": "A partial half-open interval up to, but not including, an upper bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeUpTo"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeUpTo"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeUpTo",
      "type": "topic",
      "url": "/documentation/swift/partialrangeupto"
    },
    "doc://com.apple.Swift/documentation/Swift/PrefixSequence": {
      "abstract": [
        {
          "text": "A sequence that only consumes up to ",
          "type": "text"
        },
        {
          "code": "n",
          "type": "codeVoice"
        },
        {
          "text": " elements from an underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " iterator.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PrefixSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PrefixSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PrefixSequence"
        }
      ],
      "role": "symbol",
      "title": "PrefixSequence",
      "type": "topic",
      "url": "/documentation/swift/prefixsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "PrefixSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/prefixsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Range": {
      "abstract": [
        {
          "text": "A half-open interval from a lower bound up to, but not including, an upper",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "role": "symbol",
      "title": "Range",
      "type": "topic",
      "url": "/documentation/swift/range"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeSet": {
      "abstract": [
        {
          "text": "A set of values of any comparable type, represented by ranges.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeSet"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeSet",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RangeSet"
        }
      ],
      "role": "symbol",
      "title": "RangeSet",
      "type": "topic",
      "url": "/documentation/swift/rangeset"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct": {
      "abstract": [
        {
          "text": "A collection of the ranges that make up a range set.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Ranges"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Ranges"
        }
      ],
      "role": "symbol",
      "title": "RangeSet.Ranges",
      "type": "topic",
      "url": "/documentation/swift/rangeset/ranges-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Repeated": {
      "abstract": [
        {
          "text": "A collection whose elements are all identical.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Repeated"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Repeated",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Repeated"
        }
      ],
      "role": "symbol",
      "title": "Repeated",
      "type": "topic",
      "url": "/documentation/swift/repeated"
    },
    "doc://com.apple.Swift/documentation/Swift/Result": {
      "abstract": [
        {
          "text": "A value that represents either a success or a failure, including an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "associated value in each case.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "role": "symbol",
      "title": "Result",
      "type": "topic",
      "url": "/documentation/swift/result"
    },
    "doc://com.apple.Swift/documentation/Swift/Result/Publisher-swift.struct": {
      "abstract": [
        {
          "text": "The type of a Combine publisher that publishes this instance’s result to each subscriber exactly once, or fails immediately if the result indicates failure.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Publisher"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result/Publisher-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Publisher"
        }
      ],
      "role": "symbol",
      "title": "Result.Publisher",
      "type": "topic",
      "url": "/documentation/swift/result/publisher-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/ReversedCollection": {
      "abstract": [
        {
          "text": "A collection that presents the elements of its base collection",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in reverse order.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "LazySequenceProtocol",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ReversedCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReversedCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ReversedCollection"
        }
      ],
      "role": "symbol",
      "title": "ReversedCollection",
      "type": "topic",
      "url": "/documentation/swift/reversedcollection"
    },
    "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index": {
      "abstract": [
        {
          "text": "An index that traverses the same positions as an underlying index,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "with inverted traversal direction.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "ReversedCollection.Index",
      "type": "topic",
      "url": "/documentation/swift/reversedcollection/index"
    },
    "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "ReversedCollection.Iterator",
      "type": "topic",
      "url": "/documentation/swift/reversedcollection/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD16": {
      "abstract": [
        {
          "text": "A vector of 16 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD16Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BitwiseCopyable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "role": "symbol",
      "title": "SIMD16",
      "type": "topic",
      "url": "/documentation/swift/simd16"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD2": {
      "abstract": [
        {
          "text": "A vector of two scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD2",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "role": "symbol",
      "title": "SIMD2",
      "type": "topic",
      "url": "/documentation/swift/simd2"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD3": {
      "abstract": [
        {
          "text": "A vector of three scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD4Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BitwiseCopyable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD3",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "role": "symbol",
      "title": "SIMD3",
      "type": "topic",
      "url": "/documentation/swift/simd3"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD32": {
      "abstract": [
        {
          "text": "A vector of 32 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "role": "symbol",
      "title": "SIMD32",
      "type": "topic",
      "url": "/documentation/swift/simd32"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD4": {
      "abstract": [
        {
          "text": "A vector of four scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD4",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "role": "symbol",
      "title": "SIMD4",
      "type": "topic",
      "url": "/documentation/swift/simd4"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD64": {
      "abstract": [
        {
          "text": "A vector of 64 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "role": "symbol",
      "title": "SIMD64",
      "type": "topic",
      "url": "/documentation/swift/simd64"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD8": {
      "abstract": [
        {
          "text": "A vector of eight scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD8Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BitwiseCopyable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "role": "symbol",
      "title": "SIMD8",
      "type": "topic",
      "url": "/documentation/swift/simd8"
    },
    "doc://com.apple.Swift/documentation/Swift/Set": {
      "abstract": [
        {
          "text": "An unordered collection of unique elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "role": "symbol",
      "title": "Set",
      "type": "topic",
      "url": "/documentation/swift/set"
    },
    "doc://com.apple.Swift/documentation/Swift/Set/Index": {
      "abstract": [
        {
          "text": "The position of an element in a set.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "Set.Index",
      "type": "topic",
      "url": "/documentation/swift/set/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Set/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the members of a ",
          "type": "text"
        },
        {
          "code": "Set<Element>",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Set.Iterator",
      "type": "topic",
      "url": "/documentation/swift/set/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Slice": {
      "abstract": [
        {
          "text": "A view into a subsequence of elements of another collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "MutableCollection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Slice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Slice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Slice"
        }
      ],
      "role": "symbol",
      "title": "Slice",
      "type": "topic",
      "url": "/documentation/swift/slice"
    },
    "doc://com.apple.Swift/documentation/Swift/StaticBigInt": {
      "abstract": [
        {
          "text": "An immutable arbitrary-precision signed integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StaticBigInt"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StaticBigInt",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StaticBigInt"
        }
      ],
      "role": "symbol",
      "title": "StaticBigInt",
      "type": "topic",
      "url": "/documentation/swift/staticbigint"
    },
    "doc://com.apple.Swift/documentation/Swift/StaticString": {
      "abstract": [
        {
          "text": "A string type designed to represent text that is known at compile time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StaticString"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StaticString",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StaticString"
        }
      ],
      "role": "symbol",
      "title": "StaticString",
      "type": "topic",
      "url": "/documentation/swift/staticstring"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideThrough": {
      "abstract": [
        {
          "text": "A sequence of values formed by striding over a closed interval.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideThrough"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideThrough",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideThrough"
        }
      ],
      "role": "symbol",
      "title": "StrideThrough",
      "type": "topic",
      "url": "/documentation/swift/stridethrough"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator": {
      "abstract": [
        {
          "text": "An iterator for a ",
          "type": "text"
        },
        {
          "code": "StrideThrough",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideThroughIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideThroughIterator"
        }
      ],
      "role": "symbol",
      "title": "StrideThroughIterator",
      "type": "topic",
      "url": "/documentation/swift/stridethroughiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideTo": {
      "abstract": [
        {
          "text": "A sequence of values formed by striding over a half-open interval.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideTo"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideTo",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideTo"
        }
      ],
      "role": "symbol",
      "title": "StrideTo",
      "type": "topic",
      "url": "/documentation/swift/strideto"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideToIterator": {
      "abstract": [
        {
          "text": "An iterator for a ",
          "type": "text"
        },
        {
          "code": "StrideTo",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideToIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideToIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideToIterator"
        }
      ],
      "role": "symbol",
      "title": "StrideToIterator",
      "type": "topic",
      "url": "/documentation/swift/stridetoiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/String": {
      "abstract": [
        {
          "text": "A Unicode string value that is a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "role": "symbol",
      "title": "String",
      "type": "topic",
      "url": "/documentation/swift/string"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Encoding": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Encoding"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Encoding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Encoding"
        }
      ],
      "role": "symbol",
      "title": "String.Encoding",
      "type": "topic",
      "url": "/documentation/swift/string/encoding"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Index": {
      "abstract": [
        {
          "text": "A position of a character or code unit in a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "String.Index",
      "type": "topic",
      "url": "/documentation/swift/string/index"
    },
    "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/CapitalizationType-swift.enum": {
      "abstract": [
        {
          "text": "Describes the capitalization modes to apply to text.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CapitalizationType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/CapitalizationType-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CapitalizationType"
        }
      ],
      "role": "symbol",
      "title": "String.IntentInputOptions.CapitalizationType",
      "type": "topic",
      "url": "/documentation/swift/string/intentinputoptions/capitalizationtype-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/KeyboardType-swift.enum": {
      "abstract": [
        {
          "text": "Describes the types of keyboard to use for text entry.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "KeyboardType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/KeyboardType-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "KeyboardType"
        }
      ],
      "role": "symbol",
      "title": "String.IntentInputOptions.KeyboardType",
      "type": "topic",
      "url": "/documentation/swift/string/intentinputoptions/keyboardtype-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue": {
      "abstract": [
        {
          "text": "A reference to a localizable string, with optional string interpolation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LocalizationValue"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LocalizationValue"
        }
      ],
      "role": "symbol",
      "title": "String.LocalizationValue",
      "type": "topic",
      "url": "/documentation/swift/string/localizationvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UTF16View": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of UTF-16 code units.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UTF16View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "role": "symbol",
      "title": "String.UTF16View",
      "type": "topic",
      "url": "/documentation/swift/string/utf16view"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UTF8View": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of UTF-8 code units.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UTF8View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "role": "symbol",
      "title": "String.UTF8View",
      "type": "topic",
      "url": "/documentation/swift/string/utf8view"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of Unicode scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "role": "symbol",
      "title": "String.UnicodeScalarView",
      "type": "topic",
      "url": "/documentation/swift/string/unicodescalarview"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring": {
      "abstract": [
        {
          "text": "A slice of a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "role": "symbol",
      "title": "Substring",
      "type": "topic",
      "url": "/documentation/swift/substring"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring/UTF16View": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring/UTF16View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "role": "symbol",
      "title": "Substring.UTF16View",
      "type": "topic",
      "url": "/documentation/swift/substring/utf16view"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring/UTF8View": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring/UTF8View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "role": "symbol",
      "title": "Substring.UTF8View",
      "type": "topic",
      "url": "/documentation/swift/substring/utf8view"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring/UnicodeScalarView": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring/UnicodeScalarView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "role": "symbol",
      "title": "Substring.UnicodeScalarView",
      "type": "topic",
      "url": "/documentation/swift/substring/unicodescalarview"
    },
    "doc://com.apple.Swift/documentation/Swift/SuspendingClock": {
      "abstract": [
        {
          "text": "A clock that measures time that always increments but stops incrementing",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "while the system is asleep.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SuspendingClock"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SuspendingClock",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SuspendingClock"
        }
      ],
      "role": "symbol",
      "title": "SuspendingClock",
      "type": "topic",
      "url": "/documentation/swift/suspendingclock"
    },
    "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "role": "symbol",
      "title": "SuspendingClock.Instant",
      "type": "topic",
      "url": "/documentation/swift/suspendingclock/instant"
    },
    "doc://com.apple.Swift/documentation/Swift/SystemRandomNumberGenerator": {
      "abstract": [
        {
          "text": "The system’s default source of random data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SystemRandomNumberGenerator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SystemRandomNumberGenerator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SystemRandomNumberGenerator"
        }
      ],
      "role": "symbol",
      "title": "SystemRandomNumberGenerator",
      "type": "topic",
      "url": "/documentation/swift/systemrandomnumbergenerator"
    },
    "doc://com.apple.Swift/documentation/Swift/Task": {
      "abstract": [
        {
          "text": "A unit of asynchronous work.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Task"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Task",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Task"
        }
      ],
      "role": "symbol",
      "title": "Task",
      "type": "topic",
      "url": "/documentation/swift/task"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskGroup": {
      "abstract": [
        {
          "text": "A group that contains dynamically created child tasks.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChildTaskResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskGroup"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskGroup",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TaskGroup"
        }
      ],
      "role": "symbol",
      "title": "TaskGroup",
      "type": "topic",
      "url": "/documentation/swift/taskgroup"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskPriority": {
      "abstract": [
        {
          "text": "The priority of a task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskPriority"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskPriority",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TaskPriority"
        }
      ],
      "role": "symbol",
      "title": "TaskPriority",
      "type": "topic",
      "url": "/documentation/swift/taskpriority"
    },
    "doc://com.apple.Swift/documentation/Swift/ThrowingDiscardingTaskGroup": {
      "abstract": [
        {
          "text": "A throwing discarding group that contains dynamically created child tasks.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ThrowingDiscardingTaskGroup"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ThrowingDiscardingTaskGroup",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ThrowingDiscardingTaskGroup"
        }
      ],
      "role": "symbol",
      "title": "ThrowingDiscardingTaskGroup",
      "type": "topic",
      "url": "/documentation/swift/throwingdiscardingtaskgroup"
    },
    "doc://com.apple.Swift/documentation/Swift/ThrowingTaskGroup": {
      "abstract": [
        {
          "text": "A group that contains throwing, dynamically created child tasks.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChildTaskResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ChildTaskResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ChildTaskResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ThrowingTaskGroup"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ThrowingTaskGroup",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ThrowingTaskGroup"
        }
      ],
      "role": "symbol",
      "title": "ThrowingTaskGroup",
      "type": "topic",
      "url": "/documentation/swift/throwingtaskgroup"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt": {
      "abstract": [
        {
          "text": "An unsigned integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt"
        }
      ],
      "role": "symbol",
      "title": "UInt",
      "type": "topic",
      "url": "/documentation/swift/uint"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt.Words",
      "type": "topic",
      "url": "/documentation/swift/uint/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt128": {
      "abstract": [
        {
          "text": "A 128-bit unsigned integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt128"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt128",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt128"
        }
      ],
      "role": "symbol",
      "title": "UInt128",
      "type": "topic",
      "url": "/documentation/swift/uint128"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt128/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of a binary integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt128/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt128.Words",
      "type": "topic",
      "url": "/documentation/swift/uint128/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16": {
      "abstract": [
        {
          "text": "A 16-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt16"
        }
      ],
      "role": "symbol",
      "title": "UInt16",
      "type": "topic",
      "url": "/documentation/swift/uint16"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt16.Words",
      "type": "topic",
      "url": "/documentation/swift/uint16/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32": {
      "abstract": [
        {
          "text": "A 32-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt32"
        }
      ],
      "role": "symbol",
      "title": "UInt32",
      "type": "topic",
      "url": "/documentation/swift/uint32"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt32.Words",
      "type": "topic",
      "url": "/documentation/swift/uint32/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64": {
      "abstract": [
        {
          "text": "A 64-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt64"
        }
      ],
      "role": "symbol",
      "title": "UInt64",
      "type": "topic",
      "url": "/documentation/swift/uint64"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt64.Words",
      "type": "topic",
      "url": "/documentation/swift/uint64/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8": {
      "abstract": [
        {
          "text": "An 8-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt8"
        }
      ],
      "role": "symbol",
      "title": "UInt8",
      "type": "topic",
      "url": "/documentation/swift/uint8"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt8.Words",
      "type": "topic",
      "url": "/documentation/swift/uint8/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UnboundedRange_": {
      "abstract": [
        {
          "text": "A range expression that represents the entire range of a collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnboundedRange_"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnboundedRange_",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnboundedRange_"
        }
      ],
      "role": "symbol",
      "title": "UnboundedRange_",
      "type": "topic",
      "url": "/documentation/swift/unboundedrange_"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ASCII"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ASCII"
        }
      ],
      "role": "symbol",
      "title": "Unicode.ASCII",
      "type": "topic",
      "url": "/documentation/swift/unicode/ascii"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII/Parser": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Parser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII/Parser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Parser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.ASCII.Parser",
      "type": "topic",
      "url": "/documentation/swift/unicode/ascii/parser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory": {
      "abstract": [
        {
          "text": "The most general classification of a Unicode scalar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "GeneralCategory"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "GeneralCategory"
        }
      ],
      "role": "symbol",
      "title": "Unicode.GeneralCategory",
      "type": "topic",
      "url": "/documentation/swift/unicode/generalcategory"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType": {
      "abstract": [
        {
          "text": "The numeric type of a scalar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "NumericType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "NumericType"
        }
      ],
      "role": "symbol",
      "title": "Unicode.NumericType",
      "type": "topic",
      "url": "/documentation/swift/unicode/numerictype"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar": {
      "abstract": [
        {
          "text": "A Unicode scalar value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Scalar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Scalar"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF16View": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF16View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar.UTF16View",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar/utf16view"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF8View": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF8View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar.UTF8View",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar/utf8view"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF16",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf16"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ForwardParser": {
      "abstract": [
        {
          "text": "A type that can be used to parse ",
          "type": "text"
        },
        {
          "code": "CodeUnits",
          "type": "codeVoice"
        },
        {
          "text": " into",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "EncodedScalar",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ForwardParser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ForwardParser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ForwardParser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF16.ForwardParser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf16/forwardparser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ReverseParser": {
      "abstract": [
        {
          "text": "A type that can be used to parse a reversed sequence of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "CodeUnits",
          "type": "codeVoice"
        },
        {
          "text": " into ",
          "type": "text"
        },
        {
          "code": "EncodedScalar",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ReverseParser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ReverseParser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ReverseParser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF16.ReverseParser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf16/reverseparser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF32"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF32",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf32"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32/Parser": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Parser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32/Parser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Parser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF32.Parser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf32/parser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF8",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf8"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ForwardParser": {
      "abstract": [
        {
          "text": "A type that can be used to parse ",
          "type": "text"
        },
        {
          "code": "CodeUnits",
          "type": "codeVoice"
        },
        {
          "text": " into",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "EncodedScalar",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ForwardParser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ForwardParser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ForwardParser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF8.ForwardParser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf8/forwardparser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ReverseParser": {
      "abstract": [
        {
          "text": "A type that can be used to parse a reversed sequence of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "CodeUnits",
          "type": "codeVoice"
        },
        {
          "text": " into ",
          "type": "text"
        },
        {
          "code": "EncodedScalar",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ReverseParser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ReverseParser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ReverseParser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF8.ReverseParser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf8/reverseparser"
    },
    "doc://com.apple.Swift/documentation/Swift/UnicodeDecodingResult": {
      "abstract": [
        {
          "text": "The result of one Unicode decoding step.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnicodeDecodingResult"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnicodeDecodingResult",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnicodeDecodingResult"
        }
      ],
      "role": "symbol",
      "title": "UnicodeDecodingResult",
      "type": "topic",
      "url": "/documentation/swift/unicodedecodingresult"
    },
    "doc://com.apple.Swift/documentation/Swift/Unmanaged": {
      "abstract": [
        {
          "text": "A type for propagating an unmanaged object reference.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Instance",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Unmanaged"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unmanaged",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Unmanaged"
        }
      ],
      "role": "symbol",
      "title": "Unmanaged",
      "type": "topic",
      "url": "/documentation/swift/unmanaged"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedJob": {
      "abstract": [
        {
          "text": "A unit of schedulable work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedJob"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedJob",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedJob"
        }
      ],
      "role": "symbol",
      "title": "UnownedJob",
      "type": "topic",
      "url": "/documentation/swift/unownedjob"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor": {
      "abstract": [
        {
          "text": "An unowned reference to a serial executor (a ",
          "type": "text"
        },
        {
          "code": "SerialExecutor",
          "type": "codeVoice"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedSerialExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedSerialExecutor"
        }
      ],
      "role": "symbol",
      "title": "UnownedSerialExecutor",
      "type": "topic",
      "url": "/documentation/swift/unownedserialexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedTaskExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedTaskExecutor"
        }
      ],
      "role": "symbol",
      "title": "UnownedTaskExecutor",
      "type": "topic",
      "url": "/documentation/swift/unownedtaskexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer": {
      "abstract": [
        {
          "text": "A nonowning collection interface to a buffer of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements stored contiguously in memory.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafebufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer/Iterator": {
      "abstract": [
        {
          "text": "An iterator for the elements in the buffer referenced by an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "UnsafeBufferPointer",
          "type": "codeVoice"
        },
        {
          "text": " or ",
          "type": "text"
        },
        {
          "code": "UnsafeMutableBufferPointer",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "UnsafeBufferPointer.Iterator",
      "type": "topic",
      "url": "/documentation/swift/unsafebufferpointer/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeContinuation": {
      "abstract": [
        {
          "text": "A mechanism to interface",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "between synchronous and asynchronous code,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "without correctness checking.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "T",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "T",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "E",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeContinuation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeContinuation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeContinuation"
        }
      ],
      "role": "symbol",
      "title": "UnsafeContinuation",
      "type": "topic",
      "url": "/documentation/swift/unsafecontinuation"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeCurrentTask": {
      "abstract": [
        {
          "text": "An unsafe reference to the current task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeCurrentTask"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeCurrentTask",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeCurrentTask"
        }
      ],
      "role": "symbol",
      "title": "UnsafeCurrentTask",
      "type": "topic",
      "url": "/documentation/swift/unsafecurrenttask"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer": {
      "abstract": [
        {
          "text": "A nonowning collection interface to a buffer of mutable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements stored contiguously in memory.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablebufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing and manipulating data of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "specific type.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawBufferPointer": {
      "abstract": [
        {
          "text": "A mutable nonowning collection interface to the bytes in a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "region of memory.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableRawBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablerawbufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer": {
      "abstract": [
        {
          "text": "A raw pointer for accessing and manipulating untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableRawPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablerawpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing data of a specific type.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer": {
      "abstract": [
        {
          "text": "A  nonowning collection interface to the bytes in a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "region of memory.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeRawBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeRawBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeRawBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsaferawbufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the bytes viewed by a raw buffer pointer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "UnsafeRawBufferPointer.Iterator",
      "type": "topic",
      "url": "/documentation/swift/unsaferawbufferpointer/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer": {
      "abstract": [
        {
          "text": "A raw pointer for accessing untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeRawPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeRawPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeRawPointer",
      "type": "topic",
      "url": "/documentation/swift/unsaferawpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/Zip2Sequence": {
      "abstract": [
        {
          "text": "A sequence of pairs built out of two underlying sequences.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Sequence1",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sequence2",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Zip2Sequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Zip2Sequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Zip2Sequence"
        }
      ],
      "role": "symbol",
      "title": "Zip2Sequence",
      "type": "topic",
      "url": "/documentation/swift/zip2sequence"
    },
    "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator for ",
          "type": "text"
        },
        {
          "code": "Zip2Sequence",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Sequence1",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sequence2",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Zip2Sequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/zip2sequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic load operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicLoadOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicLoadOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicLoadOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicloadordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic store operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicStoreOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicStoreOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicStoreOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicstoreordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic read-modify-write",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicUpdateOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicUpdateOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicUpdateOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicupdateordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/WordPair": {
      "abstract": [
        {
          "text": "A pair of two word sized ",
          "type": "text"
        },
        {
          "code": "UInt",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/WordPair",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "role": "symbol",
      "title": "WordPair",
      "type": "topic",
      "url": "/documentation/synchronization/wordpair"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/RegexBuilder/Anchor",
        "doc://com.apple.Swift/documentation/Swift/AnyBidirectionalCollection",
        "doc://com.apple.Swift/documentation/Swift/AnyCollection",
        "doc://com.apple.Swift/documentation/Swift/AnyHashable",
        "doc://com.apple.Swift/documentation/Swift/AnyIndex",
        "doc://com.apple.Swift/documentation/Swift/AnyIterator",
        "doc://com.apple.Swift/documentation/Swift/AnyKeyPath",
        "doc://com.apple.Swift/documentation/Swift/AnyRandomAccessCollection",
        "doc://com.apple.Swift/documentation/Swift/AnyRegexOutput",
        "doc://com.apple.Swift/documentation/Swift/AnySequence",
        "doc://com.apple.Swift/documentation/Swift/Array",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice",
        "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering",
        "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer",
        "doc://com.apple.Swift/documentation/Swift/Bool",
        "doc://com.apple.Swift/documentation/Swift/CVaListPointer",
        "doc://com.apple.Swift/documentation/RegexBuilder/Capture",
        "doc://com.apple.Swift/documentation/Swift/Character",
        "doc://com.apple.Swift/documentation/RegexBuilder/CharacterClass",
        "doc://com.apple.Swift/documentation/RegexBuilder/ChoiceOf",
        "doc://com.apple.Swift/documentation/Swift/ClosedRange",
        "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index",
        "doc://com.apple.Swift/documentation/Swift/CollectionOfOne",
        "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator",
        "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
        "doc://com.apple.Swift/documentation/Swift/ContinuousClock",
        "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant",
        "doc://com.apple.Swift/documentation/Swift/DecodingError",
        "doc://com.apple.Swift/documentation/Swift/DefaultIndices",
        "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation",
        "doc://com.apple.Swift/documentation/Swift/Dictionary",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Index",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/DiscardingTaskGroup",
        "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice",
        "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index",
        "doc://com.apple.Swift/documentation/Swift/Double",
        "doc://com.apple.Swift/documentation/Swift/DropFirstSequence",
        "doc://com.apple.Swift/documentation/Swift/DropWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Duration",
        "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle",
        "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/EmptyCollection",
        "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator",
        "doc://com.apple.Swift/documentation/Swift/EncodingError",
        "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence",
        "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator",
        "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError/ErrorCode-swift.enum",
        "doc://com.apple.Swift/documentation/Swift/FlattenSequence",
        "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index",
        "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Float",
        "doc://com.apple.Swift/documentation/Swift/Float16",
        "doc://com.apple.Swift/documentation/Swift/Float80",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointSign",
        "doc://com.apple.Swift/documentation/Swift/Hasher",
        "doc://com.apple.Swift/documentation/Swift/IndexingIterator",
        "doc://com.apple.Swift/documentation/Swift/Int",
        "doc://com.apple.Swift/documentation/Swift/Int/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Int128",
        "doc://com.apple.Swift/documentation/Swift/Int16",
        "doc://com.apple.Swift/documentation/Swift/Int16/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Int32",
        "doc://com.apple.Swift/documentation/Swift/Int32/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Int64",
        "doc://com.apple.Swift/documentation/Swift/Int64/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Int8",
        "doc://com.apple.Swift/documentation/Swift/Int8/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/IteratorSequence",
        "doc://com.apple.Swift/documentation/Swift/JobPriority",
        "doc://com.apple.Swift/documentation/Swift/JoinedSequence",
        "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/KeyValuePairs",
        "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/LazyDropWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence",
        "doc://com.apple.Swift/documentation/Swift/LazyFilterSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/LazyMapSequence",
        "doc://com.apple.Swift/documentation/Swift/LazyMapSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index",
        "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/LazySequence",
        "doc://com.apple.Swift/documentation/RegexBuilder/Local",
        "doc://com.apple.Swift/documentation/RegexBuilder/Lookahead",
        "doc://com.apple.Swift/documentation/Swift/ManagedBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/Mirror",
        "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum",
        "doc://com.apple.Swift/documentation/RegexBuilder/NegativeLookahead",
        "doc://com.apple.Swift/documentation/Swift/Never",
        "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
        "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar",
        "doc://com.apple.Swift/documentation/RegexBuilder/OneOrMore",
        "doc://com.apple.Swift/documentation/Swift/OpaquePointer",
        "doc://com.apple.Swift/documentation/Swift/Optional",
        "doc://com.apple.Swift/documentation/Swift/Optional/Publisher-swift.struct",
        "doc://com.apple.Swift/documentation/RegexBuilder/Optionally",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo",
        "doc://com.apple.Swift/documentation/Swift/PrefixSequence",
        "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Range",
        "doc://com.apple.Swift/documentation/Swift/RangeSet",
        "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct",
        "doc://com.apple.Swift/documentation/RegexBuilder/Repeat",
        "doc://com.apple.Swift/documentation/Swift/Repeated",
        "doc://com.apple.Swift/documentation/Swift/Result",
        "doc://com.apple.Swift/documentation/Swift/Result/Publisher-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/ReversedCollection",
        "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index",
        "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator",
        "doc://com.apple.Swift/documentation/Swift/SIMD16",
        "doc://com.apple.Swift/documentation/Swift/SIMD2",
        "doc://com.apple.Swift/documentation/Swift/SIMD3",
        "doc://com.apple.Swift/documentation/Swift/SIMD32",
        "doc://com.apple.Swift/documentation/Swift/SIMD4",
        "doc://com.apple.Swift/documentation/Swift/SIMD64",
        "doc://com.apple.Swift/documentation/Swift/SIMD8",
        "doc://com.apple.Swift/documentation/Swift/Set",
        "doc://com.apple.Swift/documentation/Swift/Set/Index",
        "doc://com.apple.Swift/documentation/Swift/Set/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Slice",
        "doc://com.apple.Swift/documentation/Swift/StaticBigInt",
        "doc://com.apple.Swift/documentation/Swift/StaticString",
        "doc://com.apple.Swift/documentation/Swift/StrideThrough",
        "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator",
        "doc://com.apple.Swift/documentation/Swift/StrideTo",
        "doc://com.apple.Swift/documentation/Swift/StrideToIterator",
        "doc://com.apple.Swift/documentation/Swift/String",
        "doc://com.apple.Swift/documentation/Swift/String/Encoding",
        "doc://com.apple.Swift/documentation/Swift/String/Index",
        "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/CapitalizationType-swift.enum",
        "doc://com.apple.Swift/documentation/Swift/String/IntentInputOptions/KeyboardType-swift.enum",
        "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue",
        "doc://com.apple.Swift/documentation/Swift/String/UTF16View",
        "doc://com.apple.Swift/documentation/Swift/String/UTF8View",
        "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView",
        "doc://com.apple.Swift/documentation/Swift/Substring",
        "doc://com.apple.Swift/documentation/Swift/Substring/UTF16View",
        "doc://com.apple.Swift/documentation/Swift/Substring/UTF8View",
        "doc://com.apple.Swift/documentation/Swift/Substring/UnicodeScalarView",
        "doc://com.apple.Swift/documentation/Swift/SuspendingClock",
        "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant",
        "doc://com.apple.Swift/documentation/Swift/SystemRandomNumberGenerator",
        "doc://com.apple.Swift/documentation/Swift/Task",
        "doc://com.apple.Swift/documentation/Swift/TaskGroup",
        "doc://com.apple.Swift/documentation/Swift/TaskPriority",
        "doc://com.apple.Swift/documentation/Swift/ThrowingDiscardingTaskGroup",
        "doc://com.apple.Swift/documentation/Swift/ThrowingTaskGroup",
        "doc://com.apple.Swift/documentation/RegexBuilder/TryCapture",
        "doc://com.apple.Swift/documentation/Swift/UInt",
        "doc://com.apple.Swift/documentation/Swift/UInt/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt128",
        "doc://com.apple.Swift/documentation/Swift/UInt128/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt16",
        "doc://com.apple.Swift/documentation/Swift/UInt16/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt32",
        "doc://com.apple.Swift/documentation/Swift/UInt32/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt64",
        "doc://com.apple.Swift/documentation/Swift/UInt64/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt8",
        "doc://com.apple.Swift/documentation/Swift/UInt8/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UnboundedRange_",
        "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII",
        "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII/Parser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory",
        "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF16View",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF8View",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ForwardParser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ReverseParser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32/Parser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ForwardParser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ReverseParser",
        "doc://com.apple.Swift/documentation/Swift/UnicodeDecodingResult",
        "doc://com.apple.Swift/documentation/Swift/Unmanaged",
        "doc://com.apple.Swift/documentation/Swift/UnownedJob",
        "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor",
        "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor",
        "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer/Iterator",
        "doc://com.apple.Swift/documentation/Swift/UnsafeContinuation",
        "doc://com.apple.Swift/documentation/Swift/UnsafeCurrentTask",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer/Iterator",
        "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer",
        "doc://com.apple.Swift/documentation/Synchronization/WordPair",
        "doc://com.apple.Swift/documentation/RegexBuilder/ZeroOrMore",
        "doc://com.apple.Swift/documentation/Swift/Zip2Sequence",
        "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Copying",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable"
      ],
      "title": "Copying"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/copyable"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
