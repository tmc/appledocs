{"seeAlsoSections":[{"generated":true,"anchor":"Converting-a-Throwing-Expression-to-a-Result","title":"Converting a Throwing Expression to a Result","identifiers":["doc://com.apple.Swift/documentation/Swift/Result/init(catching:)"]}],"metadata":{"role":"article","roleHeading":"Article","title":"Preserving the Results of a Throwing Expression","modules":[{"name":"Swift"}]},"abstract":[{"text":"Call the initializer that wraps a throwing expression when you need to serialize","type":"text"},{"text":" ","type":"text"},{"text":"or memoize the result.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc://com.apple.Swift/documentation/Swift/preserving-the-results-of-a-throwing-expression"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc://com.apple.documentation/documentation/technologies","doc://com.apple.Swift/documentation/Swift","doc://com.apple.Swift/documentation/Swift/swift-standard-library","doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values","doc://com.apple.Swift/documentation/Swift/Result"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes you need to preserve the entire result of a function call or other expression"},{"text":" ","type":"text"},{"type":"text","text":"that can either throw or return a value. For example, you may need to serialize the"},{"type":"text","text":" "},{"type":"text","text":"result or pass it as a value to another part of your app that handles the result"},{"type":"text","text":" "},{"type":"text","text":"data. Use the "},{"identifier":"doc://com.apple.Swift/documentation/Swift/Result","type":"reference","isActive":true},{"type":"text","text":" type in these scenarios to capture the result of a"},{"type":"text","text":" "},{"type":"text","text":"potentially failing operation."}]},{"text":"Identify a Throwing Expression to Preserve","anchor":"Identify-a-Throwing-Expression-to-Preserve","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Typically, you use ","type":"text"},{"type":"codeVoice","code":"do-catch"},{"type":"text","text":" statements to handle throwing expressions immediately,"},{"type":"text","text":" "},{"type":"text","text":"but sometimes you need to store the whole result of the operation for later processing"},{"type":"text","text":" "},{"type":"text","text":"during tasks like analyzing a batch of calls. The following example introduces an"},{"type":"text","text":" "},{"type":"text","text":"API that generates random numbers, but that fails approximately half of the time."}]},{"code":["enum EntropyError: Error {","    case entropyDepleted","}","","struct UnreliableRandomGenerator {","    func random() throws -> Int {","        if Bool.random() {","            return Int.random(in: 1...100)","        } else {","            throw EntropyError.entropyDepleted","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Convert the Throwing Expression to a Result","anchor":"Convert-the-Throwing-Expression-to-a-Result","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You preserve the return value or thrown error from a throwing expression using the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc://com.apple.Swift/documentation/Swift/Result"},{"type":"text","text":" enumerationâ€™s "},{"isActive":true,"type":"reference","identifier":"doc://com.apple.Swift/documentation/Swift/Result/init(catching:)"},{"type":"text","text":" initializer. Invoke"},{"type":"text","text":" "},{"type":"text","text":"the throwing expression inside the closure you pass to the initializer:"}]},{"code":["let singleSample = Result { try UnreliableRandomGenerator().random() }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In most scenarios, you use the preserved result as part of broader functionality","type":"text"},{"text":" ","type":"text"},{"text":"in your code. For example, you may run a series of randomness tests and compute the","type":"text"},{"text":" ","type":"text"},{"text":"statistical average of both a range of numbers returned from a random number generator,","type":"text"},{"text":" ","type":"text"},{"text":"as well as the failure rate of calling the API. In these cases, you need to store","type":"text"},{"text":" ","type":"text"},{"text":"the whole result rather than just the success value or that the API call failed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example uses the "},{"isActive":true,"type":"reference","identifier":"doc://com.apple.Swift/documentation/Swift/Result/init(catching:)"},{"type":"text","text":" initializer in the"},{"type":"text","text":" "},{"type":"text","text":"broader context of saving a series of calls for later statistical analysis:"}]},{"code":["struct RandomnessMonitor {","    let randomnessSource: UnreliableRandomGenerator","    var results: [Result<Int, Error>] = []","","    init(generator: UnreliableRandomGenerator) {","        randomnessSource = generator","    }","","    mutating func sample() {","        let sample = Result { try randomnessSource.random() }","        results.append(sample)","    }","","    func summary() -> (Double, Double) {","        let totals = results.reduce((sum: 0, count: 0)) { total, sample in","            switch sample {","            case .success(let number):","                return (total.sum + number, total.count)","            case .failure:","                return (total.sum, total.count + 1)","            }","        }","","        return (","            average: Double(totals.sum) / Double(results.count - totals.count),","            failureRate: Double(totals.count) / Double(results.count)","        )","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Running the analysis on a sufficiently large sample generates an average number near"},{"type":"text","text":" "},{"type":"text","text":"50 and a failure rate near 50%:"}]},{"code":["var monitor = RandomnessMonitor(generator: UnreliableRandomGenerator())","(0..<1000).forEach { _ in monitor.sample() }","let (average, failureRate) = monitor.summary()","print(\"Average value: \\(average), failure rate: \\(failureRate * 100.0)%.\")","// Prints values such as: \"Average value: 47.95, failure rate: 48.69%.\""],"type":"codeListing","syntax":"swift"}]}],"sections":[],"kind":"article","references":{"doc://com.apple.Swift/documentation/Swift/Result/init(catching:)":{"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Failure"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}]},"title":"init(catching:)","url":"/documentation/swift/result/init(catching:)","identifier":"doc://com.apple.Swift/documentation/Swift/Result/init(catching:)","kind":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"catching"},{"kind":"text","text":": () "},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":")"}],"abstract":[{"text":"Creates a new result by evaluating a throwing closure, capturing the","type":"text"},{"text":" ","type":"text"},{"text":"returned value as a success, or any thrown error as a failure.","type":"text"}]},"doc://com.apple.Swift/documentation/Swift":{"abstract":[{"text":"Build apps using a powerful open language.","type":"text"}],"type":"topic","role":"collection","title":"Swift","identifier":"doc://com.apple.Swift/documentation/Swift","url":"/documentation/swift","kind":"symbol","images":[{"identifier":"Swift-PageImage-card.png","type":"card"}]},"doc://com.apple.Swift/documentation/Swift/Result":{"identifier":"doc://com.apple.Swift/documentation/Swift/Result","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Result"}],"title":"Result","url":"/documentation/swift/result","abstract":[{"type":"text","text":"A value that represents either a success or a failure, including an"},{"type":"text","text":" "},{"type":"text","text":"associated value in each case."}],"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Result"}],"type":"topic"},"doc://com.apple.documentation/documentation/technologies":{"abstract":[{"text":"","type":"text"}],"type":"topic","role":"overview","title":"Technologies","identifier":"doc://com.apple.documentation/documentation/technologies","url":"/documentation/technologies","kind":"technologies"},"Swift-PageImage-card.png":{"identifier":"Swift-PageImage-card.png","variants":[{"url":"https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png","traits":["2x","light"]},{"url":"https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":"An orange Swift logo on a gradient background."},"doc://com.apple.Swift/documentation/Swift/swift-standard-library":{"abstract":[{"type":"text","text":"Solve complex problems and write high-performance, readable code."}],"type":"topic","role":"collectionGroup","title":"Swift Standard Library","identifier":"doc://com.apple.Swift/documentation/Swift/swift-standard-library","url":"/documentation/swift/swift-standard-library","kind":"article"},"doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values":{"title":"Numbers and Basic Values","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Model data with numbers, Boolean values, and other fundamental types."}],"type":"topic","url":"/documentation/swift/numbers-and-basic-values","identifier":"doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values"}},"legalNotices":{"copyright":"Copyright &copy; 2025 Apple Inc. All rights reserved.","termsOfUse":"https://www.apple.com/legal/internet-services/terms/site.html","privacyPolicy":"https://www.apple.com/privacy/privacy-policy"}}