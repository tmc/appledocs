{
  "abstract": [
    {
      "text": "Call the initializer that wraps a throwing expression when you need to serialize",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "or memoize the result.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift",
        "doc://com.apple.Swift/documentation/Swift/swift-standard-library",
        "doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values",
        "doc://com.apple.Swift/documentation/Swift/Result"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/preserving-the-results-of-a-throwing-expression"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Preserving the Results of a Throwing Expression"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Sometimes you need to preserve the entire result of a function call or other expression",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that can either throw or return a value. For example, you may need to serialize the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "result or pass it as a value to another part of your app that handles the result",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "data. Use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Result",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " type in these scenarios to capture the result of a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "potentially failing operation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Identify-a-Throwing-Expression-to-Preserve",
          "level": 3,
          "text": "Identify a Throwing Expression to Preserve",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Typically, you use ",
              "type": "text"
            },
            {
              "code": "do-catch",
              "type": "codeVoice"
            },
            {
              "text": " statements to handle throwing expressions immediately,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "but sometimes you need to store the whole result of the operation for later processing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "during tasks like analyzing a batch of calls. The following example introduces an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "API that generates random numbers, but that fails approximately half of the time.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum EntropyError: Error {",
            "    case entropyDepleted",
            "}",
            "",
            "struct UnreliableRandomGenerator {",
            "    func random() throws -> Int {",
            "        if Bool.random() {",
            "            return Int.random(in: 1...100)",
            "        } else {",
            "            throw EntropyError.entropyDepleted",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Convert-the-Throwing-Expression-to-a-Result",
          "level": 3,
          "text": "Convert the Throwing Expression to a Result",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You preserve the return value or thrown error from a throwing expression using the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Result",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " enumerationâ€™s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Result/init(catching:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " initializer. Invoke",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the throwing expression inside the closure you pass to the initializer:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let singleSample = Result { try UnreliableRandomGenerator().random() }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In most scenarios, you use the preserved result as part of broader functionality",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in your code. For example, you may run a series of randomness tests and compute the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "statistical average of both a range of numbers returned from a random number generator,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as well as the failure rate of calling the API. In these cases, you need to store",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the whole result rather than just the success value or that the API call failed.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following example uses the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Result/init(catching:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " initializer in the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "broader context of saving a series of calls for later statistical analysis:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct RandomnessMonitor {",
            "    let randomnessSource: UnreliableRandomGenerator",
            "    var results: [Result<Int, Error>] = []",
            "",
            "    init(generator: UnreliableRandomGenerator) {",
            "        randomnessSource = generator",
            "    }",
            "",
            "    mutating func sample() {",
            "        let sample = Result { try randomnessSource.random() }",
            "        results.append(sample)",
            "    }",
            "",
            "    func summary() -> (Double, Double) {",
            "        let totals = results.reduce((sum: 0, count: 0)) { total, sample in",
            "            switch sample {",
            "            case .success(let number):",
            "                return (total.sum + number, total.count)",
            "            case .failure:",
            "                return (total.sum, total.count + 1)",
            "            }",
            "        }",
            "",
            "        return (",
            "            average: Double(totals.sum) / Double(results.count - totals.count),",
            "            failureRate: Double(totals.count) / Double(results.count)",
            "        )",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Running the analysis on a sufficiently large sample generates an average number near",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "50 and a failure rate near 50%:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var monitor = RandomnessMonitor(generator: UnreliableRandomGenerator())",
            "(0..<1000).forEach { _ in monitor.sample() }",
            "let (average, failureRate) = monitor.summary()",
            "print(\"Average value: \\(average), failure rate: \\(failureRate * 100.0)%.\")",
            "// Prints values such as: \"Average value: 47.95, failure rate: 48.69%.\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/Result": {
      "abstract": [
        {
          "text": "A value that represents either a success or a failure, including an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "associated value in each case.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "role": "symbol",
      "title": "Result",
      "type": "topic",
      "url": "/documentation/swift/result"
    },
    "doc://com.apple.Swift/documentation/Swift/Result/init(catching:)": {
      "abstract": [
        {
          "text": "Creates a new result by evaluating a throwing closure, capturing the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "returned value as a success, or any thrown error as a failure.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "catching"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result/init(catching:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(catching:)",
      "type": "topic",
      "url": "/documentation/swift/result/init(catching:)"
    },
    "doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values": {
      "abstract": [
        {
          "text": "Model data with numbers, Boolean values, and other fundamental types.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/numbers-and-basic-values",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Numbers and Basic Values",
      "type": "topic",
      "url": "/documentation/swift/numbers-and-basic-values"
    },
    "doc://com.apple.Swift/documentation/Swift/swift-standard-library": {
      "abstract": [
        {
          "text": "Solve complex problems and write high-performance, readable code.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/swift-standard-library",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Swift Standard Library",
      "type": "topic",
      "url": "/documentation/swift/swift-standard-library"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Converting-a-Throwing-Expression-to-a-Result",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Result/init(catching:)"
      ],
      "title": "Converting a Throwing Expression to a Result"
    }
  ]
}
