{
  "abstract": [
    {
      "text": "A pointer for accessing data of a specific type.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    },
    "minor": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.2",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/UnsafePointer"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:SP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "UnsafePointer"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "UnsafePointer"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "UnsafePointer"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "UnsafePointer"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Pointee"
            },
            {
              "kind": "text",
              "text": "> "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "Pointee"
            },
            {
              "kind": "text",
              "text": " : ~Copyable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "mentions",
      "mentions": [
        "doc://com.apple.Swift/documentation/Swift/using-imported-c-functions-in-swift"
      ]
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You use instances of the ",
              "type": "text"
            },
            {
              "code": "UnsafePointer",
              "type": "codeVoice"
            },
            {
              "text": " type to access data of a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "specific type in memory. The type of data that a pointer can access is the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointer’s ",
              "type": "text"
            },
            {
              "code": "Pointee",
              "type": "codeVoice"
            },
            {
              "text": " type. ",
              "type": "text"
            },
            {
              "code": "UnsafePointer",
              "type": "codeVoice"
            },
            {
              "text": " provides no automated",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "memory management or alignment guarantees. You are responsible for",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "handling the life cycle of any memory you work with through unsafe",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointers to avoid leaks or undefined behavior.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Memory that you manually manage can be either ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "untyped",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "bound",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " to a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "specific type. You use the ",
              "type": "text"
            },
            {
              "code": "UnsafePointer",
              "type": "codeVoice"
            },
            {
              "text": " type to access and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "manage memory that has been bound to a specific type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Understanding-a-Pointers-Memory-State",
          "level": 1,
          "text": "Understanding a Pointer’s Memory State",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The memory referenced by an ",
              "type": "text"
            },
            {
              "code": "UnsafePointer",
              "type": "codeVoice"
            },
            {
              "text": " instance can be in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "one of several states. Many pointer operations must only be applied to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointers with memory in a specific state—you must keep track of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "state of the memory you are working with and understand the changes to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that state that different operations perform. Memory can be untyped and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "uninitialized, bound to a type and uninitialized, or bound to a type and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initialized to a value. Finally, memory that was allocated previously may",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "have been deallocated, leaving existing pointers referencing unallocated",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "memory.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Uninitialized-Memory",
          "level": 2,
          "text": "Uninitialized Memory",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Memory that has just been allocated through a typed pointer or has been",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "deinitialized is in an ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "uninitialized",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " state. Uninitialized memory must be",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initialized before it can be accessed for reading.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Initialized-Memory",
          "level": 2,
          "text": "Initialized Memory",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "inlineContent": [
                {
                  "text": "Initialized",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " memory has a value that can be read using a pointer’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "pointee",
              "type": "codeVoice"
            },
            {
              "text": " property or through subscript notation. In the following",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example, ",
              "type": "text"
            },
            {
              "code": "ptr",
              "type": "codeVoice"
            },
            {
              "text": " is a pointer to memory initialized with a value of ",
              "type": "text"
            },
            {
              "code": "23",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let ptr: UnsafePointer<Int> = ...",
            "// ptr.pointee == 23",
            "// ptr[0] == 23"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Accessing-a-Pointers-Memory-as-a-Different-Type",
          "level": 1,
          "text": "Accessing a Pointer’s Memory as a Different Type",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you access memory through an ",
              "type": "text"
            },
            {
              "code": "UnsafePointer",
              "type": "codeVoice"
            },
            {
              "text": " instance, the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Pointee",
              "type": "codeVoice"
            },
            {
              "text": " type must be consistent with the bound type of the memory. If",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you do need to access memory that is bound to one type as a different",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type, Swift’s pointer types provide type-safe ways to temporarily or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "permanently change the bound type of the memory, or to load typed",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instances directly from raw memory.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "An ",
              "type": "text"
            },
            {
              "code": "UnsafePointer<UInt8>",
              "type": "codeVoice"
            },
            {
              "text": " instance allocated with eight bytes of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "memory, ",
              "type": "text"
            },
            {
              "code": "uint8Pointer",
              "type": "codeVoice"
            },
            {
              "text": ", will be used for the examples below.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let uint8Pointer: UnsafePointer<UInt8> = fetchEightBytes()"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When you only need to temporarily access a pointer’s memory as a different",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type, use the ",
              "type": "text"
            },
            {
              "code": "withMemoryRebound(to:capacity:)",
              "type": "codeVoice"
            },
            {
              "text": " method. For example, you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can use this method to call an API that expects a pointer to a different",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type that is layout compatible with your pointer’s ",
              "type": "text"
            },
            {
              "code": "Pointee",
              "type": "codeVoice"
            },
            {
              "text": ". The following",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "code temporarily rebinds the memory that ",
              "type": "text"
            },
            {
              "code": "uint8Pointer",
              "type": "codeVoice"
            },
            {
              "text": " references from",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "UInt8",
              "type": "codeVoice"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "code": "Int8",
              "type": "codeVoice"
            },
            {
              "text": " to call the imported C ",
              "type": "text"
            },
            {
              "code": "strlen",
              "type": "codeVoice"
            },
            {
              "text": " function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Imported from C",
            "func strlen(_ __s: UnsafePointer<Int8>!) -> UInt",
            "",
            "let length = uint8Pointer.withMemoryRebound(to: Int8.self, capacity: 8) {",
            "    return strlen($0)",
            "}",
            "// length == 7"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When you need to permanently rebind memory to a different type, first",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "obtain a raw pointer to the memory and then call the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "bindMemory(to:capacity:)",
              "type": "codeVoice"
            },
            {
              "text": " method on the raw pointer. The following",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example binds the memory referenced by ",
              "type": "text"
            },
            {
              "code": "uint8Pointer",
              "type": "codeVoice"
            },
            {
              "text": " to one instance of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the ",
              "type": "text"
            },
            {
              "code": "UInt64",
              "type": "codeVoice"
            },
            {
              "text": " type:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let uint64Pointer = UnsafeRawPointer(uint8Pointer)",
            "                          .bindMemory(to: UInt64.self, capacity: 1)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "After rebinding the memory referenced by ",
              "type": "text"
            },
            {
              "code": "uint8Pointer",
              "type": "codeVoice"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "code": "UInt64",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "accessing that pointer’s referenced memory as a ",
              "type": "text"
            },
            {
              "code": "UInt8",
              "type": "codeVoice"
            },
            {
              "text": " instance is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "undefined.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var fullInteger = uint64Pointer.pointee          // OK",
            "var firstByte = uint8Pointer.pointee             // undefined"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, you can access the same memory as a different type without",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "rebinding through untyped memory access, so long as the bound type and the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "destination type are trivial types. Convert your pointer to an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "UnsafeRawPointer",
              "type": "codeVoice"
            },
            {
              "text": " instance and then use the raw pointer’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "load(fromByteOffset:as:)",
              "type": "codeVoice"
            },
            {
              "text": " method to read values.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let rawPointer = UnsafeRawPointer(uint64Pointer)",
            "let fullInteger = rawPointer.load(as: UInt64.self)   // OK",
            "let firstByte = rawPointer.load(as: UInt8.self)      // OK"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Performing-Typed-Pointer-Arithmetic",
          "level": 1,
          "text": "Performing Typed Pointer Arithmetic",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Pointer arithmetic with a typed pointer is counted in strides of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointer’s ",
              "type": "text"
            },
            {
              "code": "Pointee",
              "type": "codeVoice"
            },
            {
              "text": " type. When you add to or subtract from an ",
              "type": "text"
            },
            {
              "code": "UnsafePointer",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance, the result is a new pointer of the same type, offset by that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "number of instances of the ",
              "type": "text"
            },
            {
              "code": "Pointee",
              "type": "codeVoice"
            },
            {
              "text": " type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// 'intPointer' points to memory initialized with [10, 20, 30, 40]",
            "let intPointer: UnsafePointer<Int> = ...",
            "",
            "// Load the first value in memory",
            "let x = intPointer.pointee",
            "// x == 10",
            "",
            "// Load the third value in memory",
            "let offsetPointer = intPointer + 2",
            "let y = offsetPointer.pointee",
            "// y == 30"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can also use subscript notation to access the value in memory at a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "specific offset.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let z = intPointer[2]",
            "// z == 30"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Implicit-Casting-and-Bridging",
          "level": 1,
          "text": "Implicit Casting and Bridging",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When calling a function or method with an ",
              "type": "text"
            },
            {
              "code": "UnsafePointer",
              "type": "codeVoice"
            },
            {
              "text": " parameter, you can pass",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an instance of that specific pointer type, pass an instance of a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "compatible pointer type, or use Swift’s implicit bridging to pass a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "compatible pointer.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, the ",
              "type": "text"
            },
            {
              "code": "printInt(atAddress:)",
              "type": "codeVoice"
            },
            {
              "text": " function in the following code",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "sample expects an ",
              "type": "text"
            },
            {
              "code": "UnsafePointer<Int>",
              "type": "codeVoice"
            },
            {
              "text": " instance as its first parameter:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func printInt(atAddress p: UnsafePointer<Int>) {",
            "    print(p.pointee)",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "As is typical in Swift, you can call the ",
              "type": "text"
            },
            {
              "code": "printInt(atAddress:)",
              "type": "codeVoice"
            },
            {
              "text": " function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with an ",
              "type": "text"
            },
            {
              "code": "UnsafePointer",
              "type": "codeVoice"
            },
            {
              "text": " instance. This example passes ",
              "type": "text"
            },
            {
              "code": "intPointer",
              "type": "codeVoice"
            },
            {
              "text": ", a pointer to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": " value, to ",
              "type": "text"
            },
            {
              "code": "print(address:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "printInt(atAddress: intPointer)",
            "// Prints \"42\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Because a mutable typed pointer can be implicitly cast to an immutable",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointer with the same ",
              "type": "text"
            },
            {
              "code": "Pointee",
              "type": "codeVoice"
            },
            {
              "text": " type when passed as a parameter, you can",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "also call ",
              "type": "text"
            },
            {
              "code": "printInt(atAddress:)",
              "type": "codeVoice"
            },
            {
              "text": " with an ",
              "type": "text"
            },
            {
              "code": "UnsafeMutablePointer",
              "type": "codeVoice"
            },
            {
              "text": " instance.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let mutableIntPointer = UnsafeMutablePointer(mutating: intPointer)",
            "printInt(atAddress: mutableIntPointer)",
            "// Prints \"42\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, you can use Swift’s ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "implicit bridging",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " to pass a pointer to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an instance or to the elements of an array. The following example passes a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointer to the ",
              "type": "text"
            },
            {
              "code": "value",
              "type": "codeVoice"
            },
            {
              "text": " variable by using inout syntax:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var value: Int = 23",
            "printInt(atAddress: &value)",
            "// Prints \"23\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "An immutable pointer to the elements of an array is implicitly created when",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you pass the array as an argument. This example uses implicit bridging to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pass a pointer to the elements of ",
              "type": "text"
            },
            {
              "code": "numbers",
              "type": "codeVoice"
            },
            {
              "text": " when calling",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "printInt(atAddress:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let numbers = [5, 10, 15, 20]",
            "printInt(atAddress: numbers)",
            "// Prints \"5\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can also use inout syntax to pass a mutable pointer to the elements of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an array. Because ",
              "type": "text"
            },
            {
              "code": "printInt(atAddress:)",
              "type": "codeVoice"
            },
            {
              "text": " requires an immutable pointer,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "although this is syntactically valid, it isn’t necessary.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var mutableNumbers = numbers",
            "printInt(atAddress: &mutableNumbers)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "No matter which way you call ",
              "type": "text"
            },
            {
              "code": "printInt(atAddress:)",
              "type": "codeVoice"
            },
            {
              "text": ", Swift’s type safety",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "guarantees that you can only pass a pointer to the type required by the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function—in this case, a pointer to an ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The pointer created through implicit bridging of an instance",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "or of an array’s elements is only valid during the execution of the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "called function. Escaping the pointer to use after the execution of the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "function is undefined behavior. In particular, do not use implicit",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "bridging when calling an ",
                  "type": "text"
                },
                {
                  "code": "UnsafePointer",
                  "type": "codeVoice"
                },
                {
                  "text": " initializer.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "code": [
                "var number = 5",
                "let numberPointer = UnsafePointer<Int>(&number)",
                "// Accessing 'numberPointer' is undefined behavior."
              ],
              "syntax": "swift",
              "type": "codeListing"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "role": "symbol",
      "title": "BitwiseCopyable",
      "type": "topic",
      "url": "/documentation/swift/bitwisecopyable"
    },
    "doc://com.apple.Swift/documentation/Swift/CVarArg": {
      "abstract": [
        {
          "text": "A type whose instances can be encoded, and appropriately passed, as",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of a C ",
          "type": "text"
        },
        {
          "code": "va_list",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CVarArg"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CVarArg",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CVarArg"
        }
      ],
      "role": "symbol",
      "title": "CVarArg",
      "type": "topic",
      "url": "/documentation/swift/cvararg"
    },
    "doc://com.apple.Swift/documentation/Swift/Comparable": {
      "abstract": [
        {
          "text": "A type that can be compared using the relational operators ",
          "type": "text"
        },
        {
          "code": "<",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "<=",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": ">=",
          "type": "codeVoice"
        },
        {
          "text": ",",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and ",
          "type": "text"
        },
        {
          "code": ">",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Comparable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Comparable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Comparable"
        }
      ],
      "role": "symbol",
      "title": "Comparable",
      "type": "topic",
      "url": "/documentation/swift/comparable"
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/swift/copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation suitable for debugging",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "purposes.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomDebugStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customdebugstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomReflectable": {
      "abstract": [
        {
          "text": "A type that explicitly supplies its own mirror.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "role": "symbol",
      "title": "CustomReflectable",
      "type": "topic",
      "url": "/documentation/swift/customreflectable"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/swift/equatable"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a ",
          "type": "text"
        },
        {
          "code": "Hasher",
          "type": "codeVoice"
        },
        {
          "text": " to produce an integer hash value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/swift/hashable"
    },
    "doc://com.apple.Swift/documentation/Swift/Strideable": {
      "abstract": [
        {
          "text": "A type representing continuous, one-dimensional values that can be offset",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and measured.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Strideable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Strideable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Strideable"
        }
      ],
      "role": "symbol",
      "title": "Strideable",
      "type": "topic",
      "url": "/documentation/swift/strideable"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer": {
      "abstract": [
        {
          "text": "A nonowning collection interface to a buffer of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements stored contiguously in memory.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafebufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer": {
      "abstract": [
        {
          "text": "A nonowning collection interface to a buffer of mutable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements stored contiguously in memory.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablebufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing and manipulating data of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "specific type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing data of a specific type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/AtomicOptionalRepresentable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/AtomicOptionalRepresentable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "AtomicOptionalRepresentable Implementations",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/atomicoptionalrepresentable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/AtomicRepresentable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/AtomicRepresentable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "AtomicRepresentable Implementations",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/atomicrepresentable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Comparable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Comparable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Comparable Implementations",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/comparable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/CustomReflectable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/CustomReflectable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomReflectable Implementations",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/customreflectable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Distance": {
      "abstract": [
        {
          "text": "A type that represents the distance between two pointers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Distance"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Distance",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Distance"
        }
      ],
      "role": "symbol",
      "title": "UnsafePointer.Distance",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/distance"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Equatable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Equatable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Equatable Implementations",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/equatable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Hashable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Hashable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Hashable Implementations",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/hashable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Strideable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Strideable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Strideable Implementations",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/strideable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/bytes()": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "MIDIPacket",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bytes"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@MIDIPacket",
          "text": "MIDIPacket"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:So10MIDIPacketV8CoreMIDIE14ByteCollectionV",
          "text": "ByteCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/bytes()",
      "kind": "symbol",
      "role": "symbol",
      "title": "bytes()",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/bytes()"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/customPlaygroundQuickLook": {
      "abstract": [
        {
          "text": "A custom playground Quick Look for this instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "customPlaygroundQuickLook"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "PlaygroundQuickLook"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/customPlaygroundQuickLook",
      "kind": "symbol",
      "role": "symbol",
      "title": "customPlaygroundQuickLook",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/customplaygroundquicklook"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/deallocate()": {
      "abstract": [
        {
          "text": "Deallocates the memory block previously allocated at this pointer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "deallocate"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/deallocate()",
      "kind": "symbol",
      "role": "symbol",
      "title": "deallocate()",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/deallocate()"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/pointee": {
      "abstract": [
        {
          "text": "Accesses the instance referenced by this pointer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "pointee"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Pointee"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/pointee",
      "kind": "symbol",
      "role": "symbol",
      "title": "pointee",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/pointee"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/pointer(to:)": {
      "abstract": [
        {
          "text": "Obtain a pointer to the stored property referred to by a key path.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "pointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Property"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7KeyPathC",
          "text": "KeyPath"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Pointee"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Property"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Property"
        },
        {
          "kind": "text",
          "text": ">?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/pointer(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "pointer(to:)",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/pointer(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/sequence()-3ksef": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "MIDIEventPacket",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "sequence"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@MIDIEventPacket",
          "text": "MIDIEventPacket"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:So15MIDIEventPacketV8CoreMIDIE12WordSequenceV",
          "text": "WordSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/sequence()-3ksef",
      "kind": "symbol",
      "role": "symbol",
      "title": "sequence()",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/sequence()-3ksef"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/sequence()-6p1ru": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "MIDIPacket",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "sequence"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@MIDIPacket",
          "text": "MIDIPacket"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:So10MIDIPacketV8CoreMIDIE12ByteSequenceV",
          "text": "ByteSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/sequence()-6p1ru",
      "kind": "symbol",
      "role": "symbol",
      "title": "sequence()",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/sequence()-6p1ru"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/subscript(_:)": {
      "abstract": [
        {
          "text": "Accesses the pointee at the specified offset from this pointer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "subscript"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Pointee"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/subscript(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "subscript(_:)",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/subscript(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/unsafeSequence()-215j3": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "MIDIPacketList",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "unsafeSequence"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@MIDIPacketList",
          "text": "MIDIPacketList"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:So14MIDIPacketListV8CoreMIDIE14UnsafeSequenceV",
          "text": "UnsafeSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/unsafeSequence()-215j3",
      "kind": "symbol",
      "role": "symbol",
      "title": "unsafeSequence()",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/unsafesequence()-215j3"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/unsafeSequence()-2il7u": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "MIDIEventList",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "unsafeSequence"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@MIDIEventList",
          "text": "MIDIEventList"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:So13MIDIEventListV8CoreMIDIE14UnsafeSequenceV",
          "text": "UnsafeSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/unsafeSequence()-2il7u",
      "kind": "symbol",
      "role": "symbol",
      "title": "unsafeSequence()",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/unsafesequence()-2il7u"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/withMemoryRebound(to:capacity:_:)": {
      "abstract": [
        {
          "text": "Executes the given closure while temporarily binding memory to",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the specified number of instances of type ",
          "type": "text"
        },
        {
          "code": "T",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withMemoryRebound"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ".Type, "
        },
        {
          "kind": "externalParam",
          "text": "capacity"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SP",
          "text": "UnsafePointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">) "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/withMemoryRebound(to:capacity:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withMemoryRebound(to:capacity:_:)",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/withmemoryrebound(to:capacity:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer/words()": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "MIDIEventPacket",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "words"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@MIDIEventPacket",
          "text": "MIDIEventPacket"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:So15MIDIEventPacketV8CoreMIDIE14WordCollectionV",
          "text": "WordCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer/words()",
      "kind": "symbol",
      "role": "symbol",
      "title": "words()",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer/words()"
    },
    "doc://com.apple.Swift/documentation/Swift/using-imported-c-functions-in-swift": {
      "abstract": [
        {
          "text": "Learn how to call imported functions that are declared in a C header.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/using-imported-c-functions-in-swift",
      "kind": "article",
      "role": "article",
      "title": "Using Imported C Functions in Swift",
      "type": "topic",
      "url": "/documentation/swift/using-imported-c-functions-in-swift"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicOptionalRepresentable": {
      "abstract": [
        {
          "text": "An atomic value that also supports atomic operations when wrapped",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in an ",
          "type": "text"
        },
        {
          "code": "Optional",
          "type": "codeVoice"
        },
        {
          "text": ". Atomic optional representable types come with a standalone",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "atomic representation for their optional-wrapped variants.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicOptionalRepresentable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicOptionalRepresentable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicOptionalRepresentable"
        }
      ],
      "role": "symbol",
      "title": "AtomicOptionalRepresentable",
      "type": "topic",
      "url": "/documentation/synchronization/atomicoptionalrepresentable"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable": {
      "abstract": [
        {
          "text": "A type that supports atomic operations through a separate atomic storage",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicRepresentable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicRepresentable"
        }
      ],
      "role": "symbol",
      "title": "AtomicRepresentable",
      "type": "topic",
      "url": "/documentation/synchronization/atomicrepresentable"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Synchronization/AtomicOptionalRepresentable",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
        "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
        "doc://com.apple.Swift/documentation/Swift/CVarArg",
        "doc://com.apple.Swift/documentation/Swift/Comparable",
        "doc://com.apple.Swift/documentation/Swift/Copyable",
        "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
        "doc://com.apple.Swift/documentation/Swift/Equatable",
        "doc://com.apple.Swift/documentation/Swift/Hashable",
        "doc://com.apple.Swift/documentation/Swift/Strideable"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Typed-Pointers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer"
      ],
      "title": "Typed Pointers"
    }
  ],
  "topicSections": [
    {
      "anchor": "Instance-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/customPlaygroundQuickLook",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/pointee"
      ],
      "title": "Instance Properties"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/bytes()",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/deallocate()",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/pointer(to:)",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/sequence()-3ksef",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/sequence()-6p1ru",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/unsafeSequence()-215j3",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/unsafeSequence()-2il7u",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/withMemoryRebound(to:capacity:_:)",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/words()"
      ],
      "title": "Instance Methods"
    },
    {
      "anchor": "Subscripts",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/subscript(_:)"
      ],
      "title": "Subscripts"
    },
    {
      "anchor": "Type-Aliases",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Distance"
      ],
      "title": "Type Aliases"
    },
    {
      "anchor": "Default-Implementations",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/AtomicOptionalRepresentable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/AtomicRepresentable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Comparable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/CustomReflectable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Equatable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Hashable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer/Strideable-Implementations"
      ],
      "title": "Default Implementations"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/unsafepointer"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
