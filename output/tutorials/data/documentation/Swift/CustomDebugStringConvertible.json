{
  "abstract": [
    {
      "text": "A type with a customized textual representation suitable for debugging",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "purposes.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s28CustomDebugStringConvertibleP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "CustomDebugStringConvertible"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "CustomDebugStringConvertible"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "CustomDebugStringConvertible"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "CustomDebugStringConvertible"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Swift provides a default debugging textual representation for any type.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "That default representation is used by the ",
              "type": "text"
            },
            {
              "code": "String(reflecting:)",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initializer and the ",
              "type": "text"
            },
            {
              "code": "debugPrint(_:)",
              "type": "codeVoice"
            },
            {
              "text": " function for types that don’t provide",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "their own. To customize that representation, make your type conform to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "CustomDebugStringConvertible",
              "type": "codeVoice"
            },
            {
              "text": " protocol.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Because the ",
              "type": "text"
            },
            {
              "code": "String(reflecting:)",
              "type": "codeVoice"
            },
            {
              "text": " initializer works for instances of ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "any",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type, returning an instance’s ",
              "type": "text"
            },
            {
              "code": "debugDescription",
              "type": "codeVoice"
            },
            {
              "text": " if the value passed",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "conforms to ",
              "type": "text"
            },
            {
              "code": "CustomDebugStringConvertible",
              "type": "codeVoice"
            },
            {
              "text": ", accessing a type’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "debugDescription",
              "type": "codeVoice"
            },
            {
              "text": " property directly or using",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "CustomDebugStringConvertible",
              "type": "codeVoice"
            },
            {
              "text": " as a generic constraint is discouraged.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Calling the ",
                  "type": "text"
                },
                {
                  "code": "dump(_:_:_:_:)",
                  "type": "codeVoice"
                },
                {
                  "text": " function and printing in the debugger",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "uses both ",
                  "type": "text"
                },
                {
                  "code": "String(reflecting:)",
                  "type": "codeVoice"
                },
                {
                  "text": " and ",
                  "type": "text"
                },
                {
                  "code": "Mirror(reflecting:)",
                  "type": "codeVoice"
                },
                {
                  "text": " to collect",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "information about an instance. If you implement",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "code": "CustomDebugStringConvertible",
                  "type": "codeVoice"
                },
                {
                  "text": " conformance for your custom type, you may",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "want to consider providing a custom mirror by implementing",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "code": "CustomReflectable",
                  "type": "codeVoice"
                },
                {
                  "text": " conformance, as well.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Conforming-to-the-CustomDebugStringConvertible-Protocol",
          "level": 1,
          "text": "Conforming to the CustomDebugStringConvertible Protocol",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Add ",
              "type": "text"
            },
            {
              "code": "CustomDebugStringConvertible",
              "type": "codeVoice"
            },
            {
              "text": " conformance to your custom types by",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "defining a ",
              "type": "text"
            },
            {
              "code": "debugDescription",
              "type": "codeVoice"
            },
            {
              "text": " property.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, this custom ",
              "type": "text"
            },
            {
              "code": "Point",
              "type": "codeVoice"
            },
            {
              "text": " struct uses the default representation",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "supplied by the standard library:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct Point {",
            "    let x: Int, y: Int",
            "}",
            "",
            "let p = Point(x: 21, y: 30)",
            "print(String(reflecting: p))",
            "// Prints \"Point(x: 21, y: 30)\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "After adding ",
              "type": "text"
            },
            {
              "code": "CustomDebugStringConvertible",
              "type": "codeVoice"
            },
            {
              "text": " conformance by implementing the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "debugDescription",
              "type": "codeVoice"
            },
            {
              "text": " property, ",
              "type": "text"
            },
            {
              "code": "Point",
              "type": "codeVoice"
            },
            {
              "text": " provides its own custom debugging",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "representation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "extension Point: CustomDebugStringConvertible {",
            "    var debugDescription: String {",
            "        return \"(\\(x), \\(y))\"",
            "    }",
            "}",
            "",
            "print(String(reflecting: p))",
            "// Prints \"(21, 30)\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyHashable": {
      "abstract": [
        {
          "text": "A type-erased hashable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyHashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyHashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyHashable"
        }
      ],
      "role": "symbol",
      "title": "AnyHashable",
      "type": "topic",
      "url": "/documentation/swift/anyhashable"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyKeyPath": {
      "abstract": [
        {
          "text": "A type-erased key path, from any root type to any resulting value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyKeyPath"
        }
      ],
      "role": "symbol",
      "title": "AnyKeyPath",
      "type": "topic",
      "url": "/documentation/swift/anykeypath"
    },
    "doc://com.apple.Swift/documentation/Swift/Array": {
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "role": "symbol",
      "title": "Array",
      "type": "topic",
      "url": "/documentation/swift/array"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice": {
      "abstract": [
        {
          "text": "A slice of an ",
          "type": "text"
        },
        {
          "code": "Array",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "ContiguousArray",
          "type": "codeVoice"
        },
        {
          "text": ", or ",
          "type": "text"
        },
        {
          "code": "ArraySlice",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "role": "symbol",
      "title": "ArraySlice",
      "type": "topic",
      "url": "/documentation/swift/arrayslice"
    },
    "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A mutable pointer addressing an Objective-C reference that doesn’t own its",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "target.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AutoreleasingUnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AutoreleasingUnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "AutoreleasingUnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/autoreleasingunsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/CVaListPointer": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CVaListPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CVaListPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CVaListPointer"
        }
      ],
      "role": "symbol",
      "title": "CVaListPointer",
      "type": "topic",
      "url": "/documentation/swift/cvalistpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/Character": {
      "abstract": [
        {
          "text": "A single extended grapheme cluster that approximates a user-perceived",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "character.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Character"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Character",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Character"
        }
      ],
      "role": "symbol",
      "title": "Character",
      "type": "topic",
      "url": "/documentation/swift/character"
    },
    "doc://com.apple.Swift/documentation/Swift/ClosedRange": {
      "abstract": [
        {
          "text": "An interval from a lower bound up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ClosedRange",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "role": "symbol",
      "title": "ClosedRange",
      "type": "topic",
      "url": "/documentation/swift/closedrange"
    },
    "doc://com.apple.Swift/documentation/Swift/CodingKey": {
      "abstract": [
        {
          "text": "A type that can be used as a key for encoding and decoding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CodingKey"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CodingKey",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CodingKey"
        }
      ],
      "role": "symbol",
      "title": "CodingKey",
      "type": "topic",
      "url": "/documentation/swift/codingkey"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionOfOne": {
      "abstract": [
        {
          "text": "A collection containing a single element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollectionOfOne"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionOfOne",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollectionOfOne"
        }
      ],
      "role": "symbol",
      "title": "CollectionOfOne",
      "type": "topic",
      "url": "/documentation/swift/collectionofone"
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray": {
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "role": "symbol",
      "title": "ContiguousArray",
      "type": "topic",
      "url": "/documentation/swift/contiguousarray"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation suitable for debugging",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "purposes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomDebugStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customdebugstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible/debugDescription": {
      "abstract": [
        {
          "text": "A textual representation of this instance, suitable for debugging.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "debugDescription"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible/debugDescription",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "debugDescription",
      "type": "topic",
      "url": "/documentation/swift/customdebugstringconvertible/debugdescription"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary": {
      "abstract": [
        {
          "text": "A collection whose elements are key-value pairs.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "role": "symbol",
      "title": "Dictionary",
      "type": "topic",
      "url": "/documentation/swift/dictionary"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct": {
      "abstract": [
        {
          "text": "A view of a dictionary’s keys.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Keys"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Keys"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Keys",
      "type": "topic",
      "url": "/documentation/swift/dictionary/keys-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct": {
      "abstract": [
        {
          "text": "A view of a dictionary’s values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Values"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Values"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Values",
      "type": "topic",
      "url": "/documentation/swift/dictionary/values-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Double": {
      "abstract": [
        {
          "text": "A double-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "role": "symbol",
      "title": "Double",
      "type": "topic",
      "url": "/documentation/swift/double"
    },
    "doc://com.apple.Swift/documentation/Swift/Float": {
      "abstract": [
        {
          "text": "A single-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "role": "symbol",
      "title": "Float",
      "type": "topic",
      "url": "/documentation/swift/float"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16": {
      "abstract": [
        {
          "text": "A half-precision (16b), floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "role": "symbol",
      "title": "Float16",
      "type": "topic",
      "url": "/documentation/swift/float16"
    },
    "doc://com.apple.Swift/documentation/Swift/Float80": {
      "abstract": [
        {
          "text": "An extended-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float80",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "role": "symbol",
      "title": "Float80",
      "type": "topic",
      "url": "/documentation/swift/float80"
    },
    "doc://com.apple.Swift/documentation/Swift/KeyPath": {
      "abstract": [
        {
          "text": "A key path from a specific root type to a specific resulting value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "KeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/KeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "KeyPath"
        }
      ],
      "role": "symbol",
      "title": "KeyPath",
      "type": "topic",
      "url": "/documentation/swift/keypath"
    },
    "doc://com.apple.Swift/documentation/Swift/KeyValuePairs": {
      "abstract": [
        {
          "text": "A lightweight collection of key-value pairs.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "KeyValuePairs"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/KeyValuePairs",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "KeyValuePairs"
        }
      ],
      "role": "symbol",
      "title": "KeyValuePairs",
      "type": "topic",
      "url": "/documentation/swift/keyvaluepairs"
    },
    "doc://com.apple.Swift/documentation/Swift/LosslessStringConvertible": {
      "abstract": [
        {
          "text": "A type that can be represented as a string in a lossless, unambiguous way.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LosslessStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LosslessStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LosslessStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "LosslessStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/losslessstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier": {
      "abstract": [
        {
          "text": "A unique identifier for a class instance or metatype.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "role": "symbol",
      "title": "ObjectIdentifier",
      "type": "topic",
      "url": "/documentation/swift/objectidentifier"
    },
    "doc://com.apple.Swift/documentation/Swift/OpaquePointer": {
      "abstract": [
        {
          "text": "A wrapper around an opaque C pointer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "OpaquePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/OpaquePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "OpaquePointer"
        }
      ],
      "role": "symbol",
      "title": "OpaquePointer",
      "type": "topic",
      "url": "/documentation/swift/opaquepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional": {
      "abstract": [
        {
          "text": "A type that represents either a wrapped value or the absence of a value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "role": "symbol",
      "title": "Optional",
      "type": "topic",
      "url": "/documentation/swift/optional"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialKeyPath": {
      "abstract": [
        {
          "text": "A partially type-erased key path, from a concrete root type to any",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "resulting value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialKeyPath"
        }
      ],
      "role": "symbol",
      "title": "PartialKeyPath",
      "type": "topic",
      "url": "/documentation/swift/partialkeypath"
    },
    "doc://com.apple.Swift/documentation/Swift/Range": {
      "abstract": [
        {
          "text": "A half-open interval from a lower bound up to, but not including, an upper",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "role": "symbol",
      "title": "Range",
      "type": "topic",
      "url": "/documentation/swift/range"
    },
    "doc://com.apple.Swift/documentation/Swift/ReferenceWritableKeyPath": {
      "abstract": [
        {
          "text": "A key path that supports reading from and writing to the resulting value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "with reference semantics.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ReferenceWritableKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReferenceWritableKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ReferenceWritableKeyPath"
        }
      ],
      "role": "symbol",
      "title": "ReferenceWritableKeyPath",
      "type": "topic",
      "url": "/documentation/swift/referencewritablekeypath"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD16": {
      "abstract": [
        {
          "text": "A vector of 16 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "role": "symbol",
      "title": "SIMD16",
      "type": "topic",
      "url": "/documentation/swift/simd16"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD2": {
      "abstract": [
        {
          "text": "A vector of two scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD2",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "role": "symbol",
      "title": "SIMD2",
      "type": "topic",
      "url": "/documentation/swift/simd2"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD3": {
      "abstract": [
        {
          "text": "A vector of three scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD3",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "role": "symbol",
      "title": "SIMD3",
      "type": "topic",
      "url": "/documentation/swift/simd3"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD32": {
      "abstract": [
        {
          "text": "A vector of 32 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "role": "symbol",
      "title": "SIMD32",
      "type": "topic",
      "url": "/documentation/swift/simd32"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD4": {
      "abstract": [
        {
          "text": "A vector of four scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD4",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "role": "symbol",
      "title": "SIMD4",
      "type": "topic",
      "url": "/documentation/swift/simd4"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD64": {
      "abstract": [
        {
          "text": "A vector of 64 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "role": "symbol",
      "title": "SIMD64",
      "type": "topic",
      "url": "/documentation/swift/simd64"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD8": {
      "abstract": [
        {
          "text": "A vector of eight scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "role": "symbol",
      "title": "SIMD8",
      "type": "topic",
      "url": "/documentation/swift/simd8"
    },
    "doc://com.apple.Swift/documentation/Swift/Set": {
      "abstract": [
        {
          "text": "An unordered collection of unique elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "role": "symbol",
      "title": "Set",
      "type": "topic",
      "url": "/documentation/swift/set"
    },
    "doc://com.apple.Swift/documentation/Swift/StaticBigInt": {
      "abstract": [
        {
          "text": "An immutable arbitrary-precision signed integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StaticBigInt"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StaticBigInt",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StaticBigInt"
        }
      ],
      "role": "symbol",
      "title": "StaticBigInt",
      "type": "topic",
      "url": "/documentation/swift/staticbigint"
    },
    "doc://com.apple.Swift/documentation/Swift/StaticString": {
      "abstract": [
        {
          "text": "A string type designed to represent text that is known at compile time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StaticString"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StaticString",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StaticString"
        }
      ],
      "role": "symbol",
      "title": "StaticString",
      "type": "topic",
      "url": "/documentation/swift/staticstring"
    },
    "doc://com.apple.Swift/documentation/Swift/String": {
      "abstract": [
        {
          "text": "A Unicode string value that is a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "role": "symbol",
      "title": "String",
      "type": "topic",
      "url": "/documentation/swift/string"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Index": {
      "abstract": [
        {
          "text": "A position of a character or code unit in a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "String.Index",
      "type": "topic",
      "url": "/documentation/swift/string/index"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UTF16View": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of UTF-16 code units.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UTF16View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "role": "symbol",
      "title": "String.UTF16View",
      "type": "topic",
      "url": "/documentation/swift/string/utf16view"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UTF8View": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of UTF-8 code units.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UTF8View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "role": "symbol",
      "title": "String.UTF8View",
      "type": "topic",
      "url": "/documentation/swift/string/utf8view"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of Unicode scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "role": "symbol",
      "title": "String.UnicodeScalarView",
      "type": "topic",
      "url": "/documentation/swift/string/unicodescalarview"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring": {
      "abstract": [
        {
          "text": "A slice of a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "role": "symbol",
      "title": "Substring",
      "type": "topic",
      "url": "/documentation/swift/substring"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar": {
      "abstract": [
        {
          "text": "A Unicode scalar value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Scalar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Scalar"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer": {
      "abstract": [
        {
          "text": "A nonowning collection interface to a buffer of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements stored contiguously in memory.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafebufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer": {
      "abstract": [
        {
          "text": "A nonowning collection interface to a buffer of mutable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements stored contiguously in memory.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablebufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing and manipulating data of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "specific type.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawBufferPointer": {
      "abstract": [
        {
          "text": "A mutable nonowning collection interface to the bytes in a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "region of memory.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableRawBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablerawbufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer": {
      "abstract": [
        {
          "text": "A raw pointer for accessing and manipulating untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableRawPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablerawpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing data of a specific type.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Pointee",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer": {
      "abstract": [
        {
          "text": "A  nonowning collection interface to the bytes in a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "region of memory.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeRawBufferPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeRawBufferPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeRawBufferPointer",
      "type": "topic",
      "url": "/documentation/swift/unsaferawbufferpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer": {
      "abstract": [
        {
          "text": "A raw pointer for accessing untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeRawPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeRawPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeRawPointer",
      "type": "topic",
      "url": "/documentation/swift/unsaferawpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/WritableKeyPath": {
      "abstract": [
        {
          "text": "A key path that supports reading from and writing to the resulting value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "WritableKeyPath"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/WritableKeyPath",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "WritableKeyPath"
        }
      ],
      "role": "symbol",
      "title": "WritableKeyPath",
      "type": "topic",
      "url": "/documentation/swift/writablekeypath"
    },
    "doc://com.apple.Swift/documentation/Synchronization/WordPair": {
      "abstract": [
        {
          "text": "A pair of two word sized ",
          "type": "text"
        },
        {
          "code": "UInt",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/WordPair",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "role": "symbol",
      "title": "WordPair",
      "type": "topic",
      "url": "/documentation/synchronization/wordpair"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/CodingKey"
      ],
      "kind": "relationships",
      "title": "Inherited By",
      "type": "inheritedBy"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AnyHashable",
        "doc://com.apple.Swift/documentation/Swift/AnyKeyPath",
        "doc://com.apple.Swift/documentation/Swift/Array",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice",
        "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer",
        "doc://com.apple.Swift/documentation/Swift/CVaListPointer",
        "doc://com.apple.Swift/documentation/Swift/Character",
        "doc://com.apple.Swift/documentation/Swift/ClosedRange",
        "doc://com.apple.Swift/documentation/Swift/CollectionOfOne",
        "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
        "doc://com.apple.Swift/documentation/Swift/Dictionary",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Double",
        "doc://com.apple.Swift/documentation/Swift/Float",
        "doc://com.apple.Swift/documentation/Swift/Float16",
        "doc://com.apple.Swift/documentation/Swift/Float80",
        "doc://com.apple.Swift/documentation/Swift/KeyPath",
        "doc://com.apple.Swift/documentation/Swift/KeyValuePairs",
        "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
        "doc://com.apple.Swift/documentation/Swift/OpaquePointer",
        "doc://com.apple.Swift/documentation/Swift/Optional",
        "doc://com.apple.Swift/documentation/Swift/PartialKeyPath",
        "doc://com.apple.Swift/documentation/Swift/Range",
        "doc://com.apple.Swift/documentation/Swift/ReferenceWritableKeyPath",
        "doc://com.apple.Swift/documentation/Swift/SIMD16",
        "doc://com.apple.Swift/documentation/Swift/SIMD2",
        "doc://com.apple.Swift/documentation/Swift/SIMD3",
        "doc://com.apple.Swift/documentation/Swift/SIMD32",
        "doc://com.apple.Swift/documentation/Swift/SIMD4",
        "doc://com.apple.Swift/documentation/Swift/SIMD64",
        "doc://com.apple.Swift/documentation/Swift/SIMD8",
        "doc://com.apple.Swift/documentation/Swift/Set",
        "doc://com.apple.Swift/documentation/Swift/StaticBigInt",
        "doc://com.apple.Swift/documentation/Swift/StaticString",
        "doc://com.apple.Swift/documentation/Swift/String",
        "doc://com.apple.Swift/documentation/Swift/String/Index",
        "doc://com.apple.Swift/documentation/Swift/String/UTF16View",
        "doc://com.apple.Swift/documentation/Swift/String/UTF8View",
        "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView",
        "doc://com.apple.Swift/documentation/Swift/Substring",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar",
        "doc://com.apple.Swift/documentation/Swift/UnsafeBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutableBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeRawBufferPointer",
        "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer",
        "doc://com.apple.Swift/documentation/Synchronization/WordPair",
        "doc://com.apple.Swift/documentation/Swift/WritableKeyPath"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "String-Representation",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/LosslessStringConvertible"
      ],
      "title": "String Representation"
    }
  ],
  "topicSections": [
    {
      "anchor": "Instance-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible/debugDescription"
      ],
      "title": "Instance Properties"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/customdebugstringconvertible"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
