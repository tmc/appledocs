{
  "abstract": [
    {
      "text": "The protocol to which all classes implicitly conform.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/AnyObject"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s9AnyObjecta",
    "fragments": [
      {
        "kind": "keyword",
        "text": "typealias"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "AnyObject"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "AnyObject"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Type Alias",
    "symbolKind": "typealias",
    "title": "AnyObject"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "typealias"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "AnyObject"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You use ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " when you need the flexibility of an untyped object or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "when you use bridged Objective-C methods and properties that return an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "untyped result. ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " can be used as the concrete type for an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance of any class, class type, or class-only protocol. For example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class FloatRef {",
            "    let value: Float",
            "    init(_ value: Float) {",
            "        self.value = value",
            "    }",
            "}",
            "",
            "let x = FloatRef(2.3)",
            "let y: AnyObject = x",
            "let z: AnyObject = FloatRef.self"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " can also be used as the concrete type for an instance of a type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that bridges to an Objective-C class. Many value types in Swift bridge to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Objective-C counterparts, like ",
              "type": "text"
            },
            {
              "code": "String",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let s: AnyObject = \"This is a bridged string.\" as NSString",
            "print(s is NSString)",
            "// Prints \"true\"",
            "",
            "let v: AnyObject = 100 as NSNumber",
            "print(type(of: v))",
            "// Prints \"__NSCFNumber\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The flexible behavior of the ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " protocol is similar to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Objective-Câ€™s ",
              "type": "text"
            },
            {
              "code": "id",
              "type": "codeVoice"
            },
            {
              "text": " type. For this reason, imported Objective-C types",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "frequently use ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " as the type for properties, method parameters,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and return values.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Casting-AnyObject-Instances-to-a-Known-Type",
          "level": 1,
          "text": "Casting AnyObject Instances to a Known Type",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Objects with a concrete type of ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " maintain a specific dynamic",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type and can be cast to that type using one of the type-cast operators",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(",
              "type": "text"
            },
            {
              "code": "as",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "as?",
              "type": "codeVoice"
            },
            {
              "text": ", or ",
              "type": "text"
            },
            {
              "code": "as!",
              "type": "codeVoice"
            },
            {
              "text": ").",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This example uses the conditional downcast operator (",
              "type": "text"
            },
            {
              "code": "as?",
              "type": "codeVoice"
            },
            {
              "text": ") to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "conditionally cast the ",
              "type": "text"
            },
            {
              "code": "s",
              "type": "codeVoice"
            },
            {
              "text": " constant declared above to an instance of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Swiftâ€™s ",
              "type": "text"
            },
            {
              "code": "String",
              "type": "codeVoice"
            },
            {
              "text": " type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "if let message = s as? String {",
            "    print(\"Successful cast to String: \\(message)\")",
            "}",
            "// Prints \"Successful cast to String: This is a bridged string.\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If you have prior knowledge that an ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " instance has a particular",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type, you can use the unconditional downcast operator (",
              "type": "text"
            },
            {
              "code": "as!",
              "type": "codeVoice"
            },
            {
              "text": "). Performing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an invalid cast triggers a runtime error.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let message = s as! String",
            "print(\"Successful cast to String: \\(message)\")",
            "// Prints \"Successful cast to String: This is a bridged string.\"",
            "",
            "let badCase = v as! String",
            "// Runtime error"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Casting is always safe in the context of a ",
              "type": "text"
            },
            {
              "code": "switch",
              "type": "codeVoice"
            },
            {
              "text": " statement.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let mixedArray: [AnyObject] = [s, v]",
            "for object in mixedArray {",
            "    switch object {",
            "    case let x as String:",
            "        print(\"'\\(x)' is a String\")",
            "    default:",
            "        print(\"'\\(object)' is not a String\")",
            "    }",
            "}",
            "// Prints \"'This is a bridged string.' is a String\"",
            "// Prints \"'100' is not a String\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Accessing-Objective-C-Methods-and-Properties",
          "level": 1,
          "text": "Accessing Objective-C Methods and Properties",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you use ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " as a concrete type, you have at your disposal",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "every ",
              "type": "text"
            },
            {
              "code": "@objc",
              "type": "codeVoice"
            },
            {
              "text": " method and propertyâ€”that is, methods and properties",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "imported from Objective-C or marked with the ",
              "type": "text"
            },
            {
              "code": "@objc",
              "type": "codeVoice"
            },
            {
              "text": " attribute. Because",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Swift canâ€™t guarantee at compile time that these methods and properties",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are actually available on an ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " instanceâ€™s underlying type, these",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "@objc",
              "type": "codeVoice"
            },
            {
              "text": " symbols are available as implicitly unwrapped optional methods and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "properties, respectively.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This example defines an ",
              "type": "text"
            },
            {
              "code": "IntegerRef",
              "type": "codeVoice"
            },
            {
              "text": " type with an ",
              "type": "text"
            },
            {
              "code": "@objc",
              "type": "codeVoice"
            },
            {
              "text": " method named",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "getIntegerValue()",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class IntegerRef {",
            "    let value: Int",
            "    init(_ value: Int) {",
            "        self.value = value",
            "    }",
            "",
            "    @objc func getIntegerValue() -> Int {",
            "        return value",
            "    }",
            "}",
            "",
            "func getObject() -> AnyObject {",
            "    return IntegerRef(100)",
            "}",
            "",
            "let obj: AnyObject = getObject()"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In the example, ",
              "type": "text"
            },
            {
              "code": "obj",
              "type": "codeVoice"
            },
            {
              "text": " has a static type of ",
              "type": "text"
            },
            {
              "code": "AnyObject",
              "type": "codeVoice"
            },
            {
              "text": " and a dynamic type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of ",
              "type": "text"
            },
            {
              "code": "IntegerRef",
              "type": "codeVoice"
            },
            {
              "text": ". You can use optional chaining to call the ",
              "type": "text"
            },
            {
              "code": "@objc",
              "type": "codeVoice"
            },
            {
              "text": " method",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "getIntegerValue()",
              "type": "codeVoice"
            },
            {
              "text": " on ",
              "type": "text"
            },
            {
              "code": "obj",
              "type": "codeVoice"
            },
            {
              "text": " safely. If youâ€™re sure of the dynamic type of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "obj",
              "type": "codeVoice"
            },
            {
              "text": ", you can call ",
              "type": "text"
            },
            {
              "code": "getIntegerValue()",
              "type": "codeVoice"
            },
            {
              "text": " directly.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let possibleValue = obj.getIntegerValue?()",
            "print(possibleValue)",
            "// Prints \"Optional(100)\"",
            "",
            "let certainValue = obj.getIntegerValue()",
            "print(certainValue)",
            "// Prints \"100\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If the dynamic type of ",
              "type": "text"
            },
            {
              "code": "obj",
              "type": "codeVoice"
            },
            {
              "text": " doesnâ€™t implement a ",
              "type": "text"
            },
            {
              "code": "getIntegerValue()",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method, the system returns a runtime error when you initialize",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "certainValue",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, if you need to test whether ",
              "type": "text"
            },
            {
              "code": "obj.getIntegerValue()",
              "type": "codeVoice"
            },
            {
              "text": " exists,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use optional binding before calling the method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "if let f = obj.getIntegerValue {",
            "    print(\"The value of 'obj' is \\(f())\")",
            "} else {",
            "    print(\"'obj' does not have a 'getIntegerValue()' method\")",
            "}",
            "// Prints \"The value of 'obj' is 100\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyClass": {
      "abstract": [
        {
          "text": "The protocol to which all class types implicitly conform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyClass"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyClass",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyClass"
        }
      ],
      "role": "symbol",
      "title": "AnyClass",
      "type": "topic",
      "url": "/documentation/swift/anyclass"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyObject": {
      "abstract": [
        {
          "text": "The protocol to which all classes implicitly conform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyObject"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyObject"
        }
      ],
      "role": "symbol",
      "title": "AnyObject",
      "type": "topic",
      "url": "/documentation/swift/anyobject"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Existential-Types",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AnyClass"
      ],
      "title": "Existential Types"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/anyobject"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
