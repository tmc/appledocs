{
  "abstract": [
    {
      "text": "Cast instances of the Objective-C ",
      "type": "text"
    },
    {
      "code": "id",
      "type": "codeVoice"
    },
    {
      "text": " type to a specific Swift type.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/handling-dynamically-typed-methods-and-objects-in-swift"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Handling Dynamically Typed Methods and Objects in Swift"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In Objective-C, the ",
              "type": "text"
            },
            {
              "code": "id",
              "type": "codeVoice"
            },
            {
              "text": " type represents objects that are instances of any Objective-C",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "class. The ",
              "type": "text"
            },
            {
              "code": "id",
              "type": "codeVoice"
            },
            {
              "text": " type is instead imported by Swift as the ",
              "type": "text"
            },
            {
              "code": "Any",
              "type": "codeVoice"
            },
            {
              "text": " type. When you pass",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a Swift instance to an Objective-C API, it’s bridged as an ",
              "type": "text"
            },
            {
              "code": "id",
              "type": "codeVoice"
            },
            {
              "text": " parameter so that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it’s usable in the API as an Objective-C object. When ",
              "type": "text"
            },
            {
              "code": "id",
              "type": "codeVoice"
            },
            {
              "text": " values are imported into",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Swift as ",
              "type": "text"
            },
            {
              "code": "Any",
              "type": "codeVoice"
            },
            {
              "text": ", the runtime automatically handles bridging back to either class references",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or value types.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var x: Any = \"hello\" as String",
            "x as? String   // String with value \"hello\"",
            "x as? NSString // NSString with value \"hello\"",
            "",
            "x = \"goodbye\" as NSString",
            "x as? String   // String with value \"goodbye\"",
            "x as? NSString // NSString with value \"goodbye\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Downcast-Objects-to-Call-Methods-and-Access-Properties",
          "level": 3,
          "text": "Downcast Objects to Call Methods and Access Properties",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you work with objects of type ",
              "type": "text"
            },
            {
              "code": "Any",
              "type": "codeVoice"
            },
            {
              "text": " where you know the underlying type, it’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "often useful to downcast those objects to the underlying type. However, because the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "Any",
              "type": "codeVoice"
            },
            {
              "text": " type can refer to any type, a downcast to a more specific type isn’t guaranteed",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "by the compiler to succeed.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can use the conditional type cast operator (",
              "type": "text"
            },
            {
              "code": "as?",
              "type": "codeVoice"
            },
            {
              "text": "), which returns an optional",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "value of the type you are trying to downcast to:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let userDefaults = UserDefaults.standard",
            "let lastRefreshDate = userDefaults.object(forKey: \"LastRefreshDate\") // lastRefreshDate is of type Any?",
            "if let date = lastRefreshDate as? Date {",
            "    print(\"\\(date.timeIntervalSinceReferenceDate)\")",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If you’re completely certain about the type of the object, you can use the forced",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "downcast operator (",
              "type": "text"
            },
            {
              "code": "as!",
              "type": "codeVoice"
            },
            {
              "text": ") instead.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let myDate = lastRefreshDate as! Date",
            "let timeInterval = myDate.timeIntervalSinceReferenceDate"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "However, if a forced downcast fails, a runtime error is triggered:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let myDate = lastRefreshDate as! String // Error"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/calling-objective-c-apis-asynchronously": {
      "abstract": [
        {
          "text": "Learn how functions and methods that take a completion handler are converted to Swift",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous functions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/calling-objective-c-apis-asynchronously",
      "kind": "article",
      "role": "article",
      "title": "Calling Objective-C APIs Asynchronously",
      "type": "topic",
      "url": "/documentation/swift/calling-objective-c-apis-asynchronously"
    },
    "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns": {
      "abstract": [
        {
          "text": "Adopt and interoperate with Cocoa design patterns in your Swift apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Cocoa Design Patterns",
      "type": "topic",
      "url": "/documentation/swift/cocoa-design-patterns"
    },
    "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis": {
      "abstract": [
        {
          "text": "Use native Swift syntax to interoperate with types and functions in C and Objective-C.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Imported C and Objective-C APIs",
      "type": "topic",
      "url": "/documentation/swift/imported-c-and-objective-c-apis"
    },
    "doc://com.apple.Swift/documentation/Swift/migrating-your-objective-c-code-to-swift": {
      "abstract": [
        {
          "text": "Learn the recommended steps to migrate your code.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/migrating-your-objective-c-code-to-swift",
      "kind": "article",
      "role": "article",
      "title": "Migrating Your Objective-C Code to Swift",
      "type": "topic",
      "url": "/documentation/swift/migrating-your-objective-c-code-to-swift"
    },
    "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization": {
      "abstract": [
        {
          "text": "Apply macros to your Objective-C APIs to customize how they’re imported into Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Objective-C and C Code Customization",
      "type": "topic",
      "url": "/documentation/swift/objective-c-and-c-code-customization"
    },
    "doc://com.apple.Swift/documentation/Swift/using-objective-c-runtime-features-in-swift": {
      "abstract": [
        {
          "text": "Use selectors and key paths to interact with dynamic Objective-C APIs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/using-objective-c-runtime-features-in-swift",
      "kind": "article",
      "role": "article",
      "title": "Using Objective-C Runtime Features in Swift",
      "type": "topic",
      "url": "/documentation/swift/using-objective-c-runtime-features-in-swift"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Language-Interoperability-with-Objective-C-and-C",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization",
        "doc://com.apple.Swift/documentation/Swift/migrating-your-objective-c-code-to-swift",
        "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns",
        "doc://com.apple.Swift/documentation/Swift/using-objective-c-runtime-features-in-swift",
        "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis",
        "doc://com.apple.Swift/documentation/Swift/calling-objective-c-apis-asynchronously"
      ],
      "title": "Language Interoperability with Objective-C and C"
    }
  ]
}
