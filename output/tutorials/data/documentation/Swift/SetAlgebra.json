{
  "abstract": [
    {
      "text": "A type that provides mathematical set operations.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/SetAlgebra"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s10SetAlgebraP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "SetAlgebra"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "SetAlgebra"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "SetAlgebra"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "SetAlgebra"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/Element",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s10SetAlgebraP7ElementQa",
              "text": "Element"
            },
            {
              "kind": "text",
              "text": "> : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SQ",
              "text": "Equatable"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s25ExpressibleByArrayLiteralP",
              "text": "ExpressibleByArrayLiteral"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You use types that conform to the ",
              "type": "text"
            },
            {
              "code": "SetAlgebra",
              "type": "codeVoice"
            },
            {
              "text": " protocol when you need",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "efficient membership tests or mathematical set operations such as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "intersection, union, and subtraction. In the standard library, you can",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use the ",
              "type": "text"
            },
            {
              "code": "Set",
              "type": "codeVoice"
            },
            {
              "text": " type with elements of any hashable type, or you can easily",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "create bit masks with ",
              "type": "text"
            },
            {
              "code": "SetAlgebra",
              "type": "codeVoice"
            },
            {
              "text": " conformance using the ",
              "type": "text"
            },
            {
              "code": "OptionSet",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "protocol. See those types for more information.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Unlike ordinary set types, the ",
                  "type": "text"
                },
                {
                  "code": "Element",
                  "type": "codeVoice"
                },
                {
                  "text": " type of an ",
                  "type": "text"
                },
                {
                  "code": "OptionSet",
                  "type": "codeVoice"
                },
                {
                  "text": " is",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "identical to the ",
                  "type": "text"
                },
                {
                  "code": "OptionSet",
                  "type": "codeVoice"
                },
                {
                  "text": " type itself. The ",
                  "type": "text"
                },
                {
                  "code": "SetAlgebra",
                  "type": "codeVoice"
                },
                {
                  "text": " protocol is",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "specifically designed to accommodate both kinds of set.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Conforming-to-the-SetAlgebra-Protocol",
          "level": 1,
          "text": "Conforming to the SetAlgebra Protocol",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When implementing a custom type that conforms to the ",
              "type": "text"
            },
            {
              "code": "SetAlgebra",
              "type": "codeVoice"
            },
            {
              "text": " protocol,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you must implement the required initializers and methods. For the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "inherited methods to work properly, conforming types must meet the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "following axioms. Assume that ",
              "type": "text"
            },
            {
              "code": "S",
              "type": "codeVoice"
            },
            {
              "text": " is a custom type that conforms to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "SetAlgebra",
              "type": "codeVoice"
            },
            {
              "text": " protocol, ",
              "type": "text"
            },
            {
              "code": "x",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "y",
              "type": "codeVoice"
            },
            {
              "text": " are instances of ",
              "type": "text"
            },
            {
              "code": "S",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "e",
              "type": "codeVoice"
            },
            {
              "text": " is of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type ",
              "type": "text"
            },
            {
              "code": "S.Element",
              "type": "codeVoice"
            },
            {
              "text": "—the type that the set holds.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "S() == []",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.intersection(x) == x",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.intersection([]) == []",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.union(x) == x",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.union([]) == x",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.contains(e)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " implies ",
                      "type": "text"
                    },
                    {
                      "code": "x.union(y).contains(e)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.union(y).contains(e)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " implies ",
                      "type": "text"
                    },
                    {
                      "code": "x.contains(e) || y.contains(e)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.contains(e) && y.contains(e)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " if and only if",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "x.intersection(y).contains(e)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.isSubset(of: y)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " implies ",
                      "type": "text"
                    },
                    {
                      "code": "x.union(y) == y",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.isSuperset(of: y)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " implies ",
                      "type": "text"
                    },
                    {
                      "code": "x.union(y) == x",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.isSubset(of: y)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " if and only if ",
                      "type": "text"
                    },
                    {
                      "code": "y.isSuperset(of: x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.isStrictSuperset(of: y)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " if and only if",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "x.isSuperset(of: y) && x != y",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "x.isStrictSubset(of: y)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " if and only if ",
                      "type": "text"
                    },
                    {
                      "code": "x.isSubset(of: y) && x != y",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/swift/equatable"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized using an array literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByArrayLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByArrayLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByArrayLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyarrayliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/OptionSet": {
      "abstract": [
        {
          "text": "A type that presents a mathematical set interface to a bit set.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "OptionSet"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/OptionSet",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "OptionSet"
        }
      ],
      "role": "symbol",
      "title": "OptionSet",
      "type": "topic",
      "url": "/documentation/swift/optionset"
    },
    "doc://com.apple.Swift/documentation/Swift/Set": {
      "abstract": [
        {
          "text": "An unordered collection of unique elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "role": "symbol",
      "title": "Set",
      "type": "topic",
      "url": "/documentation/swift/set"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra": {
      "abstract": [
        {
          "text": "A type that provides mathematical set operations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SetAlgebra"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SetAlgebra"
        }
      ],
      "role": "symbol",
      "title": "SetAlgebra",
      "type": "topic",
      "url": "/documentation/swift/setalgebra"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/Element": {
      "abstract": [
        {
          "text": "A type for which the conforming type provides a containment test.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Element"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/Element",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "Element",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/element"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/contains(_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the given element exists",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in the set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s10SetAlgebraP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/contains(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "contains(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/contains(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formIntersection(_:)": {
      "abstract": [
        {
          "text": "Removes the elements of this set that aren’t also in the given set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formIntersection"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formIntersection(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "formIntersection(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/formintersection(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formSymmetricDifference(_:)": {
      "abstract": [
        {
          "text": "Removes the elements of the set that are also in the given set and adds",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the members of the given set that are not already in the set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formSymmetricDifference"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formSymmetricDifference(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "formSymmetricDifference(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/formsymmetricdifference(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formUnion(_:)": {
      "abstract": [
        {
          "text": "Adds the elements of the given set to the set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formUnion"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formUnion(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "formUnion(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/formunion(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/init()": {
      "abstract": [
        {
          "text": "Creates an empty set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/init()",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init()",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/init()"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/init(_:)": {
      "abstract": [
        {
          "text": "Creates a new set from a finite sequence of items.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/init(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/init(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/insert(_:)": {
      "abstract": [
        {
          "text": "Inserts the given element in the set if it is not already present.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "insert"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s10SetAlgebraP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") -> (inserted"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", memberAfterInsert"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s10SetAlgebraP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/insert(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "insert(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/insert(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/intersection(_:)": {
      "abstract": [
        {
          "text": "Returns a new set with the elements that are common to both this set and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the given set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "intersection"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/intersection(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "intersection(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/intersection(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isDisjoint(with:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the set has no members in",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "common with the given set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isDisjoint"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isDisjoint(with:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isDisjoint(with:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/isdisjoint(with:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isEmpty": {
      "abstract": [
        {
          "text": "A Boolean value that indicates whether the set has no elements.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isEmpty"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isEmpty",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isEmpty",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/isempty"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isStrictSubset(of:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether this set is a strict",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "subset of the given set.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isStrictSubset"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isStrictSubset(of:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "isStrictSubset(of:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/isstrictsubset(of:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isStrictSuperset(of:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether this set is a strict",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "superset of the given set.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isStrictSuperset"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isStrictSuperset(of:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "isStrictSuperset(of:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/isstrictsuperset(of:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isSubset(of:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the set is a subset of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "another set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isSubset"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isSubset(of:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isSubset(of:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/issubset(of:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isSuperset(of:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the set is a superset of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the given set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isSuperset"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isSuperset(of:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "isSuperset(of:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/issuperset(of:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/remove(_:)": {
      "abstract": [
        {
          "text": "Removes the given element and any elements subsumed by the given element.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "remove"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s10SetAlgebraP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s10SetAlgebraP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/remove(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "remove(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/remove(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/subtract(_:)": {
      "abstract": [
        {
          "text": "Removes the elements of the given set from this set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/subtract(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "subtract(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/subtract(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/subtracting(_:)": {
      "abstract": [
        {
          "text": "Returns a new set containing the elements of this set that do not occur",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in the given set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtracting"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/subtracting(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "subtracting(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/subtracting(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/symmetricDifference(_:)": {
      "abstract": [
        {
          "text": "Returns a new set with the elements that are either in this set or in the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given set, but not in both.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "symmetricDifference"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/symmetricDifference(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "symmetricDifference(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/symmetricdifference(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/union(_:)": {
      "abstract": [
        {
          "text": "Returns a new set with the elements of both this and the given set.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "union"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/union(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "union(_:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/union(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra/update(with:)": {
      "abstract": [
        {
          "text": "Inserts the given element into the set unconditionally.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "update"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s10SetAlgebraP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s10SetAlgebraP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra/update(with:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "update(with:)",
      "type": "topic",
      "url": "/documentation/swift/setalgebra/update(with:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Equatable",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral"
      ],
      "kind": "relationships",
      "title": "Inherits From",
      "type": "inheritsFrom"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/OptionSet"
      ],
      "kind": "relationships",
      "title": "Inherited By",
      "type": "inheritedBy"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Set"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "topicSections": [
    {
      "anchor": "Creating-a-Set",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/init()"
      ],
      "title": "Creating a Set"
    },
    {
      "anchor": "Testing-for-Membership",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/contains(_:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/Element"
      ],
      "title": "Testing for Membership"
    },
    {
      "anchor": "Adding-and-Removing-Elements",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/insert(_:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/update(with:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/remove(_:)"
      ],
      "title": "Adding and Removing Elements"
    },
    {
      "anchor": "Combining-Sets",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/union(_:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formUnion(_:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/intersection(_:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formIntersection(_:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/symmetricDifference(_:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/formSymmetricDifference(_:)"
      ],
      "title": "Combining Sets"
    },
    {
      "anchor": "Comparing-Sets",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isStrictSubset(of:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isStrictSuperset(of:)"
      ],
      "title": "Comparing Sets"
    },
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/init(_:)"
      ],
      "title": "Initializers"
    },
    {
      "anchor": "Instance-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isEmpty"
      ],
      "title": "Instance Properties"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isDisjoint(with:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isSubset(of:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/isSuperset(of:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/subtract(_:)",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra/subtracting(_:)"
      ],
      "title": "Instance Methods"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/setalgebra"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
