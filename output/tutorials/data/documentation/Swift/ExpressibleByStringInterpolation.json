{
  "abstract": [
    {
      "text": "A type that can be initialized by string interpolation with a string",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "literal that includes expressions.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s32ExpressibleByStringInterpolationP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "ExpressibleByStringInterpolation"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "ExpressibleByStringInterpolation"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "ExpressibleByStringInterpolation"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "ExpressibleByStringInterpolation"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringLiteral",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s26ExpressibleByStringLiteralP",
              "text": "ExpressibleByStringLiteral"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use string interpolation to include one or more expressions in a string",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "literal, wrapped in a set of parentheses and prefixed by a backslash. For",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let price = 2",
            "let number = 3",
            "let message = \"One cookie: $\\(price), \\(number) cookies: $\\(price * number).\"",
            "print(message)",
            "// Prints \"One cookie: $2, 3 cookies: $6.\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Extending-the-Default-Interpolation-Behavior",
          "level": 1,
          "text": "Extending the Default Interpolation Behavior",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Add new interpolation behavior to existing types by extending",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "DefaultStringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": ", the type that implements interpolation for",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "types like ",
              "type": "text"
            },
            {
              "code": "String",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "Substring",
              "type": "codeVoice"
            },
            {
              "text": ", to add an overload of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "appendInterpolation(_:)",
              "type": "codeVoice"
            },
            {
              "text": " with their new behavior.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information, see the ",
              "type": "text"
            },
            {
              "code": "DefaultStringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "StringInterpolationProtocol",
              "type": "codeVoice"
            },
            {
              "text": " documentation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Creating-a-Type-That-Supports-the-Default-String-Interpolation",
          "level": 1,
          "text": "Creating a Type That Supports the Default String Interpolation",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To create a new type that supports string literals and interpolation, but",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that doesn’t need any custom behavior, conform the type to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "ExpressibleByStringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " and implement the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "init(stringLiteral: String)",
              "type": "codeVoice"
            },
            {
              "text": " initializer declared by the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "ExpressibleByStringLiteral",
              "type": "codeVoice"
            },
            {
              "text": " protocol. Swift will automatically use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "DefaultStringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " as the interpolation type and provide an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "implementation for ",
              "type": "text"
            },
            {
              "code": "init(stringInterpolation:)",
              "type": "codeVoice"
            },
            {
              "text": " that passes the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "interpolated literal’s contents to ",
              "type": "text"
            },
            {
              "code": "init(stringLiteral:)",
              "type": "codeVoice"
            },
            {
              "text": ", so you don’t",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "need to implement anything specific to this protocol.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Creating-a-Type-That-Supports-Custom-String-Interpolation",
          "level": 1,
          "text": "Creating a Type That Supports Custom String Interpolation",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you want a conforming type to differentiate between literal and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "interpolated segments, restrict the types that can be interpolated,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "support different interpolators from the ones on ",
              "type": "text"
            },
            {
              "code": "String",
              "type": "codeVoice"
            },
            {
              "text": ", or avoid",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "constructing a ",
              "type": "text"
            },
            {
              "code": "String",
              "type": "codeVoice"
            },
            {
              "text": " containing the data, the type must specify a custom",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "StringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " associated type. This type must conform to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "StringInterpolationProtocol",
              "type": "codeVoice"
            },
            {
              "text": " and have a matching ",
              "type": "text"
            },
            {
              "code": "StringLiteralType",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information, see the ",
              "type": "text"
            },
            {
              "code": "StringInterpolationProtocol",
              "type": "codeVoice"
            },
            {
              "text": " documentation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation": {
      "abstract": [
        {
          "text": "Represents a string literal with interpolations while it is being built up.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DefaultStringInterpolation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DefaultStringInterpolation"
        }
      ],
      "role": "symbol",
      "title": "DefaultStringInterpolation",
      "type": "topic",
      "url": "/documentation/swift/defaultstringinterpolation"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByExtendedGraphemeClusterLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with a string literal containing a single",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "extended grapheme cluster.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByExtendedGraphemeClusterLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByExtendedGraphemeClusterLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByExtendedGraphemeClusterLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByExtendedGraphemeClusterLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyextendedgraphemeclusterliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation": {
      "abstract": [
        {
          "text": "A type that can be initialized by string interpolation with a string",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "literal that includes expressions.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByStringInterpolation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByStringInterpolation"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByStringInterpolation",
      "type": "topic",
      "url": "/documentation/swift/expressiblebystringinterpolation"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation/StringInterpolation": {
      "abstract": [
        {
          "text": "The type each segment of a string literal containing interpolations",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "should be appended to.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StringInterpolation"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s27StringInterpolationProtocolP",
          "text": "StringInterpolationProtocol"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s26DefaultStringInterpolationV",
          "text": "DefaultStringInterpolation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation/StringInterpolation",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "StringInterpolation",
      "type": "topic",
      "url": "/documentation/swift/expressiblebystringinterpolation/stringinterpolation"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation/init(stringInterpolation:)": {
      "abstract": [
        {
          "text": "Creates an instance from a string interpolation.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "stringInterpolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s32ExpressibleByStringInterpolationP0cD0Qa",
          "text": "StringInterpolation"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation/init(stringInterpolation:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(stringInterpolation:)",
      "type": "topic",
      "url": "/documentation/swift/expressiblebystringinterpolation/init(stringinterpolation:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with a string literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByStringLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByStringLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByStringLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebystringliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByUnicodeScalarLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with a string literal containing a single",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "Unicode scalar value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByUnicodeScalarLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByUnicodeScalarLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByUnicodeScalarLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByUnicodeScalarLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyunicodescalarliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/String": {
      "abstract": [
        {
          "text": "A Unicode string value that is a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "role": "symbol",
      "title": "String",
      "type": "topic",
      "url": "/documentation/swift/string"
    },
    "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue": {
      "abstract": [
        {
          "text": "A reference to a localizable string, with optional string interpolation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LocalizationValue"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LocalizationValue"
        }
      ],
      "role": "symbol",
      "title": "String.LocalizationValue",
      "type": "topic",
      "url": "/documentation/swift/string/localizationvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol": {
      "abstract": [
        {
          "text": "Represents the contents of a string literal with interpolations while it’s",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "being built up.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StringInterpolationProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StringInterpolationProtocol"
        }
      ],
      "role": "symbol",
      "title": "StringInterpolationProtocol",
      "type": "topic",
      "url": "/documentation/swift/stringinterpolationprotocol"
    },
    "doc://com.apple.Swift/documentation/Swift/StringProtocol": {
      "abstract": [
        {
          "text": "A type that can represent a string as a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StringProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StringProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StringProtocol"
        }
      ],
      "role": "symbol",
      "title": "StringProtocol",
      "type": "topic",
      "url": "/documentation/swift/stringprotocol"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring": {
      "abstract": [
        {
          "text": "A slice of a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "role": "symbol",
      "title": "Substring",
      "type": "topic",
      "url": "/documentation/swift/substring"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByExtendedGraphemeClusterLiteral",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringLiteral",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByUnicodeScalarLiteral"
      ],
      "kind": "relationships",
      "title": "Inherits From",
      "type": "inheritsFrom"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/StringProtocol"
      ],
      "kind": "relationships",
      "title": "Inherited By",
      "type": "inheritedBy"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/String",
        "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue",
        "doc://com.apple.Swift/documentation/Swift/Substring"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "String-Literals",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringLiteral",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByExtendedGraphemeClusterLiteral",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByUnicodeScalarLiteral",
        "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol",
        "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation"
      ],
      "title": "String Literals"
    }
  ],
  "topicSections": [
    {
      "anchor": "Associated-Types",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation/StringInterpolation"
      ],
      "title": "Associated Types"
    },
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation/init(stringInterpolation:)"
      ],
      "title": "Initializers"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/expressiblebystringinterpolation"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
