{
  "abstract": [
    {
      "text": "Reserves enough space to store the specified number of elements.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift",
        "doc://com.apple.Swift/documentation/Swift/ContiguousArray"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/ContiguousArray/reserveCapacity(_:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "extendedModule": "Swift",
    "externalID": "s:s15ContiguousArrayV15reserveCapacityyySiF",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "reserveCapacity"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Si",
        "text": "Int"
      },
      {
        "kind": "text",
        "text": ")"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "method",
    "title": "reserveCapacity(_:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "mutating"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "reserveCapacity"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "minimumCapacity"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Int",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Si",
              "text": "Int"
            },
            {
              "kind": "text",
              "text": ")"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The requested number of elements to store.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "minimumCapacity"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you are adding a known number of elements to an array, use this method",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to avoid multiple reallocations. This method ensures that the array has",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "unique, mutable, contiguous storage, with space allocated for at least",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the requested number of elements.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For performance reasons, the size of the newly allocated storage might be",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "greater than the requested capacity. Use the array’s ",
              "type": "text"
            },
            {
              "code": "capacity",
              "type": "codeVoice"
            },
            {
              "text": " property",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to determine the size of the new storage.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Preserving-an-Arrays-Geometric-Growth-Strategy",
          "level": 1,
          "text": "Preserving an Array’s Geometric Growth Strategy",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you implement a custom data structure backed by an array that grows",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "dynamically, naively calling the ",
              "type": "text"
            },
            {
              "code": "reserveCapacity(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method can lead",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to worse than expected performance. Arrays need to follow a geometric",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "allocation pattern for appending elements to achieve amortized",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "constant-time performance. The ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " type’s ",
              "type": "text"
            },
            {
              "code": "append(_:)",
              "type": "codeVoice"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "append(contentsOf:)",
              "type": "codeVoice"
            },
            {
              "text": " methods take care of this detail for you, but",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "reserveCapacity(_:)",
              "type": "codeVoice"
            },
            {
              "text": " allocates only as much space as you tell it to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(padded to a round value), and no more. This avoids over-allocation, but",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can result in insertion not having amortized constant-time performance.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following code declares ",
              "type": "text"
            },
            {
              "code": "values",
              "type": "codeVoice"
            },
            {
              "text": ", an array of integers, and the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "addTenQuadratic()",
              "type": "codeVoice"
            },
            {
              "text": " function, which adds ten more values to the ",
              "type": "text"
            },
            {
              "code": "values",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "array on each call.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "  var values: [Int] = [0, 1, 2, 3]",
            "",
            "  // Don't use 'reserveCapacity(_:)' like this",
            "  func addTenQuadratic() {",
            "      let newCount = values.count + 10",
            "      values.reserveCapacity(newCount)",
            "      for n in values.count..<newCount {",
            "          values.append(n)",
            "      }",
            "  }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The call to ",
              "type": "text"
            },
            {
              "code": "reserveCapacity(_:)",
              "type": "codeVoice"
            },
            {
              "text": " increases the ",
              "type": "text"
            },
            {
              "code": "values",
              "type": "codeVoice"
            },
            {
              "text": " array’s capacity",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "by exactly 10 elements on each pass through ",
              "type": "text"
            },
            {
              "code": "addTenQuadratic()",
              "type": "codeVoice"
            },
            {
              "text": ", which",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "is linear growth. Instead of having constant time when averaged over",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "many calls, the function may decay to performance that is linear in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "values.count",
              "type": "codeVoice"
            },
            {
              "text": ". This is almost certainly not what you want.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In cases like this, the simplest fix is often to simply remove the call",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to ",
              "type": "text"
            },
            {
              "code": "reserveCapacity(_:)",
              "type": "codeVoice"
            },
            {
              "text": ", and let the ",
              "type": "text"
            },
            {
              "code": "append(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method grow the array",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for you.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "  func addTen() {",
            "      let newCount = values.count + 10",
            "      for n in values.count..<newCount {",
            "          values.append(n)",
            "      }",
            "  }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If you need more control over the capacity of your array, implement your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "own geometric growth strategy, passing the size you compute to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "reserveCapacity(_:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "O(",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "text": "n",
                      "type": "text"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": "), where ",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "text": "n",
                      "type": "text"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": " is the number of elements in the array.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Complexity",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray": {
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "role": "symbol",
      "title": "ContiguousArray",
      "type": "topic",
      "url": "/documentation/swift/contiguousarray"
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray/reserveCapacity(_:)": {
      "abstract": [
        {
          "text": "Reserves enough space to store the specified number of elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "reserveCapacity"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray/reserveCapacity(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "reserveCapacity(_:)",
      "type": "topic",
      "url": "/documentation/swift/contiguousarray/reservecapacity(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Int": {
      "abstract": [
        {
          "text": "A signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "role": "symbol",
      "title": "Int",
      "type": "topic",
      "url": "/documentation/swift/int"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/swift/contiguousarray/reservecapacity(_:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
