{
  "abstract": [
    {
      "text": "Use selectors and key paths to interact with dynamic Objective-C APIs.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/using-objective-c-runtime-features-in-swift"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Using Objective-C Runtime Features in Swift"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Some Objective-C APIs—like target-action—accept method or property names as parameters,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "then use those names to dynamically call or access the methods or properties. In",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Swift, you use the ",
              "type": "text"
            },
            {
              "code": "#selector",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "#keyPath",
              "type": "codeVoice"
            },
            {
              "text": " expressions to represent those method",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or property names as selectors or key paths, respectively.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Use-Selectors-to-Arrange-Calls-to-Objective-C-Methods",
          "level": 3,
          "text": "Use Selectors to Arrange Calls to Objective-C Methods",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In Objective-C, a selector is a type that refers to the name of an Objective-C method.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In Swift, Objective-C selectors are represented by the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/objectivec/selector",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "structure, and you create them using the ",
              "type": "text"
            },
            {
              "code": "#selector",
              "type": "codeVoice"
            },
            {
              "text": " expression.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In Swift, you create a selector for an Objective-C method by placing the name of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the method within the ",
              "type": "text"
            },
            {
              "code": "#selector",
              "type": "codeVoice"
            },
            {
              "text": " expression: ",
              "type": "text"
            },
            {
              "code": "#selector(MyViewController.tappedButton(_:))",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "To construct a selector for a property’s Objective-C getter or setter method, prefix",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the property name using the ",
              "type": "text"
            },
            {
              "code": "getter:",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "setter:",
              "type": "codeVoice"
            },
            {
              "text": " label, like ",
              "type": "text"
            },
            {
              "code": "#selector(getter: MyViewController.myButton)",
              "type": "codeVoice"
            },
            {
              "text": ". The example below shows a selector being used as part",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of the target-action pattern to call a method in response to the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/UIKit/UIControl/Event/touchUpInside",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "event.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "import UIKit",
            "class MyViewController: UIViewController {",
            "    let myButton = UIButton(frame: CGRect(x: 0, y: 0, width: 100, height: 50))",
            "",
            "    override init(nibName nibNameOrNil: NSNib.Name?, bundle nibBundleOrNil: Bundle?) {",
            "        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)",
            "        let action = #selector(MyViewController.tappedButton)",
            "        myButton.addTarget(self, action: action, forControlEvents: .touchUpInside)",
            "    }",
            "",
            "    @objc func tappedButton(_ sender: UIButton?) {",
            "        print(\"tapped button\")",
            "    }",
            "",
            "    required init?(coder: NSCoder) {",
            "        super.init(coder: coder)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If you need to disambiguate between overloaded functions, use parenthesized expressions",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "along with the ",
              "type": "text"
            },
            {
              "code": "as",
              "type": "codeVoice"
            },
            {
              "text": " operator to make the ",
              "type": "text"
            },
            {
              "code": "#selector",
              "type": "codeVoice"
            },
            {
              "text": " expression refer unambiguously",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to a specific overload.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Use-Key-Paths-to-Dynamically-Access-Objective-C-Properties",
          "level": 3,
          "text": "Use Key Paths to Dynamically Access Objective-C Properties",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In Objective-C, a key is a string that identifies a specific property of an object.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "A key path is a string of dot-separated keys that specifies a sequence of object",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "properties to traverse. Keys and key paths are frequently used for key-value coding",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(KVC), a mechanism for indirectly accessing an object’s attributes and relationships",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "using string identifiers.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Objective-C key paths are distinct from, but related to, key-path expressions",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "in Swift. For information about key-path expressions, see ",
                  "type": "text"
                },
                {
                  "identifier": "https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/doc/uid/TP40014097-CH32-ID563",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "in ",
                  "type": "text"
                },
                {
                  "identifier": "https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "You use the ",
              "type": "text"
            },
            {
              "code": "#keyPath",
              "type": "codeVoice"
            },
            {
              "text": " string expression to create compiler-checked keys and key",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "paths that can be used by KVC methods like ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1412591-value",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1416468-value",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "#keyPath",
              "type": "codeVoice"
            },
            {
              "text": " string expression accepts chained method or property references. It",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "also supports chaining through optional values within a chain, such as ",
              "type": "text"
            },
            {
              "code": "#keyPath(Person.bestFriend.name)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Key paths created using the ",
              "type": "text"
            },
            {
              "code": "#keyPath",
              "type": "codeVoice"
            },
            {
              "text": " string expression don’t pass type information",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "about the properties or methods they reference to the APIs that accept key paths.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The example below defines a ",
              "type": "text"
            },
            {
              "code": "Person",
              "type": "codeVoice"
            },
            {
              "text": " class, creates two instances of it, and uses",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "several ",
              "type": "text"
            },
            {
              "code": "#keyPath",
              "type": "codeVoice"
            },
            {
              "text": " string expressions to access properties and properties of those",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "properties:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class Person: NSObject {",
            "    @objc var name: String",
            "    @objc var friends: [Person] = []",
            "    @objc var bestFriend: Person? = nil",
            "",
            "    init(name: String) {",
            "        self.name = name",
            "    }",
            "}",
            "",
            "let gabrielle = Person(name: \"Gabrielle\")",
            "let jim = Person(name: \"Jim\")",
            "let yuanyuan = Person(name: \"Yuanyuan\")",
            "gabrielle.friends = [jim, yuanyuan]",
            "gabrielle.bestFriend = yuanyuan",
            "",
            "#keyPath(Person.name)",
            "// \"name\"",
            "gabrielle.value(forKey: #keyPath(Person.name))",
            "// \"Gabrielle\"",
            "#keyPath(Person.bestFriend.name)",
            "// \"bestFriend.name\"",
            "gabrielle.value(forKeyPath: #keyPath(Person.bestFriend.name))",
            "// \"Yuanyuan\"",
            "#keyPath(Person.friends.name)",
            "// \"friends.name\"",
            "gabrielle.value(forKeyPath: #keyPath(Person.friends.name))",
            "// [\"Yuanyuan\", \"Jim\"]"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/calling-objective-c-apis-asynchronously": {
      "abstract": [
        {
          "text": "Learn how functions and methods that take a completion handler are converted to Swift",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous functions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/calling-objective-c-apis-asynchronously",
      "kind": "article",
      "role": "article",
      "title": "Calling Objective-C APIs Asynchronously",
      "type": "topic",
      "url": "/documentation/swift/calling-objective-c-apis-asynchronously"
    },
    "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns": {
      "abstract": [
        {
          "text": "Adopt and interoperate with Cocoa design patterns in your Swift apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Cocoa Design Patterns",
      "type": "topic",
      "url": "/documentation/swift/cocoa-design-patterns"
    },
    "doc://com.apple.Swift/documentation/Swift/handling-dynamically-typed-methods-and-objects-in-swift": {
      "abstract": [
        {
          "text": "Cast instances of the Objective-C ",
          "type": "text"
        },
        {
          "code": "id",
          "type": "codeVoice"
        },
        {
          "text": " type to a specific Swift type.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/handling-dynamically-typed-methods-and-objects-in-swift",
      "kind": "article",
      "role": "article",
      "title": "Handling Dynamically Typed Methods and Objects in Swift",
      "type": "topic",
      "url": "/documentation/swift/handling-dynamically-typed-methods-and-objects-in-swift"
    },
    "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis": {
      "abstract": [
        {
          "text": "Use native Swift syntax to interoperate with types and functions in C and Objective-C.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Imported C and Objective-C APIs",
      "type": "topic",
      "url": "/documentation/swift/imported-c-and-objective-c-apis"
    },
    "doc://com.apple.Swift/documentation/Swift/migrating-your-objective-c-code-to-swift": {
      "abstract": [
        {
          "text": "Learn the recommended steps to migrate your code.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/migrating-your-objective-c-code-to-swift",
      "kind": "article",
      "role": "article",
      "title": "Migrating Your Objective-C Code to Swift",
      "type": "topic",
      "url": "/documentation/swift/migrating-your-objective-c-code-to-swift"
    },
    "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization": {
      "abstract": [
        {
          "text": "Apply macros to your Objective-C APIs to customize how they’re imported into Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Objective-C and C Code Customization",
      "type": "topic",
      "url": "/documentation/swift/objective-c-and-c-code-customization"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIControl/Event/touchUpInside": {
      "abstract": [
        {
          "text": "A touch-up event in the control where the finger is inside the bounds of the control.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "touchUpInside"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIControl",
          "text": "UIControl"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@UIControlEvents",
          "text": "Event"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIControl/Event/touchUpInside",
      "kind": "symbol",
      "role": "symbol",
      "title": "touchUpInside",
      "type": "topic",
      "url": "/documentation/UIKit/UIControl/Event/touchUpInside"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobject/1412591-value": {
      "abstract": [
        {
          "text": "Returns the value for the property identified by a given key.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "value"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "forKey"
        },
        {
          "kind": "text",
          "text": ": String) -> Any?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1412591-value",
      "kind": "symbol",
      "role": "symbol",
      "title": "value(forKey:)",
      "type": "topic",
      "url": "/documentation/objectivec/nsobject/1412591-value"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobject/1416468-value": {
      "abstract": [
        {
          "text": "Returns the value for the derived property identified by a given key path.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "value"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "forKeyPath"
        },
        {
          "kind": "text",
          "text": ": String) -> Any?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1416468-value",
      "kind": "symbol",
      "role": "symbol",
      "title": "value(forKeyPath:)",
      "type": "topic",
      "url": "/documentation/objectivec/nsobject/1416468-value"
    },
    "doc://com.apple.documentation/documentation/objectivec/selector": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "struct "
        },
        {
          "kind": "identifier",
          "text": "Selector"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/selector",
      "kind": "symbol",
      "role": "symbol",
      "title": "Selector",
      "type": "topic",
      "url": "/documentation/objectivec/selector"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/doc/uid/TP40014097-CH32-ID563": {
      "identifier": "https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/doc/uid/TP40014097-CH32-ID563",
      "title": "Key-Path Expression",
      "titleInlineContent": [
        {
          "text": "Key-Path Expression",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/doc/uid/TP40014097-CH32-ID563"
    },
    "https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097": {
      "identifier": "https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097",
      "title": "The Swift Programming Language (Swift 4.1)",
      "titleInlineContent": [
        {
          "text": "The Swift Programming Language (Swift 4.1)",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/library/archive/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Language-Interoperability-with-Objective-C-and-C",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/objective-c-and-c-code-customization",
        "doc://com.apple.Swift/documentation/Swift/migrating-your-objective-c-code-to-swift",
        "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns",
        "doc://com.apple.Swift/documentation/Swift/handling-dynamically-typed-methods-and-objects-in-swift",
        "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis",
        "doc://com.apple.Swift/documentation/Swift/calling-objective-c-apis-asynchronously"
      ],
      "title": "Language Interoperability with Objective-C and C"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1objectivec~1nsobject~11416468-value/title",
          "value": "valueForKeyPath:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIControl~1Event~1touchUpInside/title",
          "value": "UIControlEventTouchUpInside"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIControl~1Event~1touchUpInside/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "UIControlEventTouchUpInside"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1objectivec~1nsobject~11412591-value/title",
          "value": "valueForKey:"
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
