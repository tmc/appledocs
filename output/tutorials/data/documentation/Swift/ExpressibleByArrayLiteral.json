{
  "abstract": [
    {
      "text": "A type that can be initialized using an array literal.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s25ExpressibleByArrayLiteralP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "ExpressibleByArrayLiteral"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "ExpressibleByArrayLiteral"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "ExpressibleByArrayLiteral"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "ExpressibleByArrayLiteral"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "An array literal is a simple way of expressing a list of values. Simply",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "surround a comma-separated list of values, instances, or literals with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "square brackets to create an array literal. You can use an array literal",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "anywhere an instance of an ",
              "type": "text"
            },
            {
              "code": "ExpressibleByArrayLiteral",
              "type": "codeVoice"
            },
            {
              "text": " type is expected: as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a value assigned to a variable or constant, as a parameter to a method or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initializer, or even as the subject of a nonmutating operation like",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "map(_:)",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "filter(_:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Arrays, sets, and option sets all conform to ",
              "type": "text"
            },
            {
              "code": "ExpressibleByArrayLiteral",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and your own custom types can as well. Here’s an example of creating a set",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and an array using array literals:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let employeesSet: Set<String> = [\"Amir\", \"Jihye\", \"Dave\", \"Alessia\", \"Dave\"]",
            "print(employeesSet)",
            "// Prints \"[\"Amir\", \"Dave\", \"Jihye\", \"Alessia\"]\"",
            "",
            "let employeesArray: [String] = [\"Amir\", \"Jihye\", \"Dave\", \"Alessia\", \"Dave\"]",
            "print(employeesArray)",
            "// Prints \"[\"Amir\", \"Jihye\", \"Dave\", \"Alessia\", \"Dave\"]\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "Set",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " types each handle array literals in their own way to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "create new instances. In this case, the newly created set drops the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "duplicate value (“Dave”) and doesn’t maintain the order of the array",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "literal’s elements. The new array, on the other hand, matches the order",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and number of elements provided.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "An array literal is not the same as an ",
                  "type": "text"
                },
                {
                  "code": "Array",
                  "type": "codeVoice"
                },
                {
                  "text": " instance. You can’t",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "initialize a type that conforms to ",
                  "type": "text"
                },
                {
                  "code": "ExpressibleByArrayLiteral",
                  "type": "codeVoice"
                },
                {
                  "text": " simply by",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "assigning an existing array.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            },
            {
              "code": [
                "let anotherSet: Set = employeesArray",
                "// error: cannot convert value of type '[String]' to specified type 'Set'"
              ],
              "syntax": "swift",
              "type": "codeListing"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Type-Inference-of-Array-Literals",
          "level": 1,
          "text": "Type Inference of Array Literals",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Whenever possible, Swift’s compiler infers the full intended type of your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "array literal. Because ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " is the default type for an array literal,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "without writing any other code, you can declare an array with a particular",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "element type by providing one or more values.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In this example, the compiler infers the full type of each array literal.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let integers = [1, 2, 3]",
            "// 'integers' has type '[Int]'",
            "",
            "let strings = [\"a\", \"b\", \"c\"]",
            "// 'strings' has type '[String]'"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "An empty array literal alone doesn’t provide enough information for the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "compiler to infer the intended type of the ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " instance. When using an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "empty array literal, specify the type of the variable or constant.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var emptyArray: [Bool] = []",
            "// 'emptyArray' has type '[Bool]'"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Because many functions and initializers fully specify the types of their",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "parameters, you can often use an array literal with or without elements as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a parameter. For example, the ",
              "type": "text"
            },
            {
              "code": "sum(_:)",
              "type": "codeVoice"
            },
            {
              "text": " function shown here takes an ",
              "type": "text"
            },
            {
              "code": "Int",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "array as a parameter:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func sum(values: [Int]) -> Int {",
            "    return values.reduce(0, +)",
            "}",
            "",
            "let sumOfFour = sum([5, 10, 15, 20])",
            "// 'sumOfFour' == 50",
            "",
            "let sumOfNone = sum([])",
            "// 'sumOfNone' == 0"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When you call a function that does not fully specify its parameters’ types,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use the type-cast operator (",
              "type": "text"
            },
            {
              "code": "as",
              "type": "codeVoice"
            },
            {
              "text": ") to specify the type of an array literal.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, the ",
              "type": "text"
            },
            {
              "code": "log(name:value:)",
              "type": "codeVoice"
            },
            {
              "text": " function shown here has an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "unconstrained generic ",
              "type": "text"
            },
            {
              "code": "value",
              "type": "codeVoice"
            },
            {
              "text": " parameter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func log<T>(name name: String, value: T) {",
            "    print(\"\\(name): \\(value)\")",
            "}",
            "",
            "log(name: \"Four integers\", value: [5, 10, 15, 20])",
            "// Prints \"Four integers: [5, 10, 15, 20]\"",
            "",
            "log(name: \"Zero integers\", value: [] as [Int])",
            "// Prints \"Zero integers: []\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Conforming-to-ExpressibleByArrayLiteral",
          "level": 1,
          "text": "Conforming to ExpressibleByArrayLiteral",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Add the capability to be initialized with an array literal to your own",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "custom types by declaring an ",
              "type": "text"
            },
            {
              "code": "init(arrayLiteral:)",
              "type": "codeVoice"
            },
            {
              "text": " initializer. The",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "following example shows the array literal initializer for a hypothetical",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "OrderedSet",
              "type": "codeVoice"
            },
            {
              "text": " type, which has setlike semantics but maintains the order of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "its elements.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct OrderedSet<Element: Hashable>: Collection, SetAlgebra {",
            "    // implementation details",
            "}",
            "",
            "extension OrderedSet: ExpressibleByArrayLiteral {",
            "    init(arrayLiteral: Element...) {",
            "        self.init()",
            "        for element in arrayLiteral {",
            "            self.append(element)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/Array": {
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "role": "symbol",
      "title": "Array",
      "type": "topic",
      "url": "/documentation/swift/array"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice": {
      "abstract": [
        {
          "text": "A slice of an ",
          "type": "text"
        },
        {
          "code": "Array",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "ContiguousArray",
          "type": "codeVoice"
        },
        {
          "text": ", or ",
          "type": "text"
        },
        {
          "code": "ArraySlice",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "role": "symbol",
      "title": "ArraySlice",
      "type": "topic",
      "url": "/documentation/swift/arrayslice"
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray": {
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "role": "symbol",
      "title": "ContiguousArray",
      "type": "topic",
      "url": "/documentation/swift/contiguousarray"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized using an array literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByArrayLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByArrayLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByArrayLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyarrayliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral/ArrayLiteralElement": {
      "abstract": [
        {
          "text": "The type of the elements of an array literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArrayLiteralElement"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral/ArrayLiteralElement",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "ArrayLiteralElement",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyarrayliteral/arrayliteralelement"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral/init(arrayLiteral:)": {
      "abstract": [
        {
          "text": "Creates an instance initialized with the given elements.",
          "type": "text"
        }
      ],
      "defaultImplementations": 2,
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "arrayLiteral"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s25ExpressibleByArrayLiteralP0cD7ElementQa",
          "text": "ArrayLiteralElement"
        },
        {
          "kind": "text",
          "text": "...)"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral/init(arrayLiteral:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(arrayLiteral:)",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyarrayliteral/init(arrayliteral:)"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByDictionaryLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized using a dictionary literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByDictionaryLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByDictionaryLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByDictionaryLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByDictionaryLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebydictionaryliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/OptionSet": {
      "abstract": [
        {
          "text": "A type that presents a mathematical set interface to a bit set.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "OptionSet"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/OptionSet",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "OptionSet"
        }
      ],
      "role": "symbol",
      "title": "OptionSet",
      "type": "topic",
      "url": "/documentation/swift/optionset"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD": {
      "abstract": [
        {
          "text": "A SIMD vector of a fixed number of elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD"
        }
      ],
      "role": "symbol",
      "title": "SIMD",
      "type": "topic",
      "url": "/documentation/swift/simd"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD16": {
      "abstract": [
        {
          "text": "A vector of 16 scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "role": "symbol",
      "title": "SIMD16",
      "type": "topic",
      "url": "/documentation/swift/simd16"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD2": {
      "abstract": [
        {
          "text": "A vector of two scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD2",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "role": "symbol",
      "title": "SIMD2",
      "type": "topic",
      "url": "/documentation/swift/simd2"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD3": {
      "abstract": [
        {
          "text": "A vector of three scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD3",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "role": "symbol",
      "title": "SIMD3",
      "type": "topic",
      "url": "/documentation/swift/simd3"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD32": {
      "abstract": [
        {
          "text": "A vector of 32 scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "role": "symbol",
      "title": "SIMD32",
      "type": "topic",
      "url": "/documentation/swift/simd32"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD4": {
      "abstract": [
        {
          "text": "A vector of four scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD4",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "role": "symbol",
      "title": "SIMD4",
      "type": "topic",
      "url": "/documentation/swift/simd4"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD64": {
      "abstract": [
        {
          "text": "A vector of 64 scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "role": "symbol",
      "title": "SIMD64",
      "type": "topic",
      "url": "/documentation/swift/simd64"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD8": {
      "abstract": [
        {
          "text": "A vector of eight scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "role": "symbol",
      "title": "SIMD8",
      "type": "topic",
      "url": "/documentation/swift/simd8"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMDMask": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMDMask"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMDMask",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMDMask"
        }
      ],
      "role": "symbol",
      "title": "SIMDMask",
      "type": "topic",
      "url": "/documentation/swift/simdmask"
    },
    "doc://com.apple.Swift/documentation/Swift/Set": {
      "abstract": [
        {
          "text": "An unordered collection of unique elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "role": "symbol",
      "title": "Set",
      "type": "topic",
      "url": "/documentation/swift/set"
    },
    "doc://com.apple.Swift/documentation/Swift/SetAlgebra": {
      "abstract": [
        {
          "text": "A type that provides mathematical set operations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SetAlgebra"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SetAlgebra",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SetAlgebra"
        }
      ],
      "role": "symbol",
      "title": "SetAlgebra",
      "type": "topic",
      "url": "/documentation/swift/setalgebra"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/OptionSet",
        "doc://com.apple.Swift/documentation/Swift/SIMD",
        "doc://com.apple.Swift/documentation/Swift/SetAlgebra"
      ],
      "kind": "relationships",
      "title": "Inherited By",
      "type": "inheritedBy"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice",
        "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
        "doc://com.apple.Swift/documentation/Swift/SIMD16",
        "doc://com.apple.Swift/documentation/Swift/SIMD2",
        "doc://com.apple.Swift/documentation/Swift/SIMD3",
        "doc://com.apple.Swift/documentation/Swift/SIMD32",
        "doc://com.apple.Swift/documentation/Swift/SIMD4",
        "doc://com.apple.Swift/documentation/Swift/SIMD64",
        "doc://com.apple.Swift/documentation/Swift/SIMD8",
        "doc://com.apple.Swift/documentation/Swift/SIMDMask",
        "doc://com.apple.Swift/documentation/Swift/Set"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Collection-Literals",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByDictionaryLiteral"
      ],
      "title": "Collection Literals"
    }
  ],
  "topicSections": [
    {
      "anchor": "Associated-Types",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral/ArrayLiteralElement"
      ],
      "title": "Associated Types"
    },
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral/init(arrayLiteral:)"
      ],
      "title": "Initializers"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/expressiblebyarrayliteral"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
