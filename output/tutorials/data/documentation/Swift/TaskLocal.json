{
  "abstract": [
    {
      "text": "Wrapper type that defines a task-local value key.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/TaskLocal"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:12_Concurrency9TaskLocalC",
    "fragments": [
      {
        "kind": "keyword",
        "text": "class"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "TaskLocal"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "TaskLocal"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.15",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "6.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Class",
    "symbolKind": "class",
    "title": "TaskLocal"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "final"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "class"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "TaskLocal"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Value"
            },
            {
              "kind": "text",
              "text": "> "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "Value"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s8SendableP",
              "text": "Sendable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A task-local value is a value that can be bound and read in the context of a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/Task",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". It is implicitly carried with the task, and is accessible by any",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "child tasks it creates (such as TaskGroup or ",
              "type": "text"
            },
            {
              "code": "async let",
              "type": "codeVoice"
            },
            {
              "text": " created tasks).",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Task-local-declarations",
          "level": 3,
          "text": "Task-local declarations",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Task locals must be declared as static properties or global properties, like this:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum Example {",
            "    @TaskLocal",
            "    static var traceID: TraceID?",
            "}",
            "",
            "// Global task local properties are supported since Swift 6.0:",
            "@TaskLocal",
            "var contextualNumber: Int = 12"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Default-values",
          "level": 3,
          "text": "Default values",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Reading a task local value when no value was bound to it results in returning",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "its default value. For a task local declared as optional (such as e.g. ",
              "type": "text"
            },
            {
              "code": "TraceID?",
              "type": "codeVoice"
            },
            {
              "text": "),",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "this defaults to nil, however a different default value may be defined at declaration",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "site of the task local, like this:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum Example { ",
            "    @TaskLocal",
            "    static var traceID: TraceID = TraceID.default",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The default value is returned whenever the task-local is read",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "from a context which either: has no task available to read the value from",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(e.g. a synchronous function, called without any asynchronous function in its call stack),",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or no value was bound within the scope of the current task or any of its parent tasks.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Reading-task-local-values",
          "level": 3,
          "text": "Reading task-local values",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Reading task local values is simple and looks the same as-if reading a normal",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "static property:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "guard let traceID = Example.traceID else {",
            "  print(\"no trace id\")",
            "  return",
            "}",
            "print(traceID)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "It is possible to perform task-local value reads from either asynchronous",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or synchronous functions.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Binding-task-local-values",
          "level": 3,
          "text": "Binding task-local values",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Task local values cannot be ",
              "type": "text"
            },
            {
              "code": "set",
              "type": "codeVoice"
            },
            {
              "text": " directly and must instead be bound using",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the scoped ",
              "type": "text"
            },
            {
              "code": "$traceID.withValue() { ... }",
              "type": "codeVoice"
            },
            {
              "text": " operation. The value is only bound",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for the duration of that scope, and is available to any child tasks which",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are created within that scope.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Detached tasks do not inherit task-local values, however tasks created using",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the ",
              "type": "text"
            },
            {
              "code": "Task { ... }",
              "type": "codeVoice"
            },
            {
              "text": " initializer do inherit task-locals by copying them to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "new asynchronous task, even though it is an un-structured task.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Using-task-local-values-outside-of-tasks",
          "level": 3,
          "text": "Using task local values outside of tasks",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "It is possible to bind and read task local values outside of tasks.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This comes in handy within synchronous functions which are not guaranteed",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to be called from within a task. When binding a task-local value from",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "outside of a task, the runtime will set a thread-local in which the same",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "storage mechanism as used within tasks will be used. This means that you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can reliably bind and read task local values without having to worry",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "about the specific calling context, e.g.:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func enter() {",
            "    Example.$traceID.withValue(\"1234\") {",
            "        read() // always \"1234\", regardless if enter() was called from inside a task or not:",
            "}",
            "",
            "func read() -> String {",
            "    if let value = Self.traceID {",
            "        \"\\(value)\" ",
            "    } else { ",
            "        \"<no value>\"",
            "    }",
            "}",
            "",
            "// 1) Call `enter` from non-Task code",
            "//    e.g. synchronous main() or non-Task thread (e.g. a plain pthread)",
            "enter()",
            "",
            "// 2) Call 'enter' from Task",
            "Task { ",
            "    enter()",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In either cases listed above, the binding and reading of the task-local value works as expected.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Examples",
          "level": 3,
          "text": "Examples",
          "type": "heading"
        },
        {
          "code": [
            "enum Example {",
            "    @TaskLocal",
            "    static var traceID: TraceID?",
            "}",
            "",
            "func read() -> String {",
            "    if let value = Self.traceID {",
            "        \"\\(value)\" ",
            "    } else { ",
            "        \"<no value>\"",
            "    }",
            "}",
            "",
            "await Example.$traceID.withValue(1234) { // bind the value",
            "  print(\"traceID: \\(Example.traceID)\") // traceID: 1234",
            "  read() // traceID: 1234",
            "",
            "  async let id = read() // async let child task, traceID: 1234",
            "",
            "  await withTaskGroup(of: String.self) { group in ",
            "      group.addTask { read() } // task group child task, traceID: 1234",
            "      return await group.next()!",
            "  }",
            "",
            "  Task { // unstructured tasks do inherit task locals by copying",
            "    read() // traceID: 1234",
            "  }",
            "",
            "  Task.detached { // detached tasks do not inherit task-local values",
            "    read() // traceID: nil",
            "  }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "code": "TaskLocal-macro",
                  "type": "codeVoice"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "See Also",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Swift/Task": {
      "abstract": [
        {
          "text": "A unit of asynchronous work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Task"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Task",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Task"
        }
      ],
      "role": "symbol",
      "title": "Task",
      "type": "topic",
      "url": "/documentation/swift/task"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal": {
      "abstract": [
        {
          "text": "Wrapper type that defines a task-local value key.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskLocal"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TaskLocal"
        }
      ],
      "role": "symbol",
      "title": "TaskLocal",
      "type": "topic",
      "url": "/documentation/swift/tasklocal"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal()": {
      "abstract": [
        {
          "text": "Macro that introduces a ",
          "type": "text"
        },
        {
          "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": " binding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskLocal"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal()",
      "kind": "symbol",
      "role": "symbol",
      "title": "TaskLocal()",
      "type": "topic",
      "url": "/documentation/swift/tasklocal()"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal/description": {
      "abstract": [
        {
          "text": "A textual representation of this instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "description"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal/description",
      "kind": "symbol",
      "role": "symbol",
      "title": "description",
      "type": "topic",
      "url": "/documentation/swift/tasklocal/description"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal/get()": {
      "abstract": [
        {
          "text": "Gets the value currently bound to this task-local from the current task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "get"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal/get()",
      "kind": "symbol",
      "role": "symbol",
      "title": "get()",
      "type": "topic",
      "url": "/documentation/swift/tasklocal/get()"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal/init(wrappedValue:)": {
      "abstract": [],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "wrappedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal/init(wrappedValue:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(wrappedValue:)",
      "type": "topic",
      "url": "/documentation/swift/tasklocal/init(wrappedvalue:)"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal/projectedValue": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "projectedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:12_Concurrency9TaskLocalC",
          "text": "TaskLocal"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal/projectedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "projectedValue",
      "type": "topic",
      "url": "/documentation/swift/tasklocal/projectedvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal/withValue(_:operation:file:line:)": {
      "abstract": [
        {
          "text": "Binds the task-local to the specific value for the duration of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "synchronous operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withValue"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "operation"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "file"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "line"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal/withValue(_:operation:file:line:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withValue(_:operation:file:line:)",
      "type": "topic",
      "url": "/documentation/swift/tasklocal/withvalue(_:operation:file:line:)"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal/withValue(_:operation:isolation:file:line:)": {
      "abstract": [
        {
          "text": "Binds the task-local to the specific value for the duration of the asynchronous operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withValue"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "operation"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "file"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "line"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal/withValue(_:operation:isolation:file:line:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withValue(_:operation:isolation:file:line:)",
      "type": "topic",
      "url": "/documentation/swift/tasklocal/withvalue(_:operation:isolation:file:line:)"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal/wrappedValue": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal/wrappedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappedValue",
      "type": "topic",
      "url": "/documentation/swift/tasklocal/wrappedvalue"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/Sendable"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Task-Local-Storage",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/TaskLocal()"
      ],
      "title": "Task-Local Storage"
    }
  ],
  "topicSections": [
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/TaskLocal/init(wrappedValue:)"
      ],
      "title": "Initializers"
    },
    {
      "anchor": "Instance-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/TaskLocal/description",
        "doc://com.apple.Swift/documentation/Swift/TaskLocal/projectedValue",
        "doc://com.apple.Swift/documentation/Swift/TaskLocal/wrappedValue"
      ],
      "title": "Instance Properties"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/TaskLocal/get()",
        "doc://com.apple.Swift/documentation/Swift/TaskLocal/withValue(_:operation:file:line:)",
        "doc://com.apple.Swift/documentation/Swift/TaskLocal/withValue(_:operation:isolation:file:line:)"
      ],
      "title": "Instance Methods"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/tasklocal"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
