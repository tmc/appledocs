{
  "abstract": [
    {
      "text": "Throw and catch errors that use Cocoa’s error types.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift",
        "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/handling-cocoa-errors-in-swift"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Handling Cocoa Errors in Swift"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You use Swift’s ",
              "type": "text"
            },
            {
              "code": "throw",
              "type": "codeVoice"
            },
            {
              "text": " statement and ",
              "type": "text"
            },
            {
              "code": "do",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "catch",
              "type": "codeVoice"
            },
            {
              "text": " statement to throw and catch errors",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "from Cocoa APIs.  Swift imports Cocoa methods with error parameters as throwing methods,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as described in ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/about-imported-cocoa-error-parameters",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Catch-Errors",
          "level": 3,
          "text": "Catch Errors",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In Swift, calling a method that throws requires explicit error handling. Because",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Cocoa methods with errors parameters are imported as throwing methods, you handle",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "them using Swift’s ",
              "type": "text"
            },
            {
              "code": "do",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "catch",
              "type": "codeVoice"
            },
            {
              "text": " statement.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s an example of how you handle an error when calling a method in Objective-C:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "NSFileManager *fileManager = [NSFileManager defaultManager];",
            "NSURL *fromURL = [NSURL fileURLWithPath:@\"/path/to/old\"];",
            "NSURL *toURL = [NSURL fileURLWithPath:@\"/path/to/new\"];",
            "NSError *error = nil;",
            "BOOL success = [fileManager moveItemAtURL:fromURL toURL:toURL error:&error];",
            "if (!success) {",
            "    NSLog(@\"Error: %@\", error.domain);",
            "}"
          ],
          "syntax": "occ",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s how you handle the same error in Swift:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let fileManager = FileManager.default",
            "let fromURL = URL(fileURLWithPath: \"/path/to/old\")",
            "let toURL = URL(fileURLWithPath: \"/path/to/new\")",
            "do {",
            "    try fileManager.moveItem(at: fromURL, to: toURL)",
            "} catch let error as NSError {",
            "    print(\"Error: \\(error.domain)\")",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can also use the ",
              "type": "text"
            },
            {
              "code": "do",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "catch",
              "type": "codeVoice"
            },
            {
              "text": " statement to match on specific Cocoa error codes",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to differentiate possible failure conditions:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "do {",
            "    try fileManager.moveItem(at: fromURL, to: toURL)",
            "} catch CocoaError.fileNoSuchFile {",
            "    print(\"Error: no such file exists\")",
            "} catch CocoaError.fileReadUnsupportedScheme {",
            "    print(\"Error: unsupported scheme (should be 'file://')\")",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Throw-Errors",
          "level": 3,
          "text": "Throw Errors",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You throw Cocoa errors by initializing a Cocoa error type and passing in the relevant",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "error domain and code:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "throw NSError(domain: NSURLErrorDomain, code: NSURLErrorCannotOpenFile, userInfo: nil)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If Objective-C code calls a Swift method that throws an error, the error is automatically",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "propagated to the error pointer argument of the bridged Objective-C method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Throw-and-Catch-Errors-from-Custom-Error-Domains",
          "level": 3,
          "text": "Throw and Catch Errors from Custom Error Domains",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You use custom error domains in Cocoa to group related categories of errors. The",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example below uses the ",
              "type": "text"
            },
            {
              "code": "NS_ERROR_ENUM",
              "type": "codeVoice"
            },
            {
              "text": " macro to group error constants:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "extern NSErrorDomain const MyErrorDomain;",
            "typedef NS_ERROR_ENUM(MyErrorDomain, MyError) {",
            "    specificError1 = 0,",
            "    specificError2 = 1",
            "};"
          ],
          "syntax": "occ",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "This example shows how to throw errors using that custom error type in Swift:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func customThrow() throws {",
            "    throw NSError(",
            "        domain: MyErrorDomain,",
            "        code: MyError.specificError2.rawValue,",
            "        userInfo: [",
            "            NSLocalizedDescriptionKey: \"A customized error from MyErrorDomain.\"",
            "        ]",
            "    )",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "This example shows how to catch errors from a particular error domain and bring attention",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to unhandled errors from other error domains:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "do {",
            "    try customThrow()",
            "} catch MyError.specificError1 {",
            "    print(\"Caught specific error #1\")",
            "} catch let error as MyError where error.code == .specificError2 {",
            "    print(\"Caught specific error #2, \", error.localizedDescription)",
            "    // Prints \"Caught specific error #2. A customized error from MyErrorDomain.\"",
            "} catch let error {",
            "    fatalError(\"Some other error: \\(error)\")",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Handle-Exceptions-in-Objective-C-Only",
          "level": 3,
          "text": "Handle Exceptions in Objective-C Only",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In Objective-C, exceptions are distinct from errors. Objective-C exception handling",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "uses the ",
              "type": "text"
            },
            {
              "code": "@try",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "@catch",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "@throw",
              "type": "codeVoice"
            },
            {
              "text": " syntax to indicate unrecoverable programmer",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "errors. This is distinct from the Cocoa pattern—described above—that uses a trailing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/foundation/nserror",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " parameter to indicate",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "recoverable errors that you plan for during development.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In Swift, you can recover from errors passed using Cocoa’s error pattern, as described",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "above in ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/handling-cocoa-errors-in-swift#Catch-Errors",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". However, there’s no safe",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "way to recover from Objective-C exceptions in Swift. To handle Objective-C exceptions,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "write Objective-C code that catches exceptions before they reach any Swift code.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/about-imported-cocoa-error-parameters": {
      "abstract": [
        {
          "text": "Learn how Cocoa error parameters are converted to Swift throwing methods.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/about-imported-cocoa-error-parameters",
      "kind": "article",
      "role": "article",
      "title": "About Imported Cocoa Error Parameters",
      "type": "topic",
      "url": "/documentation/swift/about-imported-cocoa-error-parameters"
    },
    "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns": {
      "abstract": [
        {
          "text": "Adopt and interoperate with Cocoa design patterns in your Swift apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/cocoa-design-patterns",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Cocoa Design Patterns",
      "type": "topic",
      "url": "/documentation/swift/cocoa-design-patterns"
    },
    "doc://com.apple.Swift/documentation/Swift/handling-cocoa-errors-in-swift#Catch-Errors": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/handling-cocoa-errors-in-swift#Catch-Errors",
      "kind": "section",
      "title": "Catch Errors",
      "type": "topic",
      "url": "/documentation/swift/handling-cocoa-errors-in-swift#Catch-Errors"
    },
    "doc://com.apple.Swift/documentation/Swift/managing-a-shared-resource-using-a-singleton": {
      "abstract": [
        {
          "text": "Provide access to a shared resource using a single, shared class instance.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/managing-a-shared-resource-using-a-singleton",
      "kind": "article",
      "role": "article",
      "title": "Managing a Shared Resource Using a Singleton",
      "type": "topic",
      "url": "/documentation/swift/managing-a-shared-resource-using-a-singleton"
    },
    "doc://com.apple.Swift/documentation/Swift/using-delegates-to-customize-object-behavior": {
      "abstract": [
        {
          "text": "Respond to events on behalf of a delegator.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/using-delegates-to-customize-object-behavior",
      "kind": "article",
      "role": "article",
      "title": "Using Delegates to Customize Object Behavior",
      "type": "topic",
      "url": "/documentation/swift/using-delegates-to-customize-object-behavior"
    },
    "doc://com.apple.Swift/documentation/Swift/using-key-value-observing-in-swift": {
      "abstract": [
        {
          "text": "Notify objects about changes to the properties of other objects.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/using-key-value-observing-in-swift",
      "kind": "article",
      "role": "article",
      "title": "Using Key-Value Observing in Swift",
      "type": "topic",
      "url": "/documentation/swift/using-key-value-observing-in-swift"
    },
    "doc://com.apple.documentation/documentation/foundation/nserror": {
      "abstract": [
        {
          "text": "Information about an error condition including a domain, a domain-specific error code, and application-specific information.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "NSError"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/nserror",
      "kind": "symbol",
      "role": "symbol",
      "title": "NSError",
      "type": "topic",
      "url": "/documentation/foundation/nserror"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Common-Patterns",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/using-key-value-observing-in-swift",
        "doc://com.apple.Swift/documentation/Swift/using-delegates-to-customize-object-behavior",
        "doc://com.apple.Swift/documentation/Swift/managing-a-shared-resource-using-a-singleton",
        "doc://com.apple.Swift/documentation/Swift/about-imported-cocoa-error-parameters"
      ],
      "title": "Common Patterns"
    }
  ]
}
