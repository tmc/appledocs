{
  "abstract": [
    {
      "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "contexts without introducing a risk of data races.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/Sendable"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s8SendableP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Sendable"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "Sendable"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "Sendable"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Sendable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Values of the type may have no shared mutable state,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or they may protect that state with a lock",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or by forcing it to only be accessed from a specific actor.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can safely pass values of a sendable type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "from one concurrency domain to another —",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for example, you can pass a sendable value as the argument",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "when calling an actor’s methods.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "All of the following can be marked as sendable:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Value types",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Reference types with no mutable storage",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Reference types that internally manage access to their state",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Functions and closures (by marking them with ",
                      "type": "text"
                    },
                    {
                      "code": "@Sendable",
                      "type": "codeVoice"
                    },
                    {
                      "text": ")",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Although this protocol doesn’t have any required methods or properties,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it does have semantic requirements that are enforced at compile time.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "These requirements are listed in the sections below.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Conformance to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " must be declared",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in the same file as the type’s declaration.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To declare conformance to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " without any compiler enforcement,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "write ",
              "type": "text"
            },
            {
              "code": "@unchecked Sendable",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You are responsible for the correctness of unchecked sendable types,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for example, by protecting all access to its state with a lock or a queue.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Unchecked conformance to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " also disables enforcement",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of the rule that conformance must be in the same file.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For information about the language-level concurrency model that ",
              "type": "text"
            },
            {
              "code": "Task",
              "type": "codeVoice"
            },
            {
              "text": " is part of,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "see ",
              "type": "text"
            },
            {
              "identifier": "https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " in ",
              "type": "text"
            },
            {
              "identifier": "https://docs.swift.org/swift-book/",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Sendable-Structures-and-Enumerations",
          "level": 3,
          "text": "Sendable Structures and Enumerations",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To satisfy the requirements of the ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " protocol,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an enumeration or structure must have only sendable",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "members and associated values.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In some cases, structures and enumerations",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that satisfy the requirements implicitly conform to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Frozen structures and enumerations",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Structures and enumerations",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "that aren’t public and aren’t marked ",
                      "type": "text"
                    },
                    {
                      "code": "@usableFromInline",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Otherwise, you need to declare conformance to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " explicitly.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Structures that have nonsendable stored properties",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and enumerations that have nonsendable associated values",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can be marked as ",
              "type": "text"
            },
            {
              "code": "@unchecked Sendable",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "disabling compile-time correctness checks,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "after you manually verify that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "they satisfy the ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " protocol’s semantic requirements.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Sendable-Actors",
          "level": 3,
          "text": "Sendable Actors",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "All actor types implicitly conform to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "because actors ensure that all access to their mutable state",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "is performed sequentially.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Sendable-Classes",
          "level": 3,
          "text": "Sendable Classes",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To satisfy the requirements of the ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " protocol,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a class must:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Be marked ",
                      "type": "text"
                    },
                    {
                      "code": "final",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Contain only stored properties that are immutable and sendable",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Have no superclass or have ",
                      "type": "text"
                    },
                    {
                      "code": "NSObject",
                      "type": "codeVoice"
                    },
                    {
                      "text": " as the superclass",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Classes marked with ",
              "type": "text"
            },
            {
              "code": "@MainActor",
              "type": "codeVoice"
            },
            {
              "text": " are implicitly sendable,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "because the main actor coordinates all access to its state.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "These classes can have stored properties that are mutable and nonsendable.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Classes that don’t meet the requirements above",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can be marked as ",
              "type": "text"
            },
            {
              "code": "@unchecked Sendable",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "disabling compile-time correctness checks,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "after you manually verify that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "they satisfy the ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " protocol’s semantic requirements.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Sendable-Functions-and-Closures",
          "level": 3,
          "text": "Sendable Functions and Closures",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Instead of conforming to the ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " protocol,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you mark sendable functions and closures with the ",
              "type": "text"
            },
            {
              "code": "@Sendable",
              "type": "codeVoice"
            },
            {
              "text": " attribute.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Any values that the function or closure captures must be sendable.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In addition, sendable closures must use only by-value captures,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and the captured values must be of a sendable type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In a context that expects a sendable closure,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a closure that satisfies the requirements",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "implicitly conforms to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " —",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for example, in a call to ",
              "type": "text"
            },
            {
              "code": "Task.detached(priority:operation:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can explicitly mark a closure as sendable",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "by writing ",
              "type": "text"
            },
            {
              "code": "@Sendable",
              "type": "codeVoice"
            },
            {
              "text": " as part of a type annotation,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or by writing ",
              "type": "text"
            },
            {
              "code": "@Sendable",
              "type": "codeVoice"
            },
            {
              "text": " before the closure’s parameters —",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let sendableClosure = { @Sendable (number: Int) -> String in",
            "    if number > 12 {",
            "        return \"More than a dozen.\"",
            "    } else {",
            "        return \"Less than a dozen\"",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Sendable-Tuples",
          "level": 3,
          "text": "Sendable Tuples",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To satisfy the requirements of the ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " protocol,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "all of the elements of the tuple must be sendable.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Tuples that satisfy the requirements implicitly conform to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Sendable-Metatypes",
          "level": 3,
          "text": "Sendable Metatypes",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Metatypes such as ",
              "type": "text"
            },
            {
              "code": "Int.Type",
              "type": "codeVoice"
            },
            {
              "text": " implicitly conform to the ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " protocol.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Distributed/DistributedActor": {
      "abstract": [
        {
          "text": "Common protocol to which all distributed actors conform implicitly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DistributedActor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/DistributedActor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DistributedActor"
        }
      ],
      "role": "symbol",
      "title": "DistributedActor",
      "type": "topic",
      "url": "/documentation/distributed/distributedactor"
    },
    "doc://com.apple.Swift/documentation/Distributed/DistributedActorCodingError": {
      "abstract": [
        {
          "text": "Error thrown by distributed actor systems while encountering encoding/decoding",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "issues.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DistributedActorCodingError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/DistributedActorCodingError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DistributedActorCodingError"
        }
      ],
      "role": "symbol",
      "title": "DistributedActorCodingError",
      "type": "topic",
      "url": "/documentation/distributed/distributedactorcodingerror"
    },
    "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystem": {
      "abstract": [
        {
          "text": "A distributed actor system underpins and implements all functionality of distributed actors.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DistributedActorSystem"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystem",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DistributedActorSystem"
        }
      ],
      "role": "symbol",
      "title": "DistributedActorSystem",
      "type": "topic",
      "url": "/documentation/distributed/distributedactorsystem"
    },
    "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystem/executeDistributedTarget(on:target:invocationDecoder:handler:)": {
      "abstract": [
        {
          "text": "Prepare and execute a call to the distributed function identified by the passed arguments,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "on the passed ",
          "type": "text"
        },
        {
          "code": "actor",
          "type": "codeVoice"
        },
        {
          "text": ", and collect its results using the ",
          "type": "text"
        },
        {
          "code": "ResultHandler",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "executeDistributedTarget"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Act"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "on"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Act"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "target"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:11Distributed16RemoteCallTargetV",
          "text": "RemoteCallTarget"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "invocationDecoder"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:11Distributed0A11ActorSystemP17InvocationDecoderQa",
          "text": "InvocationDecoder"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "handler"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:11Distributed0A11ActorSystemP13ResultHandlerQa",
          "text": "ResultHandler"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystem/executeDistributedTarget(on:target:invocationDecoder:handler:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "executeDistributedTarget(on:target:invocationDecoder:handler:)",
      "type": "topic",
      "url": "/documentation/distributed/distributedactorsystem/executedistributedtarget(on:target:invocationdecoder:handler:)"
    },
    "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystemError": {
      "abstract": [
        {
          "text": "Error protocol to which errors thrown by any ",
          "type": "text"
        },
        {
          "code": "DistributedActorSystem",
          "type": "codeVoice"
        },
        {
          "text": " should conform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DistributedActorSystemError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystemError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DistributedActorSystemError"
        }
      ],
      "role": "symbol",
      "title": "DistributedActorSystemError",
      "type": "topic",
      "url": "/documentation/distributed/distributedactorsystemerror"
    },
    "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError": {
      "abstract": [
        {
          "text": "Error thrown by ",
          "type": "text"
        },
        {
          "identifier": "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystem/executeDistributedTarget(on:target:invocationDecoder:handler:)",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExecuteDistributedTargetError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExecuteDistributedTargetError"
        }
      ],
      "role": "symbol",
      "title": "ExecuteDistributedTargetError",
      "type": "topic",
      "url": "/documentation/distributed/executedistributedtargeterror"
    },
    "doc://com.apple.Swift/documentation/Distributed/LocalTestingActorID": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LocalTestingActorID"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/LocalTestingActorID",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LocalTestingActorID"
        }
      ],
      "role": "symbol",
      "title": "LocalTestingActorID",
      "type": "topic",
      "url": "/documentation/distributed/localtestingactorid"
    },
    "doc://com.apple.Swift/documentation/Distributed/LocalTestingDistributedActorSystem": {
      "abstract": [
        {
          "text": "A ",
          "type": "text"
        },
        {
          "code": "DistributedActorSystem",
          "type": "codeVoice"
        },
        {
          "text": " designed for local only testing.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LocalTestingDistributedActorSystem"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/LocalTestingDistributedActorSystem",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LocalTestingDistributedActorSystem"
        }
      ],
      "role": "symbol",
      "title": "LocalTestingDistributedActorSystem",
      "type": "topic",
      "url": "/documentation/distributed/localtestingdistributedactorsystem"
    },
    "doc://com.apple.Swift/documentation/Distributed/LocalTestingDistributedActorSystemError": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LocalTestingDistributedActorSystemError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Distributed/LocalTestingDistributedActorSystemError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LocalTestingDistributedActorSystemError"
        }
      ],
      "role": "symbol",
      "title": "LocalTestingDistributedActorSystemError",
      "type": "topic",
      "url": "/documentation/distributed/localtestingdistributedactorsystemerror"
    },
    "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar": {
      "abstract": [
        {
          "text": "Provides storage for tracking and access to data changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservationRegistrar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObservationRegistrar"
        }
      ],
      "role": "symbol",
      "title": "ObservationRegistrar",
      "type": "topic",
      "url": "/documentation/observation/observationregistrar"
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/Actor": {
      "abstract": [
        {
          "text": "Common protocol to which all actors conform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Actor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Actor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Actor"
        }
      ],
      "role": "symbol",
      "title": "Actor",
      "type": "topic",
      "url": "/documentation/swift/actor"
    },
    "doc://com.apple.Swift/documentation/Swift/AnyActor": {
      "abstract": [
        {
          "text": "Common marker protocol providing a shared “base” for both (local) ",
          "type": "text"
        },
        {
          "code": "Actor",
          "type": "codeVoice"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and (potentially remote) ",
          "type": "text"
        },
        {
          "code": "DistributedActor",
          "type": "codeVoice"
        },
        {
          "text": " types.",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyActor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AnyActor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnyActor"
        }
      ],
      "role": "symbol",
      "title": "AnyActor",
      "type": "topic",
      "url": "/documentation/swift/anyactor"
    },
    "doc://com.apple.Swift/documentation/Swift/Array": {
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "role": "symbol",
      "title": "Array",
      "type": "topic",
      "url": "/documentation/swift/array"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice": {
      "abstract": [
        {
          "text": "A slice of an ",
          "type": "text"
        },
        {
          "code": "Array",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "ContiguousArray",
          "type": "codeVoice"
        },
        {
          "text": ", or ",
          "type": "text"
        },
        {
          "code": "ArraySlice",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "role": "symbol",
      "title": "ArraySlice",
      "type": "topic",
      "url": "/documentation/swift/arrayslice"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that maps a given closure over the asynchronous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence’s elements, omitting results that don’t return a value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncCompactMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncCompactMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncCompactMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asynccompactmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the compact map sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncCompactMapSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asynccompactmapsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence which omits a specified number of elements from the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "base asynchronous sequence, then passes through all remaining elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncDropFirstSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncDropFirstSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncDropFirstSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncdropfirstsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the drop-first sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncDropFirstSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncdropfirstsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence which omits elements from the base sequence until a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given closure returns false, after which it passes through all remaining",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncDropWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncDropWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncDropWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncdropwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the drop-while sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncDropWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncdropwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that contains, in order, the elements of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the base sequence that satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncFilterSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncFilterSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncFilterSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncfiltersequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the filter sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncFilterSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncfiltersequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that concatenates the results of calling a given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "transformation with each element of this sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncFlatMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncFlatMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncFlatMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncflatmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the flat map sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncFlatMapSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncflatmapsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that maps the given closure over the asynchronous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence’s elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the map sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncMapSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncmapsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence, up to a specified maximum length,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "containing the initial elements of a base asynchronous sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncPrefixSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncPrefixSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncPrefixSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncprefixsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the prefix sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncPrefixSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncprefixsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence, containing the initial, consecutive",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of the base sequence that satisfy a given predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncPrefixWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncPrefixWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncPrefixWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncprefixwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the prefix-while sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncPrefixWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncprefixwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream": {
      "abstract": [
        {
          "text": "An asynchronous sequence generated from a closure that calls a continuation",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to produce new elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncStream"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncStream"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream",
      "type": "topic",
      "url": "/documentation/swift/asyncstream"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation": {
      "abstract": [
        {
          "text": "A mechanism to interface between synchronous code and an asynchronous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "stream.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Continuation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Continuation"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Continuation",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/continuation"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/BufferingPolicy": {
      "abstract": [
        {
          "text": "A strategy that handles exhaustion of a buffer’s capacity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BufferingPolicy"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/BufferingPolicy",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BufferingPolicy"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Continuation.BufferingPolicy",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/continuation/bufferingpolicy"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination": {
      "abstract": [
        {
          "text": "A type that indicates how the stream terminated.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Termination"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Termination"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Continuation.Termination",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/continuation/termination"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/YieldResult": {
      "abstract": [
        {
          "text": "A type that indicates the result of yielding a value to a client, by",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "way of the continuation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "YieldResult"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/YieldResult",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "YieldResult"
        }
      ],
      "role": "symbol",
      "title": "AsyncStream.Continuation.YieldResult",
      "type": "topic",
      "url": "/documentation/swift/asyncstream/continuation/yieldresult"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that maps an error-throwing closure over the base",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence’s elements, omitting results that don’t return a value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingCompactMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingCompactMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingCompactMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingcompactmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the compact map sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "ElementOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingCompactMapSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingcompactmapsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence which omits elements from the base sequence until a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given error-throwing closure returns false, after which it passes through",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "all remaining elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingDropWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingDropWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingDropWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingdropwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the drop-while sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingDropWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingdropwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that contains, in order, the elements of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the base sequence that satisfy the given error-throwing predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingFilterSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingFilterSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingFilterSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingfiltersequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the filter sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingFilterSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingfiltersequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that concatenates the results of calling a given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "error-throwing transformation with each element of this sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingFlatMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingFlatMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingFlatMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingflatmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the flat map sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "SegmentOfResult.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingFlatMapSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingflatmapsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence that maps the given error-throwing closure over the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "asynchronous sequence’s elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingMapSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingMapSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingMapSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingmapsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the map sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Transformed",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingMapSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingmapsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence": {
      "abstract": [
        {
          "text": "An asynchronous sequence, containing the initial, consecutive",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of the base sequence that satisfy the given error-throwing",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "predicate.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingPrefixWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingPrefixWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingPrefixWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingprefixwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator that produces elements of the prefix-while sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AsyncSequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.AsyncIterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingPrefixWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingprefixwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream": {
      "abstract": [
        {
          "text": "An asynchronous sequence generated from an error-throwing closure that",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "calls a continuation to produce new elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncThrowingStream"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AsyncThrowingStream"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingStream",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingstream"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation": {
      "abstract": [
        {
          "text": "A mechanism to interface between synchronous code and an asynchronous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "stream.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Continuation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Continuation"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingStream.Continuation",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingstream/continuation"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/BufferingPolicy": {
      "abstract": [
        {
          "text": "A strategy that handles exhaustion of a buffer’s capacity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BufferingPolicy"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/BufferingPolicy",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BufferingPolicy"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingStream.Continuation.BufferingPolicy",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingstream/continuation/bufferingpolicy"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/Termination": {
      "abstract": [
        {
          "text": "A type that indicates how the stream terminated.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Termination"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/Termination",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Termination"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingStream.Continuation.Termination",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingstream/continuation/termination"
    },
    "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/YieldResult": {
      "abstract": [
        {
          "text": "A type that indicates the result of yielding a value to a client, by",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "way of the continuation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "YieldResult"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/YieldResult",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "YieldResult"
        }
      ],
      "role": "symbol",
      "title": "AsyncThrowingStream.Continuation.YieldResult",
      "type": "topic",
      "url": "/documentation/swift/asyncthrowingstream/continuation/yieldresult"
    },
    "doc://com.apple.Swift/documentation/Swift/Bool": {
      "abstract": [
        {
          "text": "A value type whose instances are either ",
          "type": "text"
        },
        {
          "code": "true",
          "type": "codeVoice"
        },
        {
          "text": " or ",
          "type": "text"
        },
        {
          "code": "false",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Bool",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/swift/bool"
    },
    "doc://com.apple.Swift/documentation/Swift/CancellationError": {
      "abstract": [
        {
          "text": "An error that indicates a task was canceled.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CancellationError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CancellationError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CancellationError"
        }
      ],
      "role": "symbol",
      "title": "CancellationError",
      "type": "topic",
      "url": "/documentation/swift/cancellationerror"
    },
    "doc://com.apple.Swift/documentation/Swift/Character": {
      "abstract": [
        {
          "text": "A single extended grapheme cluster that approximates a user-perceived",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "character.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Character"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Character",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Character"
        }
      ],
      "role": "symbol",
      "title": "Character",
      "type": "topic",
      "url": "/documentation/swift/character"
    },
    "doc://com.apple.Swift/documentation/Swift/CheckedContinuation": {
      "abstract": [
        {
          "text": "A mechanism to interface",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "between synchronous and asynchronous code,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "logging correctness violations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CheckedContinuation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CheckedContinuation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CheckedContinuation"
        }
      ],
      "role": "symbol",
      "title": "CheckedContinuation",
      "type": "topic",
      "url": "/documentation/swift/checkedcontinuation"
    },
    "doc://com.apple.Swift/documentation/Swift/Clock": {
      "abstract": [
        {
          "text": "A mechanism in which to measure time, and delay work until a given point",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Clock"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Clock",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Clock"
        }
      ],
      "role": "symbol",
      "title": "Clock",
      "type": "topic",
      "url": "/documentation/swift/clock"
    },
    "doc://com.apple.Swift/documentation/Swift/ClosedRange": {
      "abstract": [
        {
          "text": "An interval from a lower bound up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ClosedRange",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ClosedRange"
        }
      ],
      "role": "symbol",
      "title": "ClosedRange",
      "type": "topic",
      "url": "/documentation/swift/closedrange"
    },
    "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index": {
      "abstract": [
        {
          "text": "A type that represents a position in the collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "ClosedRange.Index",
      "type": "topic",
      "url": "/documentation/swift/closedrange/index"
    },
    "doc://com.apple.Swift/documentation/Swift/CodingKey": {
      "abstract": [
        {
          "text": "A type that can be used as a key for encoding and decoding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CodingKey"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CodingKey",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CodingKey"
        }
      ],
      "role": "symbol",
      "title": "CodingKey",
      "type": "topic",
      "url": "/documentation/swift/codingkey"
    },
    "doc://com.apple.Swift/documentation/Swift/CodingUserInfoKey": {
      "abstract": [
        {
          "text": "A user-defined key for providing context during encoding and decoding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CodingUserInfoKey"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CodingUserInfoKey",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CodingUserInfoKey"
        }
      ],
      "role": "symbol",
      "title": "CodingUserInfoKey",
      "type": "topic",
      "url": "/documentation/swift/codinguserinfokey"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference": {
      "abstract": [
        {
          "text": "A collection of insertions and removals that describe the difference",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "between two ordered collection states.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollectionDifference"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollectionDifference"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change": {
      "abstract": [
        {
          "text": "A single change to a collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Change"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Change"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference.Change",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference/change"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index": {
      "abstract": [
        {
          "text": "The position of a collection difference.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "ChangeElement",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "CollectionDifference.Index",
      "type": "topic",
      "url": "/documentation/swift/collectiondifference/index"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionOfOne": {
      "abstract": [
        {
          "text": "A collection containing a single element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollectionOfOne"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionOfOne",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollectionOfOne"
        }
      ],
      "role": "symbol",
      "title": "CollectionOfOne",
      "type": "topic",
      "url": "/documentation/swift/collectionofone"
    },
    "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator": {
      "abstract": [
        {
          "text": "An iterator that produces one or zero instances of an element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "CollectionOfOne.Iterator",
      "type": "topic",
      "url": "/documentation/swift/collectionofone/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/CommandLine": {
      "abstract": [
        {
          "text": "Command-line arguments for the current process.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CommandLine"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CommandLine",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CommandLine"
        }
      ],
      "role": "symbol",
      "title": "CommandLine",
      "type": "topic",
      "url": "/documentation/swift/commandline"
    },
    "doc://com.apple.Swift/documentation/Swift/ConcurrentValue": {
      "abstract": [],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ConcurrentValue"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ConcurrentValue",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ConcurrentValue"
        }
      ],
      "role": "symbol",
      "title": "ConcurrentValue",
      "type": "topic",
      "url": "/documentation/swift/concurrentvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray": {
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        }
      ],
      "role": "symbol",
      "title": "ContiguousArray",
      "type": "topic",
      "url": "/documentation/swift/contiguousarray"
    },
    "doc://com.apple.Swift/documentation/Swift/ContinuousClock": {
      "abstract": [
        {
          "text": "A clock that measures time that always increments and does not stop",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "incrementing while the system is asleep.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContinuousClock"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContinuousClock",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ContinuousClock"
        }
      ],
      "role": "symbol",
      "title": "ContinuousClock",
      "type": "topic",
      "url": "/documentation/swift/continuousclock"
    },
    "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant": {
      "abstract": [
        {
          "text": "A continuous point in time used for ",
          "type": "text"
        },
        {
          "code": "ContinuousClock",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "role": "symbol",
      "title": "ContinuousClock.Instant",
      "type": "topic",
      "url": "/documentation/swift/continuousclock/instant"
    },
    "doc://com.apple.Swift/documentation/Swift/DecodingError": {
      "abstract": [
        {
          "text": "An error that occurs during the decoding of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DecodingError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DecodingError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DecodingError"
        }
      ],
      "role": "symbol",
      "title": "DecodingError",
      "type": "topic",
      "url": "/documentation/swift/decodingerror"
    },
    "doc://com.apple.Swift/documentation/Swift/DecodingError/Context": {
      "abstract": [
        {
          "text": "The context in which the error occurred.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Context"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DecodingError/Context",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Context"
        }
      ],
      "role": "symbol",
      "title": "DecodingError.Context",
      "type": "topic",
      "url": "/documentation/swift/decodingerror/context"
    },
    "doc://com.apple.Swift/documentation/Swift/DefaultIndices": {
      "abstract": [
        {
          "text": "A collection of indices for an arbitrary collection",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Elements",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Elements",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Elements.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DefaultIndices"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DefaultIndices",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DefaultIndices"
        }
      ],
      "role": "symbol",
      "title": "DefaultIndices",
      "type": "topic",
      "url": "/documentation/swift/defaultindices"
    },
    "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation": {
      "abstract": [
        {
          "text": "Represents a string literal with interpolations while it is being built up.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DefaultStringInterpolation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DefaultStringInterpolation"
        }
      ],
      "role": "symbol",
      "title": "DefaultStringInterpolation",
      "type": "topic",
      "url": "/documentation/swift/defaultstringinterpolation"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary": {
      "abstract": [
        {
          "text": "A collection whose elements are key-value pairs.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "role": "symbol",
      "title": "Dictionary",
      "type": "topic",
      "url": "/documentation/swift/dictionary"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Index": {
      "abstract": [
        {
          "text": "The position of a key-value pair in a dictionary.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Index",
      "type": "topic",
      "url": "/documentation/swift/dictionary/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the members of a ",
          "type": "text"
        },
        {
          "code": "Dictionary<Key, Value>",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dictionary/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct": {
      "abstract": [
        {
          "text": "A view of a dictionary’s keys.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Keys"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Keys"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Keys",
      "type": "topic",
      "url": "/documentation/swift/dictionary/keys-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Keys.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dictionary/keys-swift.struct/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct": {
      "abstract": [
        {
          "text": "A view of a dictionary’s values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Values"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Values"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Values",
      "type": "topic",
      "url": "/documentation/swift/dictionary/values-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Dictionary.Values.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dictionary/values-swift.struct/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice": {
      "abstract": [
        {
          "text": "A collection wrapper that provides access to the elements of a collection,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "indexed by a set of indices.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DiscontiguousSlice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DiscontiguousSlice"
        }
      ],
      "role": "symbol",
      "title": "DiscontiguousSlice",
      "type": "topic",
      "url": "/documentation/swift/discontiguousslice"
    },
    "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index": {
      "abstract": [
        {
          "text": "A position in a ",
          "type": "text"
        },
        {
          "code": "DiscontiguousSlice",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "DiscontiguousSlice.Index",
      "type": "topic",
      "url": "/documentation/swift/discontiguousslice/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Double": {
      "abstract": [
        {
          "text": "A double-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "role": "symbol",
      "title": "Double",
      "type": "topic",
      "url": "/documentation/swift/double"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/DropFirstSequence": {
      "abstract": [
        {
          "text": "A sequence that lazily consumes and drops ",
          "type": "text"
        },
        {
          "code": "n",
          "type": "codeVoice"
        },
        {
          "text": " elements from an underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " iterator before possibly returning the first available element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DropFirstSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DropFirstSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DropFirstSequence"
        }
      ],
      "role": "symbol",
      "title": "DropFirstSequence",
      "type": "topic",
      "url": "/documentation/swift/dropfirstsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/DropWhileSequence": {
      "abstract": [
        {
          "text": "A sequence that lazily consumes and drops ",
          "type": "text"
        },
        {
          "code": "n",
          "type": "codeVoice"
        },
        {
          "text": " elements from an underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " iterator before possibly returning the first available element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DropWhileSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DropWhileSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DropWhileSequence"
        }
      ],
      "role": "symbol",
      "title": "DropWhileSequence",
      "type": "topic",
      "url": "/documentation/swift/dropwhilesequence"
    },
    "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "DropWhileSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/dropwhilesequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration": {
      "abstract": [
        {
          "text": "A representation of high precision time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Duration"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Duration"
        }
      ],
      "role": "symbol",
      "title": "Duration",
      "type": "topic",
      "url": "/documentation/swift/duration"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle": {
      "abstract": [
        {
          "text": "A format style that shows durations in a compact, localized format with separators.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TimeFormatStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TimeFormatStyle"
        }
      ],
      "role": "symbol",
      "title": "Duration.TimeFormatStyle",
      "type": "topic",
      "url": "/documentation/swift/duration/timeformatstyle"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct": {
      "abstract": [
        {
          "text": "A format style that formats durations as attributed strings.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "role": "symbol",
      "title": "Duration.TimeFormatStyle.Attributed",
      "type": "topic",
      "url": "/documentation/swift/duration/timeformatstyle/attributed-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Pattern-swift.struct": {
      "abstract": [
        {
          "text": "The units — including hours, minutes, or seconds — and the configuration of those units, used to format a duration.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Pattern"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Pattern-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Pattern"
        }
      ],
      "role": "symbol",
      "title": "Duration.TimeFormatStyle.Pattern",
      "type": "topic",
      "url": "/documentation/swift/duration/timeformatstyle/pattern-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle": {
      "abstract": [
        {
          "text": "A format style that shows durations with localized labeled components",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnitsFormatStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnitsFormatStyle"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct": {
      "abstract": [
        {
          "text": "A format style that formats durations as attributed strings.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Attributed"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.Attributed",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/attributed-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/FractionalPartDisplayStrategy": {
      "abstract": [
        {
          "text": "A strategy that determines how to format the fractional part of a duration if the allowed units can’t represent it exactly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FractionalPartDisplayStrategy"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/FractionalPartDisplayStrategy",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FractionalPartDisplayStrategy"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.FractionalPartDisplayStrategy",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/fractionalpartdisplaystrategy"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Unit": {
      "abstract": [
        {
          "text": "A unit to use in formatting a duration.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Unit"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Unit",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Unit"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.Unit",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/unit"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/UnitWidth-swift.struct": {
      "abstract": [
        {
          "text": "The width of a unit to use in formatting a duration.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnitWidth"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/UnitWidth-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnitWidth"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.UnitWidth",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/unitwidth-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/ZeroValueUnitsDisplayStrategy": {
      "abstract": [
        {
          "text": "A strategy that determines how to format a unit whose value is zero.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ZeroValueUnitsDisplayStrategy"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/ZeroValueUnitsDisplayStrategy",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ZeroValueUnitsDisplayStrategy"
        }
      ],
      "role": "symbol",
      "title": "Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy",
      "type": "topic",
      "url": "/documentation/swift/duration/unitsformatstyle/zerovalueunitsdisplaystrategy"
    },
    "doc://com.apple.Swift/documentation/Swift/DurationProtocol": {
      "abstract": [
        {
          "text": "A type that defines a duration for a given ",
          "type": "text"
        },
        {
          "code": "InstantProtocol",
          "type": "codeVoice"
        },
        {
          "text": " type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DurationProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DurationProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DurationProtocol"
        }
      ],
      "role": "symbol",
      "title": "DurationProtocol",
      "type": "topic",
      "url": "/documentation/swift/durationprotocol"
    },
    "doc://com.apple.Swift/documentation/Swift/EmptyCollection": {
      "abstract": [
        {
          "text": "A collection whose element type is ",
          "type": "text"
        },
        {
          "code": "Element",
          "type": "codeVoice"
        },
        {
          "text": " but that is always empty.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EmptyCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EmptyCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EmptyCollection"
        }
      ],
      "role": "symbol",
      "title": "EmptyCollection",
      "type": "topic",
      "url": "/documentation/swift/emptycollection"
    },
    "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator": {
      "abstract": [
        {
          "text": "An iterator that never produces an element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "EmptyCollection.Iterator",
      "type": "topic",
      "url": "/documentation/swift/emptycollection/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/EncodingError": {
      "abstract": [
        {
          "text": "An error that occurs during the encoding of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EncodingError"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EncodingError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EncodingError"
        }
      ],
      "role": "symbol",
      "title": "EncodingError",
      "type": "topic",
      "url": "/documentation/swift/encodingerror"
    },
    "doc://com.apple.Swift/documentation/Swift/EncodingError/Context": {
      "abstract": [
        {
          "text": "The context in which the error occurred.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Context"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EncodingError/Context",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Context"
        }
      ],
      "role": "symbol",
      "title": "EncodingError.Context",
      "type": "topic",
      "url": "/documentation/swift/encodingerror/context"
    },
    "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence": {
      "abstract": [
        {
          "text": "An enumeration of the elements of a sequence or collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EnumeratedSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EnumeratedSequence"
        }
      ],
      "role": "symbol",
      "title": "EnumeratedSequence",
      "type": "topic",
      "url": "/documentation/swift/enumeratedsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator": {
      "abstract": [
        {
          "text": "The iterator for ",
          "type": "text"
        },
        {
          "code": "EnumeratedSequence",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "EnumeratedSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/enumeratedsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Error": {
      "abstract": [
        {
          "text": "A type representing an error value that can be thrown.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Error"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Error",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Error"
        }
      ],
      "role": "symbol",
      "title": "Error",
      "type": "topic",
      "url": "/documentation/swift/error"
    },
    "doc://com.apple.Swift/documentation/Swift/Executor": {
      "abstract": [
        {
          "text": "A service that can execute jobs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Executor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Executor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Executor"
        }
      ],
      "role": "symbol",
      "title": "Executor",
      "type": "topic",
      "url": "/documentation/swift/executor"
    },
    "doc://com.apple.Swift/documentation/Swift/ExecutorJob": {
      "abstract": [
        {
          "text": "A unit of schedulable work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExecutorJob"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExecutorJob",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExecutorJob"
        }
      ],
      "role": "symbol",
      "title": "ExecutorJob",
      "type": "topic",
      "url": "/documentation/swift/executorjob"
    },
    "doc://com.apple.Swift/documentation/Swift/FlattenSequence": {
      "abstract": [
        {
          "text": "A sequence consisting of all the elements contained in each segment",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contained in some ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " sequence.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FlattenSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FlattenSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FlattenSequence"
        }
      ],
      "role": "symbol",
      "title": "FlattenSequence",
      "type": "topic",
      "url": "/documentation/swift/flattensequence"
    },
    "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index": {
      "abstract": [
        {
          "text": "A position in a FlattenCollection",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "FlattenSequence.Index",
      "type": "topic",
      "url": "/documentation/swift/flattensequence/index"
    },
    "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "FlattenSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/flattensequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Float": {
      "abstract": [
        {
          "text": "A single-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "role": "symbol",
      "title": "Float",
      "type": "topic",
      "url": "/documentation/swift/float"
    },
    "doc://com.apple.Swift/documentation/Swift/Float/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Float.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/float/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Float.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/float/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Float.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/float/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Float.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/float/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Float.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/float/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Float.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/float/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16": {
      "abstract": [
        {
          "text": "A half-precision (16b), floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float16"
        }
      ],
      "role": "symbol",
      "title": "Float16",
      "type": "topic",
      "url": "/documentation/swift/float16"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Float16.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/float16/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Float16.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/float16/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Float16.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/float16/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Float16.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/float16/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Float16.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/float16/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float16/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float16/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Float16.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/float16/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Float80": {
      "abstract": [
        {
          "text": "An extended-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Float80",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "role": "symbol",
      "title": "Float80",
      "type": "topic",
      "url": "/documentation/swift/float80"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification": {
      "abstract": [
        {
          "text": "The IEEE 754 floating-point classes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointClassification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointClassification"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointClassification",
      "type": "topic",
      "url": "/documentation/swift/floatingpointclassification"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule": {
      "abstract": [
        {
          "text": "A rule for rounding a floating-point number.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointRoundingRule"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointRoundingRule"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointRoundingRule",
      "type": "topic",
      "url": "/documentation/swift/floatingpointroundingrule"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPointSign": {
      "abstract": [
        {
          "text": "The sign of a floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPointSign"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPointSign",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPointSign"
        }
      ],
      "role": "symbol",
      "title": "FloatingPointSign",
      "type": "topic",
      "url": "/documentation/swift/floatingpointsign"
    },
    "doc://com.apple.Swift/documentation/Swift/GlobalActor": {
      "abstract": [
        {
          "text": "A type that represents a globally-unique actor that can be used to isolate",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "various declarations anywhere in the program.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "GlobalActor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/GlobalActor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "GlobalActor"
        }
      ],
      "role": "symbol",
      "title": "GlobalActor",
      "type": "topic",
      "url": "/documentation/swift/globalactor"
    },
    "doc://com.apple.Swift/documentation/Swift/Hasher": {
      "abstract": [
        {
          "text": "The universal hash function used by ",
          "type": "text"
        },
        {
          "code": "Set",
          "type": "codeVoice"
        },
        {
          "text": " and ",
          "type": "text"
        },
        {
          "code": "Dictionary",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hasher"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hasher",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hasher"
        }
      ],
      "role": "symbol",
      "title": "Hasher",
      "type": "topic",
      "url": "/documentation/swift/hasher"
    },
    "doc://com.apple.Swift/documentation/Swift/IndexingIterator": {
      "abstract": [
        {
          "text": "A type that iterates over a collection using its indices.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Elements",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Elements",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Elements.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "IndexingIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IndexingIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "IndexingIterator"
        }
      ],
      "role": "symbol",
      "title": "IndexingIterator",
      "type": "topic",
      "url": "/documentation/swift/indexingiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/InstantProtocol": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "InstantProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/InstantProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "InstantProtocol"
        }
      ],
      "role": "symbol",
      "title": "InstantProtocol",
      "type": "topic",
      "url": "/documentation/swift/instantprotocol"
    },
    "doc://com.apple.Swift/documentation/Swift/Int": {
      "abstract": [
        {
          "text": "A signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "role": "symbol",
      "title": "Int",
      "type": "topic",
      "url": "/documentation/swift/int"
    },
    "doc://com.apple.Swift/documentation/Swift/Int/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Int.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/int/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Int.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/int/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Int.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/int/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Int.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/int/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Int.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/int/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Int.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/int/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int.Words",
      "type": "topic",
      "url": "/documentation/swift/int/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Int128": {
      "abstract": [
        {
          "text": "A 128-bit signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int128"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int128",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int128"
        }
      ],
      "role": "symbol",
      "title": "Int128",
      "type": "topic",
      "url": "/documentation/swift/int128"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16": {
      "abstract": [
        {
          "text": "A 16-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int16"
        }
      ],
      "role": "symbol",
      "title": "Int16",
      "type": "topic",
      "url": "/documentation/swift/int16"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Int16.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/int16/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Int16.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/int16/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Int16.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/int16/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Int16.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/int16/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Int16.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/int16/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Int16.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/int16/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int16/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int16/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int16.Words",
      "type": "topic",
      "url": "/documentation/swift/int16/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32": {
      "abstract": [
        {
          "text": "A 32-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int32"
        }
      ],
      "role": "symbol",
      "title": "Int32",
      "type": "topic",
      "url": "/documentation/swift/int32"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Int32.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/int32/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Int32.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/int32/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Int32.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/int32/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Int32.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/int32/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Int32.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/int32/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Int32.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/int32/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int32/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int32/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int32.Words",
      "type": "topic",
      "url": "/documentation/swift/int32/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64": {
      "abstract": [
        {
          "text": "A 64-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int64"
        }
      ],
      "role": "symbol",
      "title": "Int64",
      "type": "topic",
      "url": "/documentation/swift/int64"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Int64.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/int64/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Int64.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/int64/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Int64.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/int64/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Int64.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/int64/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Int64.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/int64/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Int64.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/int64/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int64/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int64/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int64.Words",
      "type": "topic",
      "url": "/documentation/swift/int64/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8": {
      "abstract": [
        {
          "text": "An 8-bit signed integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int8"
        }
      ],
      "role": "symbol",
      "title": "Int8",
      "type": "topic",
      "url": "/documentation/swift/int8"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Int8.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/int8/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Int8.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/int8/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Int8.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/int8/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Int8.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/int8/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Int8.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/int8/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Int8.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/int8/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Int8/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int8/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "Int8.Words",
      "type": "topic",
      "url": "/documentation/swift/int8/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/IteratorSequence": {
      "abstract": [
        {
          "text": "A sequence built around an iterator of type ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "IteratorProtocol",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "IteratorSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/IteratorSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "IteratorSequence"
        }
      ],
      "role": "symbol",
      "title": "IteratorSequence",
      "type": "topic",
      "url": "/documentation/swift/iteratorsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/Job": {
      "abstract": [
        {
          "text": "Deprecated equivalent of ",
          "type": "text"
        },
        {
          "identifier": "doc://com.apple.Swift/documentation/Swift/ExecutorJob",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Job"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Job",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Job"
        }
      ],
      "role": "symbol",
      "title": "Job",
      "type": "topic",
      "url": "/documentation/swift/job"
    },
    "doc://com.apple.Swift/documentation/Swift/JobPriority": {
      "abstract": [
        {
          "text": "The priority of this job.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "JobPriority"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/JobPriority",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "JobPriority"
        }
      ],
      "role": "symbol",
      "title": "JobPriority",
      "type": "topic",
      "url": "/documentation/swift/jobpriority"
    },
    "doc://com.apple.Swift/documentation/Swift/JoinedSequence": {
      "abstract": [
        {
          "text": "A sequence that presents the elements of a base sequence of sequences",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "concatenated using a given separator.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "JoinedSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/JoinedSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "JoinedSequence"
        }
      ],
      "role": "symbol",
      "title": "JoinedSequence",
      "type": "topic",
      "url": "/documentation/swift/joinedsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator that presents the elements of the sequences traversed",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "by a base iterator, concatenated using a given separator.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base.Element.Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Element.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "JoinedSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/joinedsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/KeyValuePairs": {
      "abstract": [
        {
          "text": "A lightweight collection of key-value pairs.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Key",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "KeyValuePairs"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/KeyValuePairs",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "KeyValuePairs"
        }
      ],
      "role": "symbol",
      "title": "KeyValuePairs",
      "type": "topic",
      "url": "/documentation/swift/keyvaluepairs"
    },
    "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index": {
      "abstract": [
        {
          "text": "A position in a ",
          "type": "text"
        },
        {
          "code": "LazyPrefixWhileCollection",
          "type": "codeVoice"
        },
        {
          "text": " or",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "LazyPrefixWhileBidirectionalCollection",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "LazyPrefixWhileSequence.Index",
      "type": "topic",
      "url": "/documentation/swift/lazyprefixwhilesequence/index"
    },
    "doc://com.apple.Swift/documentation/Swift/LazySequence": {
      "abstract": [
        {
          "text": "A sequence containing the same elements as a ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " sequence, but",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "on which some operations such as ",
          "type": "text"
        },
        {
          "code": "map",
          "type": "codeVoice"
        },
        {
          "text": " and ",
          "type": "text"
        },
        {
          "code": "filter",
          "type": "codeVoice"
        },
        {
          "text": " are",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "implemented lazily.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LazySequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LazySequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LazySequence"
        }
      ],
      "role": "symbol",
      "title": "LazySequence",
      "type": "topic",
      "url": "/documentation/swift/lazysequence"
    },
    "doc://com.apple.Swift/documentation/Swift/MainActor": {
      "abstract": [
        {
          "text": "A singleton actor whose executor is equivalent to the main",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "dispatch queue.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "actor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MainActor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/MainActor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MainActor"
        }
      ],
      "role": "symbol",
      "title": "MainActor",
      "type": "topic",
      "url": "/documentation/swift/mainactor"
    },
    "doc://com.apple.Swift/documentation/Swift/MemoryLayout": {
      "abstract": [
        {
          "text": "The memory layout of a type, describing its size, stride, and alignment.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "T",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MemoryLayout"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/MemoryLayout",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MemoryLayout"
        }
      ],
      "role": "symbol",
      "title": "MemoryLayout",
      "type": "topic",
      "url": "/documentation/swift/memorylayout"
    },
    "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum": {
      "abstract": [
        {
          "text": "A suggestion of how a mirror’s subject is to be interpreted.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DisplayStyle"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DisplayStyle"
        }
      ],
      "role": "symbol",
      "title": "Mirror.DisplayStyle",
      "type": "topic",
      "url": "/documentation/swift/mirror/displaystyle-swift.enum"
    },
    "doc://com.apple.Swift/documentation/Swift/Never": {
      "abstract": [
        {
          "text": "A type that has no values and can’t be constructed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Never"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Never",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Never"
        }
      ],
      "role": "symbol",
      "title": "Never",
      "type": "topic",
      "url": "/documentation/swift/never"
    },
    "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier": {
      "abstract": [
        {
          "text": "A unique identifier for a class instance or metatype.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObjectIdentifier"
        }
      ],
      "role": "symbol",
      "title": "ObjectIdentifier",
      "type": "topic",
      "url": "/documentation/swift/objectidentifier"
    },
    "doc://com.apple.Swift/documentation/Swift/Optional": {
      "abstract": [
        {
          "text": "A type that represents either a wrapped value or the absence of a value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Wrapped",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Optional",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Optional"
        }
      ],
      "role": "symbol",
      "title": "Optional",
      "type": "topic",
      "url": "/documentation/swift/optional"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom": {
      "abstract": [
        {
          "text": "A partial interval extending upward from a lower bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeFrom"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeFrom"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeFrom",
      "type": "topic",
      "url": "/documentation/swift/partialrangefrom"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Iterator": {
      "abstract": [
        {
          "text": "The iterator for a ",
          "type": "text"
        },
        {
          "code": "PartialRangeFrom",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Bound.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeFrom.Iterator",
      "type": "topic",
      "url": "/documentation/swift/partialrangefrom/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough": {
      "abstract": [
        {
          "text": "A partial interval up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeThrough"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeThrough"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeThrough",
      "type": "topic",
      "url": "/documentation/swift/partialrangethrough"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo": {
      "abstract": [
        {
          "text": "A partial half-open interval up to, but not including, an upper bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeUpTo"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeUpTo"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeUpTo",
      "type": "topic",
      "url": "/documentation/swift/partialrangeupto"
    },
    "doc://com.apple.Swift/documentation/Swift/PrefixSequence": {
      "abstract": [
        {
          "text": "A sequence that only consumes up to ",
          "type": "text"
        },
        {
          "code": "n",
          "type": "codeVoice"
        },
        {
          "text": " elements from an underlying",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "Base",
          "type": "codeVoice"
        },
        {
          "text": " iterator.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PrefixSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PrefixSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PrefixSequence"
        }
      ],
      "role": "symbol",
      "title": "PrefixSequence",
      "type": "topic",
      "url": "/documentation/swift/prefixsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "PrefixSequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/prefixsequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Range": {
      "abstract": [
        {
          "text": "A half-open interval from a lower bound up to, but not including, an upper",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "bound.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Range",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Range"
        }
      ],
      "role": "symbol",
      "title": "Range",
      "type": "topic",
      "url": "/documentation/swift/range"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeSet": {
      "abstract": [
        {
          "text": "A set of values of any comparable type, represented by ranges.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeSet"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeSet",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RangeSet"
        }
      ],
      "role": "symbol",
      "title": "RangeSet",
      "type": "topic",
      "url": "/documentation/swift/rangeset"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct": {
      "abstract": [
        {
          "text": "A collection of the ranges that make up a range set.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Bound",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Ranges"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Ranges"
        }
      ],
      "role": "symbol",
      "title": "RangeSet.Ranges",
      "type": "topic",
      "url": "/documentation/swift/rangeset/ranges-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Repeated": {
      "abstract": [
        {
          "text": "A collection whose elements are all identical.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Repeated"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Repeated",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Repeated"
        }
      ],
      "role": "symbol",
      "title": "Repeated",
      "type": "topic",
      "url": "/documentation/swift/repeated"
    },
    "doc://com.apple.Swift/documentation/Swift/Result": {
      "abstract": [
        {
          "text": "A value that represents either a success or a failure, including an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "associated value in each case.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Success",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Failure",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Error",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Result",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Result"
        }
      ],
      "role": "symbol",
      "title": "Result",
      "type": "topic",
      "url": "/documentation/swift/result"
    },
    "doc://com.apple.Swift/documentation/Swift/ReversedCollection": {
      "abstract": [
        {
          "text": "A collection that presents the elements of its base collection",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in reverse order.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ReversedCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReversedCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ReversedCollection"
        }
      ],
      "role": "symbol",
      "title": "ReversedCollection",
      "type": "topic",
      "url": "/documentation/swift/reversedcollection"
    },
    "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index": {
      "abstract": [
        {
          "text": "An index that traverses the same positions as an underlying index,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "with inverted traversal direction.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "ReversedCollection.Index",
      "type": "topic",
      "url": "/documentation/swift/reversedcollection/index"
    },
    "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the sequence’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "ReversedCollection.Iterator",
      "type": "topic",
      "url": "/documentation/swift/reversedcollection/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD16": {
      "abstract": [
        {
          "text": "A vector of 16 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD16Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16"
        }
      ],
      "role": "symbol",
      "title": "SIMD16",
      "type": "topic",
      "url": "/documentation/swift/simd16"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD2": {
      "abstract": [
        {
          "text": "A vector of two scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD2Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD2",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2"
        }
      ],
      "role": "symbol",
      "title": "SIMD2",
      "type": "topic",
      "url": "/documentation/swift/simd2"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD3": {
      "abstract": [
        {
          "text": "A vector of three scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD4Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD3",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD3"
        }
      ],
      "role": "symbol",
      "title": "SIMD3",
      "type": "topic",
      "url": "/documentation/swift/simd3"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD32": {
      "abstract": [
        {
          "text": "A vector of 32 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD32Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32"
        }
      ],
      "role": "symbol",
      "title": "SIMD32",
      "type": "topic",
      "url": "/documentation/swift/simd32"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD4": {
      "abstract": [
        {
          "text": "A vector of four scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD4Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD4",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4"
        }
      ],
      "role": "symbol",
      "title": "SIMD4",
      "type": "topic",
      "url": "/documentation/swift/simd4"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD64": {
      "abstract": [
        {
          "text": "A vector of 64 scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD64Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64"
        }
      ],
      "role": "symbol",
      "title": "SIMD64",
      "type": "topic",
      "url": "/documentation/swift/simd64"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMD8": {
      "abstract": [
        {
          "text": "A vector of eight scalar values.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMDScalar",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Scalar.SIMD8Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMD8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8"
        }
      ],
      "role": "symbol",
      "title": "SIMD8",
      "type": "topic",
      "url": "/documentation/swift/simd8"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMDMask": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SIMD",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Storage",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Storage.Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "FixedWidthInteger",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Storage.Scalar",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "SignedInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMDMask"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMDMask",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMDMask"
        }
      ],
      "role": "symbol",
      "title": "SIMDMask",
      "type": "topic",
      "url": "/documentation/swift/simdmask"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Swift/SerialExecutor": {
      "abstract": [
        {
          "text": "A service that executes jobs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SerialExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SerialExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SerialExecutor"
        }
      ],
      "role": "symbol",
      "title": "SerialExecutor",
      "type": "topic",
      "url": "/documentation/swift/serialexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/Set": {
      "abstract": [
        {
          "text": "An unordered collection of unique elements.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Set"
        }
      ],
      "role": "symbol",
      "title": "Set",
      "type": "topic",
      "url": "/documentation/swift/set"
    },
    "doc://com.apple.Swift/documentation/Swift/Set/Index": {
      "abstract": [
        {
          "text": "The position of an element in a set.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "Set.Index",
      "type": "topic",
      "url": "/documentation/swift/set/index"
    },
    "doc://com.apple.Swift/documentation/Swift/Set/Iterator": {
      "abstract": [
        {
          "text": "An iterator over the members of a ",
          "type": "text"
        },
        {
          "code": "Set<Element>",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Set/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Set.Iterator",
      "type": "topic",
      "url": "/documentation/swift/set/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Slice": {
      "abstract": [
        {
          "text": "A view into a subsequence of elements of another collection.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Collection",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Base",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Base.Index",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Slice"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Slice",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Slice"
        }
      ],
      "role": "symbol",
      "title": "Slice",
      "type": "topic",
      "url": "/documentation/swift/slice"
    },
    "doc://com.apple.Swift/documentation/Swift/StaticBigInt": {
      "abstract": [
        {
          "text": "An immutable arbitrary-precision signed integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StaticBigInt"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StaticBigInt",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StaticBigInt"
        }
      ],
      "role": "symbol",
      "title": "StaticBigInt",
      "type": "topic",
      "url": "/documentation/swift/staticbigint"
    },
    "doc://com.apple.Swift/documentation/Swift/StaticString": {
      "abstract": [
        {
          "text": "A string type designed to represent text that is known at compile time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StaticString"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StaticString",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StaticString"
        }
      ],
      "role": "symbol",
      "title": "StaticString",
      "type": "topic",
      "url": "/documentation/swift/staticstring"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideThrough": {
      "abstract": [
        {
          "text": "A sequence of values formed by striding over a closed interval.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Element.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideThrough"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideThrough",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideThrough"
        }
      ],
      "role": "symbol",
      "title": "StrideThrough",
      "type": "topic",
      "url": "/documentation/swift/stridethrough"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator": {
      "abstract": [
        {
          "text": "An iterator for a ",
          "type": "text"
        },
        {
          "code": "StrideThrough",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Element.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideThroughIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideThroughIterator"
        }
      ],
      "role": "symbol",
      "title": "StrideThroughIterator",
      "type": "topic",
      "url": "/documentation/swift/stridethroughiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideTo": {
      "abstract": [
        {
          "text": "A sequence of values formed by striding over a half-open interval.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Element.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideTo"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideTo",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideTo"
        }
      ],
      "role": "symbol",
      "title": "StrideTo",
      "type": "topic",
      "url": "/documentation/swift/strideto"
    },
    "doc://com.apple.Swift/documentation/Swift/StrideToIterator": {
      "abstract": [
        {
          "text": "An iterator for a ",
          "type": "text"
        },
        {
          "code": "StrideTo",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Strideable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Element.Stride",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StrideToIterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StrideToIterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StrideToIterator"
        }
      ],
      "role": "symbol",
      "title": "StrideToIterator",
      "type": "topic",
      "url": "/documentation/swift/stridetoiterator"
    },
    "doc://com.apple.Swift/documentation/Swift/String": {
      "abstract": [
        {
          "text": "A Unicode string value that is a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "role": "symbol",
      "title": "String",
      "type": "topic",
      "url": "/documentation/swift/string"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Comparator": {
      "abstract": [
        {
          "text": "A ",
          "type": "text"
        },
        {
          "code": "String",
          "type": "codeVoice"
        },
        {
          "text": " comparison performed using the given comparison options",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and locale.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Comparator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Comparator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Comparator"
        }
      ],
      "role": "symbol",
      "title": "String.Comparator",
      "type": "topic",
      "url": "/documentation/swift/string/comparator"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Encoding": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Encoding"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Encoding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Encoding"
        }
      ],
      "role": "symbol",
      "title": "String.Encoding",
      "type": "topic",
      "url": "/documentation/swift/string/encoding"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Index": {
      "abstract": [
        {
          "text": "A position of a character or code unit in a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Index",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Index"
        }
      ],
      "role": "symbol",
      "title": "String.Index",
      "type": "topic",
      "url": "/documentation/swift/string/index"
    },
    "doc://com.apple.Swift/documentation/Swift/String/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "String.Iterator",
      "type": "topic",
      "url": "/documentation/swift/string/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue": {
      "abstract": [
        {
          "text": "A reference to a localizable string, with optional string interpolation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LocalizationValue"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LocalizationValue"
        }
      ],
      "role": "symbol",
      "title": "String.LocalizationValue",
      "type": "topic",
      "url": "/documentation/swift/string/localizationvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue/Placeholder": {
      "abstract": [
        {
          "text": "An enumeration of types that can appear as a placeholder in a string interpolation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Placeholder"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue/Placeholder",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Placeholder"
        }
      ],
      "role": "symbol",
      "title": "String.LocalizationValue.Placeholder",
      "type": "topic",
      "url": "/documentation/swift/string/localizationvalue/placeholder"
    },
    "doc://com.apple.Swift/documentation/Swift/String/StandardComparator": {
      "abstract": [
        {
          "text": "Compares ",
          "type": "text"
        },
        {
          "code": "String",
          "type": "codeVoice"
        },
        {
          "text": "s using one of a fixed set of standard comparison",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "algorithms.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StandardComparator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/StandardComparator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StandardComparator"
        }
      ],
      "role": "symbol",
      "title": "String.StandardComparator",
      "type": "topic",
      "url": "/documentation/swift/string/standardcomparator"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UTF16View": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of UTF-16 code units.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UTF16View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "role": "symbol",
      "title": "String.UTF16View",
      "type": "topic",
      "url": "/documentation/swift/string/utf16view"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UTF16View/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UTF16View/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "String.UTF16View.Iterator",
      "type": "topic",
      "url": "/documentation/swift/string/utf16view/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UTF8View": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of UTF-8 code units.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UTF8View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "role": "symbol",
      "title": "String.UTF8View",
      "type": "topic",
      "url": "/documentation/swift/string/utf8view"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of Unicode scalar values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "role": "symbol",
      "title": "String.UnicodeScalarView",
      "type": "topic",
      "url": "/documentation/swift/string/unicodescalarview"
    },
    "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView/Iterator": {
      "abstract": [
        {
          "text": "A type that provides the collection’s iteration interface and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encapsulates its iteration state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "String.UnicodeScalarView.Iterator",
      "type": "topic",
      "url": "/documentation/swift/string/unicodescalarview/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring": {
      "abstract": [
        {
          "text": "A slice of a string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Substring"
        }
      ],
      "role": "symbol",
      "title": "Substring",
      "type": "topic",
      "url": "/documentation/swift/substring"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring/UTF16View": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring/UTF16View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "role": "symbol",
      "title": "Substring.UTF16View",
      "type": "topic",
      "url": "/documentation/swift/substring/utf16view"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring/UTF8View": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring/UTF8View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "role": "symbol",
      "title": "Substring.UTF8View",
      "type": "topic",
      "url": "/documentation/swift/substring/utf8view"
    },
    "doc://com.apple.Swift/documentation/Swift/Substring/UnicodeScalarView": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Substring/UnicodeScalarView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnicodeScalarView"
        }
      ],
      "role": "symbol",
      "title": "Substring.UnicodeScalarView",
      "type": "topic",
      "url": "/documentation/swift/substring/unicodescalarview"
    },
    "doc://com.apple.Swift/documentation/Swift/SuspendingClock": {
      "abstract": [
        {
          "text": "A clock that measures time that always increments but stops incrementing",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "while the system is asleep.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SuspendingClock"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SuspendingClock",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SuspendingClock"
        }
      ],
      "role": "symbol",
      "title": "SuspendingClock",
      "type": "topic",
      "url": "/documentation/swift/suspendingclock"
    },
    "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Instant"
        }
      ],
      "role": "symbol",
      "title": "SuspendingClock.Instant",
      "type": "topic",
      "url": "/documentation/swift/suspendingclock/instant"
    },
    "doc://com.apple.Swift/documentation/Swift/SystemRandomNumberGenerator": {
      "abstract": [
        {
          "text": "The system’s default source of random data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SystemRandomNumberGenerator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SystemRandomNumberGenerator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SystemRandomNumberGenerator"
        }
      ],
      "role": "symbol",
      "title": "SystemRandomNumberGenerator",
      "type": "topic",
      "url": "/documentation/swift/systemrandomnumbergenerator"
    },
    "doc://com.apple.Swift/documentation/Swift/Task": {
      "abstract": [
        {
          "text": "A unit of asynchronous work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Task"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Task",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Task"
        }
      ],
      "role": "symbol",
      "title": "Task",
      "type": "topic",
      "url": "/documentation/swift/task"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskExecutor": {
      "abstract": [
        {
          "text": "An executor that may be used as preferred executor by a task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TaskExecutor"
        }
      ],
      "role": "symbol",
      "title": "TaskExecutor",
      "type": "topic",
      "url": "/documentation/swift/taskexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskLocal": {
      "abstract": [
        {
          "text": "Wrapper type that defines a task-local value key.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskLocal"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskLocal",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TaskLocal"
        }
      ],
      "role": "symbol",
      "title": "TaskLocal",
      "type": "topic",
      "url": "/documentation/swift/tasklocal"
    },
    "doc://com.apple.Swift/documentation/Swift/TaskPriority": {
      "abstract": [
        {
          "text": "The priority of a task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TaskPriority"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TaskPriority",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TaskPriority"
        }
      ],
      "role": "symbol",
      "title": "TaskPriority",
      "type": "topic",
      "url": "/documentation/swift/taskpriority"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt": {
      "abstract": [
        {
          "text": "An unsigned integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt"
        }
      ],
      "role": "symbol",
      "title": "UInt",
      "type": "topic",
      "url": "/documentation/swift/uint"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/uint/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/uint/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/uint/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/uint/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/uint/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/uint/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt.Words",
      "type": "topic",
      "url": "/documentation/swift/uint/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt128": {
      "abstract": [
        {
          "text": "A 128-bit unsigned integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt128"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt128",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt128"
        }
      ],
      "role": "symbol",
      "title": "UInt128",
      "type": "topic",
      "url": "/documentation/swift/uint128"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt128/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of a binary integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt128/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt128.Words",
      "type": "topic",
      "url": "/documentation/swift/uint128/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16": {
      "abstract": [
        {
          "text": "A 16-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt16"
        }
      ],
      "role": "symbol",
      "title": "UInt16",
      "type": "topic",
      "url": "/documentation/swift/uint16"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt16.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/uint16/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt16.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/uint16/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt16.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/uint16/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt16.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/uint16/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt16.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/uint16/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt16.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/uint16/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt16/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt16/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt16.Words",
      "type": "topic",
      "url": "/documentation/swift/uint16/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32": {
      "abstract": [
        {
          "text": "A 32-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt32"
        }
      ],
      "role": "symbol",
      "title": "UInt32",
      "type": "topic",
      "url": "/documentation/swift/uint32"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt32.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/uint32/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt32.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/uint32/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt32.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/uint32/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt32.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/uint32/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt32.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/uint32/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt32.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/uint32/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt32/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt32/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt32.Words",
      "type": "topic",
      "url": "/documentation/swift/uint32/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64": {
      "abstract": [
        {
          "text": "A 64-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt64"
        }
      ],
      "role": "symbol",
      "title": "UInt64",
      "type": "topic",
      "url": "/documentation/swift/uint64"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt64.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/uint64/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt64.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/uint64/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt64.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/uint64/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt64.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/uint64/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt64.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/uint64/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt64.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/uint64/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt64/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt64/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt64.Words",
      "type": "topic",
      "url": "/documentation/swift/uint64/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8": {
      "abstract": [
        {
          "text": "An 8-bit unsigned integer value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UInt8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UInt8"
        }
      ],
      "role": "symbol",
      "title": "UInt8",
      "type": "topic",
      "url": "/documentation/swift/uint8"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt8.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/uint8/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt8.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/uint8/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt8.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/uint8/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt8.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/uint8/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt8.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/uint8/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight integers.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "UInt8.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/uint8/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/UInt8/Words-swift.struct": {
      "abstract": [
        {
          "text": "A type that represents the words of this integer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UInt8/Words-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Words"
        }
      ],
      "role": "symbol",
      "title": "UInt8.Words",
      "type": "topic",
      "url": "/documentation/swift/uint8/words-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/UnboundedRange_": {
      "abstract": [
        {
          "text": "A range expression that represents the entire range of a collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnboundedRange_"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnboundedRange_",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnboundedRange_"
        }
      ],
      "role": "symbol",
      "title": "UnboundedRange_",
      "type": "topic",
      "url": "/documentation/swift/unboundedrange_"
    },
    "doc://com.apple.Swift/documentation/Swift/UnfoldSequence": {
      "abstract": [
        {
          "text": "A sequence whose elements are produced via repeated applications of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "closure to some mutable state.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "State",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "State",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "State",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnfoldSequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnfoldSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnfoldSequence"
        }
      ],
      "role": "symbol",
      "title": "UnfoldSequence",
      "type": "topic",
      "url": "/documentation/swift/unfoldsequence"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode": {
      "abstract": [
        {
          "text": "A namespace for Unicode utilities.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Unicode"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Unicode"
        }
      ],
      "role": "symbol",
      "title": "Unicode",
      "type": "topic",
      "url": "/documentation/swift/unicode"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ASCII"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ASCII"
        }
      ],
      "role": "symbol",
      "title": "Unicode.ASCII",
      "type": "topic",
      "url": "/documentation/swift/unicode/ascii"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII/Parser": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Parser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII/Parser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Parser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.ASCII.Parser",
      "type": "topic",
      "url": "/documentation/swift/unicode/ascii/parser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/CanonicalCombiningClass": {
      "abstract": [
        {
          "text": "The classification of a scalar used in the Canonical Ordering Algorithm",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "defined by the Unicode Standard.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CanonicalCombiningClass"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/CanonicalCombiningClass",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CanonicalCombiningClass"
        }
      ],
      "role": "symbol",
      "title": "Unicode.CanonicalCombiningClass",
      "type": "topic",
      "url": "/documentation/swift/unicode/canonicalcombiningclass"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory": {
      "abstract": [
        {
          "text": "The most general classification of a Unicode scalar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "GeneralCategory"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "GeneralCategory"
        }
      ],
      "role": "symbol",
      "title": "Unicode.GeneralCategory",
      "type": "topic",
      "url": "/documentation/swift/unicode/generalcategory"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType": {
      "abstract": [
        {
          "text": "The numeric type of a scalar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "NumericType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "NumericType"
        }
      ],
      "role": "symbol",
      "title": "Unicode.NumericType",
      "type": "topic",
      "url": "/documentation/swift/unicode/numerictype"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/ParseResult": {
      "abstract": [
        {
          "text": "The result of attempting to parse a ",
          "type": "text"
        },
        {
          "code": "T",
          "type": "codeVoice"
        },
        {
          "text": " from some input.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "T",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ParseResult"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/ParseResult",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ParseResult"
        }
      ],
      "role": "symbol",
      "title": "Unicode.ParseResult",
      "type": "topic",
      "url": "/documentation/swift/unicode/parseresult"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar": {
      "abstract": [
        {
          "text": "A Unicode scalar value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Scalar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Scalar"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/Properties-swift.struct": {
      "abstract": [
        {
          "text": "A value that provides access to properties of a Unicode scalar that are",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "defined by the Unicode standard.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Properties"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/Properties-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Properties"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar.Properties",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar/properties-swift.struct"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF16View": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF16View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar.UTF16View",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar/utf16view"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF8View": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF8View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "role": "symbol",
      "title": "Unicode.Scalar.UTF8View",
      "type": "topic",
      "url": "/documentation/swift/unicode/scalar/utf8view"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF16"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF16",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf16"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ForwardParser": {
      "abstract": [
        {
          "text": "A type that can be used to parse ",
          "type": "text"
        },
        {
          "code": "CodeUnits",
          "type": "codeVoice"
        },
        {
          "text": " into",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "EncodedScalar",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ForwardParser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ForwardParser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ForwardParser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF16.ForwardParser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf16/forwardparser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ReverseParser": {
      "abstract": [
        {
          "text": "A type that can be used to parse a reversed sequence of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "CodeUnits",
          "type": "codeVoice"
        },
        {
          "text": " into ",
          "type": "text"
        },
        {
          "code": "EncodedScalar",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ReverseParser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ReverseParser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ReverseParser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF16.ReverseParser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf16/reverseparser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF32"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF32"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF32",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf32"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32/Parser": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Parser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32/Parser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Parser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF32.Parser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf32/parser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UTF8"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF8",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf8"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ForwardParser": {
      "abstract": [
        {
          "text": "A type that can be used to parse ",
          "type": "text"
        },
        {
          "code": "CodeUnits",
          "type": "codeVoice"
        },
        {
          "text": " into",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "EncodedScalar",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ForwardParser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ForwardParser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ForwardParser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF8.ForwardParser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf8/forwardparser"
    },
    "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ReverseParser": {
      "abstract": [
        {
          "text": "A type that can be used to parse a reversed sequence of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "CodeUnits",
          "type": "codeVoice"
        },
        {
          "text": " into ",
          "type": "text"
        },
        {
          "code": "EncodedScalar",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ReverseParser"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ReverseParser",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ReverseParser"
        }
      ],
      "role": "symbol",
      "title": "Unicode.UTF8.ReverseParser",
      "type": "topic",
      "url": "/documentation/swift/unicode/utf8/reverseparser"
    },
    "doc://com.apple.Swift/documentation/Swift/UnicodeDecodingResult": {
      "abstract": [
        {
          "text": "The result of one Unicode decoding step.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnicodeDecodingResult"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnicodeDecodingResult",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnicodeDecodingResult"
        }
      ],
      "role": "symbol",
      "title": "UnicodeDecodingResult",
      "type": "topic",
      "url": "/documentation/swift/unicodedecodingresult"
    },
    "doc://com.apple.Swift/documentation/Swift/Unmanaged": {
      "abstract": [
        {
          "text": "A type for propagating an unmanaged object reference.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Instance",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Unmanaged"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Unmanaged",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Unmanaged"
        }
      ],
      "role": "symbol",
      "title": "Unmanaged",
      "type": "topic",
      "url": "/documentation/swift/unmanaged"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedJob": {
      "abstract": [
        {
          "text": "A unit of schedulable work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedJob"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedJob",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedJob"
        }
      ],
      "role": "symbol",
      "title": "UnownedJob",
      "type": "topic",
      "url": "/documentation/swift/unownedjob"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor": {
      "abstract": [
        {
          "text": "An unowned reference to a serial executor (a ",
          "type": "text"
        },
        {
          "code": "SerialExecutor",
          "type": "codeVoice"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedSerialExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedSerialExecutor"
        }
      ],
      "role": "symbol",
      "title": "UnownedSerialExecutor",
      "type": "topic",
      "url": "/documentation/swift/unownedserialexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnownedTaskExecutor"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnownedTaskExecutor"
        }
      ],
      "role": "symbol",
      "title": "UnownedTaskExecutor",
      "type": "topic",
      "url": "/documentation/swift/unownedtaskexecutor"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeConcurrentValue": {
      "abstract": [],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeConcurrentValue"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeConcurrentValue",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeConcurrentValue"
        }
      ],
      "role": "symbol",
      "title": "UnsafeConcurrentValue",
      "type": "topic",
      "url": "/documentation/swift/unsafeconcurrentvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeContinuation": {
      "abstract": [
        {
          "text": "A mechanism to interface",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "between synchronous and asynchronous code,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "without correctness checking.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeContinuation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeContinuation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeContinuation"
        }
      ],
      "role": "symbol",
      "title": "UnsafeContinuation",
      "type": "topic",
      "url": "/documentation/swift/unsafecontinuation"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeSendable": {
      "abstract": [
        {
          "text": "A type whose values can safely be passed across concurrency domains by copying,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "but which disables some safety checking at the conformance site.",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeSendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeSendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeSendable"
        }
      ],
      "role": "symbol",
      "title": "UnsafeSendable",
      "type": "topic",
      "url": "/documentation/swift/unsafesendable"
    },
    "doc://com.apple.Swift/documentation/Swift/Zip2Sequence": {
      "abstract": [
        {
          "text": "A sequence of pairs built out of two underlying sequences.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Sequence1",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Sequence1",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Sequence2",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sequence2",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Zip2Sequence"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Zip2Sequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Zip2Sequence"
        }
      ],
      "role": "symbol",
      "title": "Zip2Sequence",
      "type": "topic",
      "url": "/documentation/swift/zip2sequence"
    },
    "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator": {
      "abstract": [
        {
          "text": "An iterator for ",
          "type": "text"
        },
        {
          "code": "Zip2Sequence",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Sequence1",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Sequence2",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Sequence1.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sequence2.Iterator",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Iterator"
        }
      ],
      "role": "symbol",
      "title": "Zip2Sequence.Iterator",
      "type": "topic",
      "url": "/documentation/swift/zip2sequence/iterator"
    },
    "doc://com.apple.Swift/documentation/Swift/extractIsolation(_:)": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "extractIsolation"
        },
        {
          "kind": "text",
          "text": "<each "
        },
        {
          "kind": "genericParameter",
          "text": "Arg"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ">((repeat each "
        },
        {
          "kind": "typeIdentifier",
          "text": "Arg"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ") -> (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/extractIsolation(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "extractIsolation(_:)",
      "type": "topic",
      "url": "/documentation/swift/extractisolation(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/isolation()": {
      "abstract": [
        {
          "text": "Produce a reference to the actor to which the enclosing code is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "isolated, or ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": " if the code is nonisolated.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/isolation()",
      "kind": "symbol",
      "role": "symbol",
      "title": "isolation()",
      "type": "topic",
      "url": "/documentation/swift/isolation()"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic": {
      "abstract": [
        {
          "text": "An atomic value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Atomic"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Atomic"
        }
      ],
      "role": "symbol",
      "title": "Atomic",
      "type": "topic",
      "url": "/documentation/synchronization/atomic"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicLazyReference": {
      "abstract": [
        {
          "text": "A lazily initializable atomic strong reference.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Instance",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": ", ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ", and ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicLazyReference"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicLazyReference",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicLazyReference"
        }
      ],
      "role": "symbol",
      "title": "AtomicLazyReference",
      "type": "topic",
      "url": "/documentation/synchronization/atomiclazyreference"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic load operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicLoadOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicLoadOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicLoadOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicloadordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic store operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicStoreOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicStoreOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicStoreOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicstoreordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering": {
      "abstract": [
        {
          "text": "Specifies the memory ordering semantics of an atomic read-modify-write",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicUpdateOrdering"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicUpdateOrdering"
        }
      ],
      "role": "symbol",
      "title": "AtomicUpdateOrdering",
      "type": "topic",
      "url": "/documentation/synchronization/atomicupdateordering"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Mutex": {
      "abstract": [
        {
          "text": "A synchronization primitive that protects shared mutable state via",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "mutual exclusion.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Mutex"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Mutex",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Mutex"
        }
      ],
      "role": "symbol",
      "title": "Mutex",
      "type": "topic",
      "url": "/documentation/synchronization/mutex"
    },
    "doc://com.apple.Swift/documentation/Synchronization/WordPair": {
      "abstract": [
        {
          "text": "A pair of two word sized ",
          "type": "text"
        },
        {
          "code": "UInt",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/WordPair",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "role": "symbol",
      "title": "WordPair",
      "type": "topic",
      "url": "/documentation/synchronization/wordpair"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://docs.swift.org/swift-book/": {
      "identifier": "https://docs.swift.org/swift-book/",
      "title": "The Swift Programming Language",
      "titleInlineContent": [
        {
          "text": "The Swift Programming Language",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://docs.swift.org/swift-book/"
    },
    "https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html": {
      "identifier": "https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html",
      "title": "Concurrency",
      "titleInlineContent": [
        {
          "text": "Concurrency",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Actor",
        "doc://com.apple.Swift/documentation/Swift/Clock",
        "doc://com.apple.Swift/documentation/Swift/CodingKey",
        "doc://com.apple.Swift/documentation/Distributed/DistributedActor",
        "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystem",
        "doc://com.apple.Swift/documentation/Distributed/DistributedActorSystemError",
        "doc://com.apple.Swift/documentation/Swift/DurationProtocol",
        "doc://com.apple.Swift/documentation/Swift/Error",
        "doc://com.apple.Swift/documentation/Swift/Executor",
        "doc://com.apple.Swift/documentation/Swift/InstantProtocol",
        "doc://com.apple.Swift/documentation/Swift/SerialExecutor",
        "doc://com.apple.Swift/documentation/Swift/TaskExecutor",
        "doc://com.apple.Swift/documentation/Swift/UnsafeSendable"
      ],
      "kind": "relationships",
      "title": "Inherited By",
      "type": "inheritedBy"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice",
        "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncCompactMapSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncDropFirstSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncDropWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncFilterSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncFlatMapSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncMapSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncPrefixSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncPrefixWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/BufferingPolicy",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/Termination",
        "doc://com.apple.Swift/documentation/Swift/AsyncStream/Continuation/YieldResult",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingCompactMapSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingDropWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFilterSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingFlatMapSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingMapSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingPrefixWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/BufferingPolicy",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/Termination",
        "doc://com.apple.Swift/documentation/Swift/AsyncThrowingStream/Continuation/YieldResult",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicLazyReference",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicLoadOrdering",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicStoreOrdering",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicUpdateOrdering",
        "doc://com.apple.Swift/documentation/Swift/Bool",
        "doc://com.apple.Swift/documentation/Swift/CancellationError",
        "doc://com.apple.Swift/documentation/Swift/Character",
        "doc://com.apple.Swift/documentation/Swift/CheckedContinuation",
        "doc://com.apple.Swift/documentation/Swift/ClosedRange",
        "doc://com.apple.Swift/documentation/Swift/ClosedRange/Index",
        "doc://com.apple.Swift/documentation/Swift/CodingUserInfoKey",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Change",
        "doc://com.apple.Swift/documentation/Swift/CollectionDifference/Index",
        "doc://com.apple.Swift/documentation/Swift/CollectionOfOne",
        "doc://com.apple.Swift/documentation/Swift/CollectionOfOne/Iterator",
        "doc://com.apple.Swift/documentation/Swift/CommandLine",
        "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
        "doc://com.apple.Swift/documentation/Swift/ContinuousClock",
        "doc://com.apple.Swift/documentation/Swift/ContinuousClock/Instant",
        "doc://com.apple.Swift/documentation/Swift/DecodingError",
        "doc://com.apple.Swift/documentation/Swift/DecodingError/Context",
        "doc://com.apple.Swift/documentation/Swift/DefaultIndices",
        "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation",
        "doc://com.apple.Swift/documentation/Swift/Dictionary",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Index",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Keys-swift.struct/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Dictionary/Values-swift.struct/Iterator",
        "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice",
        "doc://com.apple.Swift/documentation/Swift/DiscontiguousSlice/Index",
        "doc://com.apple.Swift/documentation/Distributed/DistributedActorCodingError",
        "doc://com.apple.Swift/documentation/Swift/Double",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/DropFirstSequence",
        "doc://com.apple.Swift/documentation/Swift/DropWhileSequence",
        "doc://com.apple.Swift/documentation/Swift/DropWhileSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Duration",
        "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle",
        "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Attributed-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/TimeFormatStyle/Pattern-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/FractionalPartDisplayStrategy",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/Unit",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/UnitWidth-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Duration/UnitsFormatStyle/ZeroValueUnitsDisplayStrategy",
        "doc://com.apple.Swift/documentation/Swift/EmptyCollection",
        "doc://com.apple.Swift/documentation/Swift/EmptyCollection/Iterator",
        "doc://com.apple.Swift/documentation/Swift/EncodingError",
        "doc://com.apple.Swift/documentation/Swift/EncodingError/Context",
        "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence",
        "doc://com.apple.Swift/documentation/Swift/EnumeratedSequence/Iterator",
        "doc://com.apple.Swift/documentation/Distributed/ExecuteDistributedTargetError",
        "doc://com.apple.Swift/documentation/Swift/ExecutorJob",
        "doc://com.apple.Swift/documentation/Swift/FlattenSequence",
        "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Index",
        "doc://com.apple.Swift/documentation/Swift/FlattenSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Float",
        "doc://com.apple.Swift/documentation/Swift/Float/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Float/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Float/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Float/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Float/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/Float/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/Float16",
        "doc://com.apple.Swift/documentation/Swift/Float16/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Float16/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Float16/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Float16/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Float16/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/Float16/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/Float80",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointClassification",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointRoundingRule",
        "doc://com.apple.Swift/documentation/Swift/FloatingPointSign",
        "doc://com.apple.Swift/documentation/Swift/Hasher",
        "doc://com.apple.Swift/documentation/Swift/IndexingIterator",
        "doc://com.apple.Swift/documentation/Swift/Int",
        "doc://com.apple.Swift/documentation/Swift/Int/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Int/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Int/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Int/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Int/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/Int/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/Int/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Int128",
        "doc://com.apple.Swift/documentation/Swift/Int16",
        "doc://com.apple.Swift/documentation/Swift/Int16/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Int16/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Int16/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Int16/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Int16/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/Int16/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/Int16/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Int32",
        "doc://com.apple.Swift/documentation/Swift/Int32/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Int32/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Int32/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Int32/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Int32/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/Int32/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/Int32/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Int64",
        "doc://com.apple.Swift/documentation/Swift/Int64/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Int64/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Int64/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Int64/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Int64/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/Int64/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/Int64/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Int8",
        "doc://com.apple.Swift/documentation/Swift/Int8/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Int8/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Int8/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Int8/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Int8/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/Int8/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/Int8/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/IteratorSequence",
        "doc://com.apple.Swift/documentation/Swift/Job",
        "doc://com.apple.Swift/documentation/Swift/JobPriority",
        "doc://com.apple.Swift/documentation/Swift/JoinedSequence",
        "doc://com.apple.Swift/documentation/Swift/JoinedSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/KeyValuePairs",
        "doc://com.apple.Swift/documentation/Swift/LazyPrefixWhileSequence/Index",
        "doc://com.apple.Swift/documentation/Swift/LazySequence",
        "doc://com.apple.Swift/documentation/Distributed/LocalTestingActorID",
        "doc://com.apple.Swift/documentation/Distributed/LocalTestingDistributedActorSystem",
        "doc://com.apple.Swift/documentation/Distributed/LocalTestingDistributedActorSystemError",
        "doc://com.apple.Swift/documentation/Swift/MainActor",
        "doc://com.apple.Swift/documentation/Swift/MemoryLayout",
        "doc://com.apple.Swift/documentation/Swift/Mirror/DisplayStyle-swift.enum",
        "doc://com.apple.Swift/documentation/Synchronization/Mutex",
        "doc://com.apple.Swift/documentation/Swift/Never",
        "doc://com.apple.Swift/documentation/Swift/ObjectIdentifier",
        "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar",
        "doc://com.apple.Swift/documentation/Swift/Optional",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Iterator",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo",
        "doc://com.apple.Swift/documentation/Swift/PrefixSequence",
        "doc://com.apple.Swift/documentation/Swift/PrefixSequence/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Range",
        "doc://com.apple.Swift/documentation/Swift/RangeSet",
        "doc://com.apple.Swift/documentation/Swift/RangeSet/Ranges-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Repeated",
        "doc://com.apple.Swift/documentation/Swift/Result",
        "doc://com.apple.Swift/documentation/Swift/ReversedCollection",
        "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Index",
        "doc://com.apple.Swift/documentation/Swift/ReversedCollection/Iterator",
        "doc://com.apple.Swift/documentation/Swift/SIMD16",
        "doc://com.apple.Swift/documentation/Swift/SIMD2",
        "doc://com.apple.Swift/documentation/Swift/SIMD3",
        "doc://com.apple.Swift/documentation/Swift/SIMD32",
        "doc://com.apple.Swift/documentation/Swift/SIMD4",
        "doc://com.apple.Swift/documentation/Swift/SIMD64",
        "doc://com.apple.Swift/documentation/Swift/SIMD8",
        "doc://com.apple.Swift/documentation/Swift/SIMDMask",
        "doc://com.apple.Swift/documentation/Swift/Set",
        "doc://com.apple.Swift/documentation/Swift/Set/Index",
        "doc://com.apple.Swift/documentation/Swift/Set/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Slice",
        "doc://com.apple.Swift/documentation/Swift/StaticBigInt",
        "doc://com.apple.Swift/documentation/Swift/StaticString",
        "doc://com.apple.Swift/documentation/Swift/StrideThrough",
        "doc://com.apple.Swift/documentation/Swift/StrideThroughIterator",
        "doc://com.apple.Swift/documentation/Swift/StrideTo",
        "doc://com.apple.Swift/documentation/Swift/StrideToIterator",
        "doc://com.apple.Swift/documentation/Swift/String",
        "doc://com.apple.Swift/documentation/Swift/String/Comparator",
        "doc://com.apple.Swift/documentation/Swift/String/Encoding",
        "doc://com.apple.Swift/documentation/Swift/String/Index",
        "doc://com.apple.Swift/documentation/Swift/String/Iterator",
        "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue",
        "doc://com.apple.Swift/documentation/Swift/String/LocalizationValue/Placeholder",
        "doc://com.apple.Swift/documentation/Swift/String/StandardComparator",
        "doc://com.apple.Swift/documentation/Swift/String/UTF16View",
        "doc://com.apple.Swift/documentation/Swift/String/UTF16View/Iterator",
        "doc://com.apple.Swift/documentation/Swift/String/UTF8View",
        "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView",
        "doc://com.apple.Swift/documentation/Swift/String/UnicodeScalarView/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Substring",
        "doc://com.apple.Swift/documentation/Swift/Substring/UTF16View",
        "doc://com.apple.Swift/documentation/Swift/Substring/UTF8View",
        "doc://com.apple.Swift/documentation/Swift/Substring/UnicodeScalarView",
        "doc://com.apple.Swift/documentation/Swift/SuspendingClock",
        "doc://com.apple.Swift/documentation/Swift/SuspendingClock/Instant",
        "doc://com.apple.Swift/documentation/Swift/SystemRandomNumberGenerator",
        "doc://com.apple.Swift/documentation/Swift/Task",
        "doc://com.apple.Swift/documentation/Swift/TaskLocal",
        "doc://com.apple.Swift/documentation/Swift/TaskPriority",
        "doc://com.apple.Swift/documentation/Swift/UInt",
        "doc://com.apple.Swift/documentation/Swift/UInt/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt128",
        "doc://com.apple.Swift/documentation/Swift/UInt128/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt16",
        "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt16/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt16/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt32",
        "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt32/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt32/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt64",
        "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt64/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt64/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UInt8",
        "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD64Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt8/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/UInt8/Words-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/UnboundedRange_",
        "doc://com.apple.Swift/documentation/Swift/UnfoldSequence",
        "doc://com.apple.Swift/documentation/Swift/Unicode",
        "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII",
        "doc://com.apple.Swift/documentation/Swift/Unicode/ASCII/Parser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/CanonicalCombiningClass",
        "doc://com.apple.Swift/documentation/Swift/Unicode/GeneralCategory",
        "doc://com.apple.Swift/documentation/Swift/Unicode/NumericType",
        "doc://com.apple.Swift/documentation/Swift/Unicode/ParseResult",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/Properties-swift.struct",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF16View",
        "doc://com.apple.Swift/documentation/Swift/Unicode/Scalar/UTF8View",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ForwardParser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF16/ReverseParser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF32/Parser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ForwardParser",
        "doc://com.apple.Swift/documentation/Swift/Unicode/UTF8/ReverseParser",
        "doc://com.apple.Swift/documentation/Swift/UnicodeDecodingResult",
        "doc://com.apple.Swift/documentation/Swift/Unmanaged",
        "doc://com.apple.Swift/documentation/Swift/UnownedJob",
        "doc://com.apple.Swift/documentation/Swift/UnownedSerialExecutor",
        "doc://com.apple.Swift/documentation/Swift/UnownedTaskExecutor",
        "doc://com.apple.Swift/documentation/Swift/UnsafeContinuation",
        "doc://com.apple.Swift/documentation/Synchronization/WordPair",
        "doc://com.apple.Swift/documentation/Swift/Zip2Sequence",
        "doc://com.apple.Swift/documentation/Swift/Zip2Sequence/Iterator"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Actors",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Actor",
        "doc://com.apple.Swift/documentation/Swift/AnyActor",
        "doc://com.apple.Swift/documentation/Swift/MainActor",
        "doc://com.apple.Swift/documentation/Swift/GlobalActor",
        "doc://com.apple.Swift/documentation/Swift/ConcurrentValue",
        "doc://com.apple.Swift/documentation/Swift/UnsafeSendable",
        "doc://com.apple.Swift/documentation/Swift/UnsafeConcurrentValue",
        "doc://com.apple.Swift/documentation/Swift/isolation()",
        "doc://com.apple.Swift/documentation/Swift/extractIsolation(_:)"
      ],
      "title": "Actors"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/sendable"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
