{
  "abstract": [
    {
      "text": "Represents the contents of a string literal with interpolations while itâ€™s",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "being built up.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s27StringInterpolationProtocolP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "StringInterpolationProtocol"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "StringInterpolationProtocol"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "StringInterpolationProtocol"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "StringInterpolationProtocol"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Each ",
              "type": "text"
            },
            {
              "code": "ExpressibleByStringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " type has an associated",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "StringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " type which conforms to ",
              "type": "text"
            },
            {
              "code": "StringInterpolationProtocol",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Swift converts an expression like ",
              "type": "text"
            },
            {
              "code": "\"The time is \\(time).\" as MyString",
              "type": "codeVoice"
            },
            {
              "text": " into",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a series of statements similar to:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var interpolation = MyString.StringInterpolation(literalCapacity: 13, ",
            "                                                 interpolationCount: 1)",
            "",
            "interpolation.appendLiteral(\"The time is \")",
            "interpolation.appendInterpolation(time)",
            "interpolation.appendLiteral(\".\")",
            "",
            "MyString(stringInterpolation: interpolation)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "StringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " type is responsible for collecting the segments",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "passed to its ",
              "type": "text"
            },
            {
              "code": "appendLiteral(_:)",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "appendInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " methods and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "assembling them into a whole, converting as necessary. Once all of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "segments are appended, the interpolation is passed to an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "init(stringInterpolation:)",
              "type": "codeVoice"
            },
            {
              "text": " initializer on the type being created, which",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "must extract the accumulated data from the ",
              "type": "text"
            },
            {
              "code": "StringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In simple cases, you can use ",
              "type": "text"
            },
            {
              "code": "DefaultStringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " as the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "interpolation type for types that conform to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "ExpressibleByStringLiteral",
              "type": "codeVoice"
            },
            {
              "text": " protocol. To use the default interpolation,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "conform a type to ",
              "type": "text"
            },
            {
              "code": "ExpressibleByStringInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " and implement",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "init(stringLiteral: String)",
              "type": "codeVoice"
            },
            {
              "text": ". Values in interpolations are converted to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "strings, and then passed to that initializer just like any other string",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "literal.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Handling-String-Interpolations",
          "level": 1,
          "text": "Handling String Interpolations",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "With a custom interpolation type, each interpolated segment is translated",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "into a call to a special ",
              "type": "text"
            },
            {
              "code": "appendInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " method. The contents of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the interpolationâ€™s parentheses are treated as the callâ€™s argument list.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "That argument list can include multiple arguments and argument labels.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following examples show how string interpolations are translated into",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "calls to ",
              "type": "text"
            },
            {
              "code": "appendInterpolation",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "\\(x)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " translates to ",
                      "type": "text"
                    },
                    {
                      "code": "appendInterpolation(x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "\\(x, y)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " translates to ",
                      "type": "text"
                    },
                    {
                      "code": "appendInterpolation(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "\\(foo: x)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " translates to ",
                      "type": "text"
                    },
                    {
                      "code": "appendInterpolation(foo: x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "\\(x, foo: y)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " translates to ",
                      "type": "text"
                    },
                    {
                      "code": "appendInterpolation(x, foo: y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "appendInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " methods in your custom type must be mutating",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance methods that return ",
              "type": "text"
            },
            {
              "code": "Void",
              "type": "codeVoice"
            },
            {
              "text": ". This code shows a custom interpolation",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "typeâ€™s declaration of an ",
              "type": "text"
            },
            {
              "code": "appendInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " method that provides special",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "validation for user input:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "extension MyString.StringInterpolation {",
            "    mutating func appendInterpolation(validating input: String) {",
            "        // Perform validation of `input` and store for later use",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To use this interpolation method, create a string literal with an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "interpolation using the ",
              "type": "text"
            },
            {
              "code": "validating",
              "type": "codeVoice"
            },
            {
              "text": " parameter label.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let userInput = readLine() ?? \"\"",
            "let myString = \"The user typed '\\(validating: userInput)'.\" as MyString"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "code": "appendInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " methods support virtually all features of methods:",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "they can have any number of parameters, can specify labels for any or all",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of their parameters, can provide default values, can have variadic",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "parameters, and can have parameters with generic types. Most importantly,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "they can be overloaded, so a type that conforms to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "StringInterpolationProtocol",
              "type": "codeVoice"
            },
            {
              "text": " can provide several different",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "appendInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " methods with different behaviors. An",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "appendInterpolation",
              "type": "codeVoice"
            },
            {
              "text": " method can also throw; when a user writes a literal",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with one of these interpolations, they must mark the string literal with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "try",
              "type": "codeVoice"
            },
            {
              "text": " or one of its variants.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation": {
      "abstract": [
        {
          "text": "Represents a string literal with interpolations while it is being built up.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DefaultStringInterpolation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DefaultStringInterpolation"
        }
      ],
      "role": "symbol",
      "title": "DefaultStringInterpolation",
      "type": "topic",
      "url": "/documentation/swift/defaultstringinterpolation"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByExtendedGraphemeClusterLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with a string literal containing a single",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "extended grapheme cluster.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByExtendedGraphemeClusterLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByExtendedGraphemeClusterLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByExtendedGraphemeClusterLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByExtendedGraphemeClusterLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyextendedgraphemeclusterliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation": {
      "abstract": [
        {
          "text": "A type that can be initialized by string interpolation with a string",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "literal that includes expressions.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByStringInterpolation"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByStringInterpolation"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByStringInterpolation",
      "type": "topic",
      "url": "/documentation/swift/expressiblebystringinterpolation"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with a string literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByStringLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByStringLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByStringLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebystringliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByUnicodeScalarLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with a string literal containing a single",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "Unicode scalar value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByUnicodeScalarLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByUnicodeScalarLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByUnicodeScalarLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByUnicodeScalarLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyunicodescalarliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol": {
      "abstract": [
        {
          "text": "Represents the contents of a string literal with interpolations while itâ€™s",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "being built up.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StringInterpolationProtocol"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StringInterpolationProtocol"
        }
      ],
      "role": "symbol",
      "title": "StringInterpolationProtocol",
      "type": "topic",
      "url": "/documentation/swift/stringinterpolationprotocol"
    },
    "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/StringLiteralType": {
      "abstract": [
        {
          "text": "The type that should be used for literal segments.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StringLiteralType"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "text": "_ExpressibleByBuiltinStringLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/StringLiteralType",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "StringLiteralType",
      "type": "topic",
      "url": "/documentation/swift/stringinterpolationprotocol/stringliteraltype"
    },
    "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/appendLiteral(_:)": {
      "abstract": [
        {
          "text": "Appends a literal segment to the interpolation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "appendLiteral"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s27StringInterpolationProtocolP0A11LiteralTypeQa",
          "text": "StringLiteralType"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/appendLiteral(_:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "appendLiteral(_:)",
      "type": "topic",
      "url": "/documentation/swift/stringinterpolationprotocol/appendliteral(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/init(literalCapacity:interpolationCount:)": {
      "abstract": [
        {
          "text": "Creates an empty instance ready to be filled with string literal content.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "literalCapacity"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "interpolationCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/init(literalCapacity:interpolationCount:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(literalCapacity:interpolationCount:)",
      "type": "topic",
      "url": "/documentation/swift/stringinterpolationprotocol/init(literalcapacity:interpolationcount:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation"
      ],
      "kind": "relationships",
      "title": "Conforming Types",
      "type": "conformingTypes"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "String-Literals",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringLiteral",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByExtendedGraphemeClusterLiteral",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByUnicodeScalarLiteral",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByStringInterpolation",
        "doc://com.apple.Swift/documentation/Swift/DefaultStringInterpolation"
      ],
      "title": "String Literals"
    }
  ],
  "topicSections": [
    {
      "anchor": "Associated-Types",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/StringLiteralType"
      ],
      "title": "Associated Types"
    },
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/init(literalCapacity:interpolationCount:)"
      ],
      "title": "Initializers"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/StringInterpolationProtocol/appendLiteral(_:)"
      ],
      "title": "Instance Methods"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/stringinterpolationprotocol"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
