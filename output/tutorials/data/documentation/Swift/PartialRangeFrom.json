{"seeAlsoSections":[{"anchor":"Range-Expressions","identifiers":["doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo","doc://com.apple.Swift/documentation/Swift/PartialRangeThrough","doc://com.apple.Swift/documentation/Swift/RangeExpression","doc://com.apple.Swift/documentation/Swift/UnboundedRange_"],"title":"Range Expressions","generated":true}],"primaryContentSections":[{"declarations":[{"platforms":["iOS","iPadOS","Mac Catalyst","macOS","tvOS","visionOS","watchOS"],"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PartialRangeFrom","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Comparable","kind":"typeIdentifier","preciseIdentifier":"s:SL","identifier":"doc://com.apple.Swift/documentation/Swift/Comparable"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"You create "},{"type":"codeVoice","code":"PartialRangeFrom"},{"type":"text","text":" instances by using the postfix range operator"},{"type":"text","text":" "},{"type":"text","text":"(postfix "},{"type":"codeVoice","code":"..."},{"type":"text","text":")."}],"type":"paragraph"},{"code":["let atLeastFive = 5..."],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can use a partial range to quickly check if a value is contained in a"},{"type":"text","text":" "},{"type":"text","text":"particular range of values. For example:"}],"type":"paragraph"},{"code":["atLeastFive.contains(4)","// false","atLeastFive.contains(5)","// true","atLeastFive.contains(6)","// true"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You can use a partial range of a collection’s indices to represent the","type":"text"},{"text":" ","type":"text"},{"text":"range from the partial range’s lower bound up to the end of the","type":"text"},{"text":" ","type":"text"},{"text":"collection.","type":"text"}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[3...])","// Prints \"[40, 50, 60, 70]\""],"type":"codeListing","syntax":"swift"},{"text":"Using a Partial Range as a Sequence","type":"heading","anchor":"Using-a-Partial-Range-as-a-Sequence","level":2},{"inlineContent":[{"type":"text","text":"When a partial range uses integers as its lower and upper bounds, or any"},{"type":"text","text":" "},{"type":"text","text":"other type that conforms to the "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" protocol with an integer"},{"type":"text","text":" "},{"type":"text","text":"stride, you can use that range in a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop or with any sequence"},{"type":"text","text":" "},{"type":"text","text":"method that doesn’t require that the sequence is finite. The elements of"},{"type":"text","text":" "},{"type":"text","text":"a partial range are the consecutive values from its lower bound continuing"},{"type":"text","text":" "},{"type":"text","text":"upward indefinitely."}],"type":"paragraph"},{"code":["func isTheMagicNumber(_ x: Int) -> Bool {","    return x == 3","}","","for x in 1... {","    if isTheMagicNumber(x) {","        print(\"\\(x) is the magic number!\")","        break","    } else {","        print(\"\\(x) wasn't it...\")","    }","}","// \"1 wasn't it...\"","// \"2 wasn't it...\"","// \"3 is the magic number!\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Because a "},{"type":"codeVoice","code":"PartialRangeFrom"},{"type":"text","text":" sequence counts upward indefinitely, do not"},{"type":"text","text":" "},{"type":"text","text":"use one with methods that read the entire sequence before returning, such"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"codeVoice","code":"map(_:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"filter(_:)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"suffix(_:)"},{"type":"text","text":". It is safe to use operations"},{"type":"text","text":" "},{"type":"text","text":"that put an upper limit on the number of elements they access, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"prefix(_:)"},{"type":"text","text":" or "},{"type":"codeVoice","code":"dropFirst(_:)"},{"type":"text","text":", and operations that you can guarantee"},{"type":"text","text":" "},{"text":"will terminate, such as passing a closure you know will eventually return","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"first(where:)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In the following example, the ","type":"text"},{"code":"asciiTable","type":"codeVoice"},{"text":" sequence is made by zipping","type":"text"},{"text":" ","type":"text"},{"text":"together the characters in the ","type":"text"},{"code":"alphabet","type":"codeVoice"},{"text":" string with a partial range","type":"text"},{"text":" ","type":"text"},{"text":"starting at 65, the ASCII value of the capital letter A. Iterating over","type":"text"},{"text":" ","type":"text"},{"text":"two zipped sequences continues only as long as the shorter of the two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequences, so the iteration stops at the end of "},{"code":"alphabet","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","let asciiTable = zip(65..., alphabet)","for (code, letter) in asciiTable {","    print(code, letter)","}","// \"65 A\"","// \"66 B\"","// \"67 C\"","// ...","// \"89 Y\"","// \"90 Z\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The behavior of incrementing indefinitely is determined by the type of"},{"type":"text","text":" "},{"type":"codeVoice","code":"Bound"},{"type":"text","text":". For example, iterating over an instance of"},{"type":"text","text":" "},{"type":"codeVoice","code":"PartialRangeFrom<Int>"},{"type":"text","text":" traps when the sequence’s next value would be"},{"type":"text","text":" "},{"type":"text","text":"above "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc://com.apple.documentation/documentation/technologies","doc://com.apple.Swift/documentation/Swift"]]},"metadata":{"symbolKind":"struct","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PartialRangeFrom","kind":"identifier"}],"externalID":"s:s16PartialRangeFromV","navigatorTitle":[{"text":"PartialRangeFrom","kind":"identifier"}],"roleHeading":"Structure","title":"PartialRangeFrom","platforms":[{"introducedAt":"8.0","name":"iOS","unavailable":false,"deprecated":false,"beta":false},{"introducedAt":"8.0","name":"iPadOS","unavailable":false,"deprecated":false,"beta":false},{"introducedAt":"13.0","name":"Mac Catalyst","unavailable":false,"deprecated":false,"beta":false},{"introducedAt":"10.10","name":"macOS","unavailable":false,"deprecated":false,"beta":false},{"introducedAt":"9.0","name":"tvOS","unavailable":false,"deprecated":false,"beta":false},{"introducedAt":"1.0","name":"visionOS","unavailable":false,"deprecated":false,"beta":false},{"introducedAt":"2.0","name":"watchOS","unavailable":false,"deprecated":false,"beta":false}],"modules":[{"name":"Swift"}]},"abstract":[{"text":"A partial interval extending upward from a lower bound.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["/documentation/swift/partialrangefrom"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom"},"topicSections":[{"anchor":"Initializers","identifiers":["doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/init(_:)"],"title":"Initializers","generated":true},{"anchor":"Instance-Properties","identifiers":["doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/lowerBound"],"title":"Instance Properties","generated":true},{"anchor":"Default-Implementations","identifiers":["doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/CustomTestStringConvertible-Implementations","doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Decodable-Implementations","doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Encodable-Implementations","doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/RangeExpression-Implementations","doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Sequence-Implementations"],"title":"Default Implementations","generated":true}],"kind":"symbol","relationshipsSections":[{"identifiers":["doc://com.apple.Swift/documentation/Swift/Copyable","doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP","doc://com.apple.Swift/documentation/Swift/Decodable","doc://com.apple.Swift/documentation/Swift/Encodable","doc://com.externally.resolved.symbol/s:6CoreML28MLShapedArrayRangeExpressionP","doc://com.externally.resolved.symbol/s:6CoreML23MLTensorRangeExpressionP","doc://com.apple.Swift/documentation/Swift/RangeExpression","doc://com.apple.Swift/documentation/Swift/Sendable","doc://com.apple.Swift/documentation/Swift/Sequence"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"references":{"doc://com.apple.Swift/documentation/Swift/Decodable":{"abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","identifier":"doc://com.apple.Swift/documentation/Swift/Decodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"type":"topic","url":"/documentation/swift/decodable"},"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"A partial interval extending upward from a lower bound."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialRangeFrom"}],"identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom","title":"PartialRangeFrom","url":"/documentation/swift/partialrangefrom","navigatorTitle":[{"kind":"identifier","text":"PartialRangeFrom"}],"kind":"symbol"},"doc://com.apple.Swift/documentation/Swift/Copyable":{"type":"topic","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"title":"Copyable","identifier":"doc://com.apple.Swift/documentation/Swift/Copyable","url":"/documentation/swift/copyable","role":"symbol","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"kind":"symbol"},"doc://com.apple.Swift/documentation/Swift/Sequence":{"title":"Sequence","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Strideable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Bound.Stride","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SignedInteger","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc://com.apple.Swift/documentation/Swift/Sequence","type":"topic","role":"symbol","url":"/documentation/swift/sequence","kind":"symbol","navigatorTitle":[{"text":"Sequence","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}]},"doc://com.apple.documentation/documentation/technologies":{"abstract":[{"text":"","type":"text"}],"type":"topic","role":"overview","title":"Technologies","identifier":"doc://com.apple.documentation/documentation/technologies","url":"/documentation/technologies","kind":"technologies"},"doc://com.externally.resolved.symbol/s:6CoreML23MLTensorRangeExpressionP":{"type":"topic","title":"MLTensorRangeExpression","kind":"symbol","identifier":"doc://com.externally.resolved.symbol/s:6CoreML23MLTensorRangeExpressionP","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MLTensorRangeExpression","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Sendable","preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier"}],"url":"/documentation/CoreML/MLTensorRangeExpression","abstract":[{"text":"A type that can be used to slice a dimension of a tensor. Don’t use this type directly.","type":"text"}]},"doc://com.apple.Swift/documentation/Swift/PartialRangeThrough":{"identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeThrough","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A partial interval up to, and including, an upper bound."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PartialRangeThrough","kind":"identifier"}],"role":"symbol","title":"PartialRangeThrough","url":"/documentation/swift/partialrangethrough","navigatorTitle":[{"text":"PartialRangeThrough","kind":"identifier"}]},"doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP":{"abstract":[{"type":"text","text":"A protocol describing types with a custom string representation when presented as part of a test’s output."}],"kind":"symbol","role":"symbol","identifier":"doc://com.externally.resolved.symbol/s:7Testing27CustomTestStringConvertibleP","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomTestStringConvertible","kind":"identifier"}],"title":"CustomTestStringConvertible","type":"topic","url":"/documentation/Testing/CustomTestStringConvertible"},"doc://com.externally.resolved.symbol/s:6CoreML28MLShapedArrayRangeExpressionP":{"type":"topic","identifier":"doc://com.externally.resolved.symbol/s:6CoreML28MLShapedArrayRangeExpressionP","abstract":[{"type":"text","text":"An interface for a range expression, which you typically use with subscripts of shaped array types."}],"role":"symbol","url":"/documentation/CoreML/MLShapedArrayRangeExpression","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MLShapedArrayRangeExpression","kind":"identifier"}],"title":"MLShapedArrayRangeExpression","kind":"symbol"},"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Sequence-Implementations":{"role":"collectionGroup","identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Sequence-Implementations","kind":"article","url":"/documentation/swift/partialrangefrom/sequence-implementations","abstract":[],"type":"topic","title":"Sequence Implementations"},"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/CustomTestStringConvertible-Implementations":{"role":"collectionGroup","identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/CustomTestStringConvertible-Implementations","kind":"article","url":"/documentation/swift/partialrangefrom/customteststringconvertible-implementations","abstract":[],"type":"topic","title":"CustomTestStringConvertible Implementations"},"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/init(_:)":{"role":"symbol","identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/init(_:)","kind":"symbol","url":"/documentation/swift/partialrangefrom/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[],"type":"topic","title":"init(_:)"},"doc://com.apple.Swift/documentation/Swift/Comparable":{"kind":"symbol","abstract":[{"type":"text","text":"A type that can be compared using the relational operators "},{"code":"<","type":"codeVoice"},{"type":"text","text":", "},{"code":"<=","type":"codeVoice"},{"type":"text","text":", "},{"code":">=","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"type":"text","text":"."}],"identifier":"doc://com.apple.Swift/documentation/Swift/Comparable","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Comparable","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Comparable","kind":"identifier"}],"url":"/documentation/swift/comparable","title":"Comparable"},"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/lowerBound":{"type":"topic","abstract":[],"role":"symbol","title":"lowerBound","identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/lowerBound","kind":"symbol","url":"/documentation/swift/partialrangefrom/lowerbound","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lowerBound","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"}]},"doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo":{"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PartialRangeUpTo","kind":"identifier"}],"title":"PartialRangeUpTo","identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo","navigatorTitle":[{"text":"PartialRangeUpTo","kind":"identifier"}],"url":"/documentation/swift/partialrangeupto","abstract":[{"text":"A partial half-open interval up to, but not including, an upper bound.","type":"text"}],"role":"symbol"},"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/RangeExpression-Implementations":{"role":"collectionGroup","identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/RangeExpression-Implementations","kind":"article","url":"/documentation/swift/partialrangefrom/rangeexpression-implementations","abstract":[],"type":"topic","title":"RangeExpression Implementations"},"doc://com.apple.Swift/documentation/Swift/RangeExpression":{"type":"topic","identifier":"doc://com.apple.Swift/documentation/Swift/RangeExpression","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"A type that can be used to slice a collection."}],"role":"symbol","url":"/documentation/swift/rangeexpression","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RangeExpression","kind":"identifier"}],"title":"RangeExpression","navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}],"kind":"symbol"},"doc://com.apple.Swift/documentation/Swift/UnboundedRange_":{"identifier":"doc://com.apple.Swift/documentation/Swift/UnboundedRange_","title":"UnboundedRange_","abstract":[{"text":"A range expression that represents the entire range of a collection.","type":"text"}],"url":"/documentation/swift/unboundedrange_","kind":"symbol","navigatorTitle":[{"text":"UnboundedRange_","kind":"identifier"}],"role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnboundedRange_","kind":"identifier"}]},"doc://com.apple.Swift/documentation/Swift/Encodable":{"type":"topic","identifier":"doc://com.apple.Swift/documentation/Swift/Encodable","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"role":"symbol","url":"/documentation/swift/encodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Encodable","kind":"identifier"}],"title":"Encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"kind":"symbol"},"doc://com.apple.Swift/documentation/Swift":{"abstract":[{"text":"Build apps using a powerful open language.","type":"text"}],"type":"topic","role":"collection","title":"Swift","identifier":"doc://com.apple.Swift/documentation/Swift","url":"/documentation/swift","kind":"symbol","images":[{"identifier":"Swift-PageImage-card.png","type":"card"}]},"doc://com.apple.Swift/documentation/Swift/Sendable":{"title":"Sendable","abstract":[{"type":"text","text":"A thread-safe type whose values can be shared across arbitrary concurrent"},{"type":"text","text":" "},{"type":"text","text":"contexts without introducing a risk of data races."}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc://com.apple.Swift/documentation/Swift/Sendable","type":"topic","role":"symbol","url":"/documentation/swift/sendable","kind":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sendable","kind":"identifier"}]},"Swift-PageImage-card.png":{"identifier":"Swift-PageImage-card.png","alt":"An orange Swift logo on a gradient background.","type":"image","variants":[{"url":"https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png","traits":["2x","light"]},{"url":"https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png","traits":["2x","dark"]}]},"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Decodable-Implementations":{"role":"collectionGroup","identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Decodable-Implementations","kind":"article","url":"/documentation/swift/partialrangefrom/decodable-implementations","abstract":[],"type":"topic","title":"Decodable Implementations"},"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Encodable-Implementations":{"role":"collectionGroup","identifier":"doc://com.apple.Swift/documentation/Swift/PartialRangeFrom/Encodable-Implementations","kind":"article","url":"/documentation/swift/partialrangefrom/encodable-implementations","abstract":[],"type":"topic","title":"Encodable Implementations"}},"legalNotices":{"copyright":"Copyright &copy; 2025 Apple Inc. All rights reserved.","termsOfUse":"https://www.apple.com/legal/internet-services/terms/site.html","privacyPolicy":"https://www.apple.com/privacy/privacy-policy"}}