{
  "abstract": [
    {
      "text": "A range expression that represents the entire range of a collection.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/UnboundedRange_"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:s15UnboundedRange_O",
    "fragments": [
      {
        "kind": "keyword",
        "text": "enum"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "UnboundedRange_"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "UnboundedRange_"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Enumeration",
    "symbolKind": "enum",
    "title": "UnboundedRange_"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "enum"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "UnboundedRange_"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can use the unbounded range operator (",
              "type": "text"
            },
            {
              "code": "...",
              "type": "codeVoice"
            },
            {
              "text": ") to create a slice of a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "collection that contains all of the collection’s elements. Slicing with an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "unbounded range is essentially a conversion of a collection instance into",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "its slice type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, the following code declares ",
              "type": "text"
            },
            {
              "code": "countLetterChanges(_:_:)",
              "type": "codeVoice"
            },
            {
              "text": ", a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function that finds the number of changes required to change one",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "word or phrase into another. The function uses a recursive approach to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "perform the same comparisons on smaller and smaller pieces of the original",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "strings. In order to use recursion without making copies of the strings at",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "each step, ",
              "type": "text"
            },
            {
              "code": "countLetterChanges(_:_:)",
              "type": "codeVoice"
            },
            {
              "text": " uses ",
              "type": "text"
            },
            {
              "code": "Substring",
              "type": "codeVoice"
            },
            {
              "text": ", a string’s slice",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "type, for its parameters.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func countLetterChanges(_ s1: Substring, _ s2: Substring) -> Int {",
            "    if s1.isEmpty { return s2.count }",
            "    if s2.isEmpty { return s1.count }",
            "",
            "    let cost = s1.first == s2.first ? 0 : 1",
            "",
            "    return min(",
            "        countLetterChanges(s1.dropFirst(), s2) + 1,",
            "        countLetterChanges(s1, s2.dropFirst()) + 1,",
            "        countLetterChanges(s1.dropFirst(), s2.dropFirst()) + cost)",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To call ",
              "type": "text"
            },
            {
              "code": "countLetterChanges(_:_:)",
              "type": "codeVoice"
            },
            {
              "text": " with two strings, use an unbounded",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "range in each string’s subscript.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let word1 = \"grizzly\"",
            "let word2 = \"grisly\"",
            "let changes = countLetterChanges(word1[...], word2[...])",
            "// changes == 2"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "role": "symbol",
      "title": "BitwiseCopyable",
      "type": "topic",
      "url": "/documentation/swift/bitwisecopyable"
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/swift/copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom": {
      "abstract": [
        {
          "text": "A partial interval extending upward from a lower bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeFrom"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeFrom"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeFrom",
      "type": "topic",
      "url": "/documentation/swift/partialrangefrom"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough": {
      "abstract": [
        {
          "text": "A partial interval up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeThrough"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeThrough"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeThrough",
      "type": "topic",
      "url": "/documentation/swift/partialrangethrough"
    },
    "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo": {
      "abstract": [
        {
          "text": "A partial half-open interval up to, but not including, an upper bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PartialRangeUpTo"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PartialRangeUpTo"
        }
      ],
      "role": "symbol",
      "title": "PartialRangeUpTo",
      "type": "topic",
      "url": "/documentation/swift/partialrangeupto"
    },
    "doc://com.apple.Swift/documentation/Swift/RangeExpression": {
      "abstract": [
        {
          "text": "A type that can be used to slice a collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeExpression"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeExpression",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RangeExpression"
        }
      ],
      "role": "symbol",
      "title": "RangeExpression",
      "type": "topic",
      "url": "/documentation/swift/rangeexpression"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Swift/UnboundedRange": {
      "abstract": [
        {
          "text": "The type of an unbounded range operator.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnboundedRange"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnboundedRange",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnboundedRange"
        }
      ],
      "role": "symbol",
      "title": "UnboundedRange",
      "type": "topic",
      "url": "/documentation/swift/unboundedrange"
    },
    "doc://com.apple.Swift/documentation/Swift/UnboundedRange_": {
      "abstract": [
        {
          "text": "A range expression that represents the entire range of a collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnboundedRange_"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnboundedRange_",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnboundedRange_"
        }
      ],
      "role": "symbol",
      "title": "UnboundedRange_",
      "type": "topic",
      "url": "/documentation/swift/unboundedrange_"
    },
    "doc://com.apple.Swift/documentation/Swift/UnboundedRange_/...(_:)": {
      "abstract": [
        {
          "text": "Creates an unbounded range expression.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "..."
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s15UnboundedRange_O",
          "text": "UnboundedRange_"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnboundedRange_/...(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "...(_:)",
      "type": "topic",
      "url": "/documentation/swift/unboundedrange_/'...(_:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
        "doc://com.apple.Swift/documentation/Swift/Copyable",
        "doc://com.apple.Swift/documentation/Swift/Sendable"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Range-Expressions",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/PartialRangeUpTo",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeThrough",
        "doc://com.apple.Swift/documentation/Swift/PartialRangeFrom",
        "doc://com.apple.Swift/documentation/Swift/RangeExpression"
      ],
      "title": "Range Expressions"
    }
  ],
  "topicSections": [
    {
      "anchor": "Creating-an-Unbounded-Range",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/UnboundedRange_/...(_:)",
        "doc://com.apple.Swift/documentation/Swift/UnboundedRange"
      ],
      "title": "Creating an Unbounded Range"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/unboundedrange_"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
