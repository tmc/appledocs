{
  "abstract": [
    {
      "text": "A double-precision, floating-point value type.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/Double"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:Sd",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Double"
      }
    ],
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "Double"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.10",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "9.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "Double"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Double"
            }
          ]
        }
      ],
      "kind": "declarations"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AdditiveArithmetic": {
      "abstract": [
        {
          "text": "A type with values that support addition and subtraction.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AdditiveArithmetic"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AdditiveArithmetic",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AdditiveArithmetic"
        }
      ],
      "role": "symbol",
      "title": "AdditiveArithmetic",
      "type": "topic",
      "url": "/documentation/swift/additivearithmetic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array": {
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "role": "symbol",
      "title": "Array",
      "type": "topic",
      "url": "/documentation/swift/array"
    },
    "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint": {
      "abstract": [
        {
          "text": "A radix-2 (binary) floating-point type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BinaryFloatingPoint"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BinaryFloatingPoint"
        }
      ],
      "role": "symbol",
      "title": "BinaryFloatingPoint",
      "type": "topic",
      "url": "/documentation/swift/binaryfloatingpoint"
    },
    "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BitwiseCopyable"
        }
      ],
      "role": "symbol",
      "title": "BitwiseCopyable",
      "type": "topic",
      "url": "/documentation/swift/bitwisecopyable"
    },
    "doc://com.apple.Swift/documentation/Swift/CVarArg": {
      "abstract": [
        {
          "text": "A type whose instances can be encoded, and appropriately passed, as",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of a C ",
          "type": "text"
        },
        {
          "code": "va_list",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CVarArg"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CVarArg",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CVarArg"
        }
      ],
      "role": "symbol",
      "title": "CVarArg",
      "type": "topic",
      "url": "/documentation/swift/cvararg"
    },
    "doc://com.apple.Swift/documentation/Swift/Comparable": {
      "abstract": [
        {
          "text": "A type that can be compared using the relational operators ",
          "type": "text"
        },
        {
          "code": "<",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "<=",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": ">=",
          "type": "codeVoice"
        },
        {
          "text": ",",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and ",
          "type": "text"
        },
        {
          "code": ">",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Comparable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Comparable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Comparable"
        }
      ],
      "role": "symbol",
      "title": "Comparable",
      "type": "topic",
      "url": "/documentation/swift/comparable"
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/swift/copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation suitable for debugging",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "purposes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomDebugStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customdebugstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomReflectable": {
      "abstract": [
        {
          "text": "A type that explicitly supplies its own mirror.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomReflectable"
        }
      ],
      "role": "symbol",
      "title": "CustomReflectable",
      "type": "topic",
      "url": "/documentation/swift/customreflectable"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible": {
      "abstract": [
        {
          "text": "A type with a customized textual representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "CustomStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/customstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/Decodable": {
      "abstract": [
        {
          "text": "A type that can decode itself from an external representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Decodable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Decodable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Decodable"
        }
      ],
      "role": "symbol",
      "title": "Decodable",
      "type": "topic",
      "url": "/documentation/swift/decodable"
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary": {
      "abstract": [
        {
          "text": "A collection whose elements are key-value pairs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "role": "symbol",
      "title": "Dictionary",
      "type": "topic",
      "url": "/documentation/swift/dictionary"
    },
    "doc://com.apple.Swift/documentation/Swift/Double": {
      "abstract": [
        {
          "text": "A double-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "role": "symbol",
      "title": "Double",
      "type": "topic",
      "url": "/documentation/swift/double"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/...(_:_:)": {
      "abstract": [
        {
          "text": "Returns a closed range that contains both of its bounds.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "..."
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SN",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/...(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "...(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/double/'...(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/AdditiveArithmetic-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/AdditiveArithmetic-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "AdditiveArithmetic Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/additivearithmetic-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/AtomicRepresentable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/AtomicRepresentable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "AtomicRepresentable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/atomicrepresentable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/BinaryFloatingPoint-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/BinaryFloatingPoint-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "BinaryFloatingPoint Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/binaryfloatingpoint-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Comparable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Comparable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Comparable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/comparable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/CustomDebugStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/CustomDebugStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomDebugStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/customdebugstringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/CustomReflectable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/CustomReflectable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomReflectable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/customreflectable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/CustomStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/CustomStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "CustomStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/customstringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Decodable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Decodable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Decodable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/decodable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Encodable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Encodable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Encodable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/encodable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Equatable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Equatable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Equatable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/equatable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Exponent-swift.typealias": {
      "abstract": [
        {
          "text": "A type that can represent any written exponent.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Exponent"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Exponent-swift.typealias",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Exponent"
        }
      ],
      "role": "symbol",
      "title": "Double.Exponent",
      "type": "topic",
      "url": "/documentation/swift/double/exponent-swift.typealias"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/ExpressibleByFloatLiteral-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/ExpressibleByFloatLiteral-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "ExpressibleByFloatLiteral Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/expressiblebyfloatliteral-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/ExpressibleByIntegerLiteral-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/ExpressibleByIntegerLiteral-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "ExpressibleByIntegerLiteral Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/expressiblebyintegerliteral-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/FloatLiteralType": {
      "abstract": [
        {
          "text": "A type that represents a floating-point literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatLiteralType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/FloatLiteralType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatLiteralType"
        }
      ],
      "role": "symbol",
      "title": "Double.FloatLiteralType",
      "type": "topic",
      "url": "/documentation/swift/double/floatliteraltype"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/FloatingPoint-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/FloatingPoint-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "FloatingPoint Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/floatingpoint-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Hashable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Hashable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Hashable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/hashable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/IntegerLiteralType": {
      "abstract": [
        {
          "text": "A type that represents an integer literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "IntegerLiteralType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/IntegerLiteralType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "IntegerLiteralType"
        }
      ],
      "role": "symbol",
      "title": "Double.IntegerLiteralType",
      "type": "topic",
      "url": "/documentation/swift/double/integerliteraltype"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/LosslessStringConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/LosslessStringConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "LosslessStringConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/losslessstringconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/MLDataValueConvertible-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/MLDataValueConvertible-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "MLDataValueConvertible Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/mldatavalueconvertible-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Magnitude-swift.typealias": {
      "abstract": [
        {
          "text": "A type that can represent the absolute value of any possible value of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "conforming type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Magnitude"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Magnitude-swift.typealias",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Magnitude"
        }
      ],
      "role": "symbol",
      "title": "Double.Magnitude",
      "type": "topic",
      "url": "/documentation/swift/double/magnitude-swift.typealias"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Numeric-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Numeric-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Numeric Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/numeric-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/RawExponent": {
      "abstract": [
        {
          "text": "A type that represents the encoded exponent of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RawExponent"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/RawExponent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RawExponent"
        }
      ],
      "role": "symbol",
      "title": "Double.RawExponent",
      "type": "topic",
      "url": "/documentation/swift/double/rawexponent"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/RawSignificand": {
      "abstract": [
        {
          "text": "A type that represents the encoded significand of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RawSignificand"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/RawSignificand",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RawSignificand"
        }
      ],
      "role": "symbol",
      "title": "Double.RawSignificand",
      "type": "topic",
      "url": "/documentation/swift/double/rawsignificand"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD16Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 16 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD16Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD16Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD16Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd16storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD2Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of two floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD2Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD2Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD2Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd2storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD32Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 32 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD32Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD32Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD32Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd32storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD4Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of four floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD4Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD4Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD4Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd4storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD64Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of 64 floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD64Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD64Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD64Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd64storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMD8Storage": {
      "abstract": [
        {
          "text": "Storage for a vector of eight floating-point values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMD8Storage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMD8Storage"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMD8Storage",
      "type": "topic",
      "url": "/documentation/swift/double/simd8storage"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMDMaskScalar": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMDMaskScalar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMDMaskScalar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMDMaskScalar"
        }
      ],
      "role": "symbol",
      "title": "Double.SIMDMaskScalar",
      "type": "topic",
      "url": "/documentation/swift/double/simdmaskscalar"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SIMDScalar-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SIMDScalar-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "SIMDScalar Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/simdscalar-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/SignedNumeric-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/SignedNumeric-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "SignedNumeric Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/signednumeric-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Specification": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Specification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Specification",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Specification"
        }
      ],
      "role": "symbol",
      "title": "Double.Specification",
      "type": "topic",
      "url": "/documentation/swift/double/specification"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Stride": {
      "abstract": [
        {
          "text": "A type that represents the distance between two values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Stride"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Stride",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Stride"
        }
      ],
      "role": "symbol",
      "title": "Double.Stride",
      "type": "topic",
      "url": "/documentation/swift/double/stride"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/Strideable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/Strideable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Strideable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/strideable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/TextOutputStreamable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/TextOutputStreamable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "TextOutputStreamable Implementations",
      "type": "topic",
      "url": "/documentation/swift/double/textoutputstreamable-implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/UnwrappedType": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnwrappedType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/UnwrappedType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnwrappedType"
        }
      ],
      "role": "symbol",
      "title": "Double.UnwrappedType",
      "type": "topic",
      "url": "/documentation/swift/double/unwrappedtype"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/ValueType": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ValueType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/ValueType",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ValueType"
        }
      ],
      "role": "symbol",
      "title": "Double.ValueType",
      "type": "topic",
      "url": "/documentation/swift/double/valuetype"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/addProduct(_:_:)": {
      "abstract": [
        {
          "text": "Adds the product of the two given values to this value in place, computed",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "without intermediate rounding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "addProduct"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/addProduct(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "addProduct(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/double/addproduct(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/addingProduct(_:_:)": {
      "abstract": [
        {
          "text": "Returns the result of adding the product of the two given values to this",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, computed without intermediate rounding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "addingProduct"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/addingProduct(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "addingProduct(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/double/addingproduct(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/advanced(by:)": {
      "abstract": [
        {
          "text": "Returns a value that is offset the specified distance from this value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "advanced"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/advanced(by:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "advanced(by:)",
      "type": "topic",
      "url": "/documentation/swift/double/advanced(by:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/binade": {
      "abstract": [
        {
          "text": "The floating-point value with the same sign and exponent as this value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "but with a significand of 1.0.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "binade"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/binade",
      "kind": "symbol",
      "role": "symbol",
      "title": "binade",
      "type": "topic",
      "url": "/documentation/swift/double/binade"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/bitPattern": {
      "abstract": [
        {
          "text": "The bit pattern of the value’s encoding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitPattern"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/bitPattern",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitPattern",
      "type": "topic",
      "url": "/documentation/swift/double/bitpattern"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/customMirror": {
      "abstract": [
        {
          "text": "A mirror that reflects the ",
          "type": "text"
        },
        {
          "code": "Double",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "customMirror"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6MirrorV",
          "text": "Mirror"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/customMirror",
      "kind": "symbol",
      "role": "symbol",
      "title": "customMirror",
      "type": "topic",
      "url": "/documentation/swift/double/custommirror"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/customPlaygroundQuickLook": {
      "abstract": [
        {
          "text": "A custom playground Quick Look for the ",
          "type": "text"
        },
        {
          "code": "Double",
          "type": "codeVoice"
        },
        {
          "text": " instance.",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "customPlaygroundQuickLook"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "_PlaygroundQuickLook"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/customPlaygroundQuickLook",
      "kind": "symbol",
      "role": "symbol",
      "title": "customPlaygroundQuickLook",
      "type": "topic",
      "url": "/documentation/swift/double/customplaygroundquicklook"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/dataValue": {
      "abstract": [
        {
          "text": "The value of the conforming type’s instance wrapped in a data value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "dataValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:8CreateML11MLDataValueO",
          "text": "MLDataValue"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/dataValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "dataValue",
      "type": "topic",
      "url": "/documentation/swift/double/datavalue"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/dataValueType": {
      "abstract": [
        {
          "text": "The underlying type the conforming type uses when it wraps itself in a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "data value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "dataValueType"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:8CreateML11MLDataValueO",
          "text": "MLDataValue"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:8CreateML11MLDataValueO0D4TypeO",
          "text": "ValueType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/dataValueType",
      "kind": "symbol",
      "role": "symbol",
      "title": "dataValueType",
      "type": "topic",
      "url": "/documentation/swift/double/datavaluetype"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/debugDescription": {
      "abstract": [
        {
          "text": "A textual representation of the value, suitable for debugging.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "debugDescription"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/debugDescription",
      "kind": "symbol",
      "role": "symbol",
      "title": "debugDescription",
      "type": "topic",
      "url": "/documentation/swift/double/debugdescription"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/defaultResolverSpecification": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "defaultResolverSpecification"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10AppIntents21ResolverSpecificationP",
          "text": "ResolverSpecification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/defaultResolverSpecification",
      "kind": "symbol",
      "role": "symbol",
      "title": "defaultResolverSpecification",
      "type": "topic",
      "url": "/documentation/swift/double/defaultresolverspecification"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/description": {
      "abstract": [
        {
          "text": "A textual representation of the value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "description"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/description",
      "kind": "symbol",
      "role": "symbol",
      "title": "description",
      "type": "topic",
      "url": "/documentation/swift/double/description"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/distance(to:)": {
      "abstract": [
        {
          "text": "Returns the distance from this value to the given value, expressed as a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "stride.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "distance"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/distance(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "distance(to:)",
      "type": "topic",
      "url": "/documentation/swift/double/distance(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/encode(to:)": {
      "abstract": [
        {
          "text": "Encodes this value into the given encoder.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "encode"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7EncoderP",
          "text": "Encoder"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/encode(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "encode(to:)",
      "type": "topic",
      "url": "/documentation/swift/double/encode(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/exponent-swift.property": {
      "abstract": [
        {
          "text": "The exponent of the floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exponent"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/exponent-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "exponent",
      "type": "topic",
      "url": "/documentation/swift/double/exponent-swift.property"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/exponentBitCount": {
      "abstract": [
        {
          "text": "The number of bits used to represent the type’s exponent.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exponentBitCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/exponentBitCount",
      "kind": "symbol",
      "role": "symbol",
      "title": "exponentBitCount",
      "type": "topic",
      "url": "/documentation/swift/double/exponentbitcount"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/exponentBitPattern": {
      "abstract": [
        {
          "text": "The raw encoding of the value’s exponent field.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exponentBitPattern"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/exponentBitPattern",
      "kind": "symbol",
      "role": "symbol",
      "title": "exponentBitPattern",
      "type": "topic",
      "url": "/documentation/swift/double/exponentbitpattern"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/floatingPointClass": {
      "abstract": [
        {
          "text": "The classification of this value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "floatingPointClass"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s27FloatingPointClassificationO",
          "text": "FloatingPointClassification"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/floatingPointClass",
      "kind": "symbol",
      "role": "symbol",
      "title": "floatingPointClass",
      "type": "topic",
      "url": "/documentation/swift/double/floatingpointclass"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/formRemainder(dividingBy:)": {
      "abstract": [
        {
          "text": "Replaces this value with the remainder of itself divided by the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formRemainder"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "dividingBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/formRemainder(dividingBy:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "formRemainder(dividingBy:)",
      "type": "topic",
      "url": "/documentation/swift/double/formremainder(dividingby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/formSquareRoot()": {
      "abstract": [
        {
          "text": "Replaces this value with its square root, rounded to a representable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formSquareRoot"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/formSquareRoot()",
      "kind": "symbol",
      "role": "symbol",
      "title": "formSquareRoot()",
      "type": "topic",
      "url": "/documentation/swift/double/formsquareroot()"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/formTruncatingRemainder(dividingBy:)": {
      "abstract": [
        {
          "text": "Replaces this value with the remainder of itself divided by the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value using truncating division.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formTruncatingRemainder"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "dividingBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/formTruncatingRemainder(dividingBy:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "formTruncatingRemainder(dividingBy:)",
      "type": "topic",
      "url": "/documentation/swift/double/formtruncatingremainder(dividingby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/greatestFiniteMagnitude": {
      "abstract": [
        {
          "text": "The greatest finite number representable by this type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "greatestFiniteMagnitude"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/greatestFiniteMagnitude",
      "kind": "symbol",
      "role": "symbol",
      "title": "greatestFiniteMagnitude",
      "type": "topic",
      "url": "/documentation/swift/double/greatestfinitemagnitude"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/hash(into:)": {
      "abstract": [
        {
          "text": "Hashes the essential components of this value by feeding them into the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given hasher.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "into"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6HasherV",
          "text": "Hasher"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/hash(into:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "hash(into:)",
      "type": "topic",
      "url": "/documentation/swift/double/hash(into:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/hashValue": {
      "abstract": [
        {
          "text": "The hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hashValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/hashValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "hashValue",
      "type": "topic",
      "url": "/documentation/swift/double/hashvalue"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/infinity": {
      "abstract": [
        {
          "text": "Positive infinity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "infinity"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/infinity",
      "kind": "symbol",
      "role": "symbol",
      "title": "infinity",
      "type": "topic",
      "url": "/documentation/swift/double/infinity"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init()": {
      "abstract": [],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init()",
      "kind": "symbol",
      "role": "symbol",
      "title": "init()",
      "type": "topic",
      "url": "/documentation/swift/double/init()"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-1488d": {
      "abstract": [
        {
          "text": "Creates a new instance from the given value, rounded to the closest",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "possible representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-1488d",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-1488d"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-15kej": {
      "abstract": [],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Ss",
          "text": "Substring"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-15kej",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-15kej"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-1oh9r": {
      "abstract": [
        {
          "text": "Creates a new value, rounded to the closest possible representation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "RawSignificand",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "FixedWidthInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-1oh9r",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-1oh9r"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5blrp": {
      "abstract": [
        {
          "text": "Creates a new value, rounded to the closest possible representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5blrp",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-5blrp"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5h7qh": {
      "abstract": [
        {
          "text": "Creates a new instance that approximates the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5h7qh",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-5h7qh"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5wmm8": {
      "abstract": [
        {
          "text": "Creates a new instance from the given string.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5wmm8",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-5wmm8"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-7ag2w": {
      "abstract": [],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:14CoreFoundation7CGFloatV",
          "text": "CGFloat"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-7ag2w",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-7ag2w"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-84ohu": {
      "abstract": [
        {
          "text": "Creates a new value, rounded to the closest possible representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-84ohu",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-84ohu"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-8kme5": {
      "abstract": [],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSNumber",
          "text": "NSNumber"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-8kme5",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-8kme5"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-9z7ob": {
      "abstract": [
        {
          "text": "Creates a new instance that approximates the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7Float80V",
          "text": "Float80"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-9z7ob",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-9z7ob"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-aeox": {
      "abstract": [
        {
          "text": "Creates a new instance that approximates the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7Float16V",
          "text": "Float16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-aeox",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-aeox"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-o1k9": {
      "abstract": [
        {
          "text": "Creates a new instance initialized to the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-o1k9",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(_:)-o1k9"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(bitPattern:)": {
      "abstract": [
        {
          "text": "Creates a new value with the given bit pattern.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "bitPattern"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(bitPattern:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(bitPattern:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(bitpattern:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-1h1oc": {
      "abstract": [
        {
          "text": "Creates a new value, if the given integer can be represented exactly.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "RawSignificand",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "FixedWidthInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-1h1oc",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(exactly:)-1h1oc"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-2l6p1": {
      "abstract": [
        {
          "text": "Creates a new instance initialized to the given value, if it can be",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "represented without rounding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-2l6p1",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(exactly:)-2l6p1"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-2uexo": {
      "abstract": [
        {
          "text": "Creates a new value, if the given integer can be represented exactly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-2uexo",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(exactly:)-2uexo"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-50ofc": {
      "abstract": [
        {
          "text": "Creates a new instance initialized to the given value, if it can be",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "represented without rounding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7Float16V",
          "text": "Float16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-50ofc",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(exactly:)-50ofc"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-63925": {
      "abstract": [
        {
          "text": "Creates a new instance initialized to the given value, if it can be",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "represented without rounding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7Float80V",
          "text": "Float80"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-63925",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(exactly:)-63925"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-7cl0t": {
      "abstract": [
        {
          "text": "Creates a new instance initialized to the given value, if it can be",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "represented without rounding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-7cl0t",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(exactly:)-7cl0t"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-8e00y": {
      "abstract": [],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSNumber",
          "text": "NSNumber"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-8e00y",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(exactly:)-8e00y"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-8esra": {
      "abstract": [
        {
          "text": "Creates a new instance from the given value, if it can be represented",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "exactly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?<"
        },
        {
          "kind": "genericParameter",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "exactly"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Source"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-8esra",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(exactly:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(exactly:)-8esra"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(floatLiteral:)": {
      "abstract": [
        {
          "text": "Creates an instance initialized to the specified floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "floatLiteral"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(floatLiteral:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(floatLiteral:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(floatliteral:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(from:)-3crx3": {
      "abstract": [
        {
          "text": "Creates a new instance by decoding from the given decoder.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7DecoderP",
          "text": "Decoder"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(from:)-3crx3",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(from:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(from:)-3crx3"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(from:)-5gnqe": {
      "abstract": [
        {
          "text": "Creates an instance of the conforming type from a data value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:8CreateML11MLDataValueO",
          "text": "MLDataValue"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(from:)-5gnqe",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(from:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(from:)-5gnqe"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(integerLiteral:)": {
      "abstract": [
        {
          "text": "Creates an instance initialized to the specified integer value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "integerLiteral"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(integerLiteral:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(integerLiteral:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(integerliteral:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(integerLiteral:)-6hc7j": {
      "abstract": [],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "_ExpressibleByBuiltinIntegerLiteral",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "integerLiteral"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(integerLiteral:)-6hc7j",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(integerLiteral:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(integerliteral:)-6hc7j"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(nan:signaling:)": {
      "abstract": [
        {
          "text": "Creates a NaN (“not a number”) value with the specified payload.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "nan"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd14RawSignificanda",
          "text": "RawSignificand"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "signaling"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(nan:signaling:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(nan:signaling:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(nan:signaling:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(sign:exponent:significand:)": {
      "abstract": [
        {
          "text": "Creates a new value from the given sign, exponent, and significand.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "sign"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s17FloatingPointSignO",
          "text": "FloatingPointSign"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "exponent"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "significand"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(sign:exponent:significand:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(sign:exponent:significand:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(sign:exponent:significand:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(sign:exponentBitPattern:significandBitPattern:)": {
      "abstract": [
        {
          "text": "Creates a new instance from the specified sign and bit patterns.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "sign"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s17FloatingPointSignO",
          "text": "FloatingPointSign"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "exponentBitPattern"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "significandBitPattern"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(sign:exponentBitPattern:significandBitPattern:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(sign:exponentBitPattern:significandBitPattern:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(sign:exponentbitpattern:significandbitpattern:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(signOf:magnitudeOf:)": {
      "abstract": [
        {
          "text": "Creates a new floating-point value using the sign of one value and the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "magnitude of another.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "signOf"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "magnitudeOf"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(signOf:magnitudeOf:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(signOf:magnitudeOf:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(signof:magnitudeof:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/init(truncating:)": {
      "abstract": [],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "truncating"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSNumber",
          "text": "NSNumber"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/init(truncating:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(truncating:)",
      "type": "topic",
      "url": "/documentation/swift/double/init(truncating:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isCanonical": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance’s representation is in",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "its canonical form.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isCanonical"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isCanonical",
      "kind": "symbol",
      "role": "symbol",
      "title": "isCanonical",
      "type": "topic",
      "url": "/documentation/swift/double/iscanonical"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isEqual(to:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this instance is equal to the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isEqual"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isEqual(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "isEqual(to:)",
      "type": "topic",
      "url": "/documentation/swift/double/isequal(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isFinite": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether this instance is finite.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isFinite"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isFinite",
      "kind": "symbol",
      "role": "symbol",
      "title": "isFinite",
      "type": "topic",
      "url": "/documentation/swift/double/isfinite"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isInfinite": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is infinite.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isInfinite"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isInfinite",
      "kind": "symbol",
      "role": "symbol",
      "title": "isInfinite",
      "type": "topic",
      "url": "/documentation/swift/double/isinfinite"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isLess(than:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this instance is less than the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isLess"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "than"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isLess(than:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "isLess(than:)",
      "type": "topic",
      "url": "/documentation/swift/double/isless(than:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isLessThanOrEqualTo(_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this instance is less than or",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "equal to the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isLessThanOrEqualTo"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isLessThanOrEqualTo(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "isLessThanOrEqualTo(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/islessthanorequalto(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isNaN": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is NaN (“not a number”).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isNaN"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isNaN",
      "kind": "symbol",
      "role": "symbol",
      "title": "isNaN",
      "type": "topic",
      "url": "/documentation/swift/double/isnan"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isNormal": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether this instance is normal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isNormal"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isNormal",
      "kind": "symbol",
      "role": "symbol",
      "title": "isNormal",
      "type": "topic",
      "url": "/documentation/swift/double/isnormal"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isSignalingNaN": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is a signaling NaN.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isSignalingNaN"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isSignalingNaN",
      "kind": "symbol",
      "role": "symbol",
      "title": "isSignalingNaN",
      "type": "topic",
      "url": "/documentation/swift/double/issignalingnan"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isSubnormal": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is subnormal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isSubnormal"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isSubnormal",
      "kind": "symbol",
      "role": "symbol",
      "title": "isSubnormal",
      "type": "topic",
      "url": "/documentation/swift/double/issubnormal"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isTotallyOrdered(belowOrEqualTo:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether this instance should precede",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "or tie positions with the given value in an ascending sort.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isTotallyOrdered"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "belowOrEqualTo"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isTotallyOrdered(belowOrEqualTo:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "isTotallyOrdered(belowOrEqualTo:)",
      "type": "topic",
      "url": "/documentation/swift/double/istotallyordered(beloworequalto:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/isZero": {
      "abstract": [
        {
          "text": "A Boolean value indicating whether the instance is equal to zero.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isZero"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/isZero",
      "kind": "symbol",
      "role": "symbol",
      "title": "isZero",
      "type": "topic",
      "url": "/documentation/swift/double/iszero"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/leastNonzeroMagnitude": {
      "abstract": [
        {
          "text": "The least positive number.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "leastNonzeroMagnitude"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/leastNonzeroMagnitude",
      "kind": "symbol",
      "role": "symbol",
      "title": "leastNonzeroMagnitude",
      "type": "topic",
      "url": "/documentation/swift/double/leastnonzeromagnitude"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/leastNormalMagnitude": {
      "abstract": [
        {
          "text": "The least positive normal number.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "leastNormalMagnitude"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/leastNormalMagnitude",
      "kind": "symbol",
      "role": "symbol",
      "title": "leastNormalMagnitude",
      "type": "topic",
      "url": "/documentation/swift/double/leastnormalmagnitude"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/magnitude-swift.property": {
      "abstract": [
        {
          "text": "The magnitude of this value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "magnitude"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/magnitude-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "magnitude",
      "type": "topic",
      "url": "/documentation/swift/double/magnitude-swift.property"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/maximum(_:_:)": {
      "abstract": [
        {
          "text": "Returns the greater of the two given values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "maximum"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/maximum(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "maximum(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/double/maximum(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/maximumMagnitude(_:_:)": {
      "abstract": [
        {
          "text": "Returns the value with greater magnitude.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "maximumMagnitude"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/maximumMagnitude(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "maximumMagnitude(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/double/maximummagnitude(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/minimum(_:_:)": {
      "abstract": [
        {
          "text": "Returns the lesser of the two given values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "minimum"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/minimum(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "minimum(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/double/minimum(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/minimumMagnitude(_:_:)": {
      "abstract": [
        {
          "text": "Returns the value with lesser magnitude.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "minimumMagnitude"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/minimumMagnitude(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "minimumMagnitude(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/double/minimummagnitude(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/mlMultiArrayDataType": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "mlMultiArrayDataType"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@MLMultiArrayDataType",
          "text": "MLMultiArrayDataType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/mlMultiArrayDataType",
      "kind": "symbol",
      "role": "symbol",
      "title": "mlMultiArrayDataType",
      "type": "topic",
      "url": "/documentation/swift/double/mlmultiarraydatatype"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/nan": {
      "abstract": [
        {
          "text": "A quiet NaN (“not a number”).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "nan"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/nan",
      "kind": "symbol",
      "role": "symbol",
      "title": "nan",
      "type": "topic",
      "url": "/documentation/swift/double/nan"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/negate()": {
      "abstract": [
        {
          "text": "Replaces this value with its additive inverse.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "negate"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/negate()",
      "kind": "symbol",
      "role": "symbol",
      "title": "negate()",
      "type": "topic",
      "url": "/documentation/swift/double/negate()"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/nextDown": {
      "abstract": [
        {
          "text": "The greatest representable value that compares less than this value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "nextDown"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/nextDown",
      "kind": "symbol",
      "role": "symbol",
      "title": "nextDown",
      "type": "topic",
      "url": "/documentation/swift/double/nextdown"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/nextUp": {
      "abstract": [
        {
          "text": "The least representable value that compares greater than this value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "nextUp"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/nextUp",
      "kind": "symbol",
      "role": "symbol",
      "title": "nextUp",
      "type": "topic",
      "url": "/documentation/swift/double/nextup"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/pi": {
      "abstract": [
        {
          "text": "The mathematical constant pi (π), approximately equal to 3.14159.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "pi"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/pi",
      "kind": "symbol",
      "role": "symbol",
      "title": "pi",
      "type": "topic",
      "url": "/documentation/swift/double/pi"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/radix": {
      "abstract": [
        {
          "text": "The radix, or base of exponentiation, for a floating-point type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "radix"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/radix",
      "kind": "symbol",
      "role": "symbol",
      "title": "radix",
      "type": "topic",
      "url": "/documentation/swift/double/radix"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/random(in:)-5o5ha": {
      "abstract": [
        {
          "text": "Returns a random value within the specified range.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "RawSignificand",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "FixedWidthInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "random"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SN",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/random(in:)-5o5ha",
      "kind": "symbol",
      "role": "symbol",
      "title": "random(in:)",
      "type": "topic",
      "url": "/documentation/swift/double/random(in:)-5o5ha"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/random(in:)-6idef": {
      "abstract": [
        {
          "text": "Returns a random value within the specified range.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "RawSignificand",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "FixedWidthInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "random"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/random(in:)-6idef",
      "kind": "symbol",
      "role": "symbol",
      "title": "random(in:)",
      "type": "topic",
      "url": "/documentation/swift/double/random(in:)-6idef"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/random(in:using:)-1m6gd": {
      "abstract": [
        {
          "text": "Returns a random value within the specified range, using the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "generator as a source for randomness.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "RawSignificand",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "FixedWidthInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "random"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/random(in:using:)-1m6gd",
      "kind": "symbol",
      "role": "symbol",
      "title": "random(in:using:)",
      "type": "topic",
      "url": "/documentation/swift/double/random(in:using:)-1m6gd"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/random(in:using:)-613hz": {
      "abstract": [
        {
          "text": "Returns a random value within the specified range, using the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "generator as a source for randomness.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "RawSignificand",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "FixedWidthInteger",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "random"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SN",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/random(in:using:)-613hz",
      "kind": "symbol",
      "role": "symbol",
      "title": "random(in:using:)",
      "type": "topic",
      "url": "/documentation/swift/double/random(in:using:)-613hz"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/remainder(dividingBy:)": {
      "abstract": [
        {
          "text": "Returns the remainder of this value divided by the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "remainder"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "dividingBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/remainder(dividingBy:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "remainder(dividingBy:)",
      "type": "topic",
      "url": "/documentation/swift/double/remainder(dividingby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/round()": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "round"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/round()",
      "kind": "symbol",
      "role": "symbol",
      "title": "round()",
      "type": "topic",
      "url": "/documentation/swift/double/round()"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/round(_:)": {
      "abstract": [
        {
          "text": "Rounds the value to an integral value using the specified rounding rule.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "round"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s25FloatingPointRoundingRuleO",
          "text": "FloatingPointRoundingRule"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/round(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "round(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/round(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/rounded()": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "rounded"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/rounded()",
      "kind": "symbol",
      "role": "symbol",
      "title": "rounded()",
      "type": "topic",
      "url": "/documentation/swift/double/rounded()"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/rounded(_:)": {
      "abstract": [
        {
          "text": "Returns this value rounded to an integral value using the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "rounding rule.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "rounded"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s25FloatingPointRoundingRuleO",
          "text": "FloatingPointRoundingRule"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/rounded(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "rounded(_:)",
      "type": "topic",
      "url": "/documentation/swift/double/rounded(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/sign": {
      "abstract": [
        {
          "text": "The sign of the floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "sign"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s17FloatingPointSignO",
          "text": "FloatingPointSign"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/sign",
      "kind": "symbol",
      "role": "symbol",
      "title": "sign",
      "type": "topic",
      "url": "/documentation/swift/double/sign"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/signalingNaN": {
      "abstract": [
        {
          "text": "A signaling NaN (“not a number”).",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "signalingNaN"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/signalingNaN",
      "kind": "symbol",
      "role": "symbol",
      "title": "signalingNaN",
      "type": "topic",
      "url": "/documentation/swift/double/signalingnan"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/significand": {
      "abstract": [
        {
          "text": "The significand of the floating-point value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "significand"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/significand",
      "kind": "symbol",
      "role": "symbol",
      "title": "significand",
      "type": "topic",
      "url": "/documentation/swift/double/significand"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/significandBitCount": {
      "abstract": [
        {
          "text": "The available number of fractional significand bits.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "significandBitCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/significandBitCount",
      "kind": "symbol",
      "role": "symbol",
      "title": "significandBitCount",
      "type": "topic",
      "url": "/documentation/swift/double/significandbitcount"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/significandBitPattern": {
      "abstract": [
        {
          "text": "The raw encoding of the value’s significand field.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "significandBitPattern"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/significandBitPattern",
      "kind": "symbol",
      "role": "symbol",
      "title": "significandBitPattern",
      "type": "topic",
      "url": "/documentation/swift/double/significandbitpattern"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/significandWidth": {
      "abstract": [
        {
          "text": "The number of bits required to represent the value’s significand.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "significandWidth"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/significandWidth",
      "kind": "symbol",
      "role": "symbol",
      "title": "significandWidth",
      "type": "topic",
      "url": "/documentation/swift/double/significandwidth"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/squareRoot()": {
      "abstract": [
        {
          "text": "Returns the square root of the value, rounded to a representable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "squareRoot"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/squareRoot()",
      "kind": "symbol",
      "role": "symbol",
      "title": "squareRoot()",
      "type": "topic",
      "url": "/documentation/swift/double/squareroot()"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/truncatingRemainder(dividingBy:)": {
      "abstract": [
        {
          "text": "Returns the remainder of this value divided by the given value using",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "truncating division.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "truncatingRemainder"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "dividingBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/truncatingRemainder(dividingBy:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "truncatingRemainder(dividingBy:)",
      "type": "topic",
      "url": "/documentation/swift/double/truncatingremainder(dividingby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/ulp": {
      "abstract": [
        {
          "text": "The unit in the last place of this value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ulp"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/ulp",
      "kind": "symbol",
      "role": "symbol",
      "title": "ulp",
      "type": "topic",
      "url": "/documentation/swift/double/ulp"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/ulpOfOne": {
      "abstract": [
        {
          "text": "The unit in the last place of 1.0.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ulpOfOne"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/ulpOfOne",
      "kind": "symbol",
      "role": "symbol",
      "title": "ulpOfOne",
      "type": "topic",
      "url": "/documentation/swift/double/ulpofone"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/write(to:)": {
      "abstract": [
        {
          "text": "Writes a textual representation of this instance into the given output",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "stream.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "write"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Target"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Target"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/write(to:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "write(to:)",
      "type": "topic",
      "url": "/documentation/swift/double/write(to:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Double/zero": {
      "abstract": [
        {
          "text": "The zero value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "ExpressibleByIntegerLiteral",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "zero"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double/zero",
      "kind": "symbol",
      "role": "symbol",
      "title": "zero",
      "type": "topic",
      "url": "/documentation/swift/double/zero"
    },
    "doc://com.apple.Swift/documentation/Swift/Encodable": {
      "abstract": [
        {
          "text": "A type that can encode itself to an external representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Encodable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ],
      "role": "symbol",
      "title": "Encodable",
      "type": "topic",
      "url": "/documentation/swift/encodable"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/swift/equatable"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByFloatLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with a floating-point literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByFloatLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByFloatLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByFloatLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByFloatLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyfloatliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByIntegerLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with an integer literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByIntegerLiteral"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByIntegerLiteral",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpressibleByIntegerLiteral"
        }
      ],
      "role": "symbol",
      "title": "ExpressibleByIntegerLiteral",
      "type": "topic",
      "url": "/documentation/swift/expressiblebyintegerliteral"
    },
    "doc://com.apple.Swift/documentation/Swift/FloatingPoint": {
      "abstract": [
        {
          "text": "A floating-point numeric type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPoint"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/FloatingPoint",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FloatingPoint"
        }
      ],
      "role": "symbol",
      "title": "FloatingPoint",
      "type": "topic",
      "url": "/documentation/swift/floatingpoint"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a ",
          "type": "text"
        },
        {
          "code": "Hasher",
          "type": "codeVoice"
        },
        {
          "text": " to produce an integer hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/swift/hashable"
    },
    "doc://com.apple.Swift/documentation/Swift/Int": {
      "abstract": [
        {
          "text": "A signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "role": "symbol",
      "title": "Int",
      "type": "topic",
      "url": "/documentation/swift/int"
    },
    "doc://com.apple.Swift/documentation/Swift/LosslessStringConvertible": {
      "abstract": [
        {
          "text": "A type that can be represented as a string in a lossless, unambiguous way.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LosslessStringConvertible"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/LosslessStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LosslessStringConvertible"
        }
      ],
      "role": "symbol",
      "title": "LosslessStringConvertible",
      "type": "topic",
      "url": "/documentation/swift/losslessstringconvertible"
    },
    "doc://com.apple.Swift/documentation/Swift/Numeric": {
      "abstract": [
        {
          "text": "A type with values that support multiplication.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Numeric"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Numeric",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Numeric"
        }
      ],
      "role": "symbol",
      "title": "Numeric",
      "type": "topic",
      "url": "/documentation/swift/numeric"
    },
    "doc://com.apple.Swift/documentation/Swift/SIMDScalar": {
      "abstract": [
        {
          "text": "A type that can be used as an element in a SIMD vector.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMDScalar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SIMDScalar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SIMDScalar"
        }
      ],
      "role": "symbol",
      "title": "SIMDScalar",
      "type": "topic",
      "url": "/documentation/swift/simdscalar"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Swift/SignedNumeric": {
      "abstract": [
        {
          "text": "A numeric type with a negation operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SignedNumeric"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/SignedNumeric",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SignedNumeric"
        }
      ],
      "role": "symbol",
      "title": "SignedNumeric",
      "type": "topic",
      "url": "/documentation/swift/signednumeric"
    },
    "doc://com.apple.Swift/documentation/Swift/Strideable": {
      "abstract": [
        {
          "text": "A type representing continuous, one-dimensional values that can be offset",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and measured.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Strideable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Strideable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Strideable"
        }
      ],
      "role": "symbol",
      "title": "Strideable",
      "type": "topic",
      "url": "/documentation/swift/strideable"
    },
    "doc://com.apple.Swift/documentation/Swift/String": {
      "abstract": [
        {
          "text": "A Unicode string value that is a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "role": "symbol",
      "title": "String",
      "type": "topic",
      "url": "/documentation/swift/string"
    },
    "doc://com.apple.Swift/documentation/Swift/TextOutputStreamable": {
      "abstract": [
        {
          "text": "A source of text-streaming operations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TextOutputStreamable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/TextOutputStreamable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TextOutputStreamable"
        }
      ],
      "role": "symbol",
      "title": "TextOutputStreamable",
      "type": "topic",
      "url": "/documentation/swift/textoutputstreamable"
    },
    "doc://com.apple.Swift/documentation/Swift/floating-point-operators-for-double": {
      "abstract": [
        {
          "text": "Perform arithmetic and bitwise operations or compare values.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/floating-point-operators-for-double",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Floating-Point Operators for Double",
      "type": "topic",
      "url": "/documentation/swift/floating-point-operators-for-double"
    },
    "doc://com.apple.Swift/documentation/Swift/swift-standard-library": {
      "abstract": [
        {
          "text": "Solve complex problems and write high-performance, readable code.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/swift-standard-library",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Swift Standard Library",
      "type": "topic",
      "url": "/documentation/swift/swift-standard-library"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable": {
      "abstract": [
        {
          "text": "A type that supports atomic operations through a separate atomic storage",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicRepresentable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicRepresentable"
        }
      ],
      "role": "symbol",
      "title": "AtomicRepresentable",
      "type": "topic",
      "url": "/documentation/synchronization/atomicrepresentable"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate29vDSP_FloatingPointConvertableP": {
      "abstract": [
        {
          "text": "Types that are convertible from integer values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vDSP_FloatingPointConvertable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate29vDSP_FloatingPointConvertableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "vDSP_FloatingPointConvertable",
      "type": "topic",
      "url": "/documentation/Accelerate/vDSP_FloatingPointConvertable"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate29vDSP_FloatingPointGeneratableP": {
      "abstract": [
        {
          "text": "Types that support vectorized window generation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vDSP_FloatingPointGeneratable"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SB",
          "text": "BinaryFloatingPoint"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate29vDSP_FloatingPointGeneratableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "vDSP_FloatingPointGeneratable",
      "type": "topic",
      "url": "/documentation/Accelerate/vDSP_FloatingPointGeneratable"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate33vDSP_DiscreteFourierTransformableP": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vDSP_DiscreteFourierTransformable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate33vDSP_DiscreteFourierTransformableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "vDSP_DiscreteFourierTransformable",
      "type": "topic",
      "url": "/documentation/Accelerate/vDSP_DiscreteFourierTransformable"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate34vDSP_FloatingPointBiquadFilterableP": {
      "abstract": [
        {
          "text": "Types that support biquadratic filtering.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vDSP_FloatingPointBiquadFilterable"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SB",
          "text": "BinaryFloatingPoint"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate34vDSP_FloatingPointBiquadFilterableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "vDSP_FloatingPointBiquadFilterable",
      "type": "topic",
      "url": "/documentation/Accelerate/vDSP_FloatingPointBiquadFilterable"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate46vDSP_FloatingPointDiscreteFourierTransformableP": {
      "abstract": [
        {
          "text": "Types that support discrete Fourier transform operations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "vDSP_FloatingPointDiscreteFourierTransformable"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SB",
          "text": "BinaryFloatingPoint"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate46vDSP_FloatingPointDiscreteFourierTransformableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "vDSP_FloatingPointDiscreteFourierTransformable",
      "type": "topic",
      "url": "/documentation/Accelerate/vDSP_FloatingPointDiscreteFourierTransformable"
    },
    "doc://com.externally.resolved.symbol/s:10AppIntents23RangeComparablePropertyP": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeComparableProperty"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "text": "_IntentValue"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SL",
          "text": "Comparable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10AppIntents23RangeComparablePropertyP",
      "kind": "symbol",
      "role": "symbol",
      "title": "RangeComparableProperty",
      "type": "topic",
      "url": "/documentation/AppIntents/RangeComparableProperty"
    },
    "doc://com.externally.resolved.symbol/s:17RealityFoundation12BindableDataP": {
      "abstract": [
        {
          "text": "An opaque base protocol for bindable data objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BindableData"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:17RealityFoundation12BindableDataP",
      "kind": "symbol",
      "role": "symbol",
      "title": "BindableData",
      "type": "topic",
      "url": "/documentation/RealityKit/BindableData"
    },
    "doc://com.externally.resolved.symbol/s:17RealityFoundation14AnimatableDataP": {
      "abstract": [
        {
          "text": "A functionality specification that animatable data types adopt.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnimatableData"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:17RealityFoundation14AnimatableDataP",
      "kind": "symbol",
      "role": "symbol",
      "title": "AnimatableData",
      "type": "topic",
      "url": "/documentation/RealityKit/AnimatableData"
    },
    "doc://com.externally.resolved.symbol/s:6Charts26PrimitivePlottableProtocolP": {
      "abstract": [
        {
          "text": "A type that represents the primitive plottable types supported by the framework. Don’t use this type directly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PrimitivePlottableProtocol"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:6Charts9PlottableP",
          "text": "Plottable"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:6Charts9PlottableP09PrimitiveB0Qa",
          "text": "PrimitivePlottable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts26PrimitivePlottableProtocolP",
      "kind": "symbol",
      "role": "symbol",
      "title": "PrimitivePlottableProtocol",
      "type": "topic",
      "url": "/documentation/Charts/PrimitivePlottableProtocol"
    },
    "doc://com.externally.resolved.symbol/s:6Charts9PlottableP": {
      "abstract": [
        {
          "text": "A type that can serve as data to plot in a chart.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Plottable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts9PlottableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Plottable",
      "type": "topic",
      "url": "/documentation/Charts/Plottable"
    },
    "doc://com.externally.resolved.symbol/s:6CoreML19MLShapedArrayScalarP": {
      "abstract": [
        {
          "text": "A type that associates a scalar with a shaped array.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MLShapedArrayScalar"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:6CoreML19MLShapedArrayScalarP",
      "kind": "symbol",
      "role": "symbol",
      "title": "MLShapedArrayScalar",
      "type": "topic",
      "url": "/documentation/CoreML/MLShapedArrayScalar"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI10AnimatableP": {
      "abstract": [
        {
          "text": "A type that describes how to animate a property of a view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Animatable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI10AnimatableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Animatable",
      "type": "topic",
      "url": "/documentation/SwiftUI/Animatable"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI16VectorArithmeticP": {
      "abstract": [
        {
          "text": "A type that can serve as the animatable data of an animatable type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "VectorArithmetic"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s18AdditiveArithmeticP",
          "text": "AdditiveArithmetic"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI16VectorArithmeticP",
      "kind": "symbol",
      "role": "symbol",
      "title": "VectorArithmetic",
      "type": "topic",
      "url": "/documentation/SwiftUI/VectorArithmetic"
    },
    "doc://com.externally.resolved.symbol/s:8CloudKit21CKRecordValueProtocolP": {
      "abstract": [
        {
          "text": "A description of a CloudKit record value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CKRecordValueProtocol"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:8CloudKit21CKRecordValueProtocolP",
      "kind": "symbol",
      "role": "symbol",
      "title": "CKRecordValueProtocol",
      "type": "topic",
      "url": "/documentation/CloudKit/CKRecordValueProtocol"
    },
    "doc://com.externally.resolved.symbol/s:8CreateML22MLDataValueConvertibleP": {
      "abstract": [
        {
          "text": "A type that can convert itself to and from a data value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MLDataValueConvertible"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:8CreateML22MLDataValueConvertibleP",
      "kind": "symbol",
      "role": "symbol",
      "title": "MLDataValueConvertible",
      "type": "topic",
      "url": "/documentation/CreateML/MLDataValueConvertible"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/AdditiveArithmetic",
        "doc://com.externally.resolved.symbol/s:7SwiftUI10AnimatableP",
        "doc://com.externally.resolved.symbol/s:17RealityFoundation14AnimatableDataP",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
        "doc://com.apple.Swift/documentation/Swift/BinaryFloatingPoint",
        "doc://com.externally.resolved.symbol/s:17RealityFoundation12BindableDataP",
        "doc://com.apple.Swift/documentation/Swift/BitwiseCopyable",
        "doc://com.externally.resolved.symbol/s:8CloudKit21CKRecordValueProtocolP",
        "doc://com.apple.Swift/documentation/Swift/CVarArg",
        "doc://com.apple.Swift/documentation/Swift/Comparable",
        "doc://com.apple.Swift/documentation/Swift/Copyable",
        "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
        "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/Decodable",
        "doc://com.apple.Swift/documentation/Swift/Encodable",
        "doc://com.apple.Swift/documentation/Swift/Equatable",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByFloatLiteral",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByIntegerLiteral",
        "doc://com.apple.Swift/documentation/Swift/FloatingPoint",
        "doc://com.apple.Swift/documentation/Swift/Hashable",
        "doc://com.apple.Swift/documentation/Swift/LosslessStringConvertible",
        "doc://com.externally.resolved.symbol/s:8CreateML22MLDataValueConvertibleP",
        "doc://com.externally.resolved.symbol/s:6CoreML19MLShapedArrayScalarP",
        "doc://com.apple.Swift/documentation/Swift/Numeric",
        "doc://com.externally.resolved.symbol/s:6Charts9PlottableP",
        "doc://com.externally.resolved.symbol/s:6Charts26PrimitivePlottableProtocolP",
        "doc://com.externally.resolved.symbol/s:10AppIntents23RangeComparablePropertyP",
        "doc://com.apple.Swift/documentation/Swift/SIMDScalar",
        "doc://com.apple.Swift/documentation/Swift/Sendable",
        "doc://com.apple.Swift/documentation/Swift/SignedNumeric",
        "doc://com.apple.Swift/documentation/Swift/Strideable",
        "doc://com.apple.Swift/documentation/Swift/TextOutputStreamable",
        "doc://com.externally.resolved.symbol/s:7SwiftUI16VectorArithmeticP",
        "doc://com.externally.resolved.symbol/s:10Accelerate33vDSP_DiscreteFourierTransformableP",
        "doc://com.externally.resolved.symbol/s:10Accelerate34vDSP_FloatingPointBiquadFilterableP",
        "doc://com.externally.resolved.symbol/s:10Accelerate29vDSP_FloatingPointConvertableP",
        "doc://com.externally.resolved.symbol/s:10Accelerate46vDSP_FloatingPointDiscreteFourierTransformableP",
        "doc://com.externally.resolved.symbol/s:10Accelerate29vDSP_FloatingPointGeneratableP"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Standard-Library",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Int",
        "doc://com.apple.Swift/documentation/Swift/String",
        "doc://com.apple.Swift/documentation/Swift/Array",
        "doc://com.apple.Swift/documentation/Swift/Dictionary",
        "doc://com.apple.Swift/documentation/Swift/swift-standard-library"
      ],
      "title": "Standard Library"
    }
  ],
  "topicSections": [
    {
      "anchor": "Converting-Integers",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5blrp",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-84ohu"
      ],
      "title": "Converting Integers"
    },
    {
      "anchor": "Converting-Strings",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5wmm8",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-15kej"
      ],
      "title": "Converting Strings"
    },
    {
      "anchor": "Converting-Floating-Point-Values",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-1488d",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-o1k9",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-5h7qh",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-aeox",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-9z7ob",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-7ag2w",
        "doc://com.apple.Swift/documentation/Swift/Double/init(sign:exponent:significand:)",
        "doc://com.apple.Swift/documentation/Swift/Double/init(signOf:magnitudeOf:)",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-1oh9r",
        "doc://com.apple.Swift/documentation/Swift/Double/init(truncating:)"
      ],
      "title": "Converting Floating-Point Values"
    },
    {
      "abstract": [
        {
          "text": "These initializers result in ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": " if the value passed can’t be represented without",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "any loss of precision.",
          "type": "text"
        }
      ],
      "anchor": "Converting-with-No-Loss-of-Precision",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-8esra",
        "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-1h1oc",
        "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-2uexo",
        "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-2l6p1",
        "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-7cl0t",
        "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-50ofc",
        "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-63925",
        "doc://com.apple.Swift/documentation/Swift/Double/init(exactly:)-8e00y"
      ],
      "title": "Converting with No Loss of Precision"
    },
    {
      "anchor": "Creating-a-Random-Value",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/random(in:)-6idef",
        "doc://com.apple.Swift/documentation/Swift/Double/random(in:using:)-1m6gd",
        "doc://com.apple.Swift/documentation/Swift/Double/random(in:)-5o5ha",
        "doc://com.apple.Swift/documentation/Swift/Double/random(in:using:)-613hz"
      ],
      "title": "Creating a Random Value"
    },
    {
      "anchor": "Performing-Calculations",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/floating-point-operators-for-double",
        "doc://com.apple.Swift/documentation/Swift/Double/addingProduct(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Double/addProduct(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Double/squareRoot()",
        "doc://com.apple.Swift/documentation/Swift/Double/formSquareRoot()",
        "doc://com.apple.Swift/documentation/Swift/Double/remainder(dividingBy:)",
        "doc://com.apple.Swift/documentation/Swift/Double/formRemainder(dividingBy:)",
        "doc://com.apple.Swift/documentation/Swift/Double/truncatingRemainder(dividingBy:)",
        "doc://com.apple.Swift/documentation/Swift/Double/formTruncatingRemainder(dividingBy:)",
        "doc://com.apple.Swift/documentation/Swift/Double/negate()"
      ],
      "title": "Performing Calculations"
    },
    {
      "anchor": "Rounding-Values",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/rounded()",
        "doc://com.apple.Swift/documentation/Swift/Double/rounded(_:)",
        "doc://com.apple.Swift/documentation/Swift/Double/round()",
        "doc://com.apple.Swift/documentation/Swift/Double/round(_:)"
      ],
      "title": "Rounding Values"
    },
    {
      "anchor": "Comparing-Values",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/floating-point-operators-for-double",
        "doc://com.apple.Swift/documentation/Swift/Double/isEqual(to:)",
        "doc://com.apple.Swift/documentation/Swift/Double/isLess(than:)",
        "doc://com.apple.Swift/documentation/Swift/Double/isLessThanOrEqualTo(_:)",
        "doc://com.apple.Swift/documentation/Swift/Double/isTotallyOrdered(belowOrEqualTo:)",
        "doc://com.apple.Swift/documentation/Swift/Double/minimum(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Double/minimumMagnitude(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Double/maximum(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Double/maximumMagnitude(_:_:)"
      ],
      "title": "Comparing Values"
    },
    {
      "anchor": "Finding-the-Sign-and-Magnitude",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/magnitude-swift.property",
        "doc://com.apple.Swift/documentation/Swift/Double/sign",
        "doc://com.apple.Swift/documentation/Swift/Double/Magnitude-swift.typealias"
      ],
      "title": "Finding the Sign and Magnitude"
    },
    {
      "anchor": "Querying-a-Double",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/ulp",
        "doc://com.apple.Swift/documentation/Swift/Double/significand",
        "doc://com.apple.Swift/documentation/Swift/Double/exponent-swift.property",
        "doc://com.apple.Swift/documentation/Swift/Double/nextUp",
        "doc://com.apple.Swift/documentation/Swift/Double/nextDown",
        "doc://com.apple.Swift/documentation/Swift/Double/binade"
      ],
      "title": "Querying a Double"
    },
    {
      "anchor": "Accessing-Numeric-Constants",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/pi",
        "doc://com.apple.Swift/documentation/Swift/Double/infinity",
        "doc://com.apple.Swift/documentation/Swift/Double/greatestFiniteMagnitude",
        "doc://com.apple.Swift/documentation/Swift/Double/nan",
        "doc://com.apple.Swift/documentation/Swift/Double/signalingNaN",
        "doc://com.apple.Swift/documentation/Swift/Double/ulpOfOne",
        "doc://com.apple.Swift/documentation/Swift/Double/leastNonzeroMagnitude",
        "doc://com.apple.Swift/documentation/Swift/Double/leastNormalMagnitude",
        "doc://com.apple.Swift/documentation/Swift/Double/zero"
      ],
      "title": "Accessing Numeric Constants"
    },
    {
      "anchor": "Working-with-Binary-Representation",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/bitPattern",
        "doc://com.apple.Swift/documentation/Swift/Double/significandBitPattern",
        "doc://com.apple.Swift/documentation/Swift/Double/significandWidth",
        "doc://com.apple.Swift/documentation/Swift/Double/exponentBitPattern",
        "doc://com.apple.Swift/documentation/Swift/Double/significandBitCount",
        "doc://com.apple.Swift/documentation/Swift/Double/exponentBitCount",
        "doc://com.apple.Swift/documentation/Swift/Double/radix",
        "doc://com.apple.Swift/documentation/Swift/Double/init(bitPattern:)",
        "doc://com.apple.Swift/documentation/Swift/Double/init(sign:exponentBitPattern:significandBitPattern:)",
        "doc://com.apple.Swift/documentation/Swift/Double/init(nan:signaling:)",
        "doc://com.apple.Swift/documentation/Swift/Double/Exponent-swift.typealias",
        "doc://com.apple.Swift/documentation/Swift/Double/RawSignificand",
        "doc://com.apple.Swift/documentation/Swift/Double/RawExponent"
      ],
      "title": "Working with Binary Representation"
    },
    {
      "anchor": "Querying-a-Doubles-State",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/isZero",
        "doc://com.apple.Swift/documentation/Swift/Double/isFinite",
        "doc://com.apple.Swift/documentation/Swift/Double/isInfinite",
        "doc://com.apple.Swift/documentation/Swift/Double/isNaN",
        "doc://com.apple.Swift/documentation/Swift/Double/isSignalingNaN",
        "doc://com.apple.Swift/documentation/Swift/Double/isNormal",
        "doc://com.apple.Swift/documentation/Swift/Double/isSubnormal",
        "doc://com.apple.Swift/documentation/Swift/Double/isCanonical",
        "doc://com.apple.Swift/documentation/Swift/Double/floatingPointClass"
      ],
      "title": "Querying a Double’s State"
    },
    {
      "anchor": "Encoding-and-Decoding-Values",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/encode(to:)",
        "doc://com.apple.Swift/documentation/Swift/Double/init(from:)-3crx3"
      ],
      "title": "Encoding and Decoding Values"
    },
    {
      "anchor": "Creating-a-Range",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/...(_:_:)"
      ],
      "title": "Creating a Range"
    },
    {
      "anchor": "Describing-a-Double",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/description",
        "doc://com.apple.Swift/documentation/Swift/Double/debugDescription",
        "doc://com.apple.Swift/documentation/Swift/Double/customMirror",
        "doc://com.apple.Swift/documentation/Swift/Double/hash(into:)"
      ],
      "title": "Describing a Double"
    },
    {
      "anchor": "Using-a-Double-as-a-Data-Value",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/init(from:)-5gnqe",
        "doc://com.apple.Swift/documentation/Swift/Double/dataValue",
        "doc://com.apple.Swift/documentation/Swift/Double/dataValueType"
      ],
      "title": "Using a Double as a Data Value"
    },
    {
      "anchor": "Infrequently-Used-Functionality",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/init()",
        "doc://com.apple.Swift/documentation/Swift/Double/init(floatLiteral:)",
        "doc://com.apple.Swift/documentation/Swift/Double/init(integerLiteral:)",
        "doc://com.apple.Swift/documentation/Swift/Double/init(integerLiteral:)-6hc7j",
        "doc://com.apple.Swift/documentation/Swift/Double/FloatLiteralType",
        "doc://com.apple.Swift/documentation/Swift/Double/IntegerLiteralType",
        "doc://com.apple.Swift/documentation/Swift/Double/advanced(by:)",
        "doc://com.apple.Swift/documentation/Swift/Double/distance(to:)",
        "doc://com.apple.Swift/documentation/Swift/Double/Stride",
        "doc://com.apple.Swift/documentation/Swift/Double/write(to:)",
        "doc://com.apple.Swift/documentation/Swift/Double/hashValue"
      ],
      "title": "Infrequently Used Functionality"
    },
    {
      "anchor": "SIMD-Supporting-Types",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/SIMDMaskScalar",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD2Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD4Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD8Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD16Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD32Storage",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMD64Storage"
      ],
      "title": "SIMD-Supporting Types"
    },
    {
      "anchor": "Deprecated",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/customPlaygroundQuickLook",
        "doc://com.apple.Swift/documentation/Swift/Double/init(_:)-8kme5"
      ],
      "title": "Deprecated"
    },
    {
      "anchor": "Type-Aliases",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/Specification",
        "doc://com.apple.Swift/documentation/Swift/Double/UnwrappedType",
        "doc://com.apple.Swift/documentation/Swift/Double/ValueType"
      ],
      "title": "Type Aliases"
    },
    {
      "anchor": "Type-Properties",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/defaultResolverSpecification",
        "doc://com.apple.Swift/documentation/Swift/Double/mlMultiArrayDataType"
      ],
      "title": "Type Properties"
    },
    {
      "anchor": "Default-Implementations",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Double/AdditiveArithmetic-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/AtomicRepresentable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/BinaryFloatingPoint-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/Comparable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/CustomDebugStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/CustomReflectable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/CustomStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/Decodable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/Encodable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/Equatable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/ExpressibleByFloatLiteral-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/ExpressibleByIntegerLiteral-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/FloatingPoint-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/Hashable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/LosslessStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/MLDataValueConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/Numeric-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/SIMDScalar-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/SignedNumeric-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/Strideable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Double/TextOutputStreamable-Implementations"
      ],
      "title": "Default Implementations"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swift/double"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
