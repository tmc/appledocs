{
  "abstract": [
    {
      "text": "Learn how to call imported functions that are declared in a C header.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift",
        "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Swift/using-imported-c-functions-in-swift"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Using Imported C Functions in Swift"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Swift imports any function declared in a C header as a Swift global function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, consider the following C function declarations:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "int product(int multiplier, int multiplicand);",
            "int quotient(int dividend, int divisor, int *remainder);",
            "",
            "struct Point2D createPoint2D(float x, float y);",
            "float distance(struct Point2D from, struct Point2D to);"
          ],
          "syntax": "occ",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s how Swift imports them:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func product(_ multiplier: Int32, _ multiplicand: Int32) -> Int32",
            "func quotient(_ dividend: Int32, _ divisor: Int32, _ remainder: UnsafeMutablePointer<Int32>) -> Int32",
            "",
            "func createPoint2D(_ x: Float, _ y: Float) -> Point2D",
            "func distance(_ from: Point2D, _ to: Point2D) -> Float"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Use-a-CVaListPointer-to-Call-Variadic-Functions",
          "level": 3,
          "text": "Use a CVaListPointer to Call Variadic Functions",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In Swift, you can call C variadic functions, such as ",
              "type": "text"
            },
            {
              "code": "vasprintf(_:_:_:)",
              "type": "codeVoice"
            },
            {
              "text": ", using the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Swift ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/getVaList(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/withVaList(_:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " functions. The ",
              "type": "text"
            },
            {
              "code": "withVaList(_:_:)",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function takes an array of ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/CVarArg",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " values and provides a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Swift/CVaListPointer",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "value within the body of a closure parameter, whereas the ",
              "type": "text"
            },
            {
              "code": "getVaList(_:)",
              "type": "codeVoice"
            },
            {
              "text": " function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "returns this value directly. With either function, you pass the resulting ",
              "type": "text"
            },
            {
              "code": "CVaListPointer",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "value as the ",
              "type": "text"
            },
            {
              "code": "va_list",
              "type": "codeVoice"
            },
            {
              "text": " argument of the C variadic function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, here’s how to call the ",
              "type": "text"
            },
            {
              "code": "vasprintf(_:_:_:)",
              "type": "codeVoice"
            },
            {
              "text": " function in Swift:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func swiftprintf(format: String, arguments: CVarArg...) -> String? {",
            "    return withVaList(arguments) { va_list in",
            "        var buffer: UnsafeMutablePointer<Int8>? = nil",
            "        return format.withCString { cString in",
            "            guard vasprintf(&buffer, cString, va_list) != 0 else {",
            "                return nil",
            "            }",
            "",
            "            return String(validatingUTF8: buffer!)",
            "        }",
            "    }",
            "}",
            "print(swiftprintf(format: \"√2 ≅ %g\", arguments: sqrt(2.0))!)",
            "// Prints \"√2 ≅ 1.41421\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Swift only imports C variadic functions that use a ",
              "type": "text"
            },
            {
              "code": "va_list",
              "type": "codeVoice"
            },
            {
              "text": " for their arguments.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "C functions that use the ",
              "type": "text"
            },
            {
              "code": "...",
              "type": "codeVoice"
            },
            {
              "text": " syntax for variadic arguments are not imported, and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "therefore can’t be called using ",
              "type": "text"
            },
            {
              "code": "CVarArg",
              "type": "codeVoice"
            },
            {
              "text": " arguments.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Call-Functions-with-Pointer-Parameters",
          "level": 3,
          "text": "Call Functions with Pointer Parameters",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Whenever possible, Swift avoids giving you direct access to pointers. When importing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "C function parameters, however, Swift maps pointer parameters to standard library",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointer types. The following tables use ",
              "type": "text"
            },
            {
              "code": "Type",
              "type": "codeVoice"
            },
            {
              "text": " as a placeholder type name to indicate",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "syntax for the mappings.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For return types, variables, and arguments, the following mappings apply:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "C Syntax",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Swift Syntax",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "const Type *",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "<Type>",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "Type *",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "<Type>",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "inlineContent": [
            {
              "text": "For class types, the following mappings apply:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "C Syntax",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Swift Syntax",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "Type * const *",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "<",
                      "type": "text"
                    },
                    {
                      "text": "Type>",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "Type * __strong *",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "<",
                      "type": "text"
                    },
                    {
                      "text": "Type>",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "Type **",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "<",
                      "type": "text"
                    },
                    {
                      "text": "Type>",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "inlineContent": [
            {
              "text": "For pointers to untyped, raw memory, the following mappings apply:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "C Syntax",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Swift Syntax",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "const void *",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "void *",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "inlineContent": [
            {
              "text": "C function pointers are imported into Swift as closures with the C function pointer",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "calling convention, denoted by the ",
              "type": "text"
            },
            {
              "code": "@convention(c)",
              "type": "codeVoice"
            },
            {
              "text": " attribute. For example, a function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pointer that has the type ",
              "type": "text"
            },
            {
              "code": "int (*)(void)",
              "type": "codeVoice"
            },
            {
              "text": " in C is imported into Swift as ",
              "type": "text"
            },
            {
              "code": "@convention(c) () -> Int32",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If the type of the value pointed to by a C pointer cannot be represented by Swift,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as is the case with an incomplete struct type, the pointer is imported as an ",
              "type": "text"
            },
            {
              "code": "OpaquePointer",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Swift-PageImage-card.png": {
      "alt": "An orange Swift logo on a gradient background.",
      "identifier": "Swift-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "abstract": [
        {
          "text": "Build apps using a powerful open language.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/swift"
    },
    "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A mutable pointer addressing an Objective-C reference that doesn’t own its",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "target.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AutoreleasingUnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/AutoreleasingUnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AutoreleasingUnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "AutoreleasingUnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/autoreleasingunsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/CVaListPointer": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CVaListPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CVaListPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CVaListPointer"
        }
      ],
      "role": "symbol",
      "title": "CVaListPointer",
      "type": "topic",
      "url": "/documentation/swift/cvalistpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/CVarArg": {
      "abstract": [
        {
          "text": "A type whose instances can be encoded, and appropriately passed, as",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of a C ",
          "type": "text"
        },
        {
          "code": "va_list",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CVarArg"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/CVarArg",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CVarArg"
        }
      ],
      "role": "symbol",
      "title": "CVarArg",
      "type": "topic",
      "url": "/documentation/swift/cvararg"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing and manipulating data of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "specific type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutablePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutablePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutablePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer": {
      "abstract": [
        {
          "text": "A raw pointer for accessing and manipulating untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeMutableRawPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeMutableRawPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeMutableRawPointer",
      "type": "topic",
      "url": "/documentation/swift/unsafemutablerawpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafePointer": {
      "abstract": [
        {
          "text": "A pointer for accessing data of a specific type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafePointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafePointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafePointer",
      "type": "topic",
      "url": "/documentation/swift/unsafepointer"
    },
    "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer": {
      "abstract": [
        {
          "text": "A raw pointer for accessing untyped data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeRawPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/UnsafeRawPointer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnsafeRawPointer"
        }
      ],
      "role": "symbol",
      "title": "UnsafeRawPointer",
      "type": "topic",
      "url": "/documentation/swift/unsaferawpointer"
    },
    "doc://com.apple.Swift/documentation/Swift/getVaList(_:)": {
      "abstract": [
        {
          "text": "Returns a ",
          "type": "text"
        },
        {
          "code": "CVaListPointer",
          "type": "codeVoice"
        },
        {
          "text": " that is backed by autoreleased storage, built",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "from the given array of arguments.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "getVaList"
        },
        {
          "kind": "text",
          "text": "([any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7CVarArgP",
          "text": "CVarArg"
        },
        {
          "kind": "text",
          "text": "]) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s14CVaListPointerV",
          "text": "CVaListPointer"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/getVaList(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "getVaList(_:)",
      "type": "topic",
      "url": "/documentation/swift/getvalist(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis": {
      "abstract": [
        {
          "text": "Use native Swift syntax to interoperate with types and functions in C and Objective-C.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/imported-c-and-objective-c-apis",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Imported C and Objective-C APIs",
      "type": "topic",
      "url": "/documentation/swift/imported-c-and-objective-c-apis"
    },
    "doc://com.apple.Swift/documentation/Swift/using-imported-c-macros-in-swift": {
      "abstract": [
        {
          "text": "Use imported C-defined macros as constants.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/using-imported-c-macros-in-swift",
      "kind": "article",
      "role": "article",
      "title": "Using Imported C Macros in Swift",
      "type": "topic",
      "url": "/documentation/swift/using-imported-c-macros-in-swift"
    },
    "doc://com.apple.Swift/documentation/Swift/using-imported-c-structs-and-unions-in-swift": {
      "abstract": [
        {
          "text": "Learn how Swift represents imported C structures and unions, including types with",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "bitfields and unnamed fields.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/using-imported-c-structs-and-unions-in-swift",
      "kind": "article",
      "role": "article",
      "title": "Using Imported C Structs and Unions in Swift",
      "type": "topic",
      "url": "/documentation/swift/using-imported-c-structs-and-unions-in-swift"
    },
    "doc://com.apple.Swift/documentation/Swift/withVaList(_:_:)": {
      "abstract": [
        {
          "text": "Invokes the given closure with a C ",
          "type": "text"
        },
        {
          "code": "va_list",
          "type": "codeVoice"
        },
        {
          "text": " argument derived from the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given array of arguments.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withVaList"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">([any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7CVarArgP",
          "text": "CVarArg"
        },
        {
          "kind": "text",
          "text": "], ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s14CVaListPointerV",
          "text": "CVaListPointer"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/withVaList(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withVaList(_:_:)",
      "type": "topic",
      "url": "/documentation/swift/withvalist(_:_:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "C-APIs",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/using-imported-c-structs-and-unions-in-swift",
        "doc://com.apple.Swift/documentation/Swift/using-imported-c-macros-in-swift"
      ],
      "title": "C APIs"
    }
  ]
}
