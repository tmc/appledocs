{
  "abstract": [
    {
      "text": "Enable background events by adding lifecycle event support.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.corelocation/documentation/CoreLocation"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.corelocation/documentation/CoreLocation/supporting-live-updates-in-swiftui-and-mac-catalyst-apps"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Core Location"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Supporting live updates in SwiftUI and Mac Catalyst apps"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In iOS 17 and later, Core Location supports live updates using Swift concurrency’s async/await capability. In order to adopt live updates, SwiftUI and Mac Catalyst apps need to implement lifecycle event support that enables an app’s ",
              "type": "text"
            },
            {
              "code": "@main app",
              "type": "codeVoice"
            },
            {
              "text": " to have explicit support for the creation and resumption of background run-loops. This enables the system to deliver Core Location events to the app and allows the delivery of events to resume in the event of return from background, launch of the app, or relaunch after a crash.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Adding-lifecycle-events-to-SwiftUI",
          "level": 3,
          "text": "Adding lifecycle events to SwiftUI",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To add support for life cycle events, you need to add three components to your app:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "A shared state using an ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " that maintains instances of ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/CLLocationManager",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/CLBackgroundActivitySession-3mzv3",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "An ",
                      "type": "text"
                    },
                    {
                      "code": "AppDelegate",
                      "type": "codeVoice"
                    },
                    {
                      "text": " object that provides the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIApplicationDelegate/application(_:didFinishLaunchingWithOptions:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " method that handles resuming background activities on return from background or an app relaunch",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "An ",
                      "type": "text"
                    },
                    {
                      "code": "AppDelegate",
                      "type": "codeVoice"
                    },
                    {
                      "text": " object in the SwiftUI or Mac Catalyst app’s ",
                      "type": "text"
                    },
                    {
                      "code": "@main",
                      "type": "codeVoice"
                    },
                    {
                      "text": " structure",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "orderedList"
        },
        {
          "inlineContent": [
            {
              "text": "In your SwiftUI or Mac Catalyst App, add support for the ",
              "type": "text"
            },
            {
              "code": "AppDelegate",
              "type": "codeVoice"
            },
            {
              "text": " by adding a shared state through an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", and a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/UIApplicationDelegateAdaptor",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " as an object the app’s ",
              "type": "text"
            },
            {
              "code": "@main",
              "type": "codeVoice"
            },
            {
              "text": " structure maintains, as shown in the following example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "    import SwiftUI",
            "",
            "    // Shared state that manages the `CLLocationManager` and `CLBackgroundActivitySession`.",
            "    @MainActor class LocationsHandler: ObservableObject {",
            "    ",
            "        static let shared = LocationsHandler()  // Create a single, shared instance of the object.",
            "        private let manager: CLLocationManager",
            "        private var background: CLBackgroundActivitySession?",
            "",
            "        @Published var lastLocation = CLLocation()",
            "        @Published var isStationary = false",
            "        @Published var count = 0",
            "    ",
            "        @Published",
            "        var updatesStarted: Bool = UserDefaults.standard.bool(forKey: \"liveUpdatesStarted\") {",
            "            didSet { UserDefaults.standard.set(updatesStarted, forKey: \"liveUpdatesStarted\") }",
            "        }",
            "    ",
            "        @Published",
            "        var backgroundActivity: Bool = UserDefaults.standard.bool(forKey: \"BGActivitySessionStarted\") {",
            "            didSet {",
            "                backgroundActivity ? self.background = CLBackgroundActivitySession() : self.background?.invalidate()",
            "                UserDefaults.standard.set(backgroundActivity, forKey: \"BGActivitySessionStarted\")",
            "            }",
            "        }",
            "    ",
            "    ",
            "        private init() {",
            "            self.manager = CLLocationManager()  // Creating a location manager instance is safe to call here in `MainActor`.",
            "        }",
            "    ",
            "        func startLocationUpdates() {",
            "            if self.manager.authorizationStatus == .notDetermined {",
            "                self.manager.requestWhenInUseAuthorization()",
            "            }",
            "            self.logger.info(\"Starting location updates\")",
            "            Task() {",
            "                do {",
            "                    self.updatesStarted = true",
            "                    let updates = CLLocationUpdate.liveUpdates()",
            "                    for try await update in updates {",
            "                        if !self.updatesStarted { break }  // End location updates by breaking out of the loop.",
            "                        if let loc = update.location {",
            "                            self.lastLocation = loc",
            "                            self.isStationary = update.isStationary",
            "                            self.count += 1",
            "                            print(\"Location \\(self.count): \\(self.lastLocation)\")",
            "                        }",
            "                    }",
            "                } catch {",
            "                    print(\"Could not start location updates\")",
            "                }",
            "                return",
            "            }",
            "        }",
            "    ",
            "        func stopLocationUpdates() {",
            "            print(\"Stopping location updates\")",
            "            self.updatesStarted = false",
            "            self.updatesStarted = false",
            "        } ",
            "    }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Next, create an instance of a UIKit ",
              "type": "text"
            },
            {
              "code": "AppDelegate",
              "type": "codeVoice"
            },
            {
              "text": " class that conforms to SwiftUI’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol; this enables the ",
              "type": "text"
            },
            {
              "code": "AppDelegate",
              "type": "codeVoice"
            },
            {
              "text": " to participate in the SwiftUI’s app-level shared state and manages the resumption of Core Location activities when needed.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "    import Foundation",
            "    import UIKit",
            "",
            "    class AppDelegate: NSObject, UIApplicationDelegate, ObservableObject {   ",
            "    ",
            "        func application(_ application: UIApplication, didFinishLaunchingWithOptions",
            "                         launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {",
            "            let locationsHandler = LocationsHandler.shared",
            "        ",
            "            // If location updates were previously active, restart them after the background launch.",
            "            if locationsHandler.updatesStarted {",
            "                locationsHandler.startLocationUpdates()",
            "            }",
            "            // If a background activity session was previously active, reinstantiate it after the background launch.",
            "            if locationsHandler.backgroundActivity {",
            "                locationsHandler.backgroundActivity = true",
            "            }",
            "            return true",
            "        }",
            "    }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, include the ",
              "type": "text"
            },
            {
              "code": "AppDelegate",
              "type": "codeVoice"
            },
            {
              "text": " functionality in your app’s ",
              "type": "text"
            },
            {
              "code": "@main",
              "type": "codeVoice"
            },
            {
              "text": " structure using a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/UIApplicationDelegateAdaptor",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "    @main",
            "    struct MyApp: App {",
            "        @UIApplicationDelegateAdaptor private var appDelegate: AppDelegate",
            "        var body: some Scene {",
            "            WindowGroup {",
            "                ContentView()",
            "            }",
            "        }",
            "    }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.corelocation/documentation/CoreLocation": {
      "abstract": [
        {
          "text": "Obtain the geographic location and orientation of a device.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation",
      "kind": "symbol",
      "role": "collection",
      "title": "Core Location",
      "type": "topic",
      "url": "/documentation/corelocation"
    },
    "doc://com.apple.corelocation/documentation/CoreLocation/CLBackgroundActivitySession-3mzv3": {
      "abstract": [
        {
          "text": "An object that manages a visual indicator that keeps your app in use in the background, allowing it to receive updates or events.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CLBackgroundActivitySession"
        }
      ],
      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/CLBackgroundActivitySession-3mzv3",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CLBackgroundActivitySession"
        }
      ],
      "role": "symbol",
      "title": "CLBackgroundActivitySession",
      "type": "topic",
      "url": "/documentation/corelocation/clbackgroundactivitysession-3mzv3"
    },
    "doc://com.apple.corelocation/documentation/CoreLocation/CLBackgroundActivitySession-4nl4y": {
      "abstract": [
        {
          "text": "An object that manages a visual indicator that keeps your app in use in the background, allowing it to receive updates or events.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "CLBackgroundActivitySession"
        }
      ],
      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/CLBackgroundActivitySession-4nl4y",
      "kind": "symbol",
      "role": "symbol",
      "title": "CLBackgroundActivitySession",
      "type": "topic",
      "url": "/documentation/corelocation/clbackgroundactivitysession-4nl4y"
    },
    "doc://com.apple.corelocation/documentation/CoreLocation/CLLocationManager": {
      "abstract": [
        {
          "text": "The object you use to start and stop the delivery of location-related events to your app.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CLLocationManager"
        }
      ],
      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/CLLocationManager",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CLLocationManager"
        }
      ],
      "role": "symbol",
      "title": "CLLocationManager",
      "type": "topic",
      "url": "/documentation/corelocation/cllocationmanager"
    },
    "doc://com.apple.corelocation/documentation/CoreLocation/CLLocationUpdate": {
      "abstract": [
        {
          "text": "A structure that contains the location information the framework delivers with each update.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CLLocationUpdate"
        }
      ],
      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/CLLocationUpdate",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CLLocationUpdate"
        }
      ],
      "role": "symbol",
      "title": "CLLocationUpdate",
      "type": "topic",
      "url": "/documentation/corelocation/cllocationupdate"
    },
    "doc://com.apple.corelocation/documentation/CoreLocation/adopting-live-updates-in-core-location": {
      "abstract": [
        {
          "text": "Simplify location delivery using asynchronous events in Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/adopting-live-updates-in-core-location",
      "kind": "article",
      "role": "sampleCode",
      "title": "Adopting live updates in Core Location",
      "type": "topic",
      "url": "/documentation/corelocation/adopting-live-updates-in-core-location"
    },
    "doc://com.apple.corelocation/documentation/CoreLocation/configuring-your-app-to-use-location-services": {
      "abstract": [
        {
          "text": "Prepare your app to start collecting location data.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/configuring-your-app-to-use-location-services",
      "kind": "article",
      "role": "article",
      "title": "Configuring your app to use location services",
      "type": "topic",
      "url": "/documentation/corelocation/configuring-your-app-to-use-location-services"
    },
    "doc://com.apple.corelocation/documentation/CoreLocation/monitoring-location-changes-with-core-location": {
      "abstract": [
        {
          "text": "Define boundaries and act on user location updates.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.corelocation/documentation/CoreLocation/monitoring-location-changes-with-core-location",
      "kind": "article",
      "role": "sampleCode",
      "title": "Monitoring location changes with Core Location",
      "type": "topic",
      "url": "/documentation/corelocation/monitoring-location-changes-with-core-location"
    },
    "doc://com.apple.documentation/documentation/Combine/ObservableObject": {
      "abstract": [
        {
          "text": "A type of object with a publisher that emits before the object has changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservableObject"
        },
        {
          "kind": "text",
          "text": " : AnyObject"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObservableObject",
      "type": "topic",
      "url": "/documentation/Combine/ObservableObject"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/UIApplicationDelegateAdaptor": {
      "abstract": [
        {
          "text": "A property wrapper type that you use to create a UIKit app delegate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@propertyWrapper"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UIApplicationDelegateAdaptor"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "DelegateType"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "DelegateType"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSObject",
          "text": "NSObject"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "DelegateType"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)UIApplicationDelegate",
          "text": "UIApplicationDelegate"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/UIApplicationDelegateAdaptor",
      "kind": "symbol",
      "role": "symbol",
      "title": "UIApplicationDelegateAdaptor",
      "type": "topic",
      "url": "/documentation/SwiftUI/UIApplicationDelegateAdaptor"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIApplicationDelegate/application(_:didFinishLaunchingWithOptions:)": {
      "abstract": [
        {
          "text": "Tells the delegate that the launch process is almost done and the app is almost ready to run.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "optional"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "application"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "application"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIApplication",
          "text": "UIApplication"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "didFinishLaunchingWithOptions"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "launchOptions"
        },
        {
          "kind": "text",
          "text": ": ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIApplication",
          "text": "UIApplication"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@UIApplicationLaunchOptionsKey",
          "text": "LaunchOptionsKey"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "keyword",
          "text": "Any"
        },
        {
          "kind": "text",
          "text": "]? = nil) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIApplicationDelegate/application(_:didFinishLaunchingWithOptions:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "application(_:didFinishLaunchingWithOptions:)",
      "type": "topic",
      "url": "/documentation/UIKit/UIApplicationDelegate/application(_:didFinishLaunchingWithOptions:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Essentials",
      "generated": true,
      "identifiers": [
        "doc://com.apple.corelocation/documentation/CoreLocation/configuring-your-app-to-use-location-services",
        "doc://com.apple.corelocation/documentation/CoreLocation/CLLocationManager",
        "doc://com.apple.corelocation/documentation/CoreLocation/CLBackgroundActivitySession-3mzv3",
        "doc://com.apple.corelocation/documentation/CoreLocation/CLLocationUpdate",
        "doc://com.apple.corelocation/documentation/CoreLocation/adopting-live-updates-in-core-location",
        "doc://com.apple.corelocation/documentation/CoreLocation/monitoring-location-changes-with-core-location"
      ],
      "title": "Essentials"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Essentials",
              "generated": true,
              "identifiers": [
                "doc://com.apple.corelocation/documentation/CoreLocation/configuring-your-app-to-use-location-services",
                "doc://com.apple.corelocation/documentation/CoreLocation/CLLocationManager",
                "doc://com.apple.corelocation/documentation/CoreLocation/CLBackgroundActivitySession-4nl4y"
              ],
              "title": "Essentials"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.corelocation~1documentation~1CoreLocation~1CLLocationManager/title",
          "value": "CLLocationManager"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.corelocation~1documentation~1CoreLocation~1CLLocationManager/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "CLLocationManager"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.corelocation~1documentation~1CoreLocation~1CLLocationManager/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "CLLocationManager"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIApplicationDelegate~1application(_:didFinishLaunchingWithOptions:)/title",
          "value": "application:didFinishLaunchingWithOptions:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIApplicationDelegate~1application(_:didFinishLaunchingWithOptions:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- ("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@BOOL",
              "text": "BOOL"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "identifier",
              "text": "application:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(cs)UIApplication",
              "text": "UIApplication"
            },
            {
              "kind": "text",
              "text": " *) "
            },
            {
              "kind": "internalParam",
              "text": "application"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "didFinishLaunchingWithOptions:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:Q$objc(cs)NSDictionary",
              "text": "NSDictionary<NSString *,id>"
            },
            {
              "kind": "text",
              "text": " *) "
            },
            {
              "kind": "internalParam",
              "text": "launchOptions"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/corelocation/supporting-live-updates-in-swiftui-and-mac-catalyst-apps"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/corelocation/supporting-live-updates-in-swiftui-and-mac-catalyst-apps"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
