{
  "abstract": [
    {
      "text": "Manage and use payment cards and other credentials.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://SecureElementCredential/documentation/SecureElementCredential"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://SecureElementCredential/documentation/SecureElementCredential/Accessing-and-Using-Secure-Element-Credentials"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "SecureElementCredential"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Accessing and using secure element credentials"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can use the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " framework to store, manage, and use ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "credentials",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ", for example, contactless payment cards, transit passes, and corporate badges, that the system stores in the device’s Secure Element. The person using your app can then authenticate with features like Face ID and Touch ID to use their credentials.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "code": "SecureElementCredential",
              "type": "codeVoice"
            },
            {
              "text": " provides UIKit and SwiftUI APIs to handle user authentication, and to temporarily give your app exclusive use of the device when presenting the credential. You can also receive notifications of credential-handling events. These include events like proximity to an NFC card reader, or the person performing a credential gesture like double tapping the side button of an iPhone.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You or your organization manage credentials and the embedded applet code you create for those credentials through the ",
              "type": "text"
            },
            {
              "identifier": "https://register.apple.com/login",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " (ABR). This framework allows your iOS app access to use those credentials.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-a-credential-session",
          "level": 3,
          "text": "Create a credential session",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " class is the central access point for working with credentials. To use it, first verify that the device is eligible to use credential sessions, by checking the value of ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/isEligible",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". If eligible, create a session with ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/startSession()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". Then, fetch the available credentials with ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/listCredentials()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". If the credential you expect to use isn’t in the array returned by ",
              "type": "text"
            },
            {
              "code": "listCredentials()",
              "type": "codeVoice"
            },
            {
              "text": ", call ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/provisionCredential(configurationUUID:name:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to install the applet bundle that you submitted to ABR into the Secure Element, then list the credentials again.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following example shows how to create a credential session in the context of a SwiftUI view that lists the available credentials. After the view instantiates and before it appears:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": ".task",
                      "type": "codeVoice"
                    },
                    {
                      "text": " view modifier spawns a ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Task",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " that calls a private ",
                      "type": "text"
                    },
                    {
                      "code": "kickOff()",
                      "type": "codeVoice"
                    },
                    {
                      "text": " helper method.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "kickOff()",
                      "type": "codeVoice"
                    },
                    {
                      "text": " makes the asynchronous calls to create the session and fetch an array of credentials from the Secure Element. This array can then populate a ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/List",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "code": [
            "struct MyCredentialsView: View {",
            "    @State private var activeSession: CredentialSession",
            "    @State private var credentials: [Credential]",
            "    ",
            "    var body: some View {",
            "        // Display a list of credentials.",
            "        List(credentials, id: \\.identifier) { credential in",
            "            MyCredentialListItem(credential: credential)",
            "        }",
            "        .task {",
            "            do {",
            "                try await kickOff()",
            "            } catch {",
            "                // Handle error from kickOff().",
            "            }",
            "        }",
            "    }",
            "    ",
            "    private func kickOff() async throws {",
            "        guard CredentialSession.isEligible else {",
            "            throw CredentialSession.ErrorCode.ineligible",
            "        }",
            "        self.activeSession = try await CredentialSession.startSession()",
            "        self.credentials = try await activeSession.listCredentials()",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When you first start the credential session, it’s in the default state, ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/management",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". In this state, you can perform the following actions:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "List credentials (as shown in the above example) with ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/listCredentials()",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Provision new credentials with ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/provisionCredential(configurationUUID:name:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Delete a credential with ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/deleteCredential(_:)",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Beyond the management state, there are two other credential session states:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Wired state, for communicating directly with a credential stored in the Secure Element.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Card emulation state, for using the credential with an NFC card reader.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Obtain-exclusive-use-of-the-user-interface",
          "level": 3,
          "text": "Obtain exclusive use of the user interface",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Prior to presenting a credential for use with an NFC reader or performing transactions, your app can get exclusive use of the credential user interface. This exclusivity prevents interruptions from another app chosen as the default for contactless transactions, any other apps using the ",
              "type": "text"
            },
            {
              "code": "SecureElementCredential",
              "type": "codeVoice"
            },
            {
              "text": " framework, and Wallet.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To gain exclusive use of the credential UI, obtain an instance of the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " class. Hold on to this object until you finish using the credential. The following example shows an overview of this process:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "private var activeSession: CredentialSession = CredentialSession()",
            "private var assertion: CredentialSession.PresentmentIntentAssertion?",
            "",
            "func useAssertion() async throws {",
            "    do {",
            "        assertion = try await activeSession.acquirePresentmentAssertion()",
            "        // Perform UI tasks with a credential.",
            "    } catch {",
            "        // Retry tasks if necessary.",
            "    }",
            "    ",
            "    try await assertion?.relinquish() // After completing UI tasks.",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The assertion expires when the object deinitializes, you call ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion/relinquish()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", or after a 15-second timeout, whichever occurs first.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "You can acquire a maximum of two instances of ",
                  "type": "text"
                },
                {
                  "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " in one 80-second period.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Enter-wired-mode",
          "level": 3,
          "text": "Enter wired mode",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "After obtaining a ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Credential",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", many tasks require changing the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/state-swift.property",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " before you perform them. For example, you might need to maintain a credential by directly interacting with it in the Secure Element, which you can only do in the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/wired(credential:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " state. Credential maintenance tasks include exchanging keys and certificates with an installed credential.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Be aware that you can only perform these kinds of maintenance tasks if your app has owner-level access to the credential.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Tip",
          "style": "tip",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "You can perform credential maintenance by transitioning the session state to ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/wired(credential:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". Next, you send Application Protocol Data Unit (APDU) commands, as defined by ",
              "type": "text"
            },
            {
              "identifier": "https://www.iso.org/obp/ui/#iso:std:iso-iec:7816:-4:ed-4:v1:en",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", to the credential with the session’s ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. See the integration guide in the ",
              "type": "text"
            },
            {
              "identifier": "https://register.apple.com",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " for more information about the payloads for these calls.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s how you enter wired mode and perform maintenance on a credential:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// For simplicity, this example just uses the first credential discovered.",
            "guard let selectedCredential = credentialList.first else {",
            "    return",
            "}",
            "try await activeSession.enterWiredMode(using: selectedCredential)",
            "let credentialResponse = try await activeSession.transceive(transceiveData)",
            "",
            "// Perform additional transceive(_:) calls here if your task",
            "// requires multiple round trips.",
            "",
            "try await activeSession.endWiredMode() // Transition back to management mode when done."
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Use-wired-mode-in-a-UIKit-app",
          "level": 3,
          "text": "Use wired mode in a UIKit app",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can also go into wired mode to get user authorization for using the credential, which authenticates with a passcode or biometric features like Face ID. This approach is useful for tasks like using the credential to perform web payments.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following example shows how a UIKit-based app can get authorization and perform a transaction in wired mode. After getting the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " as described above, it verifies that the selected credential is installed, and gets the first installed instance’s unique identifier. Using this unique identifier, it calls ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performWiredTransaction(using:over:instanceAID:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to present an authentication interface over the current ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/UIKit/UIScene",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". This call puts the session into wired mode, at which point the app can interact with the credential by calling ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For a web payment, an app might receive a token from a web service, and then ingest it by sending the token as the APDU payload of a ",
              "type": "text"
            },
            {
              "code": "transceive(_:)",
              "type": "codeVoice"
            },
            {
              "text": " call. The credential then provides an APDU as the return value. It might take several exchanges to complete the transaction, after which the app exits wired mode by calling ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endWiredMode()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and relinquishes the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@IBAction func performWebTransaction() {",
            "    Task {",
            "        do {",
            "            let assertion = try await self.activeSession.acquirePresentmentAssertion()",
            "            guard case let .installed(instances) = selectedCredential.state,",
            "                let instanceAID = instances.first?.instanceAID,",
            "                let scene = self.view.window?.windowScene else {",
            "              return // Handle error.",
            "            }",
            "            try await assertion.relinquish()",
            "             ",
            "            try await activeSession.performWiredTransaction(using: selectedCredential,",
            "                                                            over: scene,",
            "                                                            instanceAID: instanceAID)",
            "",
            "            // Perform proprietary tasks here by calling activeSession.transcieve(_:)",
            "            // to exchange APDUs with the credential.",
            "",
            "            // If you have cleanup tasks after transceiving, reacquire the",
            "            // PresentmentIntentAssertion, perform those tasks, and relinquish",
            "            // the assertion.",
            "",
            "            try await activeSession.endWiredMode() ",
            "        } catch {",
            "            // Handle error.",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The example above calls ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion/relinquish()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " before making the ",
              "type": "text"
            },
            {
              "code": "performWiredTransaction(using:over:scene:)",
              "type": "codeVoice"
            },
            {
              "text": " call. This is because all methods that perform transactions acquire an internal instance of the presentment intent assertion on your behalf and automatically relinquish it. If you need to perform clean-up work after a transaction, acquire another assertion, subject to the limit of two assertions in an 80-second span.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Use-wired-mode-in-a-SwiftUI-app",
          "level": 3,
          "text": "Use wired mode in a SwiftUI app",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The flow is different when you use a SwiftUI ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/View",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instead of a UIKit ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/UIKit/UIViewController",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", but the result is the same. The following example shows a SwiftUI view that presents the UI for performing a wired transaction. This example assumes you already acquired the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", and passed a ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and a ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Credential",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to the view.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Before the view appears, the closure associated with the ",
              "type": "text"
            },
            {
              "code": "View.task(priority:_:)",
              "type": "codeVoice"
            },
            {
              "text": " view modifier executes. This code fetches the current ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/Configuration",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and stores it in a state property. Next, the ",
              "type": "text"
            },
            {
              "code": "View.transactionTask(_:action:)",
              "type": "codeVoice"
            },
            {
              "text": " closure runs. This closure gets the current credential, and from that, gets the unique identifier of the credential’s first instance. With instance ID, it can enter wired mode by calling ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performTransactionInWiredMode(using:instanceAID:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " on the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " that the closure receives.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "At this point, the SwiftUI sample is in the same state as the earlier UIKit example — you can make ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " calls to exchange APDUs with the installed credential to process the web transaction. When done, invalidate the configuration to exit wired mode and return to management mode.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct TransactView: View {",
            "    @State var session: CredentialSession",
            "    @State private var assertion: CredentialSession.PresentmentIntentAssertion? // Acquire this prior to showing view.",
            "    @State var credential: CredentialSession.Credential",
            "    @State var activeConfiguration: CredentialTransaction.Configuration?",
            "    ",
            "    var body: some View {",
            "        VStack {",
            "            // Subviews to represent the credential, such as",
            "            // an image of a card.",
            "        }",
            "        .task {",
            "            do {",
            "                self.activeConfiguration = try await session.configuration()",
            "            } catch {",
            "                // Present alert for error.",
            "            }",
            "        }",
            "        .transactionTask(activeConfiguration) { transaction in ",
            "            do {",
            "                guard let credential = try await session.listCredentials().first(where: { $0.identifier == credential.identifier }) else {",
            "                    // Present alert for error.",
            "                    return",
            "                }",
            "                ",
            "                guard case let .installed(instances: instances) = credential.state,",
            "                let firstInstance = instances.first else {",
            "                    return // Handle error.",
            "                }",
            "                ",
            "                assertion?.relinquish()",
            "                try await transaction.performTransactionInWiredMode(using: credential,",
            "                                                                    instanceAID: firstInstance.instanceAID)",
            "",
            "                // Perform proprietary tasks here by reacquiring",
            "                // PresentmentIntentAssertion, then calling",
            "                // activeSession.transcieve(_:) to exchange APDUs with the credential.",
            "                // Relinquish the assertion when done.",
            "",
            "                activeConfiguration?.invalidate() // Invalidate the session when you're done.",
            "            } catch {",
            "                // Present alert for error.",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Perform-card-emulation",
          "level": 3,
          "text": "Perform card emulation",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can also use credentials for contactless transactions with NFC card readers. Implement the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSessionWindowSceneDelegate",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol in your app to receive ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSessionWindowSceneEvent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instances that describe NFC-related events. These events can occur when the device comes within range of an NFC card reader. Your app also gets an event when the person using the app performs a gesture to present an NFC display, like double-pressing the Home button or Side button.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To perform a contactless transaction, select an installed credential and then put the session into card emulation mode. In UIKit, you do this by calling ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performTransaction(using:over:options:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". In the following example, the ",
              "type": "text"
            },
            {
              "code": "performNFCTransaction()",
              "type": "codeVoice"
            },
            {
              "text": " method gets exclusive use of the contactless UI with  ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/acquirePresentmentAssertion()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". Next, it verifies that the selected credential is installed and unwraps the current ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/UIKit/UIScene",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": "  into a local variable. With these parameters, it calls ",
              "type": "text"
            },
            {
              "code": "performTransaction(using:over:)",
              "type": "codeVoice"
            },
            {
              "text": " to begin the contactless transaction with the NFC reader.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "performTransaction(using:over:)",
              "type": "codeVoice"
            },
            {
              "text": " method implicitly changes the session state to ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/cardEmulation(credential:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". When the transaction completes, the example returns to management mode by calling ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endCardEmulation()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", and relinquishes the contactless UI.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@IBAction func performNFCTransaction() {",
            "    Task {",
            "        do {",
            "            let assertion = try await activeSession.acquirePresentmentAssertion()",
            "            guard case let .installed(instances) = selectedCredential.state,",
            "            let scene = self.view.window?.windowScene else {",
            "                return // Handle error.",
            "            }",
            "            try await assertion.relinquish()",
            "",
            "            try await activeSession.performTransaction(using: selectedCredential,",
            "                                                       over: scene)",
            "",
            "            // Perform other tasks, if necessary.",
            "",
            "            // If you have cleanup tasks after transceiving, reacquire the",
            "            // PresentmentIntentAssertion, perform those tasks, and relinquish",
            "            // the assertion.",
            "",
            "            try await activeSession.endCardEmulation()",
            "        } catch {",
            "            // Handle error.",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The SwiftUI equivalent uses the ",
              "type": "text"
            },
            {
              "code": "transactionTask(_:action:)",
              "type": "codeVoice"
            },
            {
              "text": " view modifier to receive a ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " from the view. Using this parameter, it calls ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performTransaction(using:options:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to enter card emulation mode.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct CredentialView: View {",
            "    @State private var configuration: CredentialTransaction.Configuration?",
            "    @State private var assertion: CredentialSession.PresentmentIntentAssertion? // aAquire prior to showing view.",
            "    private var activeSession: CredentialSession",
            "    private var selectedCredential: CredentialSession.Credential",
            "",
            "    var body: some View {",
            "        VStack {",
            "            // Subviews to represent the credential, such as",
            "            // an image of a card.",
            "            }",
            "            .task {",
            "                self.configuration = await activeSession.configuration()",
            "            }",
            "            .transactionTask(configuration) { transaction in",
            "                do {",
            "                    guard case .installed(_) = selectedCredential.state else {",
            "                        // Handle error.",
            "                        return",
            "                    }",
            "                    assertion?.relinquish()",
            "                    try await transaction.performTransaction(using: selectedCredential)",
            "                } catch {",
            "                    // Handle error.",
            "                }",
            "                await configuration?.invalidate() // Transition back to management state.",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Performing-wired-actions-and-card-emulation",
          "level": 3,
          "text": "Performing wired actions and card emulation",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The previous example assumes the credential is already installed and ready to use. It’s also possible to perform maintenance on a credential immediately before using it with an NFC reader. The following example shows how to do this. The ",
              "type": "text"
            },
            {
              "code": "presentCredential()",
              "type": "codeVoice"
            },
            {
              "text": " method checks an internal ",
              "type": "text"
            },
            {
              "code": "firstUse",
              "type": "codeVoice"
            },
            {
              "text": " flag to determine if it needs to perform up-front maintenance work. If so, it calls a private ",
              "type": "text"
            },
            {
              "code": "personalizeCredentialInformation()",
              "type": "codeVoice"
            },
            {
              "text": " method to enter wired mode and perform the maintenance with one or more calls to ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "After this method returns, the session has a current credential — the one it entered wired mode with — so it can enter card emulation mode with a call to ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performCardEmulationTransactionWithCurrentCredential(over:options:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". On the other hand, if ",
              "type": "text"
            },
            {
              "code": "presentCredential()",
              "type": "codeVoice"
            },
            {
              "text": " didn’t need to perform card maintenance, it calls ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performTransaction(using:over:options:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " as before. In either case, the contactless transaction with the NFC reader proceeds, and the example calls ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endCardEmulation()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " when done.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class TransactionViewController: UIViewController {",
            "    private var activeSession: CredentialSession",
            "    private var selectedCredential: CredentialSession.Credential",
            "    private var assertion: CredentialSession.PresentmentIntentAssertion",
            "    private var firstUse: Bool",
            "",
            "    // The card maintenance method.",
            "    private func personalizeCredentialInformation() async throws {",
            "        try await activeSession.enterWiredMode(using: selectedCredential)",
            "        let credentialResponse = try await activeSession.transceive( generatePersonalizationAPDU() )",
            "        // Perform additional transceive(_:) calls here if your task",
            "        // requires multiple round trips.",
            "    }",
            "",
            "    func presentCredential() async throws {",
            "        guard case let .installed(instances) = selectedCredential.state,",
            "        let scene = self.view.window?.windowScene else {",
            "            return // Handle error.",
            "        }",
            "        ",
            "        if firstUse {",
            "            try await personalizeCredentialInformation()",
            "            try await activeSession.performCardEmulationTransactionWithCurrentCredential(over: scene)",
            "",
            "        } else {",
            "            try await activeSession.performTransaction(using: selectedCredential, over: scene)",
            "        }",
            "",
            "        // Perform other tasks, if necessary.",
            "",
            "        try await activeSession.endCardEmulation()",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "In SwiftUI, the main difference is that the ",
              "type": "text"
            },
            {
              "code": "transactionTask(_:action:)",
              "type": "codeVoice"
            },
            {
              "text": " view modifier provides a ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " parameter when it executes your closure, so you call transaction-performing methods on this object.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In the following example, the code checks the ",
              "type": "text"
            },
            {
              "code": "isFirstUse",
              "type": "codeVoice"
            },
            {
              "text": " flag in the closure passed to the ",
              "type": "text"
            },
            {
              "code": ".transactionTask(_:action:)",
              "type": "codeVoice"
            },
            {
              "text": " view modifier and then performs any needed maintenance on the credential in wired mode. From there, the first-use case calls ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performCardEmulationTransactionWithCurrentCredential(options:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to enter card emulation mode with this credential.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "If the credential doesn’t require maintenance, which means the session is in management mode, the code calls ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performTransaction(using:options:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", passing in the credential to use for the NFC transaction.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct TransactionView: View {",
            "    @State private var configuration: CredentialTransaction.Configuration?",
            "    @State private var assertion: CredentialSession.PresentmentIntentAssertion? // acquire prior to showing view",
            "    private var activeSession: CredentialSession",
            "    private var selectedCredential: CredentialSession.Credential",
            "    private var isFirstUse: Bool",
            "",
            "    var body: some View {",
            "        VStack {",
            "            // Subviews to represent the credential, such as",
            "            // an image of a card.",
            "            }",
            "            .task {",
            "                self.configuration = await activeSession.configuration()",
            "            }",
            "            .transactionTask(configuration) { transaction in",
            "                do {",
            "                    guard case .installed(_) = selectedCredential.state else  {",
            "                        // Handle error.",
            "                        return",
            "                    }",
            "                    if isFirstUse {",
            "                        do {",
            "                            guard case let .installed(instances: instances) = selectedCredential.state,",
            "                            let firstInstance = instances.first else {",
            "                                // Handle error.",
            "                                return",
            "                            }",
            "                            try await session.enterWiredMode()",
            "                            // Perform proprietary tasks here by calling activeSession.transcieve(_:)",
            "                            // to exchange APDUs with the credential.",
            "                        } catch {",
            "                            // Handle error.",
            "                        }",
            "                        assertion?.relinquish()",
            "                        try await transaction.performCardEmulationTransactionWithCurrentCredential()",
            "                    } else {",
            "                        assertion?.relinquish()",
            "                        try await transaction.performTransaction(using: selectedCredential)",
            "                    }",
            "",
            "                    // Perform other tasks, if necessary. Reacquire a ",
            "                    // PresentmentIntentAssertion prior to any \"perform\" calls,",
            "                    // and relinquish() the assertion when done.",
            "",
            "                } catch {",
            "                    // Handle error.",
            "                }",
            "                await configuration?.invalidate() // Transition the session back to management state.",
            "            }",
            "        }",
            "    }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://SecureElementCredential/documentation/SecureElementCredential": {
      "abstract": [
        {
          "text": "Allow access to credentials inside the Secure Element on device.",
          "type": "text"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential",
      "kind": "symbol",
      "role": "collection",
      "title": "SecureElementCredential",
      "type": "topic",
      "url": "/documentation/secureelementcredential"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession": {
      "abstract": [
        {
          "text": "A class for performing actions on a credential stored in the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "actor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CredentialSession"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CredentialSession"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Credential": {
      "abstract": [
        {
          "text": "Information about a credential that a credential session retrieves from the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Credential"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Credential",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Credential"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.Credential",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/credential"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion": {
      "abstract": [
        {
          "text": "An object that signals your app’s intention to make exclusive use of the device’s contactless features.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PresentmentIntentAssertion"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PresentmentIntentAssertion"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.PresentmentIntentAssertion",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion/relinquish()": {
      "abstract": [
        {
          "text": "End the presentment intent assertion.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "relinquish"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion/relinquish()",
      "kind": "symbol",
      "role": "symbol",
      "title": "relinquish()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/relinquish()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/cardEmulation(credential:)": {
      "abstract": [
        {
          "text": "The state for performing card emulation with a given credential.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "cardEmulation"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "credential"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/cardEmulation(credential:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "CredentialSession.State.cardEmulation(credential:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/state-swift.enum/cardemulation(credential:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/management": {
      "abstract": [
        {
          "text": "The state for managing the credential session.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "management"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/management",
      "kind": "symbol",
      "role": "symbol",
      "title": "CredentialSession.State.management",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/state-swift.enum/management"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/wired(credential:)": {
      "abstract": [
        {
          "text": "The state for performing wired operations with a given credential.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wired"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "credential"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum/wired(credential:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "CredentialSession.State.wired(credential:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/state-swift.enum/wired(credential:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/acquirePresentmentAssertion()": {
      "abstract": [
        {
          "text": "Indicates that the app intends to present a credential to a contactless interface.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "acquirePresentmentAssertion"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC26PresentmentIntentAssertionC",
          "text": "PresentmentIntentAssertion"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/acquirePresentmentAssertion()",
      "kind": "symbol",
      "role": "symbol",
      "title": "acquirePresentmentAssertion()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/acquirepresentmentassertion()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/deleteCredential(_:)": {
      "abstract": [
        {
          "text": "Deletes a credential on the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "deleteCredential"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/deleteCredential(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "deleteCredential(_:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/deletecredential(_:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endCardEmulation()": {
      "abstract": [
        {
          "text": "Ends card emulation and transitions the session to management state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "endCardEmulation"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endCardEmulation()",
      "kind": "symbol",
      "role": "symbol",
      "title": "endCardEmulation()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/endcardemulation()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endWiredMode()": {
      "abstract": [
        {
          "text": "Ends wired mode and returns to management state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "endWiredMode"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endWiredMode()",
      "kind": "symbol",
      "role": "symbol",
      "title": "endWiredMode()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/endwiredmode()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/isEligible": {
      "abstract": [
        {
          "text": "Clients should always check if this variable returns true",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to dynamically determine if the current device and user configuration",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "can utilize this service before starting a session with this client",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isEligible"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/isEligible",
      "kind": "symbol",
      "role": "symbol",
      "title": "isEligible",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/iseligible"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/listCredentials()": {
      "abstract": [
        {
          "text": "Retrieves a list of of credentials to which the app has access rights.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "listCredentials"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": "]"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/listCredentials()",
      "kind": "symbol",
      "role": "symbol",
      "title": "listCredentials()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/listcredentials()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performCardEmulationTransactionWithCurrentCredential(over:options:)": {
      "abstract": [
        {
          "text": "Activate the current credential in Wired mode to enter Card Emulation mode.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performCardEmulationTransactionWithCurrentCredential"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "over"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIScene",
          "text": "UIScene"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC20CardEmulationOptionsV",
          "text": "CardEmulationOptions"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performCardEmulationTransactionWithCurrentCredential(over:options:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performCardEmulationTransactionWithCurrentCredential(over:options:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/performcardemulationtransactionwithcurrentcredential(over:options:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performTransaction(using:over:options:)": {
      "abstract": [
        {
          "text": "Prompts the user for authorization and then activate a credential for card emulation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performTransaction"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "over"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIScene",
          "text": "UIScene"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC20CardEmulationOptionsV",
          "text": "CardEmulationOptions"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performTransaction(using:over:options:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performTransaction(using:over:options:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/performtransaction(using:over:options:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performWiredTransaction(using:over:instanceAID:)": {
      "abstract": [
        {
          "text": "Enters wired mode with user authentication.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performWiredTransaction"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "over"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIScene",
          "text": "UIScene"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "instanceAID"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DataV",
          "text": "Data"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performWiredTransaction(using:over:instanceAID:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performWiredTransaction(using:over:instanceAID:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/performwiredtransaction(using:over:instanceaid:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/provisionCredential(configurationUUID:name:)": {
      "abstract": [
        {
          "text": "Creates a credential in the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "provisionCredential"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "configurationUUID"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4UUIDV",
          "text": "UUID"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "name"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/provisionCredential(configurationUUID:name:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "provisionCredential(configurationUUID:name:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/provisioncredential(configurationuuid:name:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/startSession()": {
      "abstract": [
        {
          "text": "Requests a session to view, manage, or use credentials in the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "startSession"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/startSession()",
      "kind": "symbol",
      "role": "symbol",
      "title": "startSession()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/startsession()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/state-swift.property": {
      "abstract": [
        {
          "text": "The current state of the session.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "state"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC5StateO",
          "text": "State"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/state-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "state",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/state-swift.property"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)": {
      "abstract": [
        {
          "text": "Send a wired command Application Protocol Data Unit (APDU) to the credential.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "transceive"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DataV",
          "text": "Data"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DataV",
          "text": "Data"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "transceive(_:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/transceive(_:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSessionWindowSceneDelegate": {
      "abstract": [
        {
          "text": "A protocol to notify a UIKit scene that a credential session event occurred.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CredentialSessionWindowSceneDelegate"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSessionWindowSceneDelegate",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CredentialSessionWindowSceneDelegate"
        }
      ],
      "role": "symbol",
      "title": "CredentialSessionWindowSceneDelegate",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsessionwindowscenedelegate"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSessionWindowSceneEvent": {
      "abstract": [
        {
          "text": "An event that a credential session sends to a UIKit scene.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CredentialSessionWindowSceneEvent"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSessionWindowSceneEvent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CredentialSessionWindowSceneEvent"
        }
      ],
      "role": "symbol",
      "title": "CredentialSessionWindowSceneEvent",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsessionwindowsceneevent"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction": {
      "abstract": [
        {
          "text": "A transaction object for performing wired and contactless operations in SwiftUI views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CredentialTransaction"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CredentialTransaction"
        }
      ],
      "role": "symbol",
      "title": "CredentialTransaction",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialtransaction"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/Configuration": {
      "abstract": [
        {
          "text": "An object that provides configuration information for a transaction that the client intends to peform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Configuration"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/Configuration",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Configuration"
        }
      ],
      "role": "symbol",
      "title": "CredentialTransaction.Configuration",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialtransaction/configuration"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performCardEmulationTransactionWithCurrentCredential(options:)": {
      "abstract": [
        {
          "text": "Activate the current credential to perform a transaction in card emulation mode.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performCardEmulationTransactionWithCurrentCredential"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:32_SecureElementCredential_SwiftUI20CardEmulationOptionsa",
          "text": "CardEmulationOptions"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performCardEmulationTransactionWithCurrentCredential(options:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performCardEmulationTransactionWithCurrentCredential(options:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialtransaction/performcardemulationtransactionwithcurrentcredential(options:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performTransaction(using:options:)": {
      "abstract": [
        {
          "text": "Prompts the user for authorization and then activates a credential for card emulation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performTransaction"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:32_SecureElementCredential_SwiftUI0C0a",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:32_SecureElementCredential_SwiftUI20CardEmulationOptionsa",
          "text": "CardEmulationOptions"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performTransaction(using:options:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performTransaction(using:options:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialtransaction/performtransaction(using:options:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performTransactionInWiredMode(using:instanceAID:)": {
      "abstract": [
        {
          "text": "Enters wired mode to perform a transaction.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performTransactionInWiredMode"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:32_SecureElementCredential_SwiftUI0C0a",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "instanceAID"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DataV",
          "text": "Data"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/performTransactionInWiredMode(using:instanceAID:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performTransactionInWiredMode(using:instanceAID:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialtransaction/performtransactioninwiredmode(using:instanceaid:)"
    },
    "doc://com.apple.documentation/documentation/Swift/Task": {
      "abstract": [
        {
          "text": "A unit of asynchronous work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Task"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8SendableP",
          "text": "Sendable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Task",
      "kind": "symbol",
      "role": "symbol",
      "title": "Task",
      "type": "topic",
      "url": "/documentation/Swift/Task"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/List": {
      "abstract": [
        {
          "text": "A container that presents rows of data arranged in a single column, optionally providing the ability to select one or more members.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "List"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "SelectionValue"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Content"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "SelectionValue"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SH",
          "text": "Hashable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Content"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/List",
      "kind": "symbol",
      "role": "symbol",
      "title": "List",
      "type": "topic",
      "url": "/documentation/SwiftUI/List"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/View": {
      "abstract": [
        {
          "text": "A type that represents part of your app’s user interface and provides modifiers that you use to configure views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/View",
      "kind": "symbol",
      "role": "symbol",
      "title": "View",
      "type": "topic",
      "url": "/documentation/SwiftUI/View"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIScene": {
      "abstract": [
        {
          "text": "An object that represents one instance of your app’s user interface.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UIScene"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIScene",
      "kind": "symbol",
      "role": "symbol",
      "title": "UIScene",
      "type": "topic",
      "url": "/documentation/UIKit/UIScene"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIViewController": {
      "abstract": [
        {
          "text": "An object that manages a view hierarchy for your UIKit app.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UIViewController"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIViewController",
      "kind": "symbol",
      "role": "symbol",
      "title": "UIViewController",
      "type": "topic",
      "url": "/documentation/UIKit/UIViewController"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://register.apple.com": {
      "identifier": "https://register.apple.com",
      "title": "Apple Business Register",
      "titleInlineContent": [
        {
          "text": "Apple Business Register",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://register.apple.com"
    },
    "https://register.apple.com/login": {
      "identifier": "https://register.apple.com/login",
      "title": "Apple Business Register",
      "titleInlineContent": [
        {
          "text": "Apple Business Register",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://register.apple.com/login"
    },
    "https://www.iso.org/obp/ui/#iso:std:iso-iec:7816:-4:ed-4:v1:en": {
      "identifier": "https://www.iso.org/obp/ui/#iso:std:iso-iec:7816:-4:ed-4:v1:en",
      "title": "ISO 7816-4",
      "titleInlineContent": [
        {
          "text": "ISO 7816-4",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://www.iso.org/obp/ui/#iso:std:iso-iec:7816:-4:ed-4:v1:en"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIScene/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@interface"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "UIScene"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(cs)UIResponder",
              "text": "UIResponder"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIViewController/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@interface"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "UIViewController"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(cs)UIResponder",
              "text": "UIResponder"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/secureelementcredential/accessing-and-using-secure-element-credentials"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
