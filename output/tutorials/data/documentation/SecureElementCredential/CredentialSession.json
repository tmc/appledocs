{
  "abstract": [
    {
      "text": "A class for performing actions on a credential stored in the Secure Element.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "added",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    },
    "minor": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.2",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://SecureElementCredential/documentation/SecureElementCredential"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:23SecureElementCredential0C7SessionC",
    "fragments": [
      {
        "kind": "keyword",
        "text": "actor"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "CredentialSession"
      }
    ],
    "modules": [
      {
        "name": "SecureElementCredential"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "CredentialSession"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.1",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.1",
        "name": "iPadOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Class",
    "symbolKind": "class",
    "title": "CredentialSession"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "actor"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "CredentialSession"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "mentions",
      "mentions": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/Accessing-and-Using-Secure-Element-Credentials"
      ]
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Create a credential session with the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/startSession()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. After you start a session, the session has three states:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "In this default state, you can list, add, and delete credentials in the Secure Element.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "text": "Management",
                    "type": "text"
                  }
                ]
              }
            },
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The wired state allows you to exchange data with a credential-corresponding entity (an ",
                        "type": "text"
                      },
                      {
                        "inlineContent": [
                          {
                            "text": "applet",
                            "type": "text"
                          }
                        ],
                        "type": "emphasis"
                      },
                      {
                        "text": ") in the Secure Element.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "text": "Wired",
                    "type": "text"
                  }
                ]
              }
            },
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "In the card emulation state, your credential can communicate with a contactless card reader.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "text": "Card Emulation",
                    "type": "text"
                  }
                ]
              }
            }
          ],
          "type": "termList"
        },
        {
          "inlineContent": [
            {
              "text": "The framework provides SwiftUI and UIKit user interfaces for your app to display while using the wired and card emulation states.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can read the current state at any time from the ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/state-swift.property",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property. The ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/eventStream",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property provides an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncStream",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " of events from both your own actions on credentials and outside sources like detecting an NFC readerâ€™s RF field.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "An app can have only one active session at a time. When your app no longer needs the credential session, call ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/invalidate()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". If your app goes into the background, the system automatically invalidates your session after a short delay. In wired mode, the system invalidates the session if it goes 15 seconds without performing a ",
              "type": "text"
            },
            {
              "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " call.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://SecureElementCredential/documentation/SecureElementCredential": {
      "abstract": [
        {
          "text": "Allow access to credentials inside the Secure Element on device.",
          "type": "text"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential",
      "kind": "symbol",
      "role": "collection",
      "title": "SecureElementCredential",
      "type": "topic",
      "url": "/documentation/secureelementcredential"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/Accessing-and-Using-Secure-Element-Credentials": {
      "abstract": [
        {
          "text": "Manage and use payment cards and other credentials.",
          "type": "text"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/Accessing-and-Using-Secure-Element-Credentials",
      "kind": "article",
      "role": "article",
      "title": "Accessing and using secure element credentials",
      "type": "topic",
      "url": "/documentation/secureelementcredential/accessing-and-using-secure-element-credentials"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession": {
      "abstract": [
        {
          "text": "A class for performing actions on a credential stored in the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "actor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CredentialSession"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CredentialSession"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/==(_:_:)": {
      "abstract": [
        {
          "text": "Returns a Boolean value indicating whether two values are equal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "=="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/==(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "==(_:_:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/==(_:_:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Actor-Implementations": {
      "abstract": [],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Actor-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Actor Implementations",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/actor-implementations"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/CardEmulationOptions": {
      "abstract": [
        {
          "text": "Options for customizing card emulation behavior.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CardEmulationOptions"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/CardEmulationOptions",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CardEmulationOptions"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.CardEmulationOptions",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/cardemulationoptions"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/ConnectivityEvent": {
      "abstract": [
        {
          "text": "An event that a credential receives during card emulation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ConnectivityEvent"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/ConnectivityEvent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ConnectivityEvent"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.ConnectivityEvent",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/connectivityevent"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Credential": {
      "abstract": [
        {
          "text": "Information about a credential that a credential session retrieves from the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Credential"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Credential",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Credential"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.Credential",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/credential"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Equatable-Implementations": {
      "abstract": [],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Equatable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Equatable Implementations",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/equatable-implementations"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/ErrorCode": {
      "abstract": [
        {
          "text": "An error encountered by a credential session.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ErrorCode"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/ErrorCode",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ErrorCode"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.ErrorCode",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/errorcode"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Event": {
      "abstract": [
        {
          "text": "Events produced by a credential session, such as connectivity events and errors.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Event"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Event",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Event"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.Event",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/event"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/NFCFieldInformation": {
      "abstract": [
        {
          "text": "The state of an NFC RF field.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "NFCFieldInformation"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/NFCFieldInformation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "NFCFieldInformation"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.NFCFieldInformation",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion": {
      "abstract": [
        {
          "text": "An object that signals your appâ€™s intention to make exclusive use of the deviceâ€™s contactless features.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PresentmentIntentAssertion"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PresentmentIntentAssertion"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.PresentmentIntentAssertion",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/SecureElementInfo-swift.struct": {
      "abstract": [],
      "beta": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SecureElementInfo"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/SecureElementInfo-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SecureElementInfo"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.SecureElementInfo",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/secureelementinfo-swift.struct"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum": {
      "abstract": [
        {
          "text": "An enumeration of the possible states of a card session.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "role": "symbol",
      "title": "CredentialSession.State",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/state-swift.enum"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/acquirePresentmentAssertion()": {
      "abstract": [
        {
          "text": "Indicates that the app intends to present a credential to a contactless interface.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "acquirePresentmentAssertion"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC26PresentmentIntentAssertionC",
          "text": "PresentmentIntentAssertion"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/acquirePresentmentAssertion()",
      "kind": "symbol",
      "role": "symbol",
      "title": "acquirePresentmentAssertion()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/acquirepresentmentassertion()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/configuration()": {
      "abstract": [
        {
          "text": "Retrieves a transaction configuration related to this session.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "configuration"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:32_SecureElementCredential_SwiftUI0C11TransactionC",
          "text": "CredentialTransaction"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:32_SecureElementCredential_SwiftUI0C11TransactionC13ConfigurationC",
          "text": "Configuration"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/configuration()",
      "kind": "symbol",
      "role": "symbol",
      "title": "configuration()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/configuration()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/deleteCredential(_:)": {
      "abstract": [
        {
          "text": "Deletes a credential on the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "deleteCredential"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/deleteCredential(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "deleteCredential(_:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/deletecredential(_:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endCardEmulation()": {
      "abstract": [
        {
          "text": "Ends card emulation and transitions the session to management state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "endCardEmulation"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endCardEmulation()",
      "kind": "symbol",
      "role": "symbol",
      "title": "endCardEmulation()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/endcardemulation()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endWiredMode()": {
      "abstract": [
        {
          "text": "Ends wired mode and returns to management state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "endWiredMode"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endWiredMode()",
      "kind": "symbol",
      "role": "symbol",
      "title": "endWiredMode()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/endwiredmode()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/enterWiredMode(using:)": {
      "abstract": [
        {
          "text": "Enters wired mode to perform maintenance operations with the given credential.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "enterWiredMode"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/enterWiredMode(using:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "enterWiredMode(using:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/enterwiredmode(using:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/eventStream": {
      "abstract": [
        {
          "text": "An asynchronous stream of session events.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "eventStream"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScS",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC5EventO",
          "text": "Event"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/eventStream",
      "kind": "symbol",
      "role": "symbol",
      "title": "eventStream",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/eventstream"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/init()": {
      "abstract": [
        {
          "text": "Creates an empty credential session.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/init()",
      "kind": "symbol",
      "role": "symbol",
      "title": "init()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/init()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/invalidate()": {
      "abstract": [
        {
          "text": "Inmediately invalidates a session.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "invalidate"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/invalidate()",
      "kind": "symbol",
      "role": "symbol",
      "title": "invalidate()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/invalidate()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/isEligible": {
      "abstract": [
        {
          "text": "Clients should always check if this variable returns true",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to dynamically determine if the current device and user configuration",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "can utilize this service before starting a session with this client",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isEligible"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/isEligible",
      "kind": "symbol",
      "role": "symbol",
      "title": "isEligible",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/iseligible"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/listCredentials()": {
      "abstract": [
        {
          "text": "Retrieves a list of of credentials to which the app has access rights.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "listCredentials"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": "]"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/listCredentials()",
      "kind": "symbol",
      "role": "symbol",
      "title": "listCredentials()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/listcredentials()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performCardEmulationTransactionWithCurrentCredential(over:options:)": {
      "abstract": [
        {
          "text": "Activate the current credential in Wired mode to enter Card Emulation mode.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performCardEmulationTransactionWithCurrentCredential"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "over"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIScene",
          "text": "UIScene"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC20CardEmulationOptionsV",
          "text": "CardEmulationOptions"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performCardEmulationTransactionWithCurrentCredential(over:options:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performCardEmulationTransactionWithCurrentCredential(over:options:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/performcardemulationtransactionwithcurrentcredential(over:options:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performTransaction(using:over:options:)": {
      "abstract": [
        {
          "text": "Prompts the user for authorization and then activate a credential for card emulation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performTransaction"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "over"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIScene",
          "text": "UIScene"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC20CardEmulationOptionsV",
          "text": "CardEmulationOptions"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performTransaction(using:over:options:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performTransaction(using:over:options:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/performtransaction(using:over:options:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performWiredTransaction(using:over:instanceAID:)": {
      "abstract": [
        {
          "text": "Enters wired mode with user authentication.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "performWiredTransaction"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "over"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)UIScene",
          "text": "UIScene"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "instanceAID"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DataV",
          "text": "Data"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performWiredTransaction(using:over:instanceAID:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "performWiredTransaction(using:over:instanceAID:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/performwiredtransaction(using:over:instanceaid:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/provisionCredential(configurationUUID:name:)": {
      "abstract": [
        {
          "text": "Creates a credential in the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "provisionCredential"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "configurationUUID"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4UUIDV",
          "text": "UUID"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "name"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0C0V",
          "text": "Credential"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/provisionCredential(configurationUUID:name:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "provisionCredential(configurationUUID:name:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/provisioncredential(configurationuuid:name:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/secureElementInfo-swift.property": {
      "abstract": [
        {
          "text": "Get the secure element hardware related information.",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "The information returned here will allow the developer to authenticate against the Certification Authority",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "of the Secure Element Hardware.",
          "type": "text"
        }
      ],
      "beta": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "secureElementInfo"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC0aB4InfoV",
          "text": "SecureElementInfo"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/secureElementInfo-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "secureElementInfo",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/secureelementinfo-swift.property"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/startSession()": {
      "abstract": [
        {
          "text": "Requests a session to view, manage, or use credentials in the Secure Element.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "startSession"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/startSession()",
      "kind": "symbol",
      "role": "symbol",
      "title": "startSession()",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/startsession()"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/state-swift.property": {
      "abstract": [
        {
          "text": "The current state of the session.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "state"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC",
          "text": "CredentialSession"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:23SecureElementCredential0C7SessionC5StateO",
          "text": "State"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/state-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "state",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/state-swift.property"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)": {
      "abstract": [
        {
          "text": "Send a wired command Application Protocol Data Unit (APDU) to the credential.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "transceive"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DataV",
          "text": "Data"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DataV",
          "text": "Data"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "transceive(_:)",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/transceive(_:)"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/unownedExecutor": {
      "abstract": [
        {
          "text": "Retrieve the executor for this actor as an optimized, unowned",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "reference.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "unownedExecutor"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sce",
          "text": "UnownedSerialExecutor"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/unownedExecutor",
      "kind": "symbol",
      "role": "symbol",
      "title": "unownedExecutor",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialsession/unownedexecutor"
    },
    "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/Configuration": {
      "abstract": [
        {
          "text": "An object that provides configuration information for a transaction that the client intends to peform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Configuration"
        }
      ],
      "identifier": "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/Configuration",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Configuration"
        }
      ],
      "role": "symbol",
      "title": "CredentialTransaction.Configuration",
      "type": "topic",
      "url": "/documentation/secureelementcredential/credentialtransaction/configuration"
    },
    "doc://com.apple.documentation/documentation/Swift/AsyncStream": {
      "abstract": [
        {
          "text": "An asynchronous sequence generated from a closure that calls a continuation to produce new elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AsyncStream"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/AsyncStream",
      "kind": "symbol",
      "role": "symbol",
      "title": "AsyncStream",
      "type": "topic",
      "url": "/documentation/Swift/AsyncStream"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:SQ": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SQ",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/Swift/Equatable"
    },
    "doc://com.externally.resolved.symbol/s:ScA": {
      "abstract": [
        {
          "text": "Common protocol to which all actors conform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": " : AnyObject, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8SendableP",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ScA",
      "kind": "symbol",
      "role": "symbol",
      "title": "Actor",
      "type": "topic",
      "url": "/documentation/Swift/Actor"
    },
    "doc://com.externally.resolved.symbol/s:s8SendableP": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s8SendableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/Swift/Sendable"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.externally.resolved.symbol/s:ScA",
        "doc://com.externally.resolved.symbol/s:SQ",
        "doc://com.externally.resolved.symbol/s:s8SendableP"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "topicSections": [
    {
      "anchor": "Verifying-eligibility",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/isEligible"
      ],
      "title": "Verifying eligibility"
    },
    {
      "anchor": "Managing-the-credential-session-life-cycle",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/startSession()",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/invalidate()"
      ],
      "title": "Managing the credential session life cycle"
    },
    {
      "anchor": "Accessing-the-session-state",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/state-swift.property",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/State-swift.enum"
      ],
      "title": "Accessing the session state"
    },
    {
      "anchor": "Accessing-credentials",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/listCredentials()",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Credential"
      ],
      "title": "Accessing credentials"
    },
    {
      "anchor": "Acquiring-exclusive-foreground-privileges",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/acquirePresentmentAssertion()",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/PresentmentIntentAssertion"
      ],
      "title": "Acquiring exclusive foreground privileges"
    },
    {
      "anchor": "Handling-session-events",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/eventStream",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Event"
      ],
      "title": "Handling session events"
    },
    {
      "anchor": "Managing-a-credential",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/provisionCredential(configurationUUID:name:)",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/deleteCredential(_:)"
      ],
      "title": "Managing a credential"
    },
    {
      "anchor": "Performing-wired-mode-actions",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performWiredTransaction(using:over:instanceAID:)",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/enterWiredMode(using:)",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/transceive(_:)",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endWiredMode()"
      ],
      "title": "Performing wired mode actions"
    },
    {
      "anchor": "Performing-card-emulation",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performCardEmulationTransactionWithCurrentCredential(over:options:)",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/performTransaction(using:over:options:)",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/CardEmulationOptions",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/endCardEmulation()"
      ],
      "title": "Performing card emulation"
    },
    {
      "anchor": "Using-SwiftUI",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/configuration()",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialTransaction/Configuration"
      ],
      "title": "Using SwiftUI"
    },
    {
      "anchor": "Handling-errors",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/ErrorCode"
      ],
      "title": "Handling errors"
    },
    {
      "anchor": "Working-with-actors",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/unownedExecutor"
      ],
      "title": "Working with actors"
    },
    {
      "anchor": "Comparing-sessions",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/==(_:_:)"
      ],
      "title": "Comparing sessions"
    },
    {
      "anchor": "Infrequently-used-functionality",
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/init()"
      ],
      "title": "Infrequently-used functionality"
    },
    {
      "anchor": "Structures",
      "generated": true,
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/ConnectivityEvent",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/SecureElementInfo-swift.struct"
      ],
      "title": "Structures"
    },
    {
      "anchor": "Instance-Properties",
      "generated": true,
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/secureElementInfo-swift.property"
      ],
      "title": "Instance Properties"
    },
    {
      "anchor": "Enumerations",
      "generated": true,
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/NFCFieldInformation"
      ],
      "title": "Enumerations"
    },
    {
      "anchor": "Default-Implementations",
      "generated": true,
      "identifiers": [
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Actor-Implementations",
        "doc://SecureElementCredential/documentation/SecureElementCredential/CredentialSession/Equatable-Implementations"
      ],
      "title": "Default Implementations"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/secureelementcredential/credentialsession"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
