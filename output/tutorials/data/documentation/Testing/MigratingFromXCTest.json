{
  "abstract": [
    {
      "text": "Migrate an existing test method or test class written using XCTest.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://org.swift.testing/documentation/Testing"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://org.swift.testing/documentation/Testing/MigratingFromXCTest"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift Testing"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Migrating a test from XCTest"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The testing library provides much of the same functionality of XCTest, but uses",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "its own syntax to declare test functions and types. Here, you’ll learn how to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "convert XCTest-based content to use the testing library instead.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Import-the-testing-library",
          "level": 3,
          "text": "Import the testing library",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "XCTest and the testing library are available from different modules. Instead of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "importing the XCTest module, import the Testing module:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "import XCTest"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "import Testing"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "A single source file can contain tests written with XCTest as well as other",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "tests written with the testing library. Import both XCTest and Testing if a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "source file contains mixed test content.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Convert-test-classes",
          "level": 3,
          "text": "Convert test classes",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "XCTest groups related sets of test methods in test classes: classes that inherit",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "from the ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctestcase",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "class provided by the ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " framework. The testing library doesn’t require",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that test functions be instance members of types. Instead, they can be ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "free",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "global",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " functions, or can be ",
              "type": "text"
            },
            {
              "code": "static",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "class",
              "type": "codeVoice"
            },
            {
              "text": " members of a type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you want to group your test functions together, you can do so by placing them",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in a Swift type. The testing library refers to such a type as a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "suite",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ". These",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "types do ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "not",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " need to be classes, and they don’t inherit from ",
              "type": "text"
            },
            {
              "code": "XCTestCase",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To convert a subclass of ",
              "type": "text"
            },
            {
              "code": "XCTestCase",
              "type": "codeVoice"
            },
            {
              "text": " to a suite, remove the ",
              "type": "text"
            },
            {
              "code": "XCTestCase",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "conformance. It’s also generally recommended that a Swift structure or actor be",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "used instead of a class because it allows the Swift compiler to better-enforce",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "concurrency safety:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "class FoodTruckTests: XCTestCase {",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "struct FoodTruckTests {",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about suites and how to declare and customize them, see",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/OrganizingTests",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Convert-setup-and-teardown-functions",
          "level": 3,
          "text": "Convert setup and teardown functions",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In XCTest, code can be scheduled to run before and after a test using the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctest/3856481-setup",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctest/3856482-teardown",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "family of functions. When writing tests using the testing library, implement",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "init()",
              "type": "codeVoice"
            },
            {
              "text": " and/or ",
              "type": "text"
            },
            {
              "code": "deinit",
              "type": "codeVoice"
            },
            {
              "text": " instead:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "class FoodTruckTests: XCTestCase {",
                    "  var batteryLevel: NSNumber!",
                    "  override func setUp() async throws {",
                    "    batteryLevel = 100",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "struct FoodTruckTests {",
                    "  var batteryLevel: NSNumber",
                    "  init() async throws {",
                    "    batteryLevel = 100",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "The use of ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "throws",
              "type": "codeVoice"
            },
            {
              "text": " is optional. If teardown is needed, declare your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "test suite as a class or as an actor rather than as a structure and implement",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "deinit",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "class FoodTruckTests: XCTestCase {",
                    "  var batteryLevel: NSNumber!",
                    "  override func setUp() async throws {",
                    "    batteryLevel = 100",
                    "  }",
                    "  override func tearDown() {",
                    "    batteryLevel = 0 // drain the battery",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "final class FoodTruckTests {",
                    "  var batteryLevel: NSNumber",
                    "  init() async throws {",
                    "    batteryLevel = 100",
                    "  }",
                    "  deinit {",
                    "    batteryLevel = 0 // drain the battery",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "anchor": "Convert-test-methods",
          "level": 3,
          "text": "Convert test methods",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The testing library represents individual tests as functions, similar to how",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "they are represented in XCTest. However, the syntax for declaring a test",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function is different. In XCTest, a test method must be a member of a test class",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and its name must start with ",
              "type": "text"
            },
            {
              "code": "test",
              "type": "codeVoice"
            },
            {
              "text": ". The testing library doesn’t require a test",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function to have any particular name. Instead, it identifies a test function by",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the presence of the ",
              "type": "text"
            },
            {
              "code": "@Test",
              "type": "codeVoice"
            },
            {
              "text": " attribute:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "class FoodTruckTests: XCTestCase {",
                    "  func testEngineWorks() { ... }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "struct FoodTruckTests {",
                    "  @Test func engineWorks() { ... }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "As with XCTest, the testing library allows test functions to be marked ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "throws",
              "type": "codeVoice"
            },
            {
              "text": ", or ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "throws",
              "type": "codeVoice"
            },
            {
              "text": ", and to be isolated to a global actor (for example, by using the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "@MainActor",
              "type": "codeVoice"
            },
            {
              "text": " attribute.)",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "XCTest runs synchronous test methods on the main actor by default, while",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "the testing library runs all test functions on an arbitrary task. If a test",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "function must run on the main thread, isolate it to the main actor with",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "code": "@MainActor",
                  "type": "codeVoice"
                },
                {
                  "text": ", or run the thread-sensitive code inside a call to",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "https://developer.apple.com/documentation/swift/mainactor/run(resulttype:body:)",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about test functions and how to declare and customize them,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "see ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/DefiningTests",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Check-for-expected-values-and-outcomes",
          "level": 3,
          "text": "Check for expected values and outcomes",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "XCTest uses a family of approximately 40 functions to assert test requirements.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "These functions are collectively referred to as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/1500669-xctassert",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The testing library has two replacements, ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/expect(_:_:sourceLocation:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". They both behave similarly to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "XCTAssert()",
              "type": "codeVoice"
            },
            {
              "text": " except that ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " throws an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "error if its condition isn’t met:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testEngineWorks() throws {",
                    "  let engine = FoodTruck.shared.engine",
                    "  XCTAssertNotNil(engine.parts.first)",
                    "  XCTAssertGreaterThan(engine.batteryLevel, 0)",
                    "  try engine.start()",
                    "  XCTAssertTrue(engine.isRunning)",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func engineWorks() throws {",
                    "  let engine = FoodTruck.shared.engine",
                    "  try #require(engine.parts.first != nil)",
                    "  #expect(engine.batteryLevel > 0)",
                    "  try engine.start()",
                    "  #expect(engine.isRunning)",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "anchor": "Check-for-optional-values",
          "level": 3,
          "text": "Check for optional values",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "XCTest also has a function, ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/3380195-xctunwrap",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that tests if an optional value is ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " and throws an error if it is. When",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "using the testing library, you can use ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-6w9oo",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with optional expressions to unwrap them:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testEngineWorks() throws {",
                    "  let engine = FoodTruck.shared.engine",
                    "  let part = try XCTUnwrap(engine.parts.first)",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func engineWorks() throws {",
                    "  let engine = FoodTruck.shared.engine",
                    "  let part = try #require(engine.parts.first)",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "anchor": "Record-issues",
          "level": 3,
          "text": "Record issues",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, XCTest has a function, ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/1500970-xctfail",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that causes a test to fail immediately and unconditionally. This function is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "useful when the syntax of the language prevents the use of an ",
              "type": "text"
            },
            {
              "code": "XCTAssert()",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function. To record an unconditional issue using the testing library, use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/Issue/record(_:sourceLocation:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testEngineWorks() {",
                    "  let engine = FoodTruck.shared.engine",
                    "  guard case .electric = engine else {",
                    "    XCTFail(\"Engine is not electric\")",
                    "    return",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func engineWorks() {",
                    "  let engine = FoodTruck.shared.engine",
                    "  guard case .electric = engine else {",
                    "    Issue.record(\"Engine is not electric\")",
                    "    return",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "The following table includes a list of the various ",
              "type": "text"
            },
            {
              "code": "XCTAssert()",
              "type": "codeVoice"
            },
            {
              "text": " functions and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "their equivalents in the testing library:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "XCTest",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Swift Testing",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssert(x)",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", ",
                      "type": "text"
                    },
                    {
                      "code": "XCTAssertTrue(x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertFalse(x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(!x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertNil(x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x == nil)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertNotNil(x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x != nil)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertEqual(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x == y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertNotEqual(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x != y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertIdentical(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x === y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertNotIdentical(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x !== y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertGreaterThan(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x > y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertGreaterThanOrEqual(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x >= y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertLessThanOrEqual(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x <= y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertLessThan(x, y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(x < y)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertThrowsError(try f())",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(throws: (any Error).self) { try f() }",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertThrowsError(try f()) { error in … }",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "let error = #expect(throws: (any Error).self) { try f() }",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTAssertNoThrow(try f())",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "#expect(throws: Never.self) { try f() }",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "try XCTUnwrap(x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "try #require(x)",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "XCTFail(\"…\")",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "code": "Issue.record(\"…\")",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "inlineContent": [
            {
              "text": "The testing library doesn’t provide an equivalent of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/3551607-xctassertequal",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "To compare two numeric values within a specified accuracy,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use ",
              "type": "text"
            },
            {
              "code": "isApproximatelyEqual()",
              "type": "codeVoice"
            },
            {
              "text": " from ",
              "type": "text"
            },
            {
              "identifier": "https://github.com/apple/swift-numerics",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Continue-or-halt-after-test-failures",
          "level": 3,
          "text": "Continue or halt after test failures",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "An instance of an ",
              "type": "text"
            },
            {
              "code": "XCTestCase",
              "type": "codeVoice"
            },
            {
              "text": " subclass can set its",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctestcase/1496260-continueafterfailure",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property to ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": " to cause a test to stop running after a failure occurs.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "XCTest stops an affected test by throwing an Objective-C exception at the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "time the failure occurs.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "code": "continueAfterFailure",
                  "type": "codeVoice"
                },
                {
                  "text": " isn’t fully supported when using the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "https://github.com/swiftlang/swift-corelibs-xctest",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "library on non-Apple platforms.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "The behavior of an exception thrown through a Swift stack frame is undefined. If",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an exception is thrown through an ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": " Swift function, it typically causes",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the process to terminate abnormally, preventing other tests from running.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The testing library doesn’t use exceptions to stop test functions. Instead, use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " macro, which throws a Swift error on",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "failure:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testTruck() async {",
                    "  continueAfterFailure = false",
                    "  XCTAssertTrue(FoodTruck.shared.isLicensed)",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func truck() throws {",
                    "  try #require(FoodTruck.shared.isLicensed)",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "When using either ",
              "type": "text"
            },
            {
              "code": "continueAfterFailure",
              "type": "codeVoice"
            },
            {
              "text": " or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", other tests will continue to run after",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the failed test method or test function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Validate-asynchronous-behaviors",
          "level": 3,
          "text": "Validate asynchronous behaviors",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "XCTest has a class, ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctestexpectation",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that represents some asynchronous condition. You create an instance of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "this class (or a subclass like ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctkeypathexpectation",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ")",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "using an initializer or a convenience method on ",
              "type": "text"
            },
            {
              "code": "XCTestCase",
              "type": "codeVoice"
            },
            {
              "text": ". When the condition",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "represented by an expectation occurs, the developer ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "fulfills",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " the expectation.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Concurrently, the developer ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "waits for",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " the expectation to be fulfilled using an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance of ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctwaiter",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or using a convenience method on ",
              "type": "text"
            },
            {
              "code": "XCTestCase",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Wherever possible, prefer to use Swift concurrency to validate asynchronous",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "conditions. For example, if it’s necessary to determine the result of an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "asynchronous Swift function, it can be awaited with ",
              "type": "text"
            },
            {
              "code": "await",
              "type": "codeVoice"
            },
            {
              "text": ". For a function that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "takes a completion handler but which doesn’t use ",
              "type": "text"
            },
            {
              "code": "await",
              "type": "codeVoice"
            },
            {
              "text": ", a Swift",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/swift/withcheckedcontinuation(function:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can be used to convert the call into an ",
              "type": "text"
            },
            {
              "code": "async",
              "type": "codeVoice"
            },
            {
              "text": "-compatible one.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Some tests, especially those that test asynchronously-delivered events, cannot",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "be readily converted to use Swift concurrency. The testing library offers",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "functionality called ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "confirmations",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " which can be used to implement these tests.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Instances of ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/Confirmation",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " are created and used within the scope of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "functions ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-5mqz2",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-l3il",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Confirmations function similarly to the expectations API of XCTest, however,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "they don’t block or suspend the caller while waiting for a condition to be",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "fulfilled. Instead, the requirement is expected to be ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "confirmed",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " (the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "equivalent of ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "fulfilling",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " an expectation) before ",
              "type": "text"
            },
            {
              "code": "confirmation()",
              "type": "codeVoice"
            },
            {
              "text": " returns, and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "records an issue otherwise:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testTruckEvents() async {",
                    "  let soldFood = expectation(description: \"…\")",
                    "  FoodTruck.shared.eventHandler = { event in",
                    "    if case .soldFood = event {",
                    "      soldFood.fulfill()",
                    "    }",
                    "  }",
                    "  await Customer().buy(.soup)",
                    "  await fulfillment(of: [soldFood])",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func truckEvents() async {",
                    "  await confirmation(\"…\") { soldFood in",
                    "    FoodTruck.shared.eventHandler = { event in",
                    "      if case .soldFood = event {",
                    "        soldFood()",
                    "      }",
                    "    }",
                    "    await Customer().buy(.soup)",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "By default, ",
              "type": "text"
            },
            {
              "code": "XCTestExpectation",
              "type": "codeVoice"
            },
            {
              "text": " expects to be fulfilled exactly once, and will",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "record an issue in the current test if it is not fulfilled or if it is fulfilled",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "more than once. ",
              "type": "text"
            },
            {
              "code": "Confirmation",
              "type": "codeVoice"
            },
            {
              "text": " behaves the same way and expects to be confirmed",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "exactly once by default. You can configure the number of times an expectation",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "should be fulfilled by setting its ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctestexpectation/2806572-expectedfulfillmentcount",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property, and you can pass a value for the ",
              "type": "text"
            },
            {
              "code": "expectedCount",
              "type": "codeVoice"
            },
            {
              "text": " argument of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-5mqz2",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " for the same",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "purpose.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "code": "XCTestExpectation",
              "type": "codeVoice"
            },
            {
              "text": " has a property, ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctestexpectation/2806575-assertforoverfulfill",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "which when set to ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": " allows an expectation to be fulfilled more times than",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "expected without causing a test failure. When using a confirmation, you can pass",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a range to ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-l3il",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "its expected count to indicate that it must be confirmed ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "at least",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " some number",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of times:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testRegularCustomerOrders() async {",
                    "  let soldFood = expectation(description: \"…\")",
                    "  soldFood.expectedFulfillmentCount = 10",
                    "  soldFood.assertForOverFulfill = false",
                    "  FoodTruck.shared.eventHandler = { event in",
                    "    if case .soldFood = event {",
                    "      soldFood.fulfill()",
                    "    }",
                    "  }",
                    "  for customer in regularCustomers() {",
                    "    await customer.buy(customer.regularOrder)",
                    "  }",
                    "  await fulfillment(of: [soldFood])",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func regularCustomerOrders() async {",
                    "  await confirmation(",
                    "    \"…\",",
                    "    expectedCount: 10...",
                    "  ) { soldFood in",
                    "    FoodTruck.shared.eventHandler = { event in",
                    "      if case .soldFood = event {",
                    "        soldFood()",
                    "      }",
                    "    }",
                    "    for customer in regularCustomers() {",
                    "      await customer.buy(customer.regularOrder)",
                    "    }",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "Any range expression with a lower bound (that is, whose type conforms to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "both ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/swift/rangeexpression",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/swift/sequence",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ")",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can be used with ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-l3il",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You must specify a lower bound for the number of confirmations because, without",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "one, the testing library cannot tell if an issue should be recorded when there",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "have been zero confirmations.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Control-whether-a-test-runs",
          "level": 3,
          "text": "Control whether a test runs",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When using XCTest, the ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/xctskip",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "error type can be thrown to bypass the remainder of a test function. As well,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/3521325-xctskipif",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/3521326-xctskipunless",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "functions can be used to conditionalize the same action. The testing library",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "allows developers to skip a test function or an entire test suite before it",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "starts running using the ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/ConditionTrait",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " trait type. Annotate a test suite or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "test function with an instance of this trait type to control whether it runs:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "class FoodTruckTests: XCTestCase {",
                    "  func testArepasAreTasty() throws {",
                    "    try XCTSkipIf(CashRegister.isEmpty)",
                    "    try XCTSkipUnless(FoodTruck.sells(.arepas))",
                    "    ...",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Suite(.disabled(if: CashRegister.isEmpty))",
                    "struct FoodTruckTests {",
                    "  @Test(.enabled(if: FoodTruck.sells(.arepas)))",
                    "  func arepasAreTasty() {",
                    "    ...",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "anchor": "Annotate-known-issues",
          "level": 3,
          "text": "Annotate known issues",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A test may have a known issue that sometimes or always prevents it from passing.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "When written using XCTest, such tests can call",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/xctest/3727246-xctexpectfailure",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to tell XCTest and its infrastructure that the issue shouldn’t cause the test",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to fail. The testing library has an equivalent function with synchronous and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "asynchronous variants:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:sourceLocation:_:)",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:isolation:sourceLocation:_:)",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "This function can be used to annotate a section of a test as having a known",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "issue:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testGrillWorks() async {",
                    "  XCTExpectFailure(\"Grill is out of fuel\") {",
                    "    try FoodTruck.shared.grill.start()",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func grillWorks() async {",
                    "  withKnownIssue(\"Grill is out of fuel\") {",
                    "    try FoodTruck.shared.grill.start()",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The XCTest function ",
                  "type": "text"
                },
                {
                  "identifier": "https://developer.apple.com/documentation/xctest/3727245-xctexpectfailure",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ",",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "which doesn’t take a closure and which affects the remainder of the test,",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "doesn’t have a direct equivalent in the testing library. To mark an entire",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "test as having a known issue, wrap its body in a call to ",
                  "type": "text"
                },
                {
                  "code": "withKnownIssue()",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "If a test may fail intermittently, the call to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure(_:options:failingBlock:)",
              "type": "codeVoice"
            },
            {
              "text": " can be marked ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "non-strict",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ". When",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "using the testing library, specify that the known issue is ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "intermittent",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instead:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testGrillWorks() async {",
                    "  XCTExpectFailure(",
                    "    \"Grill may need fuel\",",
                    "    options: .nonStrict()",
                    "  ) {",
                    "    try FoodTruck.shared.grill.start()",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func grillWorks() async {",
                    "  withKnownIssue(",
                    "    \"Grill may need fuel\", ",
                    "    isIntermittent: true",
                    "  ) {",
                    "    try FoodTruck.shared.grill.start()",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        },
        {
          "inlineContent": [
            {
              "text": "Additional options can be specified when calling ",
              "type": "text"
            },
            {
              "code": "XCTExpectFailure()",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "https://developer.apple.com/documentation/xctest/xctexpectedfailure/options/3726085-isenabled",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "can be set to ",
                      "type": "text"
                    },
                    {
                      "code": "false",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to skip known-issue matching (for instance, if a",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "particular issue only occurs under certain conditions)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "https://developer.apple.com/documentation/xctest/xctexpectedfailure/options/3726086-issuematcher",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "can be set to a closure to allow marking only certain issues as known and to",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "allow other issues to be recorded as test failures",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The testing library includes overloads of ",
              "type": "text"
            },
            {
              "code": "withKnownIssue()",
              "type": "codeVoice"
            },
            {
              "text": " that take",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "additional arguments with similar behavior:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:sourceLocation:_:when:matching:)",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:isolation:sourceLocation:_:when:matching:)",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "To conditionally enable known-issue matching or to match only certain kinds",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of issues:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "columns": [
            {
              "content": [
                {
                  "code": [
                    "// Before",
                    "func testGrillWorks() async {",
                    "  let options = XCTExpectedFailure.Options()",
                    "  options.isEnabled = FoodTruck.shared.hasGrill",
                    "  options.issueMatcher = { issue in",
                    "    issue.type == thrownError",
                    "  }",
                    "  XCTExpectFailure(",
                    "    \"Grill is out of fuel\",",
                    "    options: options",
                    "  ) {",
                    "    try FoodTruck.shared.grill.start()",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            },
            {
              "content": [
                {
                  "code": [
                    "// After",
                    "@Test func grillWorks() async {",
                    "  withKnownIssue(\"Grill is out of fuel\") {",
                    "    try FoodTruck.shared.grill.start()",
                    "  } when: {",
                    "    FoodTruck.shared.hasGrill",
                    "  } matching: { issue in",
                    "    issue.error != nil ",
                    "  }",
                    "  ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "size": 1
            }
          ],
          "numberOfColumns": 2,
          "type": "row"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://org.swift.testing/documentation/Testing": {
      "abstract": [
        {
          "text": "Create and run tests for your Swift packages and Xcode projects.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing",
      "kind": "symbol",
      "role": "collection",
      "title": "Swift Testing",
      "type": "topic",
      "url": "/documentation/testing"
    },
    "doc://org.swift.testing/documentation/Testing/ConditionTrait": {
      "abstract": [
        {
          "text": "A type that defines a condition which must be satisfied for a test to be",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "enabled.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ConditionTrait"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/ConditionTrait",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ConditionTrait"
        }
      ],
      "role": "symbol",
      "title": "ConditionTrait",
      "type": "topic",
      "url": "/documentation/testing/conditiontrait"
    },
    "doc://org.swift.testing/documentation/Testing/Confirmation": {
      "abstract": [
        {
          "text": "A type that can be used to confirm that an event occurs zero or more times.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Confirmation"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Confirmation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Confirmation"
        }
      ],
      "role": "symbol",
      "title": "Confirmation",
      "type": "topic",
      "url": "/documentation/testing/confirmation"
    },
    "doc://org.swift.testing/documentation/Testing/DefiningTests": {
      "abstract": [
        {
          "text": "Define a test function to validate that code is working correctly.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/DefiningTests",
      "kind": "article",
      "role": "article",
      "title": "Defining test functions",
      "type": "topic",
      "url": "/documentation/testing/definingtests"
    },
    "doc://org.swift.testing/documentation/Testing/Expectations": {
      "abstract": [
        {
          "text": "Check for expected values, outcomes, and asynchronous events in tests.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Expectations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Expectations and confirmations",
      "type": "topic",
      "url": "/documentation/testing/expectations"
    },
    "doc://org.swift.testing/documentation/Testing/Issue/record(_:sourceLocation:)": {
      "abstract": [
        {
          "text": "Record an issue when a running test fails unexpectedly.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "record"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing5IssueV",
          "text": "Issue"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Issue/record(_:sourceLocation:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "record(_:sourceLocation:)",
      "type": "topic",
      "url": "/documentation/testing/issue/record(_:sourcelocation:)"
    },
    "doc://org.swift.testing/documentation/Testing/OrganizingTests": {
      "abstract": [
        {
          "text": "Organize tests into test suites.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/OrganizingTests",
      "kind": "article",
      "role": "article",
      "title": "Organizing test functions with suite types",
      "type": "topic",
      "url": "/documentation/testing/organizingtests"
    },
    "doc://org.swift.testing/documentation/Testing/Suite(_:_:)": {
      "abstract": [
        {
          "text": "Declare a test suite.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Suite"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing10SuiteTraitP",
          "text": "SuiteTrait"
        },
        {
          "kind": "text",
          "text": "...)"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Suite(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "Suite(_:_:)",
      "type": "topic",
      "url": "/documentation/testing/suite(_:_:)"
    },
    "doc://org.swift.testing/documentation/Testing/Test": {
      "abstract": [
        {
          "text": "A type representing a test or suite.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Test"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Test",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Test"
        }
      ],
      "role": "symbol",
      "title": "Test",
      "type": "topic",
      "url": "/documentation/testing/test"
    },
    "doc://org.swift.testing/documentation/Testing/Test(_:_:)": {
      "abstract": [
        {
          "text": "Declare a test.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Test"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing9TestTraitP",
          "text": "TestTrait"
        },
        {
          "kind": "text",
          "text": "...)"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Test(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "Test(_:_:)",
      "type": "topic",
      "url": "/documentation/testing/test(_:_:)"
    },
    "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-5mqz2": {
      "abstract": [
        {
          "text": "Confirm that some event occurs during the invocation of a function.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "confirmation"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "expectedCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing12ConfirmationV",
          "text": "Confirmation"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "keyword",
          "text": "sending "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-5mqz2",
      "kind": "symbol",
      "role": "symbol",
      "title": "confirmation(_:expectedCount:isolation:sourceLocation:_:)",
      "type": "topic",
      "url": "/documentation/testing/confirmation(_:expectedcount:isolation:sourcelocation:_:)-5mqz2"
    },
    "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-l3il": {
      "abstract": [
        {
          "text": "Confirm that some event occurs during the invocation of a function.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "confirmation"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "expectedCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SX",
          "text": "RangeExpression"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": "> & "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8SendableP",
          "text": "Sendable"
        },
        {
          "kind": "text",
          "text": " & "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST",
          "text": "Sequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing12ConfirmationV",
          "text": "Confirmation"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "keyword",
          "text": "sending "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-l3il",
      "kind": "symbol",
      "role": "symbol",
      "title": "confirmation(_:expectedCount:isolation:sourceLocation:_:)",
      "type": "topic",
      "url": "/documentation/testing/confirmation(_:expectedcount:isolation:sourcelocation:_:)-l3il"
    },
    "doc://org.swift.testing/documentation/Testing/expect(_:_:sourceLocation:)": {
      "abstract": [
        {
          "text": "Check that an expectation has passed after a condition has been evaluated.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "expect"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/expect(_:_:sourceLocation:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "expect(_:_:sourceLocation:)",
      "type": "topic",
      "url": "/documentation/testing/expect(_:_:sourcelocation:)"
    },
    "doc://org.swift.testing/documentation/Testing/known-issues": {
      "abstract": [
        {
          "text": "Highlight known issues when running tests.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/known-issues",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Known issues",
      "type": "topic",
      "url": "/documentation/testing/known-issues"
    },
    "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q": {
      "abstract": [
        {
          "text": "Check that an expectation has passed after a condition has been evaluated",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and throw an error if it failed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "require"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q",
      "kind": "symbol",
      "role": "symbol",
      "title": "require(_:_:sourceLocation:)",
      "type": "topic",
      "url": "/documentation/testing/require(_:_:sourcelocation:)-5l63q"
    },
    "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-6w9oo": {
      "abstract": [
        {
          "text": "Unwrap an optional value or, if it is ",
          "type": "text"
        },
        {
          "code": "nil",
          "type": "codeVoice"
        },
        {
          "text": ", fail and throw an error.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "require"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-6w9oo",
      "kind": "symbol",
      "role": "symbol",
      "title": "require(_:_:sourceLocation:)",
      "type": "topic",
      "url": "/documentation/testing/require(_:_:sourcelocation:)-6w9oo"
    },
    "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:isolation:sourceLocation:_:)": {
      "abstract": [
        {
          "text": "Invoke a function that has a known issue that is expected to occur during",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "its execution.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withKnownIssue"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "isIntermittent"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:isolation:sourceLocation:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withKnownIssue(_:isIntermittent:isolation:sourceLocation:_:)",
      "type": "topic",
      "url": "/documentation/testing/withknownissue(_:isintermittent:isolation:sourcelocation:_:)"
    },
    "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:isolation:sourceLocation:_:when:matching:)": {
      "abstract": [
        {
          "text": "Invoke a function that has a known issue that is expected to occur during",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "its execution.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withKnownIssue"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "isIntermittent"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "when"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "matching"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing17KnownIssueMatchera",
          "text": "KnownIssueMatcher"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:isolation:sourceLocation:_:when:matching:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withKnownIssue(_:isIntermittent:isolation:sourceLocation:_:when:matching:)",
      "type": "topic",
      "url": "/documentation/testing/withknownissue(_:isintermittent:isolation:sourcelocation:_:when:matching:)"
    },
    "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:sourceLocation:_:)": {
      "abstract": [
        {
          "text": "Invoke a function that has a known issue that is expected to occur during",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "its execution.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withKnownIssue"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "isIntermittent"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", () "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:sourceLocation:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withKnownIssue(_:isIntermittent:sourceLocation:_:)",
      "type": "topic",
      "url": "/documentation/testing/withknownissue(_:isintermittent:sourcelocation:_:)"
    },
    "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:sourceLocation:_:when:matching:)": {
      "abstract": [
        {
          "text": "Invoke a function that has a known issue that is expected to occur during",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "its execution.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withKnownIssue"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "isIntermittent"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", () "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "when"
        },
        {
          "kind": "text",
          "text": ": () -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "matching"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing17KnownIssueMatchera",
          "text": "KnownIssueMatcher"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/withKnownIssue(_:isIntermittent:sourceLocation:_:when:matching:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withKnownIssue(_:isIntermittent:sourceLocation:_:when:matching:)",
      "type": "topic",
      "url": "/documentation/testing/withknownissue(_:isintermittent:sourcelocation:_:when:matching:)"
    },
    "https://developer.apple.com/documentation/swift/mainactor/run(resulttype:body:)": {
      "identifier": "https://developer.apple.com/documentation/swift/mainactor/run(resulttype:body:)",
      "title": "MainActor.run(resultType:body:)",
      "titleInlineContent": [
        {
          "code": "MainActor.run(resultType:body:)",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/swift/mainactor/run(resulttype:body:)"
    },
    "https://developer.apple.com/documentation/swift/rangeexpression": {
      "identifier": "https://developer.apple.com/documentation/swift/rangeexpression",
      "title": "RangeExpression<Int>",
      "titleInlineContent": [
        {
          "code": "RangeExpression<Int>",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/swift/rangeexpression"
    },
    "https://developer.apple.com/documentation/swift/sequence": {
      "identifier": "https://developer.apple.com/documentation/swift/sequence",
      "title": "Sequence<Int>",
      "titleInlineContent": [
        {
          "code": "Sequence<Int>",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/swift/sequence"
    },
    "https://developer.apple.com/documentation/swift/withcheckedcontinuation(function:_:)": {
      "identifier": "https://developer.apple.com/documentation/swift/withcheckedcontinuation(function:_:)",
      "title": "continuation",
      "titleInlineContent": [
        {
          "text": "continuation",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/swift/withcheckedcontinuation(function:_:)"
    },
    "https://developer.apple.com/documentation/xctest": {
      "identifier": "https://developer.apple.com/documentation/xctest",
      "title": "XCTest",
      "titleInlineContent": [
        {
          "text": "XCTest",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest"
    },
    "https://developer.apple.com/documentation/xctest/1500669-xctassert": {
      "identifier": "https://developer.apple.com/documentation/xctest/1500669-xctassert",
      "title": "XCTAssert()",
      "titleInlineContent": [
        {
          "code": "XCTAssert()",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/1500669-xctassert"
    },
    "https://developer.apple.com/documentation/xctest/1500970-xctfail": {
      "identifier": "https://developer.apple.com/documentation/xctest/1500970-xctfail",
      "title": "XCTFail()",
      "titleInlineContent": [
        {
          "code": "XCTFail()",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/1500970-xctfail"
    },
    "https://developer.apple.com/documentation/xctest/3380195-xctunwrap": {
      "identifier": "https://developer.apple.com/documentation/xctest/3380195-xctunwrap",
      "title": "XCTUnwrap()",
      "titleInlineContent": [
        {
          "code": "XCTUnwrap()",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/3380195-xctunwrap"
    },
    "https://developer.apple.com/documentation/xctest/3521325-xctskipif": {
      "identifier": "https://developer.apple.com/documentation/xctest/3521325-xctskipif",
      "title": "XCTSkipIf()",
      "titleInlineContent": [
        {
          "code": "XCTSkipIf()",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/3521325-xctskipif"
    },
    "https://developer.apple.com/documentation/xctest/3521326-xctskipunless": {
      "identifier": "https://developer.apple.com/documentation/xctest/3521326-xctskipunless",
      "title": "XCTSkipUnless()",
      "titleInlineContent": [
        {
          "code": "XCTSkipUnless()",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/3521326-xctskipunless"
    },
    "https://developer.apple.com/documentation/xctest/3551607-xctassertequal": {
      "identifier": "https://developer.apple.com/documentation/xctest/3551607-xctassertequal",
      "title": "XCTAssertEqual(_:_:accuracy:_:file:line:)",
      "titleInlineContent": [
        {
          "code": "XCTAssertEqual(_:_:accuracy:_:file:line:)",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/3551607-xctassertequal"
    },
    "https://developer.apple.com/documentation/xctest/3727245-xctexpectfailure": {
      "identifier": "https://developer.apple.com/documentation/xctest/3727245-xctexpectfailure",
      "title": "XCTExpectFailure(_:options:)",
      "titleInlineContent": [
        {
          "code": "XCTExpectFailure(_:options:)",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/3727245-xctexpectfailure"
    },
    "https://developer.apple.com/documentation/xctest/3727246-xctexpectfailure": {
      "identifier": "https://developer.apple.com/documentation/xctest/3727246-xctexpectfailure",
      "title": "XCTExpectFailure(_:options:failingBlock:)",
      "titleInlineContent": [
        {
          "code": "XCTExpectFailure(_:options:failingBlock:)",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/3727246-xctexpectfailure"
    },
    "https://developer.apple.com/documentation/xctest/xctest/3856481-setup": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctest/3856481-setup",
      "title": "setUp()",
      "titleInlineContent": [
        {
          "code": "setUp()",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctest/3856481-setup"
    },
    "https://developer.apple.com/documentation/xctest/xctest/3856482-teardown": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctest/3856482-teardown",
      "title": "tearDown()",
      "titleInlineContent": [
        {
          "code": "tearDown()",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctest/3856482-teardown"
    },
    "https://developer.apple.com/documentation/xctest/xctestcase": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctestcase",
      "title": "XCTestCase",
      "titleInlineContent": [
        {
          "code": "XCTestCase",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctestcase"
    },
    "https://developer.apple.com/documentation/xctest/xctestcase/1496260-continueafterfailure": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctestcase/1496260-continueafterfailure",
      "title": "continueAfterFailure",
      "titleInlineContent": [
        {
          "code": "continueAfterFailure",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctestcase/1496260-continueafterfailure"
    },
    "https://developer.apple.com/documentation/xctest/xctestexpectation": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctestexpectation",
      "title": "XCTestExpectation",
      "titleInlineContent": [
        {
          "code": "XCTestExpectation",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctestexpectation"
    },
    "https://developer.apple.com/documentation/xctest/xctestexpectation/2806572-expectedfulfillmentcount": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctestexpectation/2806572-expectedfulfillmentcount",
      "title": "expectedFulfillmentCount",
      "titleInlineContent": [
        {
          "code": "expectedFulfillmentCount",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctestexpectation/2806572-expectedfulfillmentcount"
    },
    "https://developer.apple.com/documentation/xctest/xctestexpectation/2806575-assertforoverfulfill": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctestexpectation/2806575-assertforoverfulfill",
      "title": "assertForOverFulfill",
      "titleInlineContent": [
        {
          "code": "assertForOverFulfill",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctestexpectation/2806575-assertforoverfulfill"
    },
    "https://developer.apple.com/documentation/xctest/xctexpectedfailure/options/3726085-isenabled": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctexpectedfailure/options/3726085-isenabled",
      "title": "isEnabled",
      "titleInlineContent": [
        {
          "code": "isEnabled",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctexpectedfailure/options/3726085-isenabled"
    },
    "https://developer.apple.com/documentation/xctest/xctexpectedfailure/options/3726086-issuematcher": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctexpectedfailure/options/3726086-issuematcher",
      "title": "issueMatcher",
      "titleInlineContent": [
        {
          "code": "issueMatcher",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctexpectedfailure/options/3726086-issuematcher"
    },
    "https://developer.apple.com/documentation/xctest/xctkeypathexpectation": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctkeypathexpectation",
      "title": "XCTKeyPathExpectation",
      "titleInlineContent": [
        {
          "code": "XCTKeyPathExpectation",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctkeypathexpectation"
    },
    "https://developer.apple.com/documentation/xctest/xctskip": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctskip",
      "title": "XCTSkip",
      "titleInlineContent": [
        {
          "code": "XCTSkip",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctskip"
    },
    "https://developer.apple.com/documentation/xctest/xctwaiter": {
      "identifier": "https://developer.apple.com/documentation/xctest/xctwaiter",
      "title": "XCTWaiter",
      "titleInlineContent": [
        {
          "code": "XCTWaiter",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/xctest/xctwaiter"
    },
    "https://github.com/apple/swift-numerics": {
      "identifier": "https://github.com/apple/swift-numerics",
      "title": "swift-numerics",
      "titleInlineContent": [
        {
          "text": "swift-numerics",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-numerics"
    },
    "https://github.com/swiftlang/swift-corelibs-xctest": {
      "identifier": "https://github.com/swiftlang/swift-corelibs-xctest",
      "title": "swift-corelibs-xctest",
      "titleInlineContent": [
        {
          "text": "swift-corelibs-xctest",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/swiftlang/swift-corelibs-xctest"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Related-Documentation",
      "identifiers": [
        "doc://org.swift.testing/documentation/Testing/DefiningTests",
        "doc://org.swift.testing/documentation/Testing/OrganizingTests",
        "doc://org.swift.testing/documentation/Testing/Expectations",
        "doc://org.swift.testing/documentation/Testing/known-issues"
      ],
      "title": "Related Documentation"
    },
    {
      "anchor": "Essentials",
      "generated": true,
      "identifiers": [
        "doc://org.swift.testing/documentation/Testing/DefiningTests",
        "doc://org.swift.testing/documentation/Testing/OrganizingTests",
        "doc://org.swift.testing/documentation/Testing/Test(_:_:)",
        "doc://org.swift.testing/documentation/Testing/Test",
        "doc://org.swift.testing/documentation/Testing/Suite(_:_:)"
      ],
      "title": "Essentials"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/testing/migratingfromxctest"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
