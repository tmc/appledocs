{
  "abstract": [
    {
      "text": "Ensure that your code handles errors in the way you expect.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://org.swift.testing/documentation/Testing",
        "doc://org.swift.testing/documentation/Testing/Expectations"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://org.swift.testing/documentation/Testing/testing-for-errors-in-swift-code"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift Testing"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Testing for errors in Swift code"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Write tests for your code that validate the conditions in which the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "code throws errors, and the conditions in which it returns without",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "throwing an error. Use overloads of the ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/expect(_:_:sourceLocation:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " macros that check for errors.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Validate-that-your-code-throws-an-expected-error",
          "level": 3,
          "text": "Validate that your code throws an expected error",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Create a test function that ",
              "type": "text"
            },
            {
              "code": "throws",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "try",
              "type": "codeVoice"
            },
            {
              "text": " the code under test.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "If the code throws an error, then your test fails.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To check that the code under test throws a specific error, or to continue a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "longer test function after the code throws an error, pass that error as the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "first argument of ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/expect(throws:_:sourceLocation:performing:)-7du1h",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pass a closure that calls the code under test:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Test func cannotAddToppingToPizzaBeforeStartOfList() {",
            "  var order = PizzaToppings(bases: [.calzone, .deepCrust])",
            "  #expect(throws: PizzaToppings.Error.outOfRange) {",
            "    try order.add(topping: .mozarella, toPizzasIn: -1..<0)",
            "  }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If the closure completes without throwing an error, the testing library",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "records an issue. Other overloads of ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/expect(_:_:sourceLocation:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " let you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "test that the code throws an error of a given type, or matches an arbitrary",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Boolean test. Similar overloads of ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " stop",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "running your test if the code doesn’t throw the expected error.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Validate-that-your-code-doesnt-throw-an-error",
          "level": 3,
          "text": "Validate that your code doesn’t throw an error",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A test function that throws an error fails, which is usually sufficient for",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "testing that the code under test doesn’t throw. If you need to record a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "thrown error as an issue without stopping the test function, compare",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the error to ",
              "type": "text"
            },
            {
              "code": "Never",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Test func canAddToppingToPizzaInPositionZero() throws {",
            "  var order = PizzaToppings(bases: [.thinCrust, .thinCrust])",
            "  #expect(throws: Never.self) {",
            "    try order.add(topping: .caper, toPizzasIn: 0..<1)",
            "  }",
            "  let toppings = try order.toppings(forPizzaAt: 0)",
            "  #expect(toppings == [.caper])",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If the closure throws ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "any",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " error, the testing library records an issue.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "If you need the test to stop when the code throws an error, include the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "code inline in the test function instead of wrapping it in a call to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/expect(throws:_:sourceLocation:performing:)-7du1h",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Inspect-an-error-thrown-by-your-code",
          "level": 2,
          "text": "Inspect an error thrown by your code",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you use ",
              "type": "text"
            },
            {
              "code": "#expect(throws:)",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "#require(throws:)",
              "type": "codeVoice"
            },
            {
              "text": " and the error matches the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "expectation, it is returned to the caller so that you can perform additional",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "validation. If the expectation fails because no error was thrown or an error of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a different type was thrown, ",
              "type": "text"
            },
            {
              "code": "#expect(throws:)",
              "type": "codeVoice"
            },
            {
              "text": " returns ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Test func cannotAddMarshmallowsToPizza() throws {",
            "  let error = #expect(throws: PizzaToppings.InvalidToppingError.self) {",
            "    try Pizza.current.add(topping: .marshmallows)",
            "  }",
            "  #expect(error?.topping == .marshmallows)",
            "  #expect(error?.reason == .dessertToppingOnly)",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If you aren’t sure what type of error will be thrown, pass ",
              "type": "text"
            },
            {
              "code": "(any Error).self",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://org.swift.testing/documentation/Testing": {
      "abstract": [
        {
          "text": "Create and run tests for your Swift packages and Xcode projects.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing",
      "kind": "symbol",
      "role": "collection",
      "title": "Swift Testing",
      "type": "topic",
      "url": "/documentation/testing"
    },
    "doc://org.swift.testing/documentation/Testing/Expectations": {
      "abstract": [
        {
          "text": "Check for expected values, outcomes, and asynchronous events in tests.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Expectations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Expectations and confirmations",
      "type": "topic",
      "url": "/documentation/testing/expectations"
    },
    "doc://org.swift.testing/documentation/Testing/expect(_:_:sourceLocation:)": {
      "abstract": [
        {
          "text": "Check that an expectation has passed after a condition has been evaluated.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "expect"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/expect(_:_:sourceLocation:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "expect(_:_:sourceLocation:)",
      "type": "topic",
      "url": "/documentation/testing/expect(_:_:sourcelocation:)"
    },
    "doc://org.swift.testing/documentation/Testing/expect(_:sourceLocation:performing:throws:)": {
      "abstract": [
        {
          "text": "Check that an expression always throws an error matching some condition.",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "expect"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "performing"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": ": (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        },
        {
          "kind": "text",
          "text": ")?"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/expect(_:sourceLocation:performing:throws:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "expect(_:sourceLocation:performing:throws:)",
      "type": "topic",
      "url": "/documentation/testing/expect(_:sourcelocation:performing:throws:)"
    },
    "doc://org.swift.testing/documentation/Testing/expect(throws:_:sourceLocation:performing:)-1hfms": {
      "abstract": [
        {
          "text": "Check that an expression always throws an error of a given type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "expect"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ".Type, "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "performing"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/expect(throws:_:sourceLocation:performing:)-1hfms",
      "kind": "symbol",
      "role": "symbol",
      "title": "expect(throws:_:sourceLocation:performing:)",
      "type": "topic",
      "url": "/documentation/testing/expect(throws:_:sourcelocation:performing:)-1hfms"
    },
    "doc://org.swift.testing/documentation/Testing/expect(throws:_:sourceLocation:performing:)-7du1h": {
      "abstract": [
        {
          "text": "Check that an expression always throws a specific error.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "expect"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "performing"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/expect(throws:_:sourceLocation:performing:)-7du1h",
      "kind": "symbol",
      "role": "symbol",
      "title": "expect(throws:_:sourceLocation:performing:)",
      "type": "topic",
      "url": "/documentation/testing/expect(throws:_:sourcelocation:performing:)-7du1h"
    },
    "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q": {
      "abstract": [
        {
          "text": "Check that an expectation has passed after a condition has been evaluated",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "and throw an error if it failed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "require"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/require(_:_:sourceLocation:)-5l63q",
      "kind": "symbol",
      "role": "symbol",
      "title": "require(_:_:sourceLocation:)",
      "type": "topic",
      "url": "/documentation/testing/require(_:_:sourcelocation:)-5l63q"
    },
    "doc://org.swift.testing/documentation/Testing/require(_:sourceLocation:performing:throws:)": {
      "abstract": [
        {
          "text": "Check that an expression always throws an error matching some condition, and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "throw an error if it does not.",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "require"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "performing"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": ": (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/require(_:sourceLocation:performing:throws:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "require(_:sourceLocation:performing:throws:)",
      "type": "topic",
      "url": "/documentation/testing/require(_:sourcelocation:performing:throws:)"
    },
    "doc://org.swift.testing/documentation/Testing/require(throws:_:sourceLocation:performing:)-4djuw": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "require"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "performing"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/require(throws:_:sourceLocation:performing:)-4djuw",
      "kind": "symbol",
      "role": "symbol",
      "title": "require(throws:_:sourceLocation:performing:)",
      "type": "topic",
      "url": "/documentation/testing/require(throws:_:sourcelocation:performing:)-4djuw"
    },
    "doc://org.swift.testing/documentation/Testing/require(throws:_:sourceLocation:performing:)-7n34r": {
      "abstract": [
        {
          "text": "Check that an expression always throws an error of a given type, and throw",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "an error if it does not.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "require"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ".Type, "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "performing"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/require(throws:_:sourceLocation:performing:)-7n34r",
      "kind": "symbol",
      "role": "symbol",
      "title": "require(throws:_:sourceLocation:performing:)",
      "type": "topic",
      "url": "/documentation/testing/require(throws:_:sourcelocation:performing:)-7n34r"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Checking-that-errors-are-thrown",
      "generated": true,
      "identifiers": [
        "doc://org.swift.testing/documentation/Testing/expect(throws:_:sourceLocation:performing:)-1hfms",
        "doc://org.swift.testing/documentation/Testing/expect(throws:_:sourceLocation:performing:)-7du1h",
        "doc://org.swift.testing/documentation/Testing/expect(_:sourceLocation:performing:throws:)",
        "doc://org.swift.testing/documentation/Testing/require(throws:_:sourceLocation:performing:)-7n34r",
        "doc://org.swift.testing/documentation/Testing/require(throws:_:sourceLocation:performing:)-4djuw",
        "doc://org.swift.testing/documentation/Testing/require(_:sourceLocation:performing:throws:)"
      ],
      "title": "Checking that errors are thrown"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/testing/testing-for-errors-in-swift-code"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
