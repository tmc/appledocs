{
  "abstract": [
    {
      "text": "Specify different input parameters to generate multiple test cases from a test function.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://org.swift.testing/documentation/Testing"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://org.swift.testing/documentation/Testing/ParameterizedTesting"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Swift Testing"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Implementing parameterized tests"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Some tests need to be run over many different inputs. For instance, a test might",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "need to validate all cases of an enumeration. The testing library lets",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "developers specify one or more collections to iterate over during testing, with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the elements of those collections being forwarded to a test function. An",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "invocation of a test function with a particular set of argument values is called",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a test ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "case",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "By default, the test cases of a test function run in parallel with each",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "other. For more information about test parallelization, see",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/Parallelization",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Parameterize-over-an-array-of-values",
          "level": 3,
          "text": "Parameterize over an array of values",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "It is very common to want to run a test ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "n",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " times over an array containing the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "values that should be tested. Consider the following test function:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum Food {",
            "  case burger, iceCream, burrito, noodleBowl, kebab",
            "}",
            "",
            "@Test(\"All foods available\")",
            "func foodsAvailable() async throws {",
            "  for food: Food in [.burger, .iceCream, .burrito, .noodleBowl, .kebab] {",
            "    let foodTruck = FoodTruck(selling: food)",
            "    #expect(await foodTruck.cook(food))",
            "  }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If this test function fails for one of the values in the array, it may be",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "unclear which value failed. Instead, the test function can be ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "parameterized",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "over",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " the various inputs:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum Food {",
            "  case burger, iceCream, burrito, noodleBowl, kebab",
            "}",
            "",
            "@Test(\"All foods available\", arguments: [Food.burger, .iceCream, .burrito, .noodleBowl, .kebab])",
            "func foodAvailable(_ food: Food) async throws {",
            "  let foodTruck = FoodTruck(selling: food)",
            "  #expect(await foodTruck.cook(food))",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When passing a collection to the ",
              "type": "text"
            },
            {
              "code": "@Test",
              "type": "codeVoice"
            },
            {
              "text": " attribute for parameterization, the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "testing library passes each element in the collection, one at a time, to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "test function as its first (and only) argument. Then, if the test fails for one",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or more inputs, the corresponding diagnostics can clearly indicate which inputs",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to examine.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Parameterize-over-the-cases-of-an-enumeration",
          "level": 3,
          "text": "Parameterize over the cases of an enumeration",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The previous example includes a hard-coded list of ",
              "type": "text"
            },
            {
              "code": "Food",
              "type": "codeVoice"
            },
            {
              "text": " cases to test. If ",
              "type": "text"
            },
            {
              "code": "Food",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "is an enumeration that conforms to ",
              "type": "text"
            },
            {
              "code": "CaseIterable",
              "type": "codeVoice"
            },
            {
              "text": ", you can instead write:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "enum Food: CaseIterable {",
            "  case burger, iceCream, burrito, noodleBowl, kebab",
            "}",
            "",
            "@Test(\"All foods available\", arguments: Food.allCases)",
            "func foodAvailable(_ food: Food) async throws {",
            "  let foodTruck = FoodTruck(selling: food)",
            "  #expect(await foodTruck.cook(food))",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "This way, if a new case is added to the ",
              "type": "text"
            },
            {
              "code": "Food",
              "type": "codeVoice"
            },
            {
              "text": " enumeration, it’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "automatically tested by this function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Parameterize-over-a-range-of-integers",
          "level": 3,
          "text": "Parameterize over a range of integers",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "It is possible to parameterize a test function over a closed range of integers:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Test(\"Can make large orders\", arguments: 1 ... 100)",
            "func makeLargeOrder(count: Int) async throws {",
            "  let foodTruck = FoodTruck(selling: .burger)",
            "  #expect(await foodTruck.cook(.burger, quantity: count))",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Very large ranges such as ",
                  "type": "text"
                },
                {
                  "code": "0 ..< .max",
                  "type": "codeVoice"
                },
                {
                  "text": " may take an excessive amount of",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "time to test, or may never complete due to resource constraints.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Test-with-more-than-one-collection",
          "level": 3,
          "text": "Test with more than one collection",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "It’s possible to test more than one collection. Consider the following test",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Test(\"Can make large orders\", arguments: Food.allCases, 1 ... 100)",
            "func makeLargeOrder(of food: Food, count: Int) async throws {",
            "  let foodTruck = FoodTruck(selling: food)",
            "  #expect(await foodTruck.cook(food, quantity: count))",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Elements from the first collection are passed as the first argument to the test",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function, elements from the second collection are passed as the second argument,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and so forth.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Assuming there are five cases in the ",
              "type": "text"
            },
            {
              "code": "Food",
              "type": "codeVoice"
            },
            {
              "text": " enumeration, this test function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "will, when run, be invoked 500 times (5 x 100) with every possible combination",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of food and order size. These combinations are referred to as the collections’",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Cartesian product.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To avoid the combinatoric semantics shown above, use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/documentation/swift/zip(_:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Test(\"Can make large orders\", arguments: zip(Food.allCases, 1 ... 100))",
            "func makeLargeOrder(of food: Food, count: Int) async throws {",
            "  let foodTruck = FoodTruck(selling: food)",
            "  #expect(await foodTruck.cook(food, quantity: count))",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The zipped sequence will be “destructured” into two arguments automatically,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "then passed to the test function for evaluation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This revised test function is invoked once for each tuple in the zipped",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "sequence, for a total of five invocations instead of 500 invocations. In other",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "words, this test function is passed the inputs ",
              "type": "text"
            },
            {
              "code": "(.burger, 1)",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "(.iceCream, 2)",
              "type": "codeVoice"
            },
            {
              "text": ", …, ",
              "type": "text"
            },
            {
              "code": "(.kebab, 5)",
              "type": "codeVoice"
            },
            {
              "text": " instead of ",
              "type": "text"
            },
            {
              "code": "(.burger, 1)",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "(.burger, 2)",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "(.burger, 3)",
              "type": "codeVoice"
            },
            {
              "text": ", …, ",
              "type": "text"
            },
            {
              "code": "(.kebab, 99)",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "(.kebab, 100)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Run-selected-test-cases",
          "level": 3,
          "text": "Run selected test cases",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If a parameterized test meets certain requirements, the testing library allows",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "people to run specific test cases it contains. This can be useful when a test",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "has many cases but only some are failing since it enables re-running and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "debugging the failing cases in isolation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To support running selected test cases, it must be possible to deterministically",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "match the test case’s arguments. When someone attempts to run selected test cases",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of a parameterized test function, the testing library evaluates each argument of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the tests’ cases for conformance to one of several known protocols, and if all",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "arguments of a test case conform to one of those protocols, that test case can",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "be run selectively. The following lists the known protocols, in precedence order",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(highest to lowest):",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://org.swift.testing/documentation/Testing/CustomTestArgumentEncodable",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "RawRepresentable",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", where ",
                      "type": "text"
                    },
                    {
                      "code": "RawValue",
                      "type": "codeVoice"
                    },
                    {
                      "text": " conforms to ",
                      "type": "text"
                    },
                    {
                      "code": "Encodable",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "Encodable",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "Identifiable",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", where ",
                      "type": "text"
                    },
                    {
                      "code": "ID",
                      "type": "codeVoice"
                    },
                    {
                      "text": " conforms to ",
                      "type": "text"
                    },
                    {
                      "code": "Encodable",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "orderedList"
        },
        {
          "inlineContent": [
            {
              "text": "If any argument of a test case doesn’t meet one of the above requirements, then",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the overall test case cannot be run selectively.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://org.swift.testing/documentation/Testing": {
      "abstract": [
        {
          "text": "Create and run tests for your Swift packages and Xcode projects.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing",
      "kind": "symbol",
      "role": "collection",
      "title": "Swift Testing",
      "type": "topic",
      "url": "/documentation/testing"
    },
    "doc://org.swift.testing/documentation/Testing/CustomTestArgumentEncodable": {
      "abstract": [
        {
          "text": "A protocol for customizing how arguments passed to parameterized tests are",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "encoded, which is used to match against when running specific arguments.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomTestArgumentEncodable"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/CustomTestArgumentEncodable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomTestArgumentEncodable"
        }
      ],
      "role": "symbol",
      "title": "CustomTestArgumentEncodable",
      "type": "topic",
      "url": "/documentation/testing/customtestargumentencodable"
    },
    "doc://org.swift.testing/documentation/Testing/Parallelization": {
      "abstract": [
        {
          "text": "Control whether tests run serially or in parallel.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Parallelization",
      "kind": "article",
      "role": "article",
      "title": "Running tests serially or in parallel",
      "type": "topic",
      "url": "/documentation/testing/parallelization"
    },
    "doc://org.swift.testing/documentation/Testing/Test": {
      "abstract": [
        {
          "text": "A type representing a test or suite.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Test"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Test",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Test"
        }
      ],
      "role": "symbol",
      "title": "Test",
      "type": "topic",
      "url": "/documentation/testing/test"
    },
    "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:)-3rzok": {
      "abstract": [
        {
          "text": "Declare a test parameterized over two zipped collections of values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Test"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "C1"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "C2"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing9TestTraitP",
          "text": "TestTrait"
        },
        {
          "kind": "text",
          "text": "..., "
        },
        {
          "kind": "externalParam",
          "text": "arguments"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s12Zip2SequenceV",
          "text": "Zip2Sequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "C1"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "C2"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:)-3rzok",
      "kind": "symbol",
      "role": "symbol",
      "title": "Test(_:_:arguments:)",
      "type": "topic",
      "url": "/documentation/testing/test(_:_:arguments:)-3rzok"
    },
    "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:)-8kn7a": {
      "abstract": [
        {
          "text": "Declare a test parameterized over a collection of values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Test"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing9TestTraitP",
          "text": "TestTrait"
        },
        {
          "kind": "text",
          "text": "..., "
        },
        {
          "kind": "externalParam",
          "text": "arguments"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:)-8kn7a",
      "kind": "symbol",
      "role": "symbol",
      "title": "Test(_:_:arguments:)",
      "type": "topic",
      "url": "/documentation/testing/test(_:_:arguments:)-8kn7a"
    },
    "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:_:)": {
      "abstract": [
        {
          "text": "Declare a test parameterized over two collections of values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Test"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "C1"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "C2"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "?, any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing9TestTraitP",
          "text": "TestTrait"
        },
        {
          "kind": "text",
          "text": "..., "
        },
        {
          "kind": "externalParam",
          "text": "arguments"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "C1"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "C2"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "Test(_:_:arguments:_:)",
      "type": "topic",
      "url": "/documentation/testing/test(_:_:arguments:_:)"
    },
    "doc://org.swift.testing/documentation/Testing/Test/Case": {
      "abstract": [
        {
          "text": "A single test case from a parameterized ",
          "type": "text"
        },
        {
          "identifier": "doc://org.swift.testing/documentation/Testing/Test",
          "isActive": true,
          "type": "reference"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Case"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Test/Case",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Case"
        }
      ],
      "role": "symbol",
      "title": "Test.Case",
      "type": "topic",
      "url": "/documentation/testing/test/case"
    },
    "https://developer.apple.com/documentation/swift/zip(_:_:)": {
      "identifier": "https://developer.apple.com/documentation/swift/zip(_:_:)",
      "title": "zip()",
      "titleInlineContent": [
        {
          "code": "zip()",
          "type": "codeVoice"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/documentation/swift/zip(_:_:)"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Test-parameterization",
      "generated": true,
      "identifiers": [
        "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:)-8kn7a",
        "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:_:)",
        "doc://org.swift.testing/documentation/Testing/Test(_:_:arguments:)-3rzok",
        "doc://org.swift.testing/documentation/Testing/CustomTestArgumentEncodable",
        "doc://org.swift.testing/documentation/Testing/Test/Case"
      ],
      "title": "Test parameterization"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/testing/parameterizedtesting"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
