{
  "abstract": [
    {
      "text": "Confirm that some event occurs during the invocation of a function.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "added",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    },
    "minor": {
      "change": "added",
      "platform": "Xcode",
      "versions": [
        "16.2",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://org.swift.testing/documentation/Testing"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-l3il"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:7Testing12confirmation_13expectedCount9isolation14sourceLocation_xAA7CommentVSg_q_ScA_pSgYiAA06SourceG0VxAA12ConfirmationVYaKYTXEtYaKSXR_s8SendableR_STR_Si5BoundSXRt_Si7ElementSTRt_r0_lF",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "confirmation"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "genericParameter",
        "text": "R"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7Testing7CommentV",
        "text": "Comment"
      },
      {
        "kind": "text",
        "text": "?, "
      },
      {
        "kind": "externalParam",
        "text": "expectedCount"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "keyword",
        "text": "some"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:SX",
        "text": "RangeExpression"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Si",
        "text": "Int"
      },
      {
        "kind": "text",
        "text": "> & "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:s8SendableP",
        "text": "Sendable"
      },
      {
        "kind": "text",
        "text": " & "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:ST",
        "text": "Sequence"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Si",
        "text": "Int"
      },
      {
        "kind": "text",
        "text": ">, "
      },
      {
        "kind": "externalParam",
        "text": "isolation"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "keyword",
        "text": "isolated"
      },
      {
        "kind": "text",
        "text": " (any "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:ScA",
        "text": "Actor"
      },
      {
        "kind": "text",
        "text": ")?, "
      },
      {
        "kind": "externalParam",
        "text": "sourceLocation"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7Testing14SourceLocationV",
        "text": "SourceLocation"
      },
      {
        "kind": "text",
        "text": ", ("
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7Testing12ConfirmationV",
        "text": "Confirmation"
      },
      {
        "kind": "text",
        "text": ") "
      },
      {
        "kind": "keyword",
        "text": "async"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "keyword",
        "text": "throws"
      },
      {
        "kind": "text",
        "text": " -> "
      },
      {
        "kind": "keyword",
        "text": "sending "
      },
      {
        "kind": "typeIdentifier",
        "text": "R"
      },
      {
        "kind": "text",
        "text": ") "
      },
      {
        "kind": "keyword",
        "text": "async"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "keyword",
        "text": "rethrows"
      },
      {
        "kind": "text",
        "text": " -> "
      },
      {
        "kind": "typeIdentifier",
        "text": "R"
      }
    ],
    "modules": [
      {
        "name": "Swift Testing"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "6.1",
        "name": "Swift"
      },
      {
        "beta": false,
        "introducedAt": "16.3",
        "name": "Xcode"
      }
    ],
    "role": "symbol",
    "roleHeading": "Function",
    "symbolKind": "func",
    "title": "confirmation(_:expectedCount:isolation:sourceLocation:_:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "confirmation"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "R"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "comment"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/Comment",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7Testing7CommentV",
              "text": "Comment"
            },
            {
              "kind": "text",
              "text": "? = nil, "
            },
            {
              "kind": "externalParam",
              "text": "expectedCount"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "keyword",
              "text": "some"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:SX",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SX",
              "text": "RangeExpression"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Si",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Si",
              "text": "Int"
            },
            {
              "kind": "text",
              "text": "> & "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:s8SendableP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s8SendableP",
              "text": "Sendable"
            },
            {
              "kind": "text",
              "text": " & "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ST",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ST",
              "text": "Sequence"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Si",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Si",
              "text": "Int"
            },
            {
              "kind": "text",
              "text": ">, "
            },
            {
              "kind": "externalParam",
              "text": "isolation"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "keyword",
              "text": "isolated"
            },
            {
              "kind": "text",
              "text": " (any "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ScA",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ScA",
              "text": "Actor"
            },
            {
              "kind": "text",
              "text": ")? = #isolation, "
            },
            {
              "kind": "externalParam",
              "text": "sourceLocation"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/SourceLocation",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7Testing14SourceLocationV",
              "text": "SourceLocation"
            },
            {
              "kind": "text",
              "text": " = #_sourceLocation, "
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "body"
            },
            {
              "kind": "text",
              "text": ": ("
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/Confirmation",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7Testing12ConfirmationV",
              "text": "Confirmation"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "throws"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "kind": "keyword",
              "text": "sending "
            },
            {
              "kind": "typeIdentifier",
              "text": "R"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "rethrows"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "kind": "typeIdentifier",
              "text": "R"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "An optional comment to apply to any issues generated by this",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "function.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "comment"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A range of integers indicating the number of times the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "expected event should occur when ",
                  "type": "text"
                },
                {
                  "code": "body",
                  "type": "codeVoice"
                },
                {
                  "text": " is invoked.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "expectedCount"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The actor to which ",
                  "type": "text"
                },
                {
                  "code": "body",
                  "type": "codeVoice"
                },
                {
                  "text": " is isolated, if any.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "isolation"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The source location to which any recorded issues should",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "be attributed.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "sourceLocation"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The function to invoke.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "body"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return-value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Whatever is returned by ",
              "type": "text"
            },
            {
              "code": "body",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "kind": "mentions",
      "mentions": [
        "doc://org.swift.testing/documentation/Testing/MigratingFromXCTest",
        "doc://org.swift.testing/documentation/Testing/testing-asynchronous-code"
      ]
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Whatever is thrown by ",
                  "type": "text"
                },
                {
                  "code": "body",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Throws",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "Use confirmations to check that an event occurs while a test is running in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "complex scenarios where ",
              "type": "text"
            },
            {
              "code": "#expect()",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "#require()",
              "type": "codeVoice"
            },
            {
              "text": " are insufficient. For",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example, a confirmation may be useful when an expected event occurs:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In a context that cannot be awaited by the calling function such as an",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "event handler or delegate callback;",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "More than once, or never; or",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "As a callback that is invoked as part of a larger operation.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "To use a confirmation, pass a closure containing the work to be performed.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The testing library will then pass an instance of ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/Confirmation",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "closure. Every time the event in question occurs, the closure should call",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the confirmation:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let minBuns = 5",
            "let maxBuns = 10",
            "await confirmation(",
            "  \"Baked between \\(minBuns) and \\(maxBuns) buns\",",
            "  expectedCount: minBuns ... maxBuns",
            ") { bunBaked in",
            "  foodTruck.eventHandler = { event in",
            "    if event == .baked(.cinnamonBun) {",
            "      bunBaked()",
            "    }",
            "  }",
            "  await foodTruck.bakeTray(of: .cinnamonBun)",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When the closure returns, the testing library checks if the confirmation’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "preconditions have been met, and records an issue if they have not.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If an exact count is expected, use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-5mqz2",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instead.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:ST": {
      "abstract": [
        {
          "text": "A type that provides sequential, iterated access to its elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ST",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sequence",
      "type": "topic",
      "url": "/documentation/Swift/Sequence"
    },
    "doc://com.externally.resolved.symbol/s:SX": {
      "abstract": [
        {
          "text": "A type that can be used to slice a collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RangeExpression"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SX5BoundQa",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SX",
      "kind": "symbol",
      "role": "symbol",
      "title": "RangeExpression",
      "type": "topic",
      "url": "/documentation/Swift/RangeExpression"
    },
    "doc://com.externally.resolved.symbol/s:ScA": {
      "abstract": [
        {
          "text": "Common protocol to which all actors conform.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": " : AnyObject, "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8SendableP",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ScA",
      "kind": "symbol",
      "role": "symbol",
      "title": "Actor",
      "type": "topic",
      "url": "/documentation/Swift/Actor"
    },
    "doc://com.externally.resolved.symbol/s:Si": {
      "abstract": [
        {
          "text": "A signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Si",
      "kind": "symbol",
      "role": "symbol",
      "title": "Int",
      "type": "topic",
      "url": "/documentation/Swift/Int"
    },
    "doc://com.externally.resolved.symbol/s:s8SendableP": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s8SendableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/Swift/Sendable"
    },
    "doc://org.swift.testing/documentation/Testing": {
      "abstract": [
        {
          "text": "Create and run tests for your Swift packages and Xcode projects.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing",
      "kind": "symbol",
      "role": "collection",
      "title": "Swift Testing",
      "type": "topic",
      "url": "/documentation/testing"
    },
    "doc://org.swift.testing/documentation/Testing/Comment": {
      "abstract": [
        {
          "text": "A type representing a comment related to a test.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Comment"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Comment",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Comment"
        }
      ],
      "role": "symbol",
      "title": "Comment",
      "type": "topic",
      "url": "/documentation/testing/comment"
    },
    "doc://org.swift.testing/documentation/Testing/Confirmation": {
      "abstract": [
        {
          "text": "A type that can be used to confirm that an event occurs zero or more times.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Confirmation"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/Confirmation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Confirmation"
        }
      ],
      "role": "symbol",
      "title": "Confirmation",
      "type": "topic",
      "url": "/documentation/testing/confirmation"
    },
    "doc://org.swift.testing/documentation/Testing/MigratingFromXCTest": {
      "abstract": [
        {
          "text": "Migrate an existing test method or test class written using XCTest.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/MigratingFromXCTest",
      "kind": "article",
      "role": "article",
      "title": "Migrating a test from XCTest",
      "type": "topic",
      "url": "/documentation/testing/migratingfromxctest"
    },
    "doc://org.swift.testing/documentation/Testing/SourceLocation": {
      "abstract": [
        {
          "text": "A type representing a location in source code.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SourceLocation"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/SourceLocation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SourceLocation"
        }
      ],
      "role": "symbol",
      "title": "SourceLocation",
      "type": "topic",
      "url": "/documentation/testing/sourcelocation"
    },
    "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-5mqz2": {
      "abstract": [
        {
          "text": "Confirm that some event occurs during the invocation of a function.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "confirmation"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "expectedCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing12ConfirmationV",
          "text": "Confirmation"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "keyword",
          "text": "sending "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-5mqz2",
      "kind": "symbol",
      "role": "symbol",
      "title": "confirmation(_:expectedCount:isolation:sourceLocation:_:)",
      "type": "topic",
      "url": "/documentation/testing/confirmation(_:expectedcount:isolation:sourcelocation:_:)-5mqz2"
    },
    "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-l3il": {
      "abstract": [
        {
          "text": "Confirm that some event occurs during the invocation of a function.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "confirmation"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing7CommentV",
          "text": "Comment"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "expectedCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SX",
          "text": "RangeExpression"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": "> & "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8SendableP",
          "text": "Sendable"
        },
        {
          "kind": "text",
          "text": " & "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST",
          "text": "Sequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "sourceLocation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing14SourceLocationV",
          "text": "SourceLocation"
        },
        {
          "kind": "text",
          "text": ", ("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Testing12ConfirmationV",
          "text": "Confirmation"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "keyword",
          "text": "sending "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-l3il",
      "kind": "symbol",
      "role": "symbol",
      "title": "confirmation(_:expectedCount:isolation:sourceLocation:_:)",
      "type": "topic",
      "url": "/documentation/testing/confirmation(_:expectedcount:isolation:sourcelocation:_:)-l3il"
    },
    "doc://org.swift.testing/documentation/Testing/testing-asynchronous-code": {
      "abstract": [
        {
          "text": "Validate whether your code causes expected events to happen.",
          "type": "text"
        }
      ],
      "identifier": "doc://org.swift.testing/documentation/Testing/testing-asynchronous-code",
      "kind": "article",
      "role": "article",
      "title": "Testing asynchronous code",
      "type": "topic",
      "url": "/documentation/testing/testing-asynchronous-code"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Confirming-that-asynchronous-events-occur",
      "generated": true,
      "identifiers": [
        "doc://org.swift.testing/documentation/Testing/testing-asynchronous-code",
        "doc://org.swift.testing/documentation/Testing/confirmation(_:expectedCount:isolation:sourceLocation:_:)-5mqz2",
        "doc://org.swift.testing/documentation/Testing/Confirmation"
      ],
      "title": "Confirming that asynchronous events occur"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/testing/confirmation(_:expectedcount:isolation:sourcelocation:_:)-l3il"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
