{
  "abstract": [
    {
      "text": "An atomic value.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Synchronization"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Synchronization/Atomic"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:15Synchronization6AtomicV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Atomic"
      }
    ],
    "modules": [
      {
        "name": "Synchronization"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "Atomic"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "11.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "Atomic"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Atomic"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Value"
            },
            {
              "kind": "text",
              "text": "> "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "Value"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:15Synchronization19AtomicRepresentableP",
              "text": "AtomicRepresentable"
            }
          ]
        }
      ],
      "kind": "declarations"
    }
  ],
  "references": {
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Sendable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/swift/sendable"
    },
    "doc://com.apple.Swift/documentation/Synchronization": {
      "abstract": [
        {
          "text": "Build synchronization constructs using low-level, primitive operations.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization",
      "kind": "symbol",
      "role": "collection",
      "title": "Synchronization",
      "type": "topic",
      "url": "/documentation/synchronization"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic": {
      "abstract": [
        {
          "text": "An atomic value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Atomic"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Atomic"
        }
      ],
      "role": "symbol",
      "title": "Atomic",
      "type": "topic",
      "url": "/documentation/synchronization/atomic"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-1k1sq": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-1k1sq",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-1k1sq"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-34u14": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-34u14",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-34u14"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-39vk1": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-39vk1",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-39vk1"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-4dpjd": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-4dpjd",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-4dpjd"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-4ocr0": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-4ocr0",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-4ocr0"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-6rhji": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-6rhji",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-6rhji"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-7ws8q": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-7ws8q",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-7ws8q"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-8cc78": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-8cc78",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-8cc78"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-8xoe3": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-8xoe3",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-8xoe3"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-90njk": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-90njk",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-90njk"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-97ilu": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-97ilu",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-97ilu"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-vm4c": {
      "abstract": [
        {
          "text": "Perform an atomic add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "add"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-vm4c",
      "kind": "symbol",
      "role": "symbol",
      "title": "add(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/add(_:ordering:)-vm4c"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1baj3": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1baj3",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-1baj3"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1gzwl": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1gzwl",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-1gzwl"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1yz1m": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1yz1m",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-1yz1m"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-3zt46": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-3zt46",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-3zt46"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-4db7m": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-4db7m",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-4db7m"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-56lhq": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-56lhq",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-56lhq"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5iaoz": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5iaoz",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-5iaoz"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5m0jk": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5m0jk",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-5m0jk"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5mhgj": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5mhgj",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-5mhgj"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-6mxdg": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-6mxdg",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-6mxdg"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-8ilt7": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-8ilt7",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-8ilt7"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-l1a3": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-l1a3",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-l1a3"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-206dk": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-206dk",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-206dk"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-39r9q": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-39r9q",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-39r9q"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4ozz5": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4ozz5",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-4ozz5"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4q8ef": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4q8ef",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-4q8ef"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4y864": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4y864",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-4y864"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-5574x": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-5574x",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-5574x"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-6fz7a": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-6fz7a",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-6fz7a"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-6zz2p": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-6zz2p",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-6zz2p"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-72403": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-72403",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-72403"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-84e8q": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-84e8q",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-84e8q"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-9191v": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-9191v",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-9191v"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-aa7f": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-aa7f",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-aa7f"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-271x9": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-271x9",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-271x9"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-2vrf": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-2vrf",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-2vrf"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-33l7y": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-33l7y",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-33l7y"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-4umey": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-4umey",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-4umey"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5df6p": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5df6p",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-5df6p"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5vpxh": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5vpxh",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-5vpxh"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5zfc": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5zfc",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-5zfc"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-8t1qf": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-8t1qf",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-8t1qf"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-9l5qb": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-9l5qb",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-9l5qb"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-9xi4f": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-9xi4f",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-9xi4f"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-m4nt": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-m4nt",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-m4nt"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-sf4i": {
      "abstract": [
        {
          "text": "Perform an atomic bitwise XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bitwiseXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-sf4i",
      "kind": "symbol",
      "role": "symbol",
      "title": "bitwiseXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-sf4i"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-33pf3": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic128BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-33pf3",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-33pf3"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-6rsfl": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic64BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-6rsfl",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-6rsfl"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-8uimm": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic32BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-8uimm",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-8uimm"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-9bh60": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic8BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-9bh60",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-9bh60"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-s52j": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic16BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-s52j",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-s52j"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-5obt4": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified success/failure memory orderings.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic16BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-5obt4",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-5obt4"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-7msfy": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified success/failure memory orderings.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic64BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-7msfy",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-7msfy"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-82j0l": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified success/failure memory orderings.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic128BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-82j0l",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-82j0l"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-8d36a": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified success/failure memory orderings.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic8BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-8d36a",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-8d36a"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-cve0": {
      "abstract": [
        {
          "text": "Perform an atomic compare and exchange operation on the current value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified success/failure memory orderings.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic32BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-cve0",
      "kind": "symbol",
      "role": "symbol",
      "title": "compareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-cve0"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-5n6sy": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": " and returns the original",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic16BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-5n6sy",
      "kind": "symbol",
      "role": "symbol",
      "title": "exchange(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/exchange(_:ordering:)-5n6sy"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-8ip0d": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": " and returns the original",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic8BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-8ip0d",
      "kind": "symbol",
      "role": "symbol",
      "title": "exchange(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/exchange(_:ordering:)-8ip0d"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-9kb4s": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": " and returns the original",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic128BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-9kb4s",
      "kind": "symbol",
      "role": "symbol",
      "title": "exchange(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/exchange(_:ordering:)-9kb4s"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-9y5j8": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": " and returns the original",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic32BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-9y5j8",
      "kind": "symbol",
      "role": "symbol",
      "title": "exchange(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/exchange(_:ordering:)-9y5j8"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-ycta": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": " and returns the original",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic64BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "exchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-ycta",
      "kind": "symbol",
      "role": "symbol",
      "title": "exchange(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/exchange(_:ordering:)-ycta"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/init(_:)": {
      "abstract": [
        {
          "text": "Initializes a value of this atomic with the given initial value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/init(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/init(_:)"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-2u27y": {
      "abstract": [
        {
          "text": "Atomically loads and returns the current value, applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic128BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "load"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-2u27y",
      "kind": "symbol",
      "role": "symbol",
      "title": "load(ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/load(ordering:)-2u27y"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-2v8gp": {
      "abstract": [
        {
          "text": "Atomically loads and returns the current value, applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic8BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "load"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-2v8gp",
      "kind": "symbol",
      "role": "symbol",
      "title": "load(ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/load(ordering:)-2v8gp"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-3u18o": {
      "abstract": [
        {
          "text": "Atomically loads and returns the current value, applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic16BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "load"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-3u18o",
      "kind": "symbol",
      "role": "symbol",
      "title": "load(ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/load(ordering:)-3u18o"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-4mv5b": {
      "abstract": [
        {
          "text": "Atomically loads and returns the current value, applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic64BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "load"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-4mv5b",
      "kind": "symbol",
      "role": "symbol",
      "title": "load(ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/load(ordering:)-4mv5b"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-8ufx2": {
      "abstract": [
        {
          "text": "Atomically loads and returns the current value, applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic32BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "load"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-8ufx2",
      "kind": "symbol",
      "role": "symbol",
      "title": "load(ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/load(ordering:)-8ufx2"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalAnd(_:ordering:)": {
      "abstract": [
        {
          "text": "Perform an atomic logical AND operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Bool",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "logicalAnd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalAnd(_:ordering:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "logicalAnd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/logicaland(_:ordering:)"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalOr(_:ordering:)": {
      "abstract": [
        {
          "text": "Perform an atomic logical OR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Bool",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "logicalOr"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalOr(_:ordering:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "logicalOr(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/logicalor(_:ordering:)"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalXor(_:ordering:)": {
      "abstract": [
        {
          "text": "Perform an atomic logical XOR operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Bool",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "logicalXor"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalXor(_:ordering:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "logicalXor(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/logicalxor(_:ordering:)"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-1l8lv": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-1l8lv",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-1l8lv"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-32cin": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-32cin",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-32cin"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-4e4mn": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-4e4mn",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-4e4mn"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-4rq6h": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-4rq6h",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-4rq6h"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-5qqv7": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-5qqv7",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-5qqv7"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-681q1": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-681q1",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-681q1"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7kusb": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7kusb",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-7kusb"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7qnkd": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7qnkd",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-7qnkd"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7z7ub": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7z7ub",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-7z7ub"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-81jab": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-81jab",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-81jab"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-957na": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-957na",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-957na"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-xy7u": {
      "abstract": [
        {
          "text": "Perform an atomic maximum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-xy7u",
      "kind": "symbol",
      "role": "symbol",
      "title": "max(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/max(_:ordering:)-xy7u"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-1uwzs": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-1uwzs",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-1uwzs"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-2l64c": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-2l64c",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-2l64c"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-39r27": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-39r27",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-39r27"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-3tiyt": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-3tiyt",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-3tiyt"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-3tk2x": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-3tk2x",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-3tk2x"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-4b62m": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-4b62m",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-4b62m"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-4wv9d": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-4wv9d",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-4wv9d"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-6bbf1": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-6bbf1",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-6bbf1"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-6ivky": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-6ivky",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-6ivky"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-73283": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-73283",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-73283"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-8k42m": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-8k42m",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-8k42m"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-yogw": {
      "abstract": [
        {
          "text": "Perform an atomic minimum operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-yogw",
      "kind": "symbol",
      "role": "symbol",
      "title": "min(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/min(_:ordering:)-yogw"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-195np": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": ", applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic64BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "store"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization19AtomicStoreOrderingV",
          "text": "AtomicStoreOrdering"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-195np",
      "kind": "symbol",
      "role": "symbol",
      "title": "store(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/store(_:ordering:)-195np"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-22zxw": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": ", applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic16BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "store"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization19AtomicStoreOrderingV",
          "text": "AtomicStoreOrdering"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-22zxw",
      "kind": "symbol",
      "role": "symbol",
      "title": "store(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/store(_:ordering:)-22zxw"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-532ut": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": ", applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic32BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "store"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization19AtomicStoreOrderingV",
          "text": "AtomicStoreOrdering"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-532ut",
      "kind": "symbol",
      "role": "symbol",
      "title": "store(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/store(_:ordering:)-532ut"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-5q2fi": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": ", applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic8BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "store"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization19AtomicStoreOrderingV",
          "text": "AtomicStoreOrdering"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-5q2fi",
      "kind": "symbol",
      "role": "symbol",
      "title": "store(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/store(_:ordering:)-5q2fi"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-97ua7": {
      "abstract": [
        {
          "text": "Atomically sets the current value to ",
          "type": "text"
        },
        {
          "code": "desired",
          "type": "codeVoice"
        },
        {
          "text": ", applying the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic128BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "store"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization19AtomicStoreOrderingV",
          "text": "AtomicStoreOrdering"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-97ua7",
      "kind": "symbol",
      "role": "symbol",
      "title": "store(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/store(_:ordering:)-97ua7"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-1atf4": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-1atf4",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-1atf4"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-1iop7": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-1iop7",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-1iop7"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-2ddui": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-2ddui",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-2ddui"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-2ds2s": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-2ds2s",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-2ds2s"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-3c2nm": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-3c2nm",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-3c2nm"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-47p0x": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-47p0x",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-47p0x"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-5rq0s": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-5rq0s",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-5rq0s"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-65sge": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-65sge",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-65sge"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-6eidf": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-6eidf",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-6eidf"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-7ebxd": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-7ebxd",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-7ebxd"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-9w06o": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-9w06o",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-9w06o"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-pqxe": {
      "abstract": [
        {
          "text": "Perform an atomic subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "subtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-pqxe",
      "kind": "symbol",
      "role": "symbol",
      "title": "subtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/subtract(_:ordering:)-pqxe"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-24bnb": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the memory ordering. This compare-exchange variant is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "allowed to spuriously fail; it is designed to be called in a loop until",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic128BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-24bnb",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-24bnb"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-728eh": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the memory ordering. This compare-exchange variant is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "allowed to spuriously fail; it is designed to be called in a loop until",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic32BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-728eh",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-728eh"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-72wpg": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the memory ordering. This compare-exchange variant is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "allowed to spuriously fail; it is designed to be called in a loop until",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic64BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-72wpg",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-72wpg"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-9w8ty": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the memory ordering. This compare-exchange variant is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "allowed to spuriously fail; it is designed to be called in a loop until",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic16BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-9w8ty",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-9w8ty"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-9xqnl": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the memory ordering. This compare-exchange variant is",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "allowed to spuriously fail; it is designed to be called in a loop until",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic8BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-9xqnl",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-9xqnl"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-2ywaz": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified success/failure memory orderings. This",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "compare-exchange variant is allowed to spuriously fail; it is designed to",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "be called in a loop until it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic128BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-2ywaz",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-2ywaz"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-3p8t6": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified success/failure memory orderings. This",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "compare-exchange variant is allowed to spuriously fail; it is designed to",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "be called in a loop until it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic8BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-3p8t6",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-3p8t6"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-7vtyo": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified success/failure memory orderings. This",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "compare-exchange variant is allowed to spuriously fail; it is designed to",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "be called in a loop until it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic16BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-7vtyo",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-7vtyo"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-9kx2t": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified success/failure memory orderings. This",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "compare-exchange variant is allowed to spuriously fail; it is designed to",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "be called in a loop until it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic32BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-9kx2t",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-9kx2t"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-kfa8": {
      "abstract": [
        {
          "text": "Perform an atomic weak compare and exchange operation on the current",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value, applying the specified success/failure memory orderings. This",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "compare-exchange variant is allowed to spuriously fail; it is designed to",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "be called in a loop until it indicates a successful exchange has happened.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "AtomicRepresentable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Value.AtomicRepresentation",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "_Atomic64BitStorage",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "weakCompareExchange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "expected"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "desired"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "consuming"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "successOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "failureOrdering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization18AtomicLoadOrderingV",
          "text": "AtomicLoadOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (exchanged"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ", original"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-kfa8",
      "kind": "symbol",
      "role": "symbol",
      "title": "weakCompareExchange(expected:desired:successOrdering:failureOrdering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-kfa8"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-1cynr": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-1cynr",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-1cynr"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-35sou": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-35sou",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-35sou"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-3ihte": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-3ihte",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-3ihte"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-3ltc9": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-3ltc9",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-3ltc9"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-4da1i": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-4da1i",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-4da1i"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-7flp6": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-7flp6",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-7flp6"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-8rrye": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-8rrye",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-8rrye"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-8wun9": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-8wun9",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-8wun9"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-9ce27": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-9ce27",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-9ce27"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-bmso": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-bmso",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-bmso"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-u8d5": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-u8d5",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-u8d5"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-ussb": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping add operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingAdd"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-ussb",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingAdd(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-ussb"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-1bgvk": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int16V",
          "text": "Int16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-1bgvk",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-1bgvk"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-3795w": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int64V",
          "text": "Int64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-3795w",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-3795w"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-43111": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s7UInt128V",
          "text": "UInt128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-43111",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-43111"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6g9gv": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6g9gv",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-6g9gv"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6xyiw": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Int8V",
          "text": "Int8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6xyiw",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-6xyiw"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6y8r7": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt32V",
          "text": "UInt32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6y8r7",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-6y8r7"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7136k": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Su",
          "text": "UInt"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7136k",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-7136k"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7203n": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt64",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt64V",
          "text": "UInt64"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7203n",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-7203n"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7k1nk": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int128",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6Int128V",
          "text": "Int128"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7k1nk",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-7k1nk"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-83zzr": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt8",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-83zzr",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-83zzr"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-8o6j2": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "UInt16",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6UInt16V",
          "text": "UInt16"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-8o6j2",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-8o6j2"
    },
    "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-8xrpg": {
      "abstract": [
        {
          "text": "Perform an atomic wrapping subtract operation and return the old and new value,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "applying the specified memory ordering.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Int32",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappingSubtract"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "ordering"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:15Synchronization20AtomicUpdateOrderingV",
          "text": "AtomicUpdateOrdering"
        },
        {
          "kind": "text",
          "text": ") -> (oldValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ", newValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5Int32V",
          "text": "Int32"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-8xrpg",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappingSubtract(_:ordering:)",
      "type": "topic",
      "url": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-8xrpg"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicLazyReference": {
      "abstract": [
        {
          "text": "A lazily initializable atomic strong reference.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicLazyReference"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicLazyReference",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicLazyReference"
        }
      ],
      "role": "symbol",
      "title": "AtomicLazyReference",
      "type": "topic",
      "url": "/documentation/synchronization/atomiclazyreference"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicOptionalRepresentable": {
      "abstract": [
        {
          "text": "An atomic value that also supports atomic operations when wrapped",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in an ",
          "type": "text"
        },
        {
          "code": "Optional",
          "type": "codeVoice"
        },
        {
          "text": ". Atomic optional representable types come with a standalone",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "atomic representation for their optional-wrapped variants.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicOptionalRepresentable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicOptionalRepresentable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicOptionalRepresentable"
        }
      ],
      "role": "symbol",
      "title": "AtomicOptionalRepresentable",
      "type": "topic",
      "url": "/documentation/synchronization/atomicoptionalrepresentable"
    },
    "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable": {
      "abstract": [
        {
          "text": "A type that supports atomic operations through a separate atomic storage",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AtomicRepresentable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AtomicRepresentable"
        }
      ],
      "role": "symbol",
      "title": "AtomicRepresentable",
      "type": "topic",
      "url": "/documentation/synchronization/atomicrepresentable"
    },
    "doc://com.apple.Swift/documentation/Synchronization/WordPair": {
      "abstract": [
        {
          "text": "A pair of two word sized ",
          "type": "text"
        },
        {
          "code": "UInt",
          "type": "codeVoice"
        },
        {
          "text": "s.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Synchronization/WordPair",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "WordPair"
        }
      ],
      "role": "symbol",
      "title": "WordPair",
      "type": "topic",
      "url": "/documentation/synchronization/wordpair"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Sendable"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Atomic-Values",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Synchronization/AtomicLazyReference",
        "doc://com.apple.Swift/documentation/Synchronization/WordPair",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicRepresentable",
        "doc://com.apple.Swift/documentation/Synchronization/AtomicOptionalRepresentable"
      ],
      "title": "Atomic Values"
    }
  ],
  "topicSections": [
    {
      "anchor": "Initializers",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/init(_:)"
      ],
      "title": "Initializers"
    },
    {
      "anchor": "Instance-Methods",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-1k1sq",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-34u14",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-39vk1",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-4dpjd",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-4ocr0",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-6rhji",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-7ws8q",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-8cc78",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-8xoe3",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-90njk",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-97ilu",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/add(_:ordering:)-vm4c",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1baj3",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1gzwl",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-1yz1m",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-3zt46",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-4db7m",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-56lhq",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5iaoz",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5m0jk",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-5mhgj",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-6mxdg",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-8ilt7",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseAnd(_:ordering:)-l1a3",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-206dk",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-39r9q",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4ozz5",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4q8ef",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-4y864",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-5574x",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-6fz7a",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-6zz2p",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-72403",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-84e8q",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-9191v",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseOr(_:ordering:)-aa7f",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-271x9",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-2vrf",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-33l7y",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-4umey",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5df6p",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5vpxh",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-5zfc",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-8t1qf",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-9l5qb",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-9xi4f",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-m4nt",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/bitwiseXor(_:ordering:)-sf4i",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-33pf3",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-6rsfl",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-8uimm",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-9bh60",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:ordering:)-s52j",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-5obt4",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-7msfy",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-82j0l",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-8d36a",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/compareExchange(expected:desired:successOrdering:failureOrdering:)-cve0",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-5n6sy",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-8ip0d",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-9kb4s",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-9y5j8",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/exchange(_:ordering:)-ycta",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-2u27y",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-2v8gp",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-3u18o",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-4mv5b",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/load(ordering:)-8ufx2",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalAnd(_:ordering:)",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalOr(_:ordering:)",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/logicalXor(_:ordering:)",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-1l8lv",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-32cin",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-4e4mn",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-4rq6h",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-5qqv7",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-681q1",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7kusb",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7qnkd",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-7z7ub",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-81jab",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-957na",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/max(_:ordering:)-xy7u",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-1uwzs",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-2l64c",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-39r27",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-3tiyt",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-3tk2x",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-4b62m",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-4wv9d",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-6bbf1",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-6ivky",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-73283",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-8k42m",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/min(_:ordering:)-yogw",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-195np",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-22zxw",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-532ut",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-5q2fi",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/store(_:ordering:)-97ua7",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-1atf4",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-1iop7",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-2ddui",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-2ds2s",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-3c2nm",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-47p0x",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-5rq0s",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-65sge",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-6eidf",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-7ebxd",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-9w06o",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/subtract(_:ordering:)-pqxe",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-24bnb",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-728eh",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-72wpg",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-9w8ty",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:ordering:)-9xqnl",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-2ywaz",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-3p8t6",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-7vtyo",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-9kx2t",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)-kfa8",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-1cynr",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-35sou",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-3ihte",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-3ltc9",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-4da1i",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-7flp6",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-8rrye",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-8wun9",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-9ce27",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-bmso",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-u8d5",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingAdd(_:ordering:)-ussb",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-1bgvk",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-3795w",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-43111",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6g9gv",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6xyiw",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-6y8r7",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7136k",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7203n",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-7k1nk",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-83zzr",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-8o6j2",
        "doc://com.apple.Swift/documentation/Synchronization/Atomic/wrappingSubtract(_:ordering:)-8xrpg"
      ],
      "title": "Instance Methods"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/synchronization/atomic"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
