{
  "abstract": [
    {
      "text": "Write Metal shader functions to implement custom rendering effects.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.RealityKit/documentation/RealityKit",
        "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-materials-and-shaders"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.RealityKit/documentation/RealityKit/modifying-realitykit-rendering-using-custom-materials"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "RealityKit"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Modifying RealityKit rendering using custom materials"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "RealityKit provides several types of materials that render entities using different",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "techniques. Two examples are ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", which renders",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "entities in highly realistic fashion, and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/UnlitMaterial",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", which renders",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "without any shadow or lighting effects. On iOS 15 and later, ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "allows you to write shader functions in Metal to modify how RealityKit renders an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "entity, while still leveraging RealityKit’s built-in shader pipeline.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "For the Metal API documentation for custom material shader functions, see",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "https://developer.apple.com/metal/Metal-RealityKit-APIs.pdf",
                  "isActive": true,
                  "type": "reference"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "Custom materials support two types of custom Metal shader functions: ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "surface shaders",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "geometry modifiers",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ". Surface shaders are responsible for specifying the final",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "attributes of each pixel that RealityKit draws to render the entity. They also support",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an optional geometry modifier, which you can use to manipulate the location of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "model’s vertices, allowing you to dynamically change the size or shape of the entity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In shader programming, the term ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "fragment",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " refers to a one-pixel portion of an entity.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "Fragment shaders",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " run on the GPU and are responsible for rendering those pixel-size",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "chunks. RealityKit’s built-in fragment shader fires once for every one of the entity’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "fragments. In other words, it fires once for every screen pixel potentially affected",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "by rendering that entity. As a result, your surface shader function also fires once",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for every fragment. RealityKit’s fragment shader calls your surface shader, meaning",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that surface shaders are also called once for each of the entity’s fragments.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The other type of Metal shader that RealityKit uses is the ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "vertex shader",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ". Vertex",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "shaders fire once for every vertex in the entity. If you supply a geometry modifier",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "when creating a custom material, RealityKit’s vertex shader calls it. Geometry modifiers",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "fire once for every vertex in the entity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information on writing Metal shaders, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Xcode/Debugging-the-shaders-within-a-draw-command-or-compute-dispatch",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Write-a-surface-shader",
          "level": 3,
          "text": "Write a surface shader",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To use a custom material, first write a surface shader in Metal. Start by adding",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a new file to your Xcode project using the Metal File template. You can use any function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "name you want for your surface shader, but you must prefix your function with the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "[[visible]]",
              "type": "codeVoice"
            },
            {
              "text": " keyword. Your function must have no return value and take a single",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "parameter of type ",
              "type": "text"
            },
            {
              "code": "realitykit::surface_parameters",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following code listing shows an empty surface shader:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "#include <metal_stdlib>",
            "#include <RealityKit/RealityKit.h>",
            "",
            "using namespace metal;",
            "",
            "[[visible]]",
            "void myEmptyShader(realitykit::surface_parameters params)",
            "{",
            "",
            "}"
          ],
          "syntax": "cpp",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The one parameter that RealityKit passes to your surface shader provides access to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "all input from the entity’s material, as well as interpolated versions of all of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the entity’s per-vertex values, such as UV coordinates and vertex colors. When accessed",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "from a surface shader, Metal returns an interpolated version of per-vertex data,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "based on the fragment’s position relative to the three vertices that make up its",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "triangle. The following illustration demonstrates how that interpolation works for",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "vertex colors.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "modifying-realitykit-rendering-using-custom-materials-1",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Specify output using the various ",
              "type": "text"
            },
            {
              "code": "set_",
              "type": "codeVoice"
            },
            {
              "text": " functions on the parameter’s ",
              "type": "text"
            },
            {
              "code": "surface()",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property. For example, to set the base color value for the current fragment, call",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "params.surface().set_base_color()",
              "type": "codeVoice"
            },
            {
              "text": ". The custom material’s lighting model determines",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "which ",
              "type": "text"
            },
            {
              "code": "set_",
              "type": "codeVoice"
            },
            {
              "text": " functions it supports. Your surface shader must call at least one supported",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "set_",
              "type": "codeVoice"
            },
            {
              "text": " function or nothing renders. For a list of which ",
              "type": "text"
            },
            {
              "code": "set_",
              "type": "codeVoice"
            },
            {
              "text": " functions each lighting",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "model supports, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/lightingModel-swift.property",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Here are the accessor methods on ",
              "type": "text"
            },
            {
              "code": "realitykit::surface_parameters",
              "type": "codeVoice"
            },
            {
              "text": ", along with what",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you use them for:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "Contains all constant properties, including the current elapsed time and any custom value specified on the ",
                        "type": "text"
                      },
                      {
                        "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial",
                        "isActive": true,
                        "type": "reference"
                      },
                      {
                        "text": ". It also contains matrices for converting values between different coordinate systems, like converting from world space to model space.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "code": "uniforms()",
                    "type": "codeVoice"
                  }
                ]
              }
            },
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "Contains properties specified on a per-vertex basis, such as a vertex’s position, color, and normal vector. Metal interpolates per-vertex values based on the current fragment’s position relative to the three vertices that make up its triangle.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "code": "geometry()",
                    "type": "codeVoice"
                  }
                ]
              }
            },
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "Provides access to all of the custom material’s UV-mapped image textures.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "code": "textures()",
                    "type": "codeVoice"
                  }
                ]
              }
            },
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "Contains functions to specify and read the fragment’s output values.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "code": "surface()",
                    "type": "codeVoice"
                  }
                ]
              }
            }
          ],
          "type": "termList"
        },
        {
          "inlineContent": [
            {
              "text": "The following surface shader calculates and sets the fragment’s base color based",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "on the ",
              "type": "text"
            },
            {
              "code": "tint",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "color",
              "type": "codeVoice"
            },
            {
              "text": " values from the material’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/BaseColor-swift.struct",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "#include <metal_stdlib>",
            "#include <RealityKit/RealityKit.h>",
            "",
            "using namespace metal;",
            "",
            "constexpr sampler textureSampler(address::clamp_to_edge, filter::bicubic);",
            "",
            "[[visible]]",
            "void mySurfaceShader(realitykit::surface_parameters params)",
            "{",
            "    // Retrieve the base color tint from the entity's material.",
            "    half3 baseColorTint = (half3)params.material_constants().base_color_tint();",
            "",
            "    // Retrieve the entity's texture coordinates.",
            "    float2 uv = params.geometry().uv0();",
            "",
            "    // Flip the texture coordinates y-axis. This is only needed for entities",
            "    // loaded from USDZ or .reality files.",
            "    uv.y = 1.0 - uv.y;",
            "",
            "    // Sample a value from the material's base color texture based on the ",
            "    // flipped UV coordinates.",
            "    auto tex = params.textures();",
            "    half3 color = (half3)tex.base_color().sample(textureSampler, uv).rgb;",
            "",
            "    // Multiply the tint by the sampled value from the texture, and",
            "    // assign the result to the shader's base color property.",
            "    color *= baseColorTint;",
            "    params.surface().set_base_color(color);",
            "}"
          ],
          "syntax": "cpp",
          "type": "codeListing"
        },
        {
          "anchor": "Write-a-geometry-modifier",
          "level": 3,
          "text": "Write a geometry modifier",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you need to modify the vertex positions or other vertex values for your entity,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "write a geometry modifier function. Otherwise, you can create your custom material",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with only a surface shader. To write a geometry modifier, create a new Metal file",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in your Xcode project, or add a new function to the same file that contains your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "surface shader.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "As with surface shaders, you can name your geometry modifier function anything you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "want, but you must prefix it with the ",
              "type": "text"
            },
            {
              "code": "[[visible]]",
              "type": "codeVoice"
            },
            {
              "text": " keyword. A geometry shader must",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "have no return value and take a single parameter of type ",
              "type": "text"
            },
            {
              "code": "realitykit::geometry_parameters",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following code shows an empty geometry modifier.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "#include <metal_stdlib>",
            "#include <RealityKit/RealityKit.h>",
            "using namespace metal;",
            "",
            "[[visible]]",
            "void emptyGeometryModifier(realitykit::geometry_parameters params)",
            "{",
            "}"
          ],
          "syntax": "cpp",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To move vertices before RealityKit renders your entity, call ",
              "type": "text"
            },
            {
              "code": "params.geometry().set_model_position_offset()",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or ",
              "type": "text"
            },
            {
              "code": "params.geometry().set_world_position_offset()",
              "type": "codeVoice"
            },
            {
              "text": " with the amount to offset the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "vertex. Changes made in the geometry modifier only affect how RealityKit renders",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the model; they don’t affect the original entity in the RealityKit scene. For example,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "moving a model to a new location in the geometry modifier won’t affect its location",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for collision detection or other physics calculation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following example implements a simple geometry shader that moves every vertex",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "along the z-axis by an amount calculated from the elapsed time.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "#include <metal_stdlib>",
            "#include <RealityKit/RealityKit.h>",
            "using namespace metal;",
            "",
            "[[visible]]",
            "void simpleGeometryModifier(realitykit::geometry_parameters params)",
            "{",
            "    float3 zOffset = float3(0.0, 0.0, params.uniforms().time() / 50.0);",
            "    params.geometry().set_world_position_offset(zOffset);",
            "}"
          ],
          "syntax": "cpp",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "If your geometry modifier moves any vertices outside of the entity’s",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "bounding box, assign a value to ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ModelComponent/boundsMargin",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " to enlarge",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "the bounding box and prevent RealityKit from incorrectly culling the entity.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "anchor": "Load-the-custom-shaders",
          "level": 3,
          "text": "Load the custom shaders",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To create a custom material for an entity, first load the Metal library that contains",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "your shader functions, then load the functions by name, as the following sample code",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "demonstrates:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Get the Metal Device.",
            "guard let device = MTLCreateSystemDefaultDevice() else {",
            "    fatalError(\"Error creating default metal device.\")",
            "}",
            "",
            "// Get a reference to the Metal library.",
            "let library = device.makeDefaultLibrary()",
            "",
            "// Load a geometry modifier function named myGeometryModifier.",
            "let geometryModifier = CustomMaterial.GeometryModifier(named: \"myGeometryModifier\", ",
            "                                                       in: library)",
            "",
            "// Load a surface shader function named mySurfaceShader.",
            "let surfaceShader = CustomMaterial.SurfaceShader(named: \"mySurfaceShader\", ",
            "                                                 in: library)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Choose-a-lighting-model",
          "level": 3,
          "text": "Choose a lighting model",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Every custom material needs a ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "lighting model",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ", which determines the basic approach",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "RealityKit uses to render an entity with a custom material. The lighting model affects",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "how the entity looks and which output functions your surface shader can use. There",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are three options:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "Lighting Model",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Description",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Supported Shader Outputs",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": ".lit",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Uses physically based rendering (PBR) techniques, but excludes clearcoat rendering.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "All except ",
                      "type": "text"
                    },
                    {
                      "code": "set_clearcoat()",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "set_clearcoat_roughness()",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": ".clearcoat",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Uses PBR techniques, including clearcoat.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "All",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": ".unlit",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Renders without any shading or lighting calculations. The result is similar to using an ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/UnlitMaterial",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Uses ",
                      "type": "text"
                    },
                    {
                      "code": "set_emissive_color()",
                      "type": "codeVoice"
                    },
                    {
                      "text": " only",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "anchor": "Create-and-use-the-custom-material",
          "level": 3,
          "text": "Create and use the custom material",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In your Swift code, create a custom material using your loaded shader functions and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "selected lighting model. To create a custom material from scratch, use ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/init(surfaceShader:geometryModifier:lightingModel:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as the following code demonstrates:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let customMaterial: CustomMaterial",
            "do {",
            "    try customMaterial = CustomMaterial(surfaceShader: surfaceShader,",
            "                                        geometryModifier: geometryModifier,",
            "                                        lightingModel: .lit)",
            "} catch {",
            "    fatalError(error.localizedDescription)",
            "}",
            "",
            "let mesh = MeshResource.generateSphere(radius: 0.5 )",
            "let modelEntity = ModelEntity(mesh: mesh, materials: [customMaterial])"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, you can create a custom material from a model’s existing material.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "When working with entities loaded from USDZ or ",
              "type": "text"
            },
            {
              "code": ".reality",
              "type": "codeVoice"
            },
            {
              "text": " files, this approach preserves",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "all of the material attributes from the original file. The following code demonstrates",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "loading a model and creating a custom material based on the entity’s existing material:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Load a USDZ from the file system.",
            "guard let robot = try? Entity.load(named: \"Robot\") else { ",
            "    return ",
            "}",
            "",
            "// Make sure the entity has a ModelComponent.",
            "guard var modelComponent = robot.components[ModelComponent.self] else { ",
            "    return ",
            "}",
            "",
            "// Loop through the entity's materials and replace the existing material with",
            "// one based on the original material.",
            "guard let customMaterials = try? modelComponent.materials.map({ material -> CustomMaterial in",
            "    let customMaterial = try CustomMaterial(from: material, surfaceShader: surfaceShader)",
            "    return customMaterial",
            "}) else { return}",
            "modelComponent.materials = customMaterials",
            "robot.components[ModelComponent.self] = modelComponent"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can download RealityKit’s custom shader Metal API documentation from ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/metal/Metal-RealityKit-APIs.pdf",
              "isActive": true,
              "overridingTitle": "Custom Shader API",
              "overridingTitleInlineContent": [
                {
                  "text": "Custom",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Shader API",
                  "type": "text"
                }
              ],
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.RealityKit/documentation/RealityKit": {
      "abstract": [
        {
          "text": "Simulate and render 3D content for use in your augmented reality apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit",
      "kind": "symbol",
      "role": "collection",
      "title": "RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial": {
      "abstract": [
        {
          "text": "A material that works with custom Metal shader functions.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomMaterial"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomMaterial"
        }
      ],
      "role": "symbol",
      "title": "CustomMaterial",
      "type": "topic",
      "url": "/documentation/realitykit/custommaterial"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/BaseColor-swift.struct": {
      "abstract": [
        {
          "text": "An object that defines an entity’s base color.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BaseColor"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/BaseColor-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BaseColor"
        }
      ],
      "role": "symbol",
      "title": "CustomMaterial.BaseColor",
      "type": "topic",
      "url": "/documentation/realitykit/custommaterial/basecolor-swift.struct"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/GeometryModifier": {
      "abstract": [
        {
          "text": "The custom material’s optional shader function that can manipulate an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "entity’s vertex data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "GeometryModifier"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/GeometryModifier",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "GeometryModifier"
        }
      ],
      "role": "symbol",
      "title": "CustomMaterial.GeometryModifier",
      "type": "topic",
      "url": "/documentation/realitykit/custommaterial/geometrymodifier"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/Program-swift.class": {
      "abstract": [
        {
          "text": "An object that represents the backing shader compilation required for",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "custom materials.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Program"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/Program-swift.class",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Program"
        }
      ],
      "role": "symbol",
      "title": "CustomMaterial.Program",
      "type": "topic",
      "url": "/documentation/realitykit/custommaterial/program-swift.class"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/Program-swift.class/Descriptor-swift.struct": {
      "abstract": [
        {
          "text": "An object that specifies all parameters necessary to initialize ",
          "type": "text"
        },
        {
          "code": "CustomMaterial",
          "type": "codeVoice"
        },
        {
          "text": " programs",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Descriptor"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/Program-swift.class/Descriptor-swift.struct",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Descriptor"
        }
      ],
      "role": "symbol",
      "title": "CustomMaterial.Program.Descriptor",
      "type": "topic",
      "url": "/documentation/realitykit/custommaterial/program-swift.class/descriptor-swift.struct"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/SurfaceShader": {
      "abstract": [
        {
          "text": "The custom material’s surface shader function.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SurfaceShader"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/SurfaceShader",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SurfaceShader"
        }
      ],
      "role": "symbol",
      "title": "CustomMaterial.SurfaceShader",
      "type": "topic",
      "url": "/documentation/realitykit/custommaterial/surfaceshader"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/init(surfaceShader:geometryModifier:lightingModel:)": {
      "abstract": [
        {
          "text": "Creates a custom material from a lighting model, surface shader, and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "geometry modifier.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "surfaceShader"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation14CustomMaterialV",
          "text": "CustomMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation14CustomMaterialV13SurfaceShaderV",
          "text": "SurfaceShader"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "geometryModifier"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation14CustomMaterialV",
          "text": "CustomMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation14CustomMaterialV16GeometryModifierV",
          "text": "GeometryModifier"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "lightingModel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation14CustomMaterialV",
          "text": "CustomMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation14CustomMaterialV13LightingModelO",
          "text": "LightingModel"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/init(surfaceShader:geometryModifier:lightingModel:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(surfaceShader:geometryModifier:lightingModel:)",
      "type": "topic",
      "url": "/documentation/realitykit/custommaterial/init(surfaceshader:geometrymodifier:lightingmodel:)"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/lightingModel-swift.property": {
      "abstract": [
        {
          "text": "The lighting model that the material uses.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "lightingModel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation14CustomMaterialV",
          "text": "CustomMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation14CustomMaterialV13LightingModelO",
          "text": "LightingModel"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/lightingModel-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "lightingModel",
      "type": "topic",
      "url": "/documentation/realitykit/custommaterial/lightingmodel-swift.property"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CustomShaderStage": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomShaderStage"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CustomShaderStage",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomShaderStage"
        }
      ],
      "role": "symbol",
      "title": "CustomShaderStage",
      "type": "topic",
      "url": "/documentation/realitykit/customshaderstage"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/MaterialFunction": {
      "abstract": [
        {
          "text": "The abstract superclass for objects representing compute functions for RealityKit custom materials .",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MaterialFunction"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/MaterialFunction",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MaterialFunction"
        }
      ],
      "role": "symbol",
      "title": "MaterialFunction",
      "type": "topic",
      "url": "/documentation/realitykit/materialfunction"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ModelComponent/boundsMargin": {
      "abstract": [
        {
          "text": "A margin applied to an entity’s bounding box that determines object",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "visibility.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "boundsMargin"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ModelComponent/boundsMargin",
      "kind": "symbol",
      "role": "symbol",
      "title": "boundsMargin",
      "type": "topic",
      "url": "/documentation/realitykit/modelcomponent/boundsmargin"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial": {
      "abstract": [
        {
          "text": "A material that simulates the appearance of real-world objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PhysicallyBasedMaterial"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PhysicallyBasedMaterial"
        }
      ],
      "role": "symbol",
      "title": "PhysicallyBasedMaterial",
      "type": "topic",
      "url": "/documentation/realitykit/physicallybasedmaterial"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ShaderGraphMaterial"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ShaderGraphMaterial"
        }
      ],
      "role": "symbol",
      "title": "ShaderGraphMaterial",
      "type": "topic",
      "url": "/documentation/realitykit/shadergraphmaterial"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial/FaceCulling-swift.typealias": {
      "abstract": [
        {
          "text": "An alias for the cull mode object that’s appropriate for this material class.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FaceCulling"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial/FaceCulling-swift.typealias",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FaceCulling"
        }
      ],
      "role": "symbol",
      "title": "ShaderGraphMaterial.FaceCulling",
      "type": "topic",
      "url": "/documentation/realitykit/shadergraphmaterial/faceculling-swift.typealias"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial/TriangleFillMode-swift.typealias": {
      "abstract": [
        {
          "text": "An alias for the triangle fill mode object that’s appropriate for this",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "material class.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TriangleFillMode"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial/TriangleFillMode-swift.typealias",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TriangleFillMode"
        }
      ],
      "role": "symbol",
      "title": "ShaderGraphMaterial.TriangleFillMode",
      "type": "topic",
      "url": "/documentation/realitykit/shadergraphmaterial/trianglefillmode-swift.typealias"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/UnlitMaterial": {
      "abstract": [
        {
          "text": "A material that doesn’t respond to lights in the scene.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnlitMaterial"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/UnlitMaterial",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnlitMaterial"
        }
      ],
      "role": "symbol",
      "title": "UnlitMaterial",
      "type": "topic",
      "url": "/documentation/realitykit/unlitmaterial"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-materials-and-shaders": {
      "abstract": [
        {
          "text": "Apply textures to the surface of your scene’s 3D objects to give each object a unique appearance.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-materials-and-shaders",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Materials, textures, and shaders",
      "type": "topic",
      "url": "/documentation/realitykit/scene-content-materials-and-shaders"
    },
    "doc://com.apple.documentation/documentation/Xcode/Debugging-the-shaders-within-a-draw-command-or-compute-dispatch": {
      "abstract": [
        {
          "text": "Identify and fix problematic shaders in your app using the shader debugger.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Xcode/Debugging-the-shaders-within-a-draw-command-or-compute-dispatch",
      "kind": "article",
      "role": "article",
      "title": "Debugging the shaders within a draw command or compute dispatch",
      "type": "topic",
      "url": "/documentation/Xcode/Debugging-the-shaders-within-a-draw-command-or-compute-dispatch"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://developer.apple.com/metal/Metal-RealityKit-APIs.pdf": {
      "identifier": "https://developer.apple.com/metal/Metal-RealityKit-APIs.pdf",
      "title": "the Metal RealityKit APIs PDF.",
      "titleInlineContent": [
        {
          "text": "the Metal RealityKit APIs PDF.",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/metal/Metal-RealityKit-APIs.pdf"
    },
    "modifying-realitykit-rendering-using-custom-materials-1": {
      "alt": "An illustration showing a triangle with three labeled vertices. The top vertex is blue, the lower left vertex is green, and the lower right vertex is red, The interior color of the triangle is a gradient blend between these three colors. An arrow points out a specific fragment that’s closer to the blue and red vertices and is shown to have a purplish color.",
      "identifier": "modifying-realitykit-rendering-using-custom-materials-1",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/fa99b74a62a15d2c3137663a27d7f517/modifying-realitykit-rendering-using-custom-materials-1@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/d25b7405fc60524bd2c4d7d26f3c9547/modifying-realitykit-rendering-using-custom-materials-1~dark@2x.png"
        }
      ]
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Shaders",
      "generated": true,
      "identifiers": [
        "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial",
        "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial/FaceCulling-swift.typealias",
        "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial/TriangleFillMode-swift.typealias",
        "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial",
        "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/SurfaceShader",
        "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/GeometryModifier",
        "doc://com.apple.RealityKit/documentation/RealityKit/MaterialFunction",
        "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/Program-swift.class",
        "doc://com.apple.RealityKit/documentation/RealityKit/CustomMaterial/Program-swift.class/Descriptor-swift.struct",
        "doc://com.apple.RealityKit/documentation/RealityKit/CustomShaderStage"
      ],
      "title": "Shaders"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/realitykit/modifying-realitykit-rendering-using-custom-materials"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
