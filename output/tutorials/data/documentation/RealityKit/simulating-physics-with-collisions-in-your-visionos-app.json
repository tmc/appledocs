{
  "abstract": [
    {
      "text": "Create entities that behave and react like physical objects in a RealityKit view.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.RealityKit/documentation/RealityKit",
        "doc://com.apple.RealityKit/documentation/RealityKit/physics-collision-detection"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.RealityKit/documentation/RealityKit/simulating-physics-with-collisions-in-your-visionos-app"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "images": [
      {
        "identifier": "Simulating-physics-with-collisions-in-your-visionOS-app-PageImage-card.png",
        "type": "card"
      }
    ],
    "modules": [
      {
        "name": "RealityKit"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "1.1",
        "name": "visionOS"
      },
      {
        "beta": false,
        "introducedAt": "15.3",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Simulating physics with collisions in your visionOS app"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "This sample demonstrates how to simulate multiple physical objects that collide",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with each other by creating a volumetric window with sphere entities that each",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "have a collision component and a physics body component.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "identifier": "PhysicsBodies-sample-article-0",
          "type": "video"
        },
        {
          "inlineContent": [
            {
              "text": "The sample also adds a custom component and system that applies an attraction",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "force between the spheres, and gesture support so that a person can move",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the spheres within the volume.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Add-a-volumetric-window-to-your-app",
          "level": 3,
          "text": "Add a volumetric window to your app",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The app starts by creating a scene that includes a window group with a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/WindowStyle/volumetric",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " style so that the spheres behave like physical objects in the environment.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "import SwiftUI",
            "",
            "@main",
            "struct PhysicsBodiesApp: App {",
            "    var body: some Scene {",
            "        WindowGroup {",
            "            MainView()",
            "        }.windowStyle(.volumetric)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Volumetric windows are viewable from all sides and have a constant size in the environment.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "If you want to prioritize visibility from a distance rather than from all sides,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/WindowStyle/plain",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " window style instead.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Plain windows are resizable, which can help people see the contents of a window from a distance, but there’s one optimal viewing angle.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The app’s main view creates the spheres and an invisible containment box that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "keeps the spheres from drifting out of the volume.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var body: some View {",
            "    GeometryReader3D { geometry in",
            "        RealityView { content in",
            "            addSpheres(content)",
            "            content.add(containmentCollisionBox)",
            "        } update: { content in",
            "            let localFrame = geometry.frame(in: .local)",
            "            let sceneFrame = content.convert(localFrame,",
            "                                             from: .local, to: .scene)",
            "",
            "            containmentCollisionBox.update(sceneFrame)",
            "        }.gesture(ForceDragGesture())",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "SwiftUI calls the view’s ",
              "type": "text"
            },
            {
              "code": "update",
              "type": "codeVoice"
            },
            {
              "text": " closure when one of its inputs change,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "such as ",
              "type": "text"
            },
            {
              "code": "geometry",
              "type": "codeVoice"
            },
            {
              "text": " in this example, which is a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/GeometryReader3D",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The closure updates the collision box by passing the view’s current position",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and size in scene coordinates.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "To do this, the closure:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Retrieves the view’s current position and size in SwiftUI coordinates, in points, as a",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/spatial/rect3d",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " instance",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "by calling the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/GeometryProxy3D/frame(in:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "method of the ",
                      "type": "text"
                    },
                    {
                      "code": "geometryReader",
                      "type": "codeVoice"
                    },
                    {
                      "text": " that contains the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Converts the 3D rectangle from points to RealityKit scene coordinates, in meters, by calling the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewContent",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " instance’s",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityCoordinateSpaceConverting/convert(_:from:to:)-3fumk",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " method",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Coordinate values in SwiftUI are typically in the hundreds of points,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "while coordinates in RealityKit often have much smaller values, typically fractions of a meter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The view also adds a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/DragGesture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "so that a person can move a sphere around and make it collide with the other",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "spheres in the volume.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-a-model-entity-with-a-physics-body",
          "level": 3,
          "text": "Create a model entity with a physics body",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The app creates each sphere as a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ModelEntity",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance with a spherical mesh.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let sphereEntity = ModelEntity(",
            "    mesh: MeshResource.generateSphere(radius: sphereRadius),",
            "    materials: [metallicSphereMaterial()]",
            ")"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, you can create an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Entity",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance and add a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ModelComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to it, which is the equivalent of a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ModelEntity",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To customize each sphere’s appearance, the app configures a material.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The app applies a unique material with a random color to each sphere",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "by creating and configuring a new ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "private func metallicSphereMaterial(",
            "    hue: CGFloat = CGFloat.random(in: (0.0)...(1.0))",
            ") -> PhysicallyBasedMaterial {",
            "    var material = PhysicallyBasedMaterial()",
            "",
            "    let color = RealityKit.Material.Color(",
            "        hue: hue,",
            "        saturation: CGFloat.random(in: (0.5)...(1.0)),",
            "        brightness: 0.9,",
            "        alpha: 1.0)",
            "",
            "    material.baseColor = PhysicallyBasedMaterial.BaseColor(tint: color)",
            "    material.metallic = 1.0",
            "    material.roughness = 0.5",
            "    material.clearcoat = 1.0",
            "    material.clearcoatRoughness = 0.1",
            "",
            "    return material",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The app configures each material so that is has a shiny, metallic look. It sets:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/baseColor-swift.property",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " to a random hue within a range of 80-100%.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/metallic-swift.property",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " to ",
                      "type": "text"
                    },
                    {
                      "code": "1.0",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", which makes the material reflective.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/roughness-swift.property",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " of ",
                      "type": "text"
                    },
                    {
                      "code": "0.5",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", a relatively high value, which makes the reflections blurrier.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/clearcoat-swift.property",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " to ",
                      "type": "text"
                    },
                    {
                      "code": "1.0",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", which gives the material white reflections on top of the metallic ones.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/clearcoatRoughness-swift.property",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " to ",
                      "type": "text"
                    },
                    {
                      "code": "0.1",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", a relatively low value, which gives sharp clear coat reflections.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Customizing the attributes of materials, including color, roughness, and reflectiveness,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "adds a realistic appearance to the items in your scene.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Change the visual appearance of the spheres by altering the material,",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "or by applying the plastic, wood, rubber, or glass materials with a ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "and a",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/ShaderGraph/realitykit/Environment-Radiance-(RealityKit)",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "node.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Experiment",
          "style": "experiment",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "To make the spheres interact with the physics system, the app adds",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and  a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicsBodyComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to each sphere’s entity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Create the physics body from the same shape.",
            "let shape = ShapeResource.generateSphere(radius: sphereRadius)",
            "sphereEntity.components.set(CollisionComponent(shapes: [shape]))",
            "",
            "var physics = PhysicsBodyComponent(",
            "    shapes: [shape],",
            "    density: 10_000",
            ")",
            "",
            "// Make each sphere float in the air by turning off gravity.",
            "physics.isAffectedByGravity = false",
            "",
            "// Add the physics component to the sphere.",
            "sphereEntity.components.set(physics)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The collision component includes the entity in the scene’s physics simulation.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The physics body component defines the entity’s physical shape and mass.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "By default, entities with a physics body component react to gravity,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "but the app makes the spheres float in the scene by setting the component’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicsBodyComponent/isAffectedByGravity",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property to ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Add-attraction-forces-between-all-the-spheres-by-creating-a-custom-system",
          "level": 3,
          "text": "Add attraction forces between all the spheres by creating a custom system",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The app simulates forces of attraction between the spheres by defining two types:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "SphereAttractionSystem",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "SphereAttractionComponent",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The app adds each sphere to the system by setting the custom component to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "sphere’s component set.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "sphereEntity.components.set(SphereAttractionComponent())"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The sample’s ",
              "type": "text"
            },
            {
              "code": "SphereAttractionComponent",
              "type": "codeVoice"
            },
            {
              "text": " structure conforms to the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/System",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "protocol by implementing the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/System/init(scene:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " initializer and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/System/update(context:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method it requires.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct SphereAttractionSystem: System {",
            "    let entityQuery: EntityQuery",
            "",
            "    init(scene: RealityKit.Scene) {",
            "        let attractionComponentType = SphereAttractionComponent.self",
            "        entityQuery = EntityQuery(where: .has(attractionComponentType))",
            "    }",
            "",
            "    func update(context: SceneUpdateContext) {",
            "        // ...",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The app simulates an attractive force between each sphere and all the other",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "spheres in the scene in the custom system’s ",
              "type": "text"
            },
            {
              "code": "update()",
              "type": "codeVoice"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func update(context: SceneUpdateContext) {",
            "    let sphereEntities = context.entities(",
            "        matching: entityQuery,",
            "        updatingSystemWhen: .rendering",
            "    )",
            "",
            "    for case let sphere as ModelEntity in sphereEntities {",
            "        var aggregateForce: SIMD3<Float>",
            "",
            "        // Start with a force back to the center.",
            "        let centerForceStrength = Float(0.05)",
            "        let position = sphere.position(relativeTo: nil)",
            "        let distance = length_squared(position)",
            "",
            "        // Set the initial force with the inverse-square law.",
            "        aggregateForce = normalize(position) / distanceSquared",
            "",
            "        // Direct the force back to the center by negating the position vector.",
            "        aggregateForce *= -centerForceStrength",
            "        ",
            "        let neighbors = context.entities(matching: entityQuery,",
            "                                         updatingSystemWhen: .rendering)",
            "",
            "        for neighbor in neighbors where neighbor != sphere {",
            "",
            "            let spherePosition = sphere.position(relativeTo: nil)",
            "            let neighborPosition = neighbor.position(relativeTo: nil)",
            "",
            "            let distance = length(neighborPosition - spherePosition)",
            "",
            "            // Calculate the force from the sphere to the neighbor.",
            "            let forceFactor = Float(0.1)",
            "            let forceVector = normalize(neighborPosition - spherePosition)",
            "            let neighborForce = forceFactor * forceVector / pow(distance, 2)",
            "            aggregateForce += neighborForce",
            "        }",
            "",
            "        // Add the combined force from all the sphere's neighbors.",
            "        sphere.addForce(aggregateForce, relativeTo: nil)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When the app runs, the spheres move towards each other and clump together within the volume.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "identifier": "PhysicsBodies-sample-article-1",
          "type": "video"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about systems, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ecs-systems",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/implementing-systems-for-entities-in-a-scene",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Keep-the-spheres-in-the-volume-by-creating-an-invisible-container-with-physics",
          "level": 3,
          "text": "Keep the spheres in the volume by creating an invisible container with physics",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The app prevents the spheres from moving out of the volume by creating a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "relatively thin box for each of the volume’s six boundaries.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The sample’s ",
              "type": "text"
            },
            {
              "code": "ContainmentCollisionBox",
              "type": "codeVoice"
            },
            {
              "text": " class, which inherits from ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Entity",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "creates the six faces of the containment box in its ",
              "type": "text"
            },
            {
              "code": "update(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func update(_ boundingBox: BoundingBox) {",
            "    // ...",
            "",
            "    // Define the constants for the faces' geometry for convenience.",
            "    let min = boundingBox.min",
            "    let max = boundingBox.max",
            "    let center = boundingBox.center",
            "",
            "    let lHandFace = SIMD3<Float>(x: min.x, y: center.y, z: center.z)",
            "    let rHandFace = SIMD3<Float>(x: max.x, y: center.y, z: center.z)",
            "    let lowerFace = SIMD3<Float>(x: center.x, y: min.y, z: center.z)",
            "    let upperFace = SIMD3<Float>(x: center.x, y: max.y, z: center.z)",
            "    let nearFace = SIMD3<Float>(x: center.x, y: center.y, z: min.z)",
            "    let afarFace = SIMD3<Float>(x: center.x, y: center.y, z: max.z)",
            "",
            "    // Make each box relatively thin.",
            "    let thickness = Float(1E-3)",
            "",
            "    // Configure the size for the left and right faces.",
            "    var size = boundingBox.extents",
            "    size.x = thickness",
            "",
            "    // Create the left face of the collision containment cube.",
            "    var face = Entity.boxWithCollisionPhysics(lHandFace, size)",
            "    addChild(face)",
            "",
            "    // Create the right face of the collision containment cube.",
            "    face = Entity.boxWithCollisionPhysics(rHandFace, size)",
            "    addChild(face)",
            "",
            "    // Configure the size for the top and bottom faces.",
            "    size = boundingBox.extents",
            "    size.y = thickness",
            "",
            "   // ...",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The method creates each face by calling the ",
              "type": "text"
            },
            {
              "code": "boxWithCollisionPhysics(_:_:boxMass:)",
              "type": "codeVoice"
            },
            {
              "text": " method the sample adds to ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Entity",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " in an extension.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "import RealityKit",
            "",
            "/// The default mass for a new box.",
            "private let defaultMass1Kg = Float(1.0)",
            "",
            "extension Entity {",
            "    // ...",
            "    static func boxWithCollisionPhysics(",
            "        _ location: SIMD3<Float>,",
            "        _ boxSize: SIMD3<Float>,",
            "        boxMass: Float = defaultMass1Kg",
            "    ) -> Entity {",
            "        // Create an entity for the box.",
            "        let boxEntity = Entity()",
            "",
            "        // Create the box's shape from the size.",
            "        let boxShape = ShapeResource.generateBox(size: boxSize)",
            "",
            "        // Create a collision component with the box's shape.",
            "        let collisionComponent = CollisionComponent(",
            "            shapes: [boxShape],",
            "            isStatic: true)",
            "",
            "        // Create a physics body component with the box's shape.",
            "        let physicsBodyComponent = PhysicsBodyComponent(",
            "            shapes: [boxShape],",
            "            mass: boxMass,",
            "            mode: PhysicsBodyMode.static",
            "        )",
            "",
            "        // Set the entity's position in the scene.",
            "        boxEntity.position = location",
            "",
            "        // Add the collision physics to the box entity.",
            "        boxEntity.components.set(collisionComponent)",
            "        boxEntity.components.set(physicsBodyComponent)",
            "        return boxEntity",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The method configures each face to physically interact with the spheres in the scene",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "by adding an instance of ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicsBodyComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to the face’s entity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "PhysicsBodies-sample-article-2",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "For easier debugging, you can view every entity’s collision shape.",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Select the Collision Shapes & Axes checkbox from the Debug Visualizations menu",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "that appears in the debug bar at the bottom of the main pane in Xcode after you build the app.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Tip",
          "style": "tip",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "identifier": "PhysicsBodies-sample-article-3",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Add-human-interaction-by-including-a-gesture",
          "level": 3,
          "text": "Add human interaction by including a gesture",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The app lets a person move the spheres within the volume by adding a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "ForceDragGesture",
              "type": "codeVoice"
            },
            {
              "text": " instance to the main view.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "import SwiftUI",
            "import RealityKit",
            "",
            "struct ForceDragGesture: Gesture {",
            "",
            "    var body: some Gesture {",
            "        EntityDragGesture { entity, targetPosition in",
            "            guard let modelEntity = entity as? ModelEntity else { return }",
            "",
            "            let spherePosition = entity.position(relativeTo: nil)",
            "",
            "            let direction = targetPosition - spherePosition",
            "            var strength = length(direction)",
            "            if strength < 1.0 {",
            "                strength *= strength",
            "            }",
            "",
            "            let forceFactor: Float = 3000",
            "            let force = forceFactor * strength * simd_normalize(direction)",
            "            modelEntity.addForce(force, relativeTo: nil)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The type applies a force to the sphere where a drag gesture begins, which",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "increases with the distance between the sphere and drag gesture’s current position,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "similar to a spring.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "identifier": "PhysicsBodies-sample-article-0",
          "type": "video"
        },
        {
          "inlineContent": [
            {
              "text": "To enable gestures on the Entities, the sample adds an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/InputTargetComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " as well",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/HoverEffectComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to provide feedback when a person looks at a sphere:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Highlight the sphere when a person looks at it.",
            "sphereEntity.components.set(HoverEffectComponent())",
            "",
            "// Configure the sphere to receive gesture inputs.",
            "sphereEntity.components.set(InputTargetComponent())"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "ForceDragGesture",
              "type": "codeVoice"
            },
            {
              "text": " type depends on the sample’s ",
              "type": "text"
            },
            {
              "code": "EntityDragGesture",
              "type": "codeVoice"
            },
            {
              "text": " type,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "which handles the logic to start and end a drag gesture",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and updates its current position during the drag.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The sample also defines another gesture type, ",
              "type": "text"
            },
            {
              "code": "RelocateDragGesture",
              "type": "codeVoice"
            },
            {
              "text": " which moves",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a sphere entity by changing its location, instead of applying a force.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "import SwiftUI",
            "import RealityKit",
            "",
            "struct RelocateDragGesture: Gesture {",
            "    var body: some Gesture {",
            "        EntityDragGesture { entity, targetPosition in",
            "            entity.setPosition(targetPosition, relativeTo: nil)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "This gesture effectively applies the equivalent of an infinite force,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "which can quickly move the sphere and the spheres it collides with.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "It directly modifies a sphere’s location and bypasses physics.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Replace the call to ",
                  "type": "text"
                },
                {
                  "code": "ForceDragGesture()",
                  "type": "codeVoice"
                },
                {
                  "text": "in the app’s main view",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "with ",
                  "type": "text"
                },
                {
                  "code": "RelocateDragGesture()",
                  "type": "codeVoice"
                },
                {
                  "text": " and compare the behavioral differences.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Experiment",
          "style": "experiment",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "08408e5f3ea0/SimulatingPhysicsWithCollisionsInYourVisionOSApp.zip": {
      "checksum": "08408e5f3ea02fee304f7e0910a4d5c12949ec2ecada3178e7e2ca55d140522904188938d00cbd7a7c5d2c9e38c8e375d665c3b8f84e20d839c4d5852038d035",
      "identifier": "08408e5f3ea0/SimulatingPhysicsWithCollisionsInYourVisionOSApp.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/08408e5f3ea0/SimulatingPhysicsWithCollisionsInYourVisionOSApp.zip"
    },
    "PhysicsBodies-sample-article-0": {
      "alt": "A screen recording of a visionOS app showing 16 spheres. The cursor clicks on a sphere and drags it around. The other spheres are gently displaced when they collide with the dragged sphere.",
      "identifier": "PhysicsBodies-sample-article-0",
      "poster": "PhysicsBodies-sample-article-0-poster",
      "type": "video",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/79aa897d0d2b0d5b3a3eebc6f033a078/PhysicsBodies-sample-article-0.mp4"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/dfda25821762bc4a98e706911cf8ff0a/PhysicsBodies-sample-article-0~dark.mp4"
        }
      ]
    },
    "PhysicsBodies-sample-article-0-poster": {
      "alt": null,
      "identifier": "PhysicsBodies-sample-article-0-poster",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b2cfe57e1cff4d3bde7562a658f10bce/PhysicsBodies-sample-article-0-poster.jpg"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/2b02eb8b12e2d4be7ed792a013c5e34e/PhysicsBodies-sample-article-0-poster~dark.jpg"
        }
      ]
    },
    "PhysicsBodies-sample-article-1": {
      "alt": "A screen recording of a visionOS app in the Simulator where 16 spheres float and are attracted to each other.",
      "identifier": "PhysicsBodies-sample-article-1",
      "poster": "PhysicsBodies-sample-article-1-poster",
      "type": "video",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/e0e9d89ee0d119c4dfa964432e34cf16/PhysicsBodies-sample-article-1.mp4"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/c02245c98e078c4eb87a86ca28ceefb7/PhysicsBodies-sample-article-1~dark.mp4"
        }
      ]
    },
    "PhysicsBodies-sample-article-1-poster": {
      "alt": null,
      "identifier": "PhysicsBodies-sample-article-1-poster",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/dc175ccf903ffe8a0bbdc34f2b9e2a3c/PhysicsBodies-sample-article-1-poster.jpg"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/f04a4f66df73d937ad126d55c426fa7a/PhysicsBodies-sample-article-1-poster~dark.jpg"
        }
      ]
    },
    "PhysicsBodies-sample-article-2": {
      "alt": "A screenshot of a visionOS app in the Simulator that has 16 spheres. There is a debug visualization that shows circles around each spheres and squares on each of the 6 faces of the window's volume.",
      "identifier": "PhysicsBodies-sample-article-2",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/ddf4aa95f5086e5a3bc481b46924ef6a/PhysicsBodies-sample-article-2.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/ced20697d1ef4b7ea8f88f918c49564c/PhysicsBodies-sample-article-2~dark.png"
        }
      ]
    },
    "PhysicsBodies-sample-article-3": {
      "alt": "A screenshot of Xcode's debugging bar showing a toggle to enable Collision Shapes and Axes.",
      "identifier": "PhysicsBodies-sample-article-3",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/e5c197397c446f5316625af5f13be3e1/PhysicsBodies-sample-article-3.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/0a689bef8705fd782484c19c72d2b800/PhysicsBodies-sample-article-3~dark.png"
        }
      ]
    },
    "Simulating-physics-with-collisions-in-your-visionOS-app-PageImage-card.png": {
      "alt": null,
      "identifier": "Simulating-physics-with-collisions-in-your-visionOS-app-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/507347325f58b49ec440b0040cc8623d/Simulating-physics-with-collisions-in-your-visionOS-app-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/3f1d5f817b7cca76c58f645a4e903f59/Simulating-physics-with-collisions-in-your-visionOS-app-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.RealityKit/documentation/RealityKit": {
      "abstract": [
        {
          "text": "Simulate and render 3D content for use in your augmented reality apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit",
      "kind": "symbol",
      "role": "collection",
      "title": "RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent": {
      "abstract": [
        {
          "text": "A component that gives an entity the ability to collide with other entities",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "that also have collision components.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollisionComponent"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollisionComponent"
        }
      ],
      "role": "symbol",
      "title": "CollisionComponent",
      "type": "topic",
      "url": "/documentation/realitykit/collisioncomponent"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent/Mode-swift.enum": {
      "abstract": [
        {
          "text": "A mode that dictates how much collision data is collected for a given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "entity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Mode"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent/Mode-swift.enum",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Mode"
        }
      ],
      "role": "symbol",
      "title": "CollisionComponent.Mode",
      "type": "topic",
      "url": "/documentation/realitykit/collisioncomponent/mode-swift.enum"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CollisionFilter": {
      "abstract": [
        {
          "text": "A set of masks that determine whether entities can collide during",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "simulations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollisionFilter"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CollisionFilter",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollisionFilter"
        }
      ],
      "role": "symbol",
      "title": "CollisionFilter",
      "type": "topic",
      "url": "/documentation/realitykit/collisionfilter"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CollisionGroup": {
      "abstract": [
        {
          "text": "A bitmask used to define the collision group to which an entity belongs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollisionGroup"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CollisionGroup",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollisionGroup"
        }
      ],
      "role": "symbol",
      "title": "CollisionGroup",
      "type": "topic",
      "url": "/documentation/realitykit/collisiongroup"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/Entity": {
      "abstract": [
        {
          "text": "An element of a RealityKit scene to which you attach components that provide",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "appearance and behavior characteristics for the entity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Entity"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Entity",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Entity"
        }
      ],
      "role": "symbol",
      "title": "Entity",
      "type": "topic",
      "url": "/documentation/realitykit/entity"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/HoverEffectComponent": {
      "abstract": [
        {
          "text": "A component that applies a visual effect to a hierarchy of entities when a person looks at or selects an entity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "HoverEffectComponent"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/HoverEffectComponent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "HoverEffectComponent"
        }
      ],
      "role": "symbol",
      "title": "HoverEffectComponent",
      "type": "topic",
      "url": "/documentation/realitykit/hovereffectcomponent"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/InputTargetComponent": {
      "abstract": [
        {
          "text": "A component that gives an entity the ability to receive system input.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "InputTargetComponent"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/InputTargetComponent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "InputTargetComponent"
        }
      ],
      "role": "symbol",
      "title": "InputTargetComponent",
      "type": "topic",
      "url": "/documentation/realitykit/inputtargetcomponent"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ModelComponent": {
      "abstract": [
        {
          "text": "A component that contains a mesh and materials for the visual appearance of an entity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ModelComponent"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ModelComponent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ModelComponent"
        }
      ],
      "role": "symbol",
      "title": "ModelComponent",
      "type": "topic",
      "url": "/documentation/realitykit/modelcomponent"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ModelEntity": {
      "abstract": [
        {
          "text": "A representation of a physical object that RealityKit renders and optionally",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "simulates.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ModelEntity"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ModelEntity",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ModelEntity"
        }
      ],
      "role": "symbol",
      "title": "ModelEntity",
      "type": "topic",
      "url": "/documentation/realitykit/modelentity"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial": {
      "abstract": [
        {
          "text": "A material that simulates the appearance of real-world objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PhysicallyBasedMaterial"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PhysicallyBasedMaterial"
        }
      ],
      "role": "symbol",
      "title": "PhysicallyBasedMaterial",
      "type": "topic",
      "url": "/documentation/realitykit/physicallybasedmaterial"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/baseColor-swift.property": {
      "abstract": [
        {
          "text": "The color of an entity unmodified by lighting.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "baseColor"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV",
          "text": "PhysicallyBasedMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV9BaseColorV",
          "text": "BaseColor"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/baseColor-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "baseColor",
      "type": "topic",
      "url": "/documentation/realitykit/physicallybasedmaterial/basecolor-swift.property"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/clearcoat-swift.property": {
      "abstract": [
        {
          "text": "The transparent highlights that simulate a clear, shiny coating on an",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "entity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "clearcoat"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV",
          "text": "PhysicallyBasedMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV9ClearcoatV",
          "text": "Clearcoat"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/clearcoat-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "clearcoat",
      "type": "topic",
      "url": "/documentation/realitykit/physicallybasedmaterial/clearcoat-swift.property"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/clearcoatRoughness-swift.property": {
      "abstract": [
        {
          "text": "The degree to which an entity’s clear, shiny coating scatters light to",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "create soft highlights.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "clearcoatRoughness"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV",
          "text": "PhysicallyBasedMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV18ClearcoatRoughnessV",
          "text": "ClearcoatRoughness"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/clearcoatRoughness-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "clearcoatRoughness",
      "type": "topic",
      "url": "/documentation/realitykit/physicallybasedmaterial/clearcoatroughness-swift.property"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/metallic-swift.property": {
      "abstract": [
        {
          "text": "The reflectiveness of an entity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "metallic"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV",
          "text": "PhysicallyBasedMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV8MetallicV",
          "text": "Metallic"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/metallic-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "metallic",
      "type": "topic",
      "url": "/documentation/realitykit/physicallybasedmaterial/metallic-swift.property"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/roughness-swift.property": {
      "abstract": [
        {
          "text": "The amount the surface of the 3D object scatters reflected light.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "roughness"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV",
          "text": "PhysicallyBasedMaterial"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation23PhysicallyBasedMaterialV9RoughnessV",
          "text": "Roughness"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicallyBasedMaterial/roughness-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "roughness",
      "type": "topic",
      "url": "/documentation/realitykit/physicallybasedmaterial/roughness-swift.property"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicsBodyComponent": {
      "abstract": [
        {
          "text": "A component that defines an entity’s behavior in physics body simulations.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PhysicsBodyComponent"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicsBodyComponent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PhysicsBodyComponent"
        }
      ],
      "role": "symbol",
      "title": "PhysicsBodyComponent",
      "type": "topic",
      "url": "/documentation/realitykit/physicsbodycomponent"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/PhysicsBodyComponent/isAffectedByGravity": {
      "abstract": [
        {
          "text": "A Boolean value that indicates whether gravity acts on dynamic rigid bodies.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isAffectedByGravity"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/PhysicsBodyComponent/isAffectedByGravity",
      "kind": "symbol",
      "role": "symbol",
      "title": "isAffectedByGravity",
      "type": "topic",
      "url": "/documentation/realitykit/physicsbodycomponent/isaffectedbygravity"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/RealityCoordinateSpaceConverting/convert(_:from:to:)-3fumk": {
      "abstract": [
        {
          "text": "Converts a Rect3D from a defined SwiftUI coordinate space to a BoundingBox in a RealityKit coordinate space.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "convert"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@SPRect3D",
          "text": "Rect3D"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI23CoordinateSpaceProtocolP",
          "text": "CoordinateSpaceProtocol"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation0A15CoordinateSpaceP",
          "text": "RealityCoordinateSpace"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation11BoundingBoxV",
          "text": "BoundingBox"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityCoordinateSpaceConverting/convert(_:from:to:)-3fumk",
      "kind": "symbol",
      "role": "symbol",
      "title": "convert(_:from:to:)",
      "type": "topic",
      "url": "/documentation/realitykit/realitycoordinatespaceconverting/convert(_:from:to:)-3fumk"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/RealityView": {
      "abstract": [
        {
          "text": "A view that contains RealityKit content.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RealityView"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RealityView"
        }
      ],
      "role": "symbol",
      "title": "RealityView",
      "type": "topic",
      "url": "/documentation/realitykit/realityview"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewContent": {
      "abstract": [
        {
          "text": "The content of a visionOS reality view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RealityViewContent"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewContent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RealityViewContent"
        }
      ],
      "role": "symbol",
      "title": "RealityViewContent",
      "type": "topic",
      "url": "/documentation/realitykit/realityviewcontent"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ShaderGraphMaterial"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ShaderGraphMaterial",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ShaderGraphMaterial"
        }
      ],
      "role": "symbol",
      "title": "ShaderGraphMaterial",
      "type": "topic",
      "url": "/documentation/realitykit/shadergraphmaterial"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ShapeResource": {
      "abstract": [
        {
          "text": "A representation of a shape.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ShapeResource"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ShapeResource",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ShapeResource"
        }
      ],
      "role": "symbol",
      "title": "ShapeResource",
      "type": "topic",
      "url": "/documentation/realitykit/shaperesource"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ShapeResourceError": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ShapeResourceError"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ShapeResourceError",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ShapeResourceError"
        }
      ],
      "role": "symbol",
      "title": "ShapeResourceError",
      "type": "topic",
      "url": "/documentation/realitykit/shaperesourceerror"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/System": {
      "abstract": [
        {
          "text": "An object that affects multiple entities in every update of a RealityKit",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "scene.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "System"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/System",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "System"
        }
      ],
      "role": "symbol",
      "title": "System",
      "type": "topic",
      "url": "/documentation/realitykit/system"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/System/init(scene:)": {
      "abstract": [
        {
          "text": "Creates a new system.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "scene"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation5SceneC",
          "text": "Scene"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/System/init(scene:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "init(scene:)",
      "type": "topic",
      "url": "/documentation/realitykit/system/init(scene:)"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/System/update(context:)": {
      "abstract": [
        {
          "text": "Updates entities up to once every scene update.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "update"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "context"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:17RealityFoundation18SceneUpdateContextV",
          "text": "SceneUpdateContext"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/System/update(context:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "update(context:)",
      "type": "topic",
      "url": "/documentation/realitykit/system/update(context:)"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/TriggerVolume": {
      "abstract": [
        {
          "text": "An invisible 3D shape that detects when objects enter or exit a given region",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "of space.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TriggerVolume"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/TriggerVolume",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TriggerVolume"
        }
      ],
      "role": "symbol",
      "title": "TriggerVolume",
      "type": "topic",
      "url": "/documentation/realitykit/triggervolume"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/configuring-collision-in-realitykit": {
      "abstract": [
        {
          "text": "Use collision groups and collision filters to control which objects collide.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/configuring-collision-in-realitykit",
      "kind": "article",
      "role": "sampleCode",
      "title": "Configuring Collision in RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit/configuring-collision-in-realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ecs-systems": {
      "abstract": [
        {
          "text": "Apply behaviors and physical effects to the entities in a RealityKit scene.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ecs-systems",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Systems",
      "type": "topic",
      "url": "/documentation/realitykit/ecs-systems"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/implementing-systems-for-entities-in-a-scene": {
      "abstract": [
        {
          "text": "Apply behaviors and physical effects to the objects and characters in a RealityKit",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "scene with the Entity Component System (ECS).",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/implementing-systems-for-entities-in-a-scene",
      "kind": "article",
      "role": "article",
      "title": "Implementing systems for entities in a scene",
      "type": "topic",
      "url": "/documentation/realitykit/implementing-systems-for-entities-in-a-scene"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/physics-collision-detection": {
      "abstract": [
        {
          "text": "Determine when entities collide with each other or the environment.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/physics-collision-detection",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Collision detection",
      "type": "topic",
      "url": "/documentation/realitykit/physics-collision-detection"
    },
    "doc://com.apple.documentation/documentation/ShaderGraph/realitykit/Environment-Radiance-(RealityKit)": {
      "abstract": [
        {
          "text": "Returns an environment’s diffuse and specular radiance value based on real-world environment, and an IBL map that is either a developer-provided map or a default map.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/ShaderGraph/realitykit/Environment-Radiance-(RealityKit)",
      "images": [
        {
          "identifier": "purple.scribble.variable.png",
          "type": "icon"
        }
      ],
      "kind": "symbol",
      "role": "symbol",
      "title": "Environment Radiance (RealityKit)",
      "type": "topic",
      "url": "/documentation/ShaderGraph/realitykit/Environment-Radiance-(RealityKit)"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/DragGesture": {
      "abstract": [
        {
          "text": "A dragging motion that invokes an action as the drag-event sequence changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DragGesture"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/DragGesture",
      "kind": "symbol",
      "role": "symbol",
      "title": "DragGesture",
      "type": "topic",
      "url": "/documentation/SwiftUI/DragGesture"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/GeometryProxy3D/frame(in:)": {
      "abstract": [
        {
          "text": "The container view’s bounds rectangle converted to a defined coordinate space.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "frame"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "coordinateSpace"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI23CoordinateSpaceProtocolP",
          "text": "CoordinateSpaceProtocol"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@SPRect3D",
          "text": "Rect3D"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/GeometryProxy3D/frame(in:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "frame(in:)",
      "type": "topic",
      "url": "/documentation/SwiftUI/GeometryProxy3D/frame(in:)"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/GeometryReader3D": {
      "abstract": [
        {
          "text": "A container view that defines its content as a function of its own size and coordinate space.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "GeometryReader3D"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Content"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Content"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/GeometryReader3D",
      "kind": "symbol",
      "role": "symbol",
      "title": "GeometryReader3D",
      "type": "topic",
      "url": "/documentation/SwiftUI/GeometryReader3D"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/WindowStyle/plain": {
      "abstract": [
        {
          "text": "The plain window style.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "plain"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI16PlainWindowStyleV",
          "text": "PlainWindowStyle"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/WindowStyle/plain",
      "kind": "symbol",
      "role": "symbol",
      "title": "plain",
      "type": "topic",
      "url": "/documentation/SwiftUI/WindowStyle/plain"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/WindowStyle/volumetric": {
      "abstract": [
        {
          "text": "A window style that creates a 3D volumetric window.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "volumetric"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI21VolumetricWindowStyleV",
          "text": "VolumetricWindowStyle"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/WindowStyle/volumetric",
      "kind": "symbol",
      "role": "symbol",
      "title": "volumetric",
      "type": "topic",
      "url": "/documentation/SwiftUI/WindowStyle/volumetric"
    },
    "doc://com.apple.documentation/documentation/spatial/rect3d": {
      "abstract": [
        {
          "text": "A rectangle in a 3D coordinate system.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "struct "
        },
        {
          "kind": "identifier",
          "text": "Rect3D"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/spatial/rect3d",
      "kind": "symbol",
      "role": "symbol",
      "title": "Rect3D",
      "type": "topic",
      "url": "/documentation/spatial/rect3d"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "purple.scribble.variable.png": {
      "alt": "nil",
      "identifier": "purple.scribble.variable.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1c8425513fe53762d457b1ee08fa4dca/purple.scribble.variable.png"
        }
      ]
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "08408e5f3ea0/SimulatingPhysicsWithCollisionsInYourVisionOSApp.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Collision-shapes-and-groups",
      "generated": true,
      "identifiers": [
        "doc://com.apple.RealityKit/documentation/RealityKit/configuring-collision-in-realitykit",
        "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent",
        "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent/Mode-swift.enum",
        "doc://com.apple.RealityKit/documentation/RealityKit/ShapeResource",
        "doc://com.apple.RealityKit/documentation/RealityKit/ShapeResourceError",
        "doc://com.apple.RealityKit/documentation/RealityKit/CollisionGroup",
        "doc://com.apple.RealityKit/documentation/RealityKit/CollisionFilter",
        "doc://com.apple.RealityKit/documentation/RealityKit/TriggerVolume"
      ],
      "title": "Collision shapes and groups"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Collision-shapes-and-groups",
              "generated": true,
              "identifiers": [],
              "title": "Collision shapes and groups"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1spatial~1rect3d/title",
          "value": "SPRect3D"
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/realitykit/simulating-physics-with-collisions-in-your-visionos-app"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/realitykit/simulating-physics-with-collisions-in-your-visionos-app"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
