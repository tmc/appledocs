{
  "abstract": [
    {
      "text": "Create custom shaders to implement postprocess effects.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.RealityKit/documentation/RealityKit",
        "doc://com.apple.RealityKit/documentation/RealityKit/presentation-views-and-attachments",
        "doc://com.apple.RealityKit/documentation/RealityKit/postprocessing-effects"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.RealityKit/documentation/RealityKit/implementing-postprocess-effects-using-metal-compute-functions"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "RealityKit"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Implementing postprocess effects using Metal compute functions"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In iOS 15 and later, and macOS 12 and later, you can apply postprocess effects to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a RealityKit scene after RealityKit renders it, but before RealityKit displays it.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "If you register a postprocess callback function, RealityKit passes that function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the complete, rendered frame so you can modify it before the viewer sees it. You",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can use any image-processing or drawing APIs on the rendered frame but, as a practical",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "matter, only APIs that execute on the GPU are fast enough to use every frame and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "maintain a good framerate.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "One way to implement postprocess effects is to write custom Metal compute functions",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to process the rendered scene. Writing your own custom compute function gives you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "tremendous flexibility and allows you to create virtually any postprocessing effect.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Because compute functions run on the GPU, they’re a good choice for implementing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "custom postprocessing effects.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can also implement many common postprocessing effects without writing your own",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "compute functions by using image filters from the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/metalperformanceshaders",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "framework or ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", which also",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "run on the GPU. For information on using the Metal Performance Shaders framework",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for postprocess effects, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/using-metal-performance-shaders-to-create-custom-postprocess-effects",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For information on using Core Image for postprocess effects, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/applying-core-image-filters-as-a-postprocess-effect",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Check-the-output-texture-pixel-format",
          "level": 3,
          "text": "Check the output texture pixel format",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Some device GPUs require that the output texture be in a specific pixel format. If",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the device your code is running on doesn’t support ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLGPUFamily/apple2",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "convert the output texture to ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLPixelFormat/bgra8Unorm",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "before using it. For more information, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Write-a-compute-function",
          "level": 3,
          "text": "Write a compute function",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Add a new file to your Xcode project using the Metal File template. It doesn’t matter",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "what filename you choose because Metal loads compute functions by the function name.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "As long as you include the file that contains the compute function in your build",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "target, Metal is able to find and load it at runtime. A postprocess compute function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "executes once for each pixel in the rendered scene and is responsible for setting",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the final color of its pixel.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s a compute function that inverts every pixel of a passed framebuffer.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "[[kernel]]",
            "void postProcessInvert(uint2 gid [[thread_position_in_grid]],",
            "                       texture2d<half, access::read> inColor [[texture(0)]],",
            "                       texture2d<half, access::write> outColor [[texture(1)]])",
            "{",
            "    // Check to make sure that the specified thread_position_in_grid value is",
            "    // within the bounds of the framebuffer. This ensures that non-uniform size",
            "    // threadgroups don't trigger an error. For more information, see:",
            "    // https://developer.apple.com/documentation/metal/calculating_threadgroup_and_grid_sizes",
            "    if (gid.x >= inColor.get_width() || gid.y >= inColor.get_height()) {    ",
            "        return;",
            "    }",
            "",
            "    // Invert the pixel's color by subtracting it from 1.0.",
            "    outColor.write(1.0 - inColor.read(gid), gid);",
            "}"
          ],
          "syntax": "other",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "For more information on writing postprocess compute functions, see ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/Metal/processing-a-texture-in-a-compute-function",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Load-the-compute-function",
          "level": 3,
          "text": "Load the compute function",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To use the Metal compute function in your ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/postProcess",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "render callback, retrieve the default ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLLibrary",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "then load your compute function and store the resulting ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLRenderPipelineState",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "object. Load the pipeline state object during startup and store it in a property",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "because you’ll need it in your postprocess callback. A good place to create and store",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it is in a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " render",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "callback, which RealityKit calls once it has finished its setup but before it renders",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the next frame and passes it a reference to the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "where the scene displays. If you assign the callback during app startup, RealityKit",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "calls your method before it renders the first frame.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Here’s an example that loads the invert compute function from above and stores its",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pipeline state object in a property.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func loadPostprocessingShader(device: MTLDevice) {",
            "    guard let library = device.makeDefaultLibrary() else {",
            "        fatalError()",
            "    }",
            "",
            "    if let invertKernel = library.makeFunction(name: \"postProcessInvert\") {",
            "        // Create a pipeline state object and store it in a property.",
            "        invertPipeline = try? device.makeComputePipelineState(function: invertKernel)",
            "    }",
            "} "
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To make RealityKit call your function, assign it to the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property of the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/renderCallbacks-swift.property",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property on",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "your ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " during app startup.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "arView.renderCallbacks.postProcess = loadPostprocessingShader"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Create-a-postprocess-callback-function",
          "level": 3,
          "text": "Create a postprocess callback function",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To apply the compute function to the rendered scene, create a callback function that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "takes a single ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " argument and has no return",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "value. In that function, use the command buffer passed in the context to create an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "assign the pipeline state property you created to that encoder using ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLIndirectComputeCommand/setComputePipelineState(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Then use ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLArgumentEncoder/setTexture(_:index:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "on the encoder to pass the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/sourceColorTexture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/targetColorTexture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to your compute",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function. If your compute function needs access to additional textures, such as the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/sourceDepthTexture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " or a custom texture,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you can pass those the same way. Note that the index values used in ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLArgumentEncoder/setTexture(_:index:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "must match the value your compute function uses to retrieve the texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Because the sample compute function above defines ",
              "type": "text"
            },
            {
              "code": "inColor",
              "type": "codeVoice"
            },
            {
              "text": " as ",
              "type": "text"
            },
            {
              "code": "[[texture(0)]]",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you need to use an index value of ",
              "type": "text"
            },
            {
              "code": "0",
              "type": "codeVoice"
            },
            {
              "text": " when calling ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLArgumentEncoder/setTexture(_:index:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to pass ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/sourceColorTexture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". You can also",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder/setBytes(_:length:index:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to pass non-texture data to your compute function. For more information on using",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder/setBytes(_:length:index:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to pass non-texture data, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/passing-structured-data-to-a-metal-compute-function",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Once you’ve assigned the needed textures and data to the encoder, use ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder/dispatchThreads(_:threadsPerThreadgroup:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to start the compute function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func postProcess(context: ARView.PostProcessContext) {",
            "    guard let encoder = context.commandBuffer.makeComputeCommandEncoder() else {",
            "        return",
            "    }",
            "",
            "    encoder.setComputePipelineState(pipeline)",
            "    encoder.setTexture(context.sourceColorTexture, index: 0)",
            "    encoder.setTexture(context.compatibleTargetTexture, index: 1)",
            "",
            "    let threadsPerGrid = MTLSize(width: context.sourceColorTexture.width,",
            "                                 height: context.sourceColorTexture.height,",
            "                                 depth: 1)",
            "",
            "    let w = pixelatePipeline.threadExecutionWidth",
            "    let h = pixelatePipeline.maxTotalThreadsPerThreadgroup / w",
            "    let threadsPerThreadgroup = MTLSizeMake(w, h, 1)",
            "",
            "    encoder.dispatchThreads(threadsPerGrid,",
            "                            threadsPerThreadgroup: threadsPerThreadgroup)",
            "    encoder.endEncoding()",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The ",
                  "type": "text"
                },
                {
                  "code": "compatibleTargetTexture",
                  "type": "codeVoice"
                },
                {
                  "text": " property referenced above is a derived property",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "based on ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/targetColorTexture",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ". It ensures",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "that the output texture uses the appropriate pixel format for the current device.",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "For more information, see ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Register-the-callback-function",
          "level": 3,
          "text": "Register the callback function",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To apply the effect, register the function as the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/postProcess",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "render callback for the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "arView.renderCallbacks.postProcess = postProcess"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "For more information on writing Metal compute functions to implement postprocess",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "effects, see the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "sample code, which demonstrates multiple postprocess techniques, including compute",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "functions.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.RealityKit/documentation/RealityKit": {
      "abstract": [
        {
          "text": "Simulate and render 3D content for use in your augmented reality apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit",
      "kind": "symbol",
      "role": "collection",
      "title": "RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView": {
      "abstract": [
        {
          "text": "A view that enables you to display an AR experience with RealityKit.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ARView"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ARView"
        }
      ],
      "role": "symbol",
      "title": "ARView",
      "type": "topic",
      "url": "/documentation/realitykit/arview"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext": {
      "abstract": [
        {
          "text": "An object the framework uses to pass data to a postprocess callback.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PostProcessContext"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "PostProcessContext"
        }
      ],
      "role": "symbol",
      "title": "ARView.PostProcessContext",
      "type": "topic",
      "url": "/documentation/realitykit/arview/postprocesscontext"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/sourceColorTexture": {
      "abstract": [
        {
          "text": "The rendered frame buffer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "sourceColorTexture"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/sourceColorTexture",
      "kind": "symbol",
      "role": "symbol",
      "title": "sourceColorTexture",
      "type": "topic",
      "url": "/documentation/realitykit/arview/postprocesscontext/sourcecolortexture"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/sourceDepthTexture": {
      "abstract": [
        {
          "text": "The frame’s depth buffer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "sourceDepthTexture"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/sourceDepthTexture",
      "kind": "symbol",
      "role": "symbol",
      "title": "sourceDepthTexture",
      "type": "topic",
      "url": "/documentation/realitykit/arview/postprocesscontext/sourcedepthtexture"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/targetColorTexture": {
      "abstract": [
        {
          "text": "The output texture where the postprocess callback writes the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "modified frame buffer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "targetColorTexture"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/targetColorTexture",
      "kind": "symbol",
      "role": "symbol",
      "title": "targetColorTexture",
      "type": "topic",
      "url": "/documentation/realitykit/arview/postprocesscontext/targetcolortexture"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/postProcess": {
      "abstract": [
        {
          "text": "A callback function for implementing postprocess effects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "postProcess"
        },
        {
          "kind": "text",
          "text": ": (("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@M@RealityKit@objc(cs)ARView",
          "text": "ARView"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10RealityKit6ARViewC18PostProcessContextV",
          "text": "PostProcessContext"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ")?"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/postProcess",
      "kind": "symbol",
      "role": "symbol",
      "title": "postProcess",
      "type": "topic",
      "url": "/documentation/realitykit/arview/rendercallbacks-swift.struct/postprocess"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice": {
      "abstract": [
        {
          "text": "A callback function for doing initial setup work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "prepareWithDevice"
        },
        {
          "kind": "text",
          "text": ": ((any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLDevice",
          "text": "MTLDevice"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ")?"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
      "kind": "symbol",
      "role": "symbol",
      "title": "prepareWithDevice",
      "type": "topic",
      "url": "/documentation/realitykit/arview/rendercallbacks-swift.struct/preparewithdevice"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/renderCallbacks-swift.property": {
      "abstract": [
        {
          "text": "A container that holds the view’s render callbacks.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "renderCallbacks"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@M@RealityKit@objc(cs)ARView",
          "text": "ARView"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10RealityKit6ARViewC15RenderCallbacksV",
          "text": "RenderCallbacks"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/renderCallbacks-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "renderCallbacks",
      "type": "topic",
      "url": "/documentation/realitykit/arview/rendercallbacks-swift.property"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/applying-core-image-filters-as-a-postprocess-effect": {
      "abstract": [
        {
          "text": "Create special rendering effects for your RealityKit scenes using Core Image.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/applying-core-image-filters-as-a-postprocess-effect",
      "kind": "article",
      "role": "article",
      "title": "Applying core image filters as a postprocess effect",
      "type": "topic",
      "url": "/documentation/realitykit/applying-core-image-filters-as-a-postprocess-effect"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture": {
      "abstract": [
        {
          "text": "Make sure your postprocess effect works on all devices.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture",
      "kind": "article",
      "role": "article",
      "title": "Checking the pixel format of a postprocess effect’s output texture",
      "type": "topic",
      "url": "/documentation/realitykit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/passing-structured-data-to-a-metal-compute-function": {
      "abstract": [
        {
          "text": "Send nontexture data from Swift to your Metal shaders using a shared header file.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/passing-structured-data-to-a-metal-compute-function",
      "kind": "article",
      "role": "article",
      "title": "Passing Structured Data to a Metal Compute Function",
      "type": "topic",
      "url": "/documentation/realitykit/passing-structured-data-to-a-metal-compute-function"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/postprocessing-effects": {
      "abstract": [
        {
          "text": "Create special rendering effects for your RealityKit scenes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/postprocessing-effects",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Postprocessing effects",
      "type": "topic",
      "url": "/documentation/realitykit/postprocessing-effects"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/presentation-views-and-attachments": {
      "abstract": [
        {
          "text": "Bring RealityKit content into your app with views and renderers.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/presentation-views-and-attachments",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Views and attachments",
      "type": "topic",
      "url": "/documentation/realitykit/presentation-views-and-attachments"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/using-metal-performance-shaders-to-create-custom-postprocess-effects": {
      "abstract": [
        {
          "text": "Leverage the Metal Performance Shaders framework to create special rendering effects",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "for your RealityKit scenes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/using-metal-performance-shaders-to-create-custom-postprocess-effects",
      "kind": "article",
      "role": "article",
      "title": "Using Metal performance shaders to create custom postprocess effects",
      "type": "topic",
      "url": "/documentation/realitykit/using-metal-performance-shaders-to-create-custom-postprocess-effects"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLArgumentEncoder/setTexture(_:index:)": {
      "abstract": [
        {
          "text": "Encodes a reference to a texture into the argument buffer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "setTexture"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "texture"
        },
        {
          "kind": "text",
          "text": ": (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ")?, "
        },
        {
          "kind": "externalParam",
          "text": "index"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLArgumentEncoder/setTexture(_:index:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "setTexture(_:index:)",
      "type": "topic",
      "url": "/documentation/Metal/MTLArgumentEncoder/setTexture(_:index:)"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder": {
      "abstract": [
        {
          "text": "An interface for dispatching commands to encode in a compute pass.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MTLComputeCommandEncoder"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLCommandEncoder",
          "text": "MTLCommandEncoder"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLComputeCommandEncoder",
      "type": "topic",
      "url": "/documentation/Metal/MTLComputeCommandEncoder"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder/dispatchThreads(_:threadsPerThreadgroup:)": {
      "abstract": [
        {
          "text": "Encodes a compute command using an arbitrarily sized grid.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "dispatchThreads"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "threadsPerGrid"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLSize",
          "text": "MTLSize"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "threadsPerThreadgroup"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLSize",
          "text": "MTLSize"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder/dispatchThreads(_:threadsPerThreadgroup:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "dispatchThreads(_:threadsPerThreadgroup:)",
      "type": "topic",
      "url": "/documentation/Metal/MTLComputeCommandEncoder/dispatchThreads(_:threadsPerThreadgroup:)"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder/setBytes(_:length:index:)": {
      "abstract": [
        {
          "text": "Copies data directly to the GPU to populate an entry in the buffer argument table.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "setBytes"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "bytes"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SV",
          "text": "UnsafeRawPointer"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "length"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "index"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder/setBytes(_:length:index:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "setBytes(_:length:index:)",
      "type": "topic",
      "url": "/documentation/Metal/MTLComputeCommandEncoder/setBytes(_:length:index:)"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLDevice": {
      "abstract": [
        {
          "text": "The main Metal interface to a GPU that apps use to draw graphics and run computations in parallel.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MTLDevice"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)NSObject",
          "text": "NSObjectProtocol"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLDevice",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLDevice",
      "type": "topic",
      "url": "/documentation/Metal/MTLDevice"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLGPUFamily/apple2": {
      "abstract": [
        {
          "text": "Represents the Apple family 2 GPU features that correspond to the Apple A8 GPUs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "apple2"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLGPUFamily/apple2",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLGPUFamily.apple2",
      "type": "topic",
      "url": "/documentation/Metal/MTLGPUFamily/apple2"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLIndirectComputeCommand/setComputePipelineState(_:)": {
      "abstract": [
        {
          "text": "Sets the command’s compute pipeline state object.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "setComputePipelineState"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "pipelineState"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLComputePipelineState",
          "text": "MTLComputePipelineState"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLIndirectComputeCommand/setComputePipelineState(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "setComputePipelineState(_:)",
      "type": "topic",
      "url": "/documentation/Metal/MTLIndirectComputeCommand/setComputePipelineState(_:)"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLLibrary": {
      "abstract": [
        {
          "text": "A collection of Metal shader functions.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MTLLibrary"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)NSObject",
          "text": "NSObjectProtocol"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLLibrary",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLLibrary",
      "type": "topic",
      "url": "/documentation/Metal/MTLLibrary"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLPixelFormat/bgra8Unorm": {
      "abstract": [
        {
          "text": "Ordinary format with four 8-bit normalized unsigned integer components in BGRA order.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bgra8Unorm"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLPixelFormat/bgra8Unorm",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLPixelFormat.bgra8Unorm",
      "type": "topic",
      "url": "/documentation/Metal/MTLPixelFormat/bgra8Unorm"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLRenderPipelineState": {
      "abstract": [
        {
          "text": "An interface that represents a graphics pipeline configuration for a render pass, which the pass applies to the draw commands you encode.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MTLRenderPipelineState"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)NSObject",
          "text": "NSObjectProtocol"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLRenderPipelineState",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLRenderPipelineState",
      "type": "topic",
      "url": "/documentation/Metal/MTLRenderPipelineState"
    },
    "doc://com.apple.documentation/documentation/Metal/processing-a-texture-in-a-compute-function": {
      "abstract": [
        {
          "text": "Perform parallel calculations on structured data by placing the data in textures.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/processing-a-texture-in-a-compute-function",
      "kind": "article",
      "role": "sampleCode",
      "title": "Processing a Texture in a Compute Function",
      "type": "topic",
      "url": "/documentation/Metal/processing-a-texture-in-a-compute-function"
    },
    "doc://com.apple.documentation/documentation/coreimage": {
      "abstract": [
        {
          "text": "Use built-in or custom filters to process still and video images.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coreimage",
      "kind": "symbol",
      "role": "collection",
      "title": "Core Image",
      "type": "topic",
      "url": "/documentation/coreimage"
    },
    "doc://com.apple.documentation/documentation/metalperformanceshaders": {
      "abstract": [
        {
          "text": "Optimize graphics and compute performance with kernels that are fine-tuned for the unique characteristics of each Metal GPU family.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/metalperformanceshaders",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal Performance Shaders",
      "type": "topic",
      "url": "/documentation/metalperformanceshaders"
    },
    "doc://com.apple.documentation/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing": {
      "abstract": [
        {
          "text": "Implement a variety of postprocessing techniques to alter RealityKit rendering.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing",
      "kind": "article",
      "role": "sampleCode",
      "title": "Implementing Special Rendering Effects with RealityKit Postprocessing",
      "type": "topic",
      "url": "/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Metal-effects",
      "generated": true,
      "identifiers": [
        "doc://com.apple.RealityKit/documentation/RealityKit/using-metal-performance-shaders-to-create-custom-postprocess-effects",
        "doc://com.apple.documentation/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing",
        "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture",
        "doc://com.apple.RealityKit/documentation/RealityKit/passing-structured-data-to-a-metal-compute-function"
      ],
      "title": "Metal effects"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLLibrary/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "MTLLibrary"
            },
            {
              "kind": "text",
              "text": " <"
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(pl)NSObject",
              "text": "NSObject"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLPixelFormat~1bgra8Unorm/title",
          "value": "MTLPixelFormatBGRA8Unorm"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLPixelFormat~1bgra8Unorm/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "MTLPixelFormatBGRA8Unorm"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLRenderPipelineState/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "MTLRenderPipelineState"
            },
            {
              "kind": "text",
              "text": " <"
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(pl)NSObject",
              "text": "NSObject"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLArgumentEncoder~1setTexture(_:index:)/title",
          "value": "setTexture:atIndex:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLArgumentEncoder~1setTexture(_:index:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- ("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:v",
              "text": "void"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "identifier",
              "text": "setTexture:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:Qoobjc(pl)MTLTexture",
              "text": "id<MTLTexture>"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "internalParam",
              "text": "texture"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "atIndex:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@NSUInteger",
              "text": "NSUInteger"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "internalParam",
              "text": "index"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLComputeCommandEncoder/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "MTLComputeCommandEncoder"
            },
            {
              "kind": "text",
              "text": " <"
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(pl)MTLCommandEncoder",
              "text": "MTLCommandEncoder"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLDevice/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "MTLDevice"
            },
            {
              "kind": "text",
              "text": " <"
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(pl)NSObject",
              "text": "NSObject"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLComputeCommandEncoder~1dispatchThreads(_:threadsPerThreadgroup:)/title",
          "value": "dispatchThreads:threadsPerThreadgroup:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLComputeCommandEncoder~1dispatchThreads(_:threadsPerThreadgroup:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- ("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:v",
              "text": "void"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "identifier",
              "text": "dispatchThreads:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@MTLSize",
              "text": "MTLSize"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "internalParam",
              "text": "threadsPerGrid"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "threadsPerThreadgroup:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@SA@MTLSize",
              "text": "MTLSize"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "internalParam",
              "text": "threadsPerThreadgroup"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLIndirectComputeCommand~1setComputePipelineState(_:)/title",
          "value": "setComputePipelineState:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLIndirectComputeCommand~1setComputePipelineState(_:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- ("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:v",
              "text": "void"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "identifier",
              "text": "setComputePipelineState:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:Qoobjc(pl)MTLComputePipelineState",
              "text": "id<MTLComputePipelineState>"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "internalParam",
              "text": "pipelineState"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLComputeCommandEncoder~1setBytes(_:length:index:)/title",
          "value": "setBytes:length:atIndex:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLComputeCommandEncoder~1setBytes(_:length:index:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- ("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:v",
              "text": "void"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "identifier",
              "text": "setBytes:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "keyword",
              "text": "const"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:v",
              "text": "void"
            },
            {
              "kind": "text",
              "text": " *) "
            },
            {
              "kind": "internalParam",
              "text": "bytes"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "length:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@NSUInteger",
              "text": "NSUInteger"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "internalParam",
              "text": "length"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "atIndex:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@NSUInteger",
              "text": "NSUInteger"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "internalParam",
              "text": "index"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLGPUFamily~1apple2/title",
          "value": "MTLGPUFamilyApple2"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLGPUFamily~1apple2/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "MTLGPUFamilyApple2"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/realitykit/implementing-postprocess-effects-using-metal-compute-functions"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
