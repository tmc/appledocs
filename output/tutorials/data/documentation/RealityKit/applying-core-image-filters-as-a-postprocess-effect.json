{
  "abstract": [
    {
      "text": "Create special rendering effects for your RealityKit scenes using Core Image.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.RealityKit/documentation/RealityKit",
        "doc://com.apple.RealityKit/documentation/RealityKit/presentation-views-and-attachments",
        "doc://com.apple.RealityKit/documentation/RealityKit/postprocessing-effects"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.RealityKit/documentation/RealityKit/applying-core-image-filters-as-a-postprocess-effect"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "RealityKit"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Applying core image filters as a postprocess effect"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In iOS 15 and later, and macOS 12 and later, you can apply postprocess effects to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a RealityKit scene after RealityKit renders it, but before RealityKit displays it.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "If you register a postprocess callback function, RealityKit passes that function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the complete, rendered frame so you can modify it before the viewer sees it. You",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can use any image processing or drawing APIs on the rendered frame but, as a practical",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "matter, only APIs that execute on the GPU are fast enough to use every frame and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "maintain a good framerate.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "One option for implementing postprocess effects is to apply ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "filters to the rendered frame. Core Image provides a wide variety of filters that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "implement different image effects and execute on the GPU, making them a good choice",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for postprocessing effects.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You may also wish to look at the Metal Performance Shaders framework as an alternative.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The Metal Performance Shaders framework offers a smaller set of image filters than",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Core Image, but they operate directly on Metal textures and can use an existing ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "That means they take less code to implement and are more efficient than Core Image",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "filters because you don’t have to convert the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLTexture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "containing the rendered frame into a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage/ciimage",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "before applying the filter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For information on using Image Filters from the Metal Performance Shaders framework,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/using-metal-performance-shaders-to-create-custom-postprocess-effects",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". If",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "neither Core Image nor the Metal Performance Shaders framework provide the effect",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you need, you can also write custom compute functions to implement postprocess effects.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For more information about postprocessing with compute functions, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/implementing-postprocess-effects-using-metal-compute-functions",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Set-up-the-core-image-context",
          "level": 3,
          "text": "Set up the core image context",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In order to apply a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage/cifilter",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you need to create a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage/cicontext",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "during app launch and store it in a property so it’s available to your postprocess",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "callback. You can use a single Core Image context regardless of the number or types",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of filters you use. The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "render callback is a good place to create your context and do other setup work. RealityKit",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "calls the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "once, after does its own setup, but before it renders the next frame.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you set the callback at launch, RealityKit calls it before it draws the first",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "frame. This is a good place to do setup tasks, especially processor-intensive or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "time-consuming tasks, such as loading images, or tasks that require access to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", which RealityKit passes",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to the callback function.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To create a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "callback, write a function that takes a single ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "parameter and has no return value. In that function, create and store a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage/cicontext",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and do any other necessary setup tasks, such as loading textures needed by the filter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func setupCoreImage(device: MTLDevice) {",
            "    // Create a CIContext and store it in a property.",
            "    ciContext = CIContext(mtlDevice: device)",
            "",
            "    // Do other expensive tasks, like loading images, here.",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Next, register the function as a callback by assigning it to the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property of the view’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/renderCallbacks-swift.property",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "arView.renderCallbacks.prepareWithDevice = setupCoreImage"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To make sure your setup code fires before rendering begins, assign the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "callback in code that executes during app startup, such as in your main view controller’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/UIKit/UIViewController/viewWillAppear(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method or the main SwiftUI view’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/UIViewRepresentable/makeUIView(context:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method. RealityKit does call a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "callback if it’s registered after RealityKit starts rendering the scene, but doing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "setup tasks after rendering has started can cause a rendering hitch.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Check-the-output-texture-pixel-format",
          "level": 3,
          "text": "Check the output texture pixel format",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Some device GPUs require that the output texture be in a specific pixel format. If",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the device your code is running on doesn’t support ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLGPUFamily/apple2",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "convert the output texture to the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Metal/MTLPixelFormat/bgra8Unorm",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "before using it. For more information, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-a-postprocess-callback-function",
          "level": 3,
          "text": "Create a postprocess callback function",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Next, create the render callback function. Once you register it, RealityKit calls",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it every frame before displaying the rendered scene. In the callback, configure your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage/cifilter",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", convert the source",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "color texture — which contains the frame buffer — into a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage/ciimage",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and set it as the filter’s image input. Then, create a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/coreimage/cirenderdestination",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and render the filter to it.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func postProcessWithCoreImage(context: ARView.PostProcessContext) {",
            "",
            "    // Create and configure the Core Image filter.",
            "    let filter = CIFilter.falseColor()",
            "    filter.color0 = CIColor.blue",
            "    filter.color1 = CIColor.yellow",
            "",
            "    // Convert the frame buffer from a Metal texture to a CIImage, and ",
            "    // set the CIImage as the filter's input image.",
            "    guard let input = CIImage(mtlTexture: context.sourceColorTexture) else {",
            "        fatalError(\"Unable to create a CIImage from sourceColorTexture.\")",
            "    }",
            "    filter.setValue(input, forKey: kCIInputImageKey)",
            "",
            "    // Get a reference to the filter's output image.",
            "    guard let output = filter.outputImage else {",
            "        fatalError(\"Error applying filter.\")",
            "    }",
            "",
            "    // Create a render destination and render the filter to the context's command buffer.",
            "    let destination = CIRenderDestination(mtlTexture: context.compatibleTargetTexture,",
            "                                          commandBuffer: context.commandBuffer)",
            "    destination.isFlipped = false",
            "    _ = try? self.ciContext.startTask(toRender: output, to: destination)",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The ",
                  "type": "text"
                },
                {
                  "code": "compatibleTargetTexture",
                  "type": "codeVoice"
                },
                {
                  "text": " property referenced above is a derived property",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "based on ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/targetColorTexture",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ". It ensures",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "that the output texture uses the appropriate pixel format for the current device.",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "For more information, see ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Register-the-callback-function",
          "level": 3,
          "text": "Register the callback function",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To apply the effect, register the function as the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/postProcess",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "render callback for the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "arView.renderCallbacks.postProcess = postProcessWithCoreImage"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "For more information on using Core Image to create postprocess effects, see",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "sample code, which demonstrates multiple postprocess techniques, including Core Image.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.RealityKit/documentation/RealityKit": {
      "abstract": [
        {
          "text": "Simulate and render 3D content for use in your augmented reality apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit",
      "kind": "symbol",
      "role": "collection",
      "title": "RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView": {
      "abstract": [
        {
          "text": "A view that enables you to display an AR experience with RealityKit.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ARView"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ARView"
        }
      ],
      "role": "symbol",
      "title": "ARView",
      "type": "topic",
      "url": "/documentation/realitykit/arview"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/targetColorTexture": {
      "abstract": [
        {
          "text": "The output texture where the postprocess callback writes the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "modified frame buffer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "targetColorTexture"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/PostProcessContext/targetColorTexture",
      "kind": "symbol",
      "role": "symbol",
      "title": "targetColorTexture",
      "type": "topic",
      "url": "/documentation/realitykit/arview/postprocesscontext/targetcolortexture"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/postProcess": {
      "abstract": [
        {
          "text": "A callback function for implementing postprocess effects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "postProcess"
        },
        {
          "kind": "text",
          "text": ": (("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@M@RealityKit@objc(cs)ARView",
          "text": "ARView"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10RealityKit6ARViewC18PostProcessContextV",
          "text": "PostProcessContext"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ")?"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/postProcess",
      "kind": "symbol",
      "role": "symbol",
      "title": "postProcess",
      "type": "topic",
      "url": "/documentation/realitykit/arview/rendercallbacks-swift.struct/postprocess"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice": {
      "abstract": [
        {
          "text": "A callback function for doing initial setup work.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "prepareWithDevice"
        },
        {
          "kind": "text",
          "text": ": ((any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLDevice",
          "text": "MTLDevice"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ")?"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/RenderCallbacks-swift.struct/prepareWithDevice",
      "kind": "symbol",
      "role": "symbol",
      "title": "prepareWithDevice",
      "type": "topic",
      "url": "/documentation/realitykit/arview/rendercallbacks-swift.struct/preparewithdevice"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/ARView/renderCallbacks-swift.property": {
      "abstract": [
        {
          "text": "A container that holds the view’s render callbacks.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "renderCallbacks"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@M@RealityKit@objc(cs)ARView",
          "text": "ARView"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10RealityKit6ARViewC15RenderCallbacksV",
          "text": "RenderCallbacks"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/ARView/renderCallbacks-swift.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "renderCallbacks",
      "type": "topic",
      "url": "/documentation/realitykit/arview/rendercallbacks-swift.property"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture": {
      "abstract": [
        {
          "text": "Make sure your postprocess effect works on all devices.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture",
      "kind": "article",
      "role": "article",
      "title": "Checking the pixel format of a postprocess effect’s output texture",
      "type": "topic",
      "url": "/documentation/realitykit/checking-the-pixel-format-of-a-postprocess-effect-s-output-texture"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/implementing-postprocess-effects-using-metal-compute-functions": {
      "abstract": [
        {
          "text": "Create custom shaders to implement postprocess effects.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/implementing-postprocess-effects-using-metal-compute-functions",
      "kind": "article",
      "role": "article",
      "title": "Implementing postprocess effects using Metal compute functions",
      "type": "topic",
      "url": "/documentation/realitykit/implementing-postprocess-effects-using-metal-compute-functions"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/postprocessing-effects": {
      "abstract": [
        {
          "text": "Create special rendering effects for your RealityKit scenes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/postprocessing-effects",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Postprocessing effects",
      "type": "topic",
      "url": "/documentation/realitykit/postprocessing-effects"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/presentation-views-and-attachments": {
      "abstract": [
        {
          "text": "Bring RealityKit content into your app with views and renderers.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/presentation-views-and-attachments",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Views and attachments",
      "type": "topic",
      "url": "/documentation/realitykit/presentation-views-and-attachments"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/using-metal-performance-shaders-to-create-custom-postprocess-effects": {
      "abstract": [
        {
          "text": "Leverage the Metal Performance Shaders framework to create special rendering effects",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "for your RealityKit scenes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/using-metal-performance-shaders-to-create-custom-postprocess-effects",
      "kind": "article",
      "role": "article",
      "title": "Using Metal performance shaders to create custom postprocess effects",
      "type": "topic",
      "url": "/documentation/realitykit/using-metal-performance-shaders-to-create-custom-postprocess-effects"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder": {
      "abstract": [
        {
          "text": "An interface for dispatching commands to encode in a compute pass.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MTLComputeCommandEncoder"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLCommandEncoder",
          "text": "MTLCommandEncoder"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLComputeCommandEncoder",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLComputeCommandEncoder",
      "type": "topic",
      "url": "/documentation/Metal/MTLComputeCommandEncoder"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLDevice": {
      "abstract": [
        {
          "text": "The main Metal interface to a GPU that apps use to draw graphics and run computations in parallel.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MTLDevice"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)NSObject",
          "text": "NSObjectProtocol"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLDevice",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLDevice",
      "type": "topic",
      "url": "/documentation/Metal/MTLDevice"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLGPUFamily/apple2": {
      "abstract": [
        {
          "text": "Represents the Apple family 2 GPU features that correspond to the Apple A8 GPUs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "apple2"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLGPUFamily/apple2",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLGPUFamily.apple2",
      "type": "topic",
      "url": "/documentation/Metal/MTLGPUFamily/apple2"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLPixelFormat/bgra8Unorm": {
      "abstract": [
        {
          "text": "Ordinary format with four 8-bit normalized unsigned integer components in BGRA order.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "bgra8Unorm"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLPixelFormat/bgra8Unorm",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLPixelFormat.bgra8Unorm",
      "type": "topic",
      "url": "/documentation/Metal/MTLPixelFormat/bgra8Unorm"
    },
    "doc://com.apple.documentation/documentation/Metal/MTLTexture": {
      "abstract": [
        {
          "text": "A resource that holds formatted image data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLResource",
          "text": "MTLResource"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Metal/MTLTexture",
      "kind": "symbol",
      "role": "symbol",
      "title": "MTLTexture",
      "type": "topic",
      "url": "/documentation/Metal/MTLTexture"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/UIViewRepresentable/makeUIView(context:)": {
      "abstract": [
        {
          "text": "Creates the view object and configures its initial state.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "makeUIView"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "context"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI19UIViewRepresentableP7Contexta",
          "text": "Context"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI19UIViewRepresentableP0C4TypeQa",
          "text": "UIViewType"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/UIViewRepresentable/makeUIView(context:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "makeUIView(context:)",
      "type": "topic",
      "url": "/documentation/SwiftUI/UIViewRepresentable/makeUIView(context:)"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIViewController/viewWillAppear(_:)": {
      "abstract": [
        {
          "text": "Notifies the view controller that its view is about to be added to a view hierarchy.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "viewWillAppear"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "animated"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIViewController/viewWillAppear(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "viewWillAppear(_:)",
      "type": "topic",
      "url": "/documentation/UIKit/UIViewController/viewWillAppear(_:)"
    },
    "doc://com.apple.documentation/documentation/coreimage": {
      "abstract": [
        {
          "text": "Use built-in or custom filters to process still and video images.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coreimage",
      "kind": "symbol",
      "role": "collection",
      "title": "Core Image",
      "type": "topic",
      "url": "/documentation/coreimage"
    },
    "doc://com.apple.documentation/documentation/coreimage/cicontext": {
      "abstract": [
        {
          "text": "An evaluation context for rendering image processing results and performing image analysis.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "CIContext"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coreimage/cicontext",
      "kind": "symbol",
      "role": "symbol",
      "title": "CIContext",
      "type": "topic",
      "url": "/documentation/coreimage/cicontext"
    },
    "doc://com.apple.documentation/documentation/coreimage/cifilter": {
      "abstract": [
        {
          "text": "An image processor that produces an image by manipulating one or more input images or by generating new image data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "CIFilter"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coreimage/cifilter",
      "kind": "symbol",
      "role": "symbol",
      "title": "CIFilter",
      "type": "topic",
      "url": "/documentation/coreimage/cifilter"
    },
    "doc://com.apple.documentation/documentation/coreimage/ciimage": {
      "abstract": [
        {
          "text": "A representation of an image to be processed or produced by Core Image filters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "CIImage"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coreimage/ciimage",
      "kind": "symbol",
      "role": "symbol",
      "title": "CIImage",
      "type": "topic",
      "url": "/documentation/coreimage/ciimage"
    },
    "doc://com.apple.documentation/documentation/coreimage/cirenderdestination": {
      "abstract": [
        {
          "text": "A specification for configuring all attributes of a render task's destination and issuing asynchronous render tasks.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "CIRenderDestination"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/coreimage/cirenderdestination",
      "kind": "symbol",
      "role": "symbol",
      "title": "CIRenderDestination",
      "type": "topic",
      "url": "/documentation/coreimage/cirenderdestination"
    },
    "doc://com.apple.documentation/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing": {
      "abstract": [
        {
          "text": "Implement a variety of postprocessing techniques to alter RealityKit rendering.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing",
      "kind": "article",
      "role": "sampleCode",
      "title": "Implementing Special Rendering Effects with RealityKit Postprocessing",
      "type": "topic",
      "url": "/documentation/realitykit/implementing_special_rendering_effects_with_realitykit_postprocessing"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLGPUFamily~1apple2/title",
          "value": "MTLGPUFamilyApple2"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLGPUFamily~1apple2/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "MTLGPUFamilyApple2"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLTexture/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "MTLTexture"
            },
            {
              "kind": "text",
              "text": " <"
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(pl)MTLResource",
              "text": "MTLResource"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLComputeCommandEncoder/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "MTLComputeCommandEncoder"
            },
            {
              "kind": "text",
              "text": " <"
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(pl)MTLCommandEncoder",
              "text": "MTLCommandEncoder"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLPixelFormat~1bgra8Unorm/title",
          "value": "MTLPixelFormatBGRA8Unorm"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLPixelFormat~1bgra8Unorm/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "MTLPixelFormatBGRA8Unorm"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Metal~1MTLDevice/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "MTLDevice"
            },
            {
              "kind": "text",
              "text": " <"
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(pl)NSObject",
              "text": "NSObject"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIViewController~1viewWillAppear(_:)/title",
          "value": "viewWillAppear:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIViewController~1viewWillAppear(_:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- ("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:v",
              "text": "void"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "identifier",
              "text": "viewWillAppear:"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@BOOL",
              "text": "BOOL"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "internalParam",
              "text": "animated"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/realitykit/applying-core-image-filters-as-a-postprocess-effect"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
