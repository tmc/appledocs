{
  "abstract": [
    {
      "text": "Layers the views that you specify behind this view.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.RealityKit/documentation/RealityKit",
        "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewDefaultPlaceholder"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewDefaultPlaceholder/background(alignment:content:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "extendedModule": "SwiftUI",
    "externalID": "s:7SwiftUI4ViewPAAE10background9alignment7contentQrAA9AlignmentV_qd__yXEtAaBRd__lF::SYNTHESIZED::s:19_RealityKit_SwiftUI0A22ViewDefaultPlaceholderV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "background"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "genericParameter",
        "text": "V"
      },
      {
        "kind": "text",
        "text": ">("
      },
      {
        "kind": "externalParam",
        "text": "alignment"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7SwiftUI9AlignmentV",
        "text": "Alignment"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "content"
      },
      {
        "kind": "text",
        "text": ": () -> "
      },
      {
        "kind": "typeIdentifier",
        "text": "V"
      },
      {
        "kind": "text",
        "text": ") -> "
      },
      {
        "kind": "keyword",
        "text": "some"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7SwiftUI4ViewP",
        "text": "View"
      }
    ],
    "modules": [
      {
        "name": "RealityKit",
        "relatedModules": [
          "SwiftUI"
        ]
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "12.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "method",
    "title": "background(alignment:content:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "visionOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "nonisolated"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "background"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "V"
            },
            {
              "kind": "text",
              "text": ">("
            },
            {
              "kind": "externalParam",
              "text": "alignment"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI9AlignmentV",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI9AlignmentV",
              "text": "Alignment"
            },
            {
              "kind": "text",
              "text": " = .center, "
            },
            {
              "kind": "attribute",
              "text": "@"
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI11ViewBuilderV",
              "kind": "attribute",
              "preciseIdentifier": "s:7SwiftUI11ViewBuilderV",
              "text": "ViewBuilder"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "externalParam",
              "text": "content"
            },
            {
              "kind": "text",
              "text": ": () -> "
            },
            {
              "kind": "typeIdentifier",
              "text": "V"
            },
            {
              "kind": "text",
              "text": ") -> "
            },
            {
              "kind": "keyword",
              "text": "some"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI4ViewP",
              "text": "View"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "V"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI4ViewP",
              "text": "View"
            },
            {
              "kind": "text",
              "text": "\n"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The alignment that the modifier uses to position the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "implicit ",
                  "type": "text"
                },
                {
                  "code": "ZStack",
                  "type": "codeVoice"
                },
                {
                  "text": " that groups the background views. The default",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "is ",
                  "type": "text"
                },
                {
                  "code": "Alignment/center",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "alignment"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "A ",
                  "type": "text"
                },
                {
                  "code": "ViewBuilder",
                  "type": "codeVoice"
                },
                {
                  "text": " that you use to declare the views to draw",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "behind this view, stacked in a cascading order from bottom to top.",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "The last view that you list appears at the front of the stack.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "content"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return-value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "A view that uses the specified content as a background.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this modifier to place one or more views behind another view.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, you can place a collection of stars beind a ",
              "type": "text"
            },
            {
              "code": "Text",
              "type": "codeVoice"
            },
            {
              "text": " view:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Text(\"ABCDEF\")",
            "    .background(alignment: .leading) { Star(color: .red) }",
            "    .background(alignment: .center) { Star(color: .green) }",
            "    .background(alignment: .trailing) { Star(color: .blue) }"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The example above assumes that you’ve defined a ",
              "type": "text"
            },
            {
              "code": "Star",
              "type": "codeVoice"
            },
            {
              "text": " view with a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "parameterized color:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct Star: View {",
            "    var color: Color",
            "",
            "    var body: some View {",
            "        Image(systemName: \"star.fill\")",
            "            .foregroundStyle(color)",
            "    }",
            "}"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "By setting different ",
              "type": "text"
            },
            {
              "code": "alignment",
              "type": "codeVoice"
            },
            {
              "text": " values for each modifier, you make the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "stars appear in different places behind the text:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you specify more than one view in the ",
              "type": "text"
            },
            {
              "code": "content",
              "type": "codeVoice"
            },
            {
              "text": " closure, the modifier",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "collects all of the views in the closure into an implicit ",
              "type": "text"
            },
            {
              "code": "ZStack",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "taking them in order from back to front. For example, you can layer a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "vertical bar behind a circle, with both of those behind a horizontal",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "bar:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Color.blue",
            "    .frame(width: 200, height: 10) // Creates a horizontal bar.",
            "    .background {",
            "        Color.green",
            "            .frame(width: 10, height: 100) // Creates a vertical bar.",
            "        Circle()",
            "            .frame(width: 50, height: 50)",
            "    }"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Both the background modifier and the implicit ",
              "type": "text"
            },
            {
              "code": "ZStack",
              "type": "codeVoice"
            },
            {
              "text": " composed from",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the background content — the circle and the vertical bar — use a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "default ",
              "type": "text"
            },
            {
              "code": "Alignment/center",
              "type": "codeVoice"
            },
            {
              "text": " alignment. The vertical bar appears",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "centered behind the circle, and both appear as a composite view centered",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "behind the horizontal bar:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you specify an alignment for the background, it applies to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "implicit stack rather than to the individual views in the closure. You",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can see this if you add the ",
              "type": "text"
            },
            {
              "code": "Alignment/leading",
              "type": "codeVoice"
            },
            {
              "text": " alignment:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Color.blue",
            "    .frame(width: 200, height: 10)",
            "    .background(alignment: .leading) {",
            "        Color.green",
            "            .frame(width: 10, height: 100)",
            "        Circle()",
            "            .frame(width: 50, height: 50)",
            "    }"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The vertical bar and the circle move as a unit to align the stack",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with the leading edge of the horizontal bar, while the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "vertical bar remains centered on the circle:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To control the placement of individual items inside the ",
              "type": "text"
            },
            {
              "code": "content",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "closure, either use a different background modifier for each item, as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the earlier example of stars under text demonstrates, or add an explicit",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "ZStack",
              "type": "codeVoice"
            },
            {
              "text": " inside the content closure with its own alignment:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Color.blue",
            "    .frame(width: 200, height: 10)",
            "    .background(alignment: .leading) {",
            "        ZStack(alignment: .leading) {",
            "            Color.green",
            "                .frame(width: 10, height: 100)",
            "            Circle()",
            "                .frame(width: 50, height: 50)",
            "        }",
            "    }"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The stack alignment ensures that the circle’s leading edge aligns with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the vertical bar’s, while the background modifier aligns the composite",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "view with the horizontal bar:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can achieve layering without a background modifier by putting both",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the modified view and the background content into a ",
              "type": "text"
            },
            {
              "code": "ZStack",
              "type": "codeVoice"
            },
            {
              "text": ". This",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "produces a simpler view hierarchy, but it changes the layout priority",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that SwiftUI applies to the views. Use the background modifier when you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "want the modified view to dominate the layout.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you want to specify a ",
              "type": "text"
            },
            {
              "code": "ShapeStyle",
              "type": "codeVoice"
            },
            {
              "text": " like a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "HierarchicalShapeStyle",
              "type": "codeVoice"
            },
            {
              "text": " or a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Material",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " as the background, use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "View/background(_:ignoresSafeAreaEdges:)",
              "type": "codeVoice"
            },
            {
              "text": " instead.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "To specify a ",
              "type": "text"
            },
            {
              "code": "Shape",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "InsettableShape",
              "type": "codeVoice"
            },
            {
              "text": ", use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "View/background(_:in:fillStyle:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "To configure the background of a presentation, like a sheet, use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "View/presentationBackground(alignment:content:)",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.RealityKit/documentation/RealityKit": {
      "abstract": [
        {
          "text": "Simulate and render 3D content for use in your augmented reality apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit",
      "kind": "symbol",
      "role": "collection",
      "title": "RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/Material": {
      "abstract": [
        {
          "text": "A type that describes the material aspects of a mesh, like color and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "texture.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Material"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Material",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Material"
        }
      ],
      "role": "symbol",
      "title": "Material",
      "type": "topic",
      "url": "/documentation/realitykit/material"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewDefaultPlaceholder": {
      "abstract": [
        {
          "text": "A view that represents the default placeholder for a RealityView.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RealityViewDefaultPlaceholder"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewDefaultPlaceholder",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RealityViewDefaultPlaceholder"
        }
      ],
      "role": "symbol",
      "title": "RealityViewDefaultPlaceholder",
      "type": "topic",
      "url": "/documentation/realitykit/realityviewdefaultplaceholder"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewDefaultPlaceholder/background(alignment:content:)": {
      "abstract": [
        {
          "text": "Layers the views that you specify behind this view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "background"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "alignment"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI9AlignmentV",
          "text": "Alignment"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "content"
        },
        {
          "kind": "text",
          "text": ": () -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityViewDefaultPlaceholder/background(alignment:content:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "background(alignment:content:)",
      "type": "topic",
      "url": "/documentation/realitykit/realityviewdefaultplaceholder/background(alignment:content:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI11ViewBuilderV": {
      "abstract": [
        {
          "text": "A custom parameter attribute that constructs views from closures.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@resultBuilder"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ViewBuilder"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI11ViewBuilderV",
      "kind": "symbol",
      "role": "symbol",
      "title": "ViewBuilder",
      "type": "topic",
      "url": "/documentation/SwiftUI/ViewBuilder"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP": {
      "abstract": [
        {
          "text": "A type that represents part of your app’s user interface and provides modifiers that you use to configure views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI4ViewP",
      "kind": "symbol",
      "role": "symbol",
      "title": "View",
      "type": "topic",
      "url": "/documentation/SwiftUI/View"
    },
    "doc://com.externally.resolved.symbol/s:7SwiftUI9AlignmentV": {
      "abstract": [
        {
          "text": "An alignment in both axes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Alignment"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7SwiftUI9AlignmentV",
      "kind": "symbol",
      "role": "symbol",
      "title": "Alignment",
      "type": "topic",
      "url": "/documentation/SwiftUI/Alignment"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/realitykit/realityviewdefaultplaceholder/background(alignment:content:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
