{
  "abstract": [
    {
      "text": "Build a RealityKit component to support standard visionOS gestures on any entity.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.RealityKit/documentation/RealityKit"
      ],
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.RealityKit/documentation/RealityKit",
        "doc://com.apple.RealityKit/documentation/RealityKit/presentation-user-interface"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.RealityKit/documentation/RealityKit/transforming-realitykit-entities-with-gestures"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "RealityKit"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "1.0",
        "name": "visionOS"
      },
      {
        "beta": false,
        "introducedAt": "16.0",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Transforming RealityKit entities using gestures"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Manipulating virtual objects using standard system drag, rotate, and scale gestures is a common task in visionOS apps.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "This sample project demonstrates how to apply SwiftUI gestures to a RealityKit ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Entity",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " by implementing the gestures with a component and an extension on ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The component marks entities as supporting transform gestures and the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " extension passes events from the SwiftUI gesture actions to the component, which also contains the logic to implement the gestures.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You can add transformation gesture support to any entity in your ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " just by adding the gesture component to the entity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-the-main-component",
          "level": 3,
          "text": "Create the main component",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To implement the gesture functionality, the sample app first creates a ",
              "type": "text"
            },
            {
              "code": "struct",
              "type": "codeVoice"
            },
            {
              "text": " that conforms to ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Component",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". This component marks entities that support transform gestures, and contains the logic to implement those gestures. In order to support Reality Composer Pro, the component also conforms to ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". To include the ability to turn different gestures on and off, the component contains three ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/Bool",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " properties, one for each of the transforms the component supports. Reality Composer Pro exposes the transforms as checkboxes, which enable or disable specific gestures for an entity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "/// A component that handles gesture logic for an entity.",
            "public struct GestureComponent: Component, Codable {",
            "    ",
            "    /// A Boolean value that indicates whether a gesture can drag the entity.",
            "    public var canDrag: Bool = true",
            "    ",
            "    /// ...",
            "    ",
            "    /// A Boolean value that indicates whether a gesture can scale the entity.",
            "    public var canScale: Bool = true",
            "    ",
            "    /// A Boolean value that indicates whether a gesture can rotate the entity.",
            "    public var canRotate: Bool = true",
            "",
            "    /// ..."
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The component has two other properties for configuring the drag style, shown below:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "    /// A Boolean value that indicates whether the drag gesture can move the object in an arc, similar to dragging windows or moving the keyboard.",
            "    public var pivotOnDrag: Bool = true",
            "    ",
            "    /// A Boolean value that indicates whether a pivot drag keeps the orientation toward the",
            "    /// viewer throughout the drag gesture.",
            "    ///",
            "    /// The property only applies when `pivotOnDrag` is `true`.",
            "    public var preserveOrientationOnPivotDrag: Bool = true"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "pivotOnDrag",
              "type": "codeVoice"
            },
            {
              "text": " properties configure whether the object moves along the X-axis in a straight line, or pivots around a person, similar to the visionOS keyboard. When ",
              "type": "text"
            },
            {
              "code": "pivotOnDrag",
              "type": "codeVoice"
            },
            {
              "text": " is ",
              "type": "text"
            },
            {
              "code": "true",
              "type": "codeVoice"
            },
            {
              "text": ", the ",
              "type": "text"
            },
            {
              "code": "preserveOrientationOnPivotDrag",
              "type": "codeVoice"
            },
            {
              "text": " determines if the object rotates to face the viewer as they drag it, such as for the visionOS keyboard, or keeps its original orientation throughout the drag gesture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Pivoting on drag is more flexible because it allows a person to change their own orientation without the  entity theyâ€™re dragging from disappearing out of view. However, in some cases, dragging without the pivot may be a better option, such as when they need to precisely line up an entity with another.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-a-state-object",
          "level": 3,
          "text": "Create a state object",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To implement these transform gestures, the app needs to maintain some state.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onChanged(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " action passes a delta from the start transform, ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "not",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " the delta from the previous ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onChanged(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " call, so the app needs to keep track of the entityâ€™s starting position, rotation, and scale.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, each time SwiftUI calls the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onChanged(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " action for a drag gesture, the action provides the total distance dragged on each axis since the gesture started.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The app also keeps track of whether a gesture is already in progress.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Gestures donâ€™t have an ",
              "type": "text"
            },
            {
              "code": ".onStarted",
              "type": "codeVoice"
            },
            {
              "text": " action, so the app keeps track of whether the gesture has already started so it knows if it needs to store the starting position, rotation, or scale.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Lastly, the sample app keeps a reference to the pivot entity.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "By parenting the dragged entity to the pivot entity, the system calculates the dragged entityâ€™s rotation when the app rotates the pivot entity.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This component only supports dragging a single entity at a time, so thereâ€™s no need to store state on a per-entity level.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "As a result, the app uses a singleton object to store the state instead of a component:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "public class EntityGestureState {",
            "    ",
            "    /// The entity currently being dragged if a gesture is in progress.",
            "    var targetedEntity: Entity?",
            "    ",
            "    // MARK: - Drag",
            "    ",
            "    /// The starting position.",
            "    var dragStartPosition: SIMD3<Float> = .zero",
            "    ",
            "    /// Marks whether the app is currently handling a drag gesture.",
            "    var isDragging = false",
            "    ",
            "    /// When `rotateOnDrag` is`true`, this entity acts as the pivot point for the drag.",
            "    var pivotEntity: Entity?",
            "    ",
            "    var initialOrientation: simd_quatf?",
            "    ",
            "    // MARK: - Magnify",
            "    ",
            "    /// The starting scale value.",
            "    var startScale: SIMD3<Float> = .one",
            "    ",
            "    /// Marks whether the app is currently handling a scale gesture.",
            "    var isScaling = false",
            "    ",
            "    // MARK: - Rotation",
            "    ",
            "    /// The starting rotation value.",
            "    var startOrientation = Rotation3D.identity",
            "    ",
            "    /// Marks whether the app is currently handling a rotation gesture.",
            "    var isRotating = false",
            "    ",
            "    // MARK: - Singleton Accessor",
            "    ",
            "    /// Retrieves the shared instance.",
            "    static let shared = EntityGestureState()",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Add-transform-logic-to-the-main-component",
          "level": 3,
          "text": "Add transform logic to the main component",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "code": "GestureComponent",
              "type": "codeVoice"
            },
            {
              "text": " needs to implement functions the app calls from the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onChanged(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onEnded(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " actions for each of the three supported types of gestures.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "onChange",
              "type": "codeVoice"
            },
            {
              "text": " functions first retrieve the gesture entity and its state component, creating a new state component if one doesnâ€™t already exist, as shown below:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "mutating func onChanged(value: EntityTargetValue<DragGesture.Value>) {",
            "    guard canDrag else { return }",
            "    let entity = value.entity",
            "    ",
            "    var state: GestureStateComponent = entity.gestureStateComponent ?? GestureStateComponent()",
            "",
            "    // ...",
            "",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The first time the app calls the function for a particular gesture, the function stores the starting position, orientation, or scale. The drag function looks like this:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "if state.targetedEntity == nil {",
            "    state.targetedEntity = value.entity",
            "    state.initialOrientation = value.entity.orientation(relativeTo: nil)",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, the function calculates the entityâ€™s new position, rotation, or scale by applying the information from the gesture to the starting value stored in the state component.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Hereâ€™s the logic for the rotate gesture:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let flippedRotation = Rotation3D(angle: rotation.angle, ",
            "                                 axis: RotationAxis3D(x: -rotation.axis.x,",
            "                                                      y: rotation.axis.y,",
            "                                                      z: -rotation.axis.z))",
            "let newOrientation = state.startOrientation.rotated(by: flippedRotation)",
            "entity.setOrientation(.init(newOrientation), relativeTo: nil)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Create-a-RealityView-extension",
          "level": 3,
          "text": "Create a RealityView extension",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To connect the SwiftUI gestures to the component, this sample uses an extension on ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " that contains functions that send the gesture information to the component.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, hereâ€™s the gesture property that forwards the drag gesture events to the component:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "/// Builds a drag gesture.",
            "var dragGesture: some Gesture {",
            "    DragGesture()",
            "        .targetedToAnyEntity()",
            "        .useGestureComponent()",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The extension also contains a function that installs all three of the gestures to a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " at once:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "/// Apply this to a `RealityView` to pass gestures on to the component code.",
            "func installGestures() -> some View {",
            "    simultaneousGesture(dragGesture)",
            "        .simultaneousGesture(magnifyGesture)",
            "        .simultaneousGesture(rotateGesture)",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Install-the-gestures-on-the-RealityView",
          "level": 3,
          "text": "Install the gestures on the RealityView",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To forward the gesture information to the entity components, the app calls the ",
              "type": "text"
            },
            {
              "code": "installGestures()",
              "type": "codeVoice"
            },
            {
              "text": " function on the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " returned from the initializer.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "RealityView { content in",
            "    // Add the initial RealityKit content.",
            "    if let scene = try? await Entity(named: \"Scene\", in: realityKitContentBundle) {",
            "        content.add(scene)",
            "    }",
            "} update: { content in",
            "",
            "}",
            ".installGestures()"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Add-the-gesture-component-to-entities",
          "level": 3,
          "text": "Add the gesture component to entities",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Once the app installs the gestures on the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", people can manipulate any entity containing a ",
              "type": "text"
            },
            {
              "code": "GestureComponent",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "This sample uses a Reality Composer Pro scene to add a ",
              "type": "text"
            },
            {
              "code": "GestureComponent",
              "type": "codeVoice"
            },
            {
              "text": " to each of its entities. It also adds an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/InputTargetComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to those entities, because all three components are necessary for the entity to support gestures.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Each of the four entities in the sampleâ€™s Reality Composer scene support a different combination of gestures.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Instead of adding the component in Reality Composer Pro, the app could add the components to entities in code, like this:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var component = GestureComponent()",
            "component.canDrag = true ",
            "component.canScale = false",
            "component.canRotate = true",
            "myEntity.components.set(component)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "79d45a37b1c0/TransformingRealityKitEntitiesUsingGestures.zip": {
      "checksum": "79d45a37b1c0e5651452187c4e947e7c48b6e50f0d82c0e9c448a48dd2f0bbbd3e207fb5fee1217f8452e18cd124c8430f14a24cc7e6201b943115eae6566f5a",
      "identifier": "79d45a37b1c0/TransformingRealityKitEntitiesUsingGestures.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/79d45a37b1c0/TransformingRealityKitEntitiesUsingGestures.zip"
    },
    "Hello-World-intro.png": {
      "alt": null,
      "identifier": "Hello-World-intro.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/770e1d0451ba3b86de3b05eb0ce728b7/Hello-World-intro@2x.png"
        }
      ]
    },
    "doc://com.apple.RealityKit/documentation/RealityKit": {
      "abstract": [
        {
          "text": "Simulate and render 3D content for use in your augmented reality apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit",
      "kind": "symbol",
      "role": "collection",
      "title": "RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent": {
      "abstract": [
        {
          "text": "A component that gives an entity the ability to collide with other entities",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "that also have collision components.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CollisionComponent"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/CollisionComponent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CollisionComponent"
        }
      ],
      "role": "symbol",
      "title": "CollisionComponent",
      "type": "topic",
      "url": "/documentation/realitykit/collisioncomponent"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/Component": {
      "abstract": [
        {
          "text": "A representation of a geometry or a behavior that you apply to an entity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Component"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Component",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Component"
        }
      ],
      "role": "symbol",
      "title": "Component",
      "type": "topic",
      "url": "/documentation/realitykit/component"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/Entity": {
      "abstract": [
        {
          "text": "An element of a RealityKit scene to which you attach components that provide",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "appearance and behavior characteristics for the entity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Entity"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/Entity",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Entity"
        }
      ],
      "role": "symbol",
      "title": "Entity",
      "type": "topic",
      "url": "/documentation/realitykit/entity"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/InputTargetComponent": {
      "abstract": [
        {
          "text": "A component that gives an entity the ability to receive system input.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "InputTargetComponent"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/InputTargetComponent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "InputTargetComponent"
        }
      ],
      "role": "symbol",
      "title": "InputTargetComponent",
      "type": "topic",
      "url": "/documentation/realitykit/inputtargetcomponent"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/RealityView": {
      "abstract": [
        {
          "text": "A view that contains RealityKit content.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RealityView"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/RealityView",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RealityView"
        }
      ],
      "role": "symbol",
      "title": "RealityView",
      "type": "topic",
      "url": "/documentation/realitykit/realityview"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/combining-2d-and-3d-views-in-an-immersive-app": {
      "abstract": [
        {
          "text": "Use attachments to place 2D content relative to 3D content in your visionOS app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/combining-2d-and-3d-views-in-an-immersive-app",
      "kind": "article",
      "role": "sampleCode",
      "title": "Combining 2D and 3D views in an immersive app",
      "type": "topic",
      "url": "/documentation/realitykit/combining-2d-and-3d-views-in-an-immersive-app"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/creating-a-spatial-drawing-app-with-realitykit": {
      "abstract": [
        {
          "text": "Use low-level mesh and texture APIs to achieve fast updates to a personâ€™s brush",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "strokes by integrating RealityKit with ARKit and SwiftUI.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/creating-a-spatial-drawing-app-with-realitykit",
      "kind": "article",
      "role": "sampleCode",
      "title": "Creating a spatial drawing app with RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit/creating-a-spatial-drawing-app-with-realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/generating-interactive-geometry-with-realitykit": {
      "abstract": [
        {
          "text": "Create an interactive mesh with low-level mesh and low-level texture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/generating-interactive-geometry-with-realitykit",
      "kind": "article",
      "role": "sampleCode",
      "title": "Generating interactive geometry with RealityKit",
      "type": "topic",
      "url": "/documentation/realitykit/generating-interactive-geometry-with-realitykit"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/presentation-user-interface": {
      "abstract": [
        {
          "text": "Control your appâ€™s content and how people can interact with it.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/presentation-user-interface",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Presentation UI",
      "type": "topic",
      "url": "/documentation/realitykit/presentation-user-interface"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-anchors": {
      "abstract": [
        {
          "text": "Lock virtual content to the real world.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-anchors",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Anchors",
      "type": "topic",
      "url": "/documentation/realitykit/scene-content-anchors"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-audio": {
      "abstract": [
        {
          "text": "Create personalized and realistic spatial audio experiences.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-audio",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Audio",
      "type": "topic",
      "url": "/documentation/realitykit/scene-content-audio"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-content-synchronization": {
      "abstract": [
        {
          "text": "Synchronize the contents of entities locally or across the network.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-content-synchronization",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Content synchronization",
      "type": "topic",
      "url": "/documentation/realitykit/scene-content-content-synchronization"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-lights-and-cameras": {
      "abstract": [
        {
          "text": "Control the lighting and point of view for a scene.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-lights-and-cameras",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Lights and cameras",
      "type": "topic",
      "url": "/documentation/realitykit/scene-content-lights-and-cameras"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-materials-and-shaders": {
      "abstract": [
        {
          "text": "Apply textures to the surface of your sceneâ€™s 3D objects to give each object a unique appearance.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-materials-and-shaders",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Materials, textures, and shaders",
      "type": "topic",
      "url": "/documentation/realitykit/scene-content-materials-and-shaders"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-models-and-meshes": {
      "abstract": [
        {
          "text": "Display virtual objects in your scene with mesh-based models.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-models-and-meshes",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Models and meshes",
      "type": "topic",
      "url": "/documentation/realitykit/scene-content-models-and-meshes"
    },
    "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-videos": {
      "abstract": [
        {
          "text": "Present videos in your RealityKit experiences.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-videos",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Videos",
      "type": "topic",
      "url": "/documentation/realitykit/scene-content-videos"
    },
    "doc://com.apple.documentation/documentation/Swift/Bool": {
      "abstract": [
        {
          "text": "A value type whose instances are either `true` or `false`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Bool",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/Swift/Bool"
    },
    "doc://com.apple.documentation/documentation/Swift/Codable": {
      "abstract": [
        {
          "text": "A type that can convert itself into and out of an external representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Codable"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Se",
          "text": "Decodable"
        },
        {
          "kind": "text",
          "text": " & "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SE",
          "text": "Encodable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Codable",
      "type": "topic",
      "url": "/documentation/Swift/Codable"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onChanged(_:)": {
      "abstract": [
        {
          "text": "Adds an action to perform when the gestureâ€™s value changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "attribute",
          "text": "@preconcurrency"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "onChanged"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "action"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "@escaping"
        },
        {
          "kind": "text",
          "text": " ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7GestureP5ValueQa",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "_ChangedGesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onChanged(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "onChanged(_:)",
      "type": "topic",
      "url": "/documentation/SwiftUI/Gesture/onChanged(_:)"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onEnded(_:)": {
      "abstract": [
        {
          "text": "Adds an action to perform when the gesture ends.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "nonisolated"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "onEnded"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "action"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "@escaping"
        },
        {
          "kind": "text",
          "text": " ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7GestureP5ValueQa",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "_EndedGesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Gesture/onEnded(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "onEnded(_:)",
      "type": "topic",
      "url": "/documentation/SwiftUI/Gesture/onEnded(_:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.documentation/documentation/visionOS/World": {
      "abstract": [
        {
          "text": "Use windows, volumes, and immersive spaces to teach people about the Earth.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/visionOS/World",
      "images": [
        {
          "identifier": "Hello-World-intro.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "sampleCode",
      "title": "Hello World",
      "type": "topic",
      "url": "/documentation/visionOS/World"
    },
    "doc://com.apple.documentation/documentation/visionOS/enabling-video-reflections-in-an-immersive-environment": {
      "abstract": [
        {
          "text": "Create a more immersive experience by adding video reflections in a custom environment.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/visionOS/enabling-video-reflections-in-an-immersive-environment",
      "images": [
        {
          "identifier": "lightspill-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "sampleCode",
      "title": "Enabling video reflections in an immersive environment",
      "type": "topic",
      "url": "/documentation/visionOS/enabling-video-reflections-in-an-immersive-environment"
    },
    "lightspill-PageImage-card.png": {
      "alt": null,
      "identifier": "lightspill-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/87e397de07459c756d21eb0c441569f7/lightspill-PageImage-card@2x.png"
        }
      ]
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "79d45a37b1c0/TransformingRealityKitEntitiesUsingGestures.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Scene-content",
      "generated": true,
      "identifiers": [
        "doc://com.apple.documentation/documentation/visionOS/World",
        "doc://com.apple.documentation/documentation/visionOS/enabling-video-reflections-in-an-immersive-environment",
        "doc://com.apple.RealityKit/documentation/RealityKit/creating-a-spatial-drawing-app-with-realitykit",
        "doc://com.apple.RealityKit/documentation/RealityKit/generating-interactive-geometry-with-realitykit",
        "doc://com.apple.RealityKit/documentation/RealityKit/combining-2d-and-3d-views-in-an-immersive-app",
        "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-models-and-meshes",
        "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-materials-and-shaders",
        "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-anchors",
        "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-lights-and-cameras",
        "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-content-synchronization",
        "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-audio",
        "doc://com.apple.RealityKit/documentation/RealityKit/scene-content-videos"
      ],
      "title": "Scene content"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/realitykit/transforming-realitykit-entities-with-gestures"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
