{
  "abstract": [
    {
      "text": "Fetch events and reminders from the Calendar database.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.eventkit/documentation/EventKit"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.eventkit/documentation/EventKit/retrieving-events-and-reminders"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "EventKit"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Retrieving events and reminders"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To search for and return events and reminders from the Calendar database, you must connect to the event store, as discussed in “",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/accessing-the-event-store",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".”",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "There are two ways to retrieve events and reminders. You can fetch via:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Predicate",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": ", or ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "search query",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": ", and return zero or more events that match a given query.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Unique identifier",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " and return a single event that corresponds to the given identifier.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "orderedList"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Retrieving events from the Calendar database does not necessarily return events in chronological order. To sort an array of ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEvent",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " objects by date, call ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/foundation/nsarray/1410025-sortedarray",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " on the array, providing the selector for the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEvent/compareStartDate(with:)",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " method.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Search-with-Predicates",
          "level": 3,
          "text": "Search with Predicates",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Predicates return events and reminders that match a search query.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Fetch-Events",
          "level": 4,
          "text": "Fetch Events",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "It’s common to fetch events and reminders that fall within a date range. The ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/events(matching:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ": fetches all events that fall within the date range specified in the predicate you provide. The following listing demonstrates how to fetch all events that occur between one day before and one year after the current date.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Although the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/events(matching:)",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " method accepts a parameter of type ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/foundation/nspredicate",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ", you must supply a predicate created with the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " method ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForEvents(withStart:end:calendars:)",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "Listing 1. Fetching events with a predicate",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Get the appropriate calendar.",
            "let calendar = Calendar.current",
            "",
            "// Create the start date components",
            "var oneDayAgoComponents = DateComponents()",
            "oneDayAgoComponents.day = -1",
            "let oneDayAgo = calendar.date(byAdding: oneDayAgoComponents, to: Date(), wrappingComponents: false)",
            "",
            "// Create the end date components.",
            "var oneYearFromNowComponents = DateComponents()",
            "oneYearFromNowComponents.year = 1",
            "var oneYearFromNow = calendar.date(byAdding: oneYearFromNowComponents, to: Date(), wrappingComponents: false)",
            "",
            "// Create the predicate from the event store's instance method.",
            "var predicate: NSPredicate? = nil",
            "if let anAgo = oneDayAgo, let aNow = oneYearFromNow {",
            "    predicate = store.predicateForEvents(withStart: anAgo, end: aNow, calendars: nil)",
            "}",
            "",
            "// Fetch all events that match the predicate.",
            "var events: [EKEvent]? = nil",
            "if let aPredicate = predicate {",
            "    events = store.events(matching: aPredicate) ",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can specify a subset of calendars to search by passing an array of ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKCalendar",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " objects as the calendars parameter of the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForEvents(withStart:end:calendars:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. You can get the user’s calendars from the event store’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/calendars(for:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. Passing ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " tells the method to fetch from all of the user’s calendars.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Because the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/events(matching:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method is synchronous, you may not want to run it on your app’s main thread. For asynchronous behavior, run the method on another thread with the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/dispatch/1453057-dispatch_async",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function or with an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/foundation/operation",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " object.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Fetch-Reminders",
          "level": 4,
          "text": "Fetch Reminders",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can call ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/fetchReminders(matching:completion:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to access multiple reminders that match a predicate. Pass a predicate returned by one of the following methods:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForIncompleteReminders(withDueDateStarting:ending:calendars:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " finds incomplete reminders within an optional time period.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForCompletedReminders(withCompletionDateStarting:ending:calendars:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " finds completed reminders within an optional time period.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForReminders(in:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " finds all reminders.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "You can iterate across matched reminders by passing a block to the completion argument, as shown in the listing below.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var predicate: NSPredicate? = store.predicateForReminders(in: nil)",
            "if let aPredicate = predicate {",
            "    store.fetchReminders(matching: aPredicate, completion: {(_ reminders: [Any]?) -> Void in",
            "        for reminder: EKReminder? in reminders as? [EKReminder?] ?? [EKReminder?]() {",
            "            // Do something for each reminder.",
            "        }",
            "    })",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Unlike fetching events via predicate, you can fetch reminders via predicate asynchronously without dispatching to another thread.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you want to abort your fetch request by predicate, call ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/cancelFetchRequest(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " while passing the identifier as returned by ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/fetchReminders(matching:completion:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Search-with-Unique-Identifiers",
          "level": 3,
          "text": "Search with Unique Identifiers",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you know the event’s unique identifier because you fetched it previously with a predicate, you can use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/event(withIdentifier:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to fetch the event. If it is a recurring event, this method will return the first occurrence of the event. You can get an event’s unique identifier with the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEvent/eventIdentifier",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Similarly, if you know a specific reminder’s unique identifier from previously fetching it with a predicate, you can call the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/calendarItem(withIdentifier:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance method. ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/calendarItem(withIdentifier:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " can fetch any calendar item (reminders and events), whereas ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/event(withIdentifier:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " fetches only events.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/dispatch/1453057-dispatch_async": {
      "abstract": [
        {
          "text": "Submits a block for asynchronous execution on a dispatch queue and returns immediately.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/dispatch/1453057-dispatch_async",
      "kind": "symbol",
      "role": "symbol",
      "title": "dispatch_async",
      "type": "topic",
      "url": "/documentation/dispatch/1453057-dispatch_async"
    },
    "doc://com.apple.documentation/documentation/foundation/nsarray/1410025-sortedarray": {
      "abstract": [
        {
          "text": "Returns an array that lists the receiving array’s elements in ascending order, as determined by the comparison method specified by a given selector.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "sortedArray"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": Selector) -> [Any]"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/nsarray/1410025-sortedarray",
      "kind": "symbol",
      "role": "symbol",
      "title": "sortedArray(using:)",
      "type": "topic",
      "url": "/documentation/foundation/nsarray/1410025-sortedarray"
    },
    "doc://com.apple.documentation/documentation/foundation/nspredicate": {
      "abstract": [
        {
          "text": "A definition of logical conditions for constraining a search for a fetch or for in-memory filtering.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "NSPredicate"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/nspredicate",
      "kind": "symbol",
      "role": "symbol",
      "title": "NSPredicate",
      "type": "topic",
      "url": "/documentation/foundation/nspredicate"
    },
    "doc://com.apple.documentation/documentation/foundation/operation": {
      "abstract": [
        {
          "text": "An abstract class that represents the code and data associated with a single task.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "Operation"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/operation",
      "kind": "symbol",
      "role": "symbol",
      "title": "Operation",
      "type": "topic",
      "url": "/documentation/foundation/operation"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.eventkit/documentation/EventKit": {
      "abstract": [
        {
          "text": "Create, view, and edit calendar and reminder events.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit",
      "kind": "symbol",
      "role": "collection",
      "title": "EventKit",
      "type": "topic",
      "url": "/documentation/eventkit"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKCalendar": {
      "abstract": [
        {
          "text": "A class that represents a calendar in EventKit.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EKCalendar"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKCalendar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EKCalendar"
        }
      ],
      "role": "symbol",
      "title": "EKCalendar",
      "type": "topic",
      "url": "/documentation/eventkit/ekcalendar"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEvent": {
      "abstract": [
        {
          "text": "A class that represents an event in a calendar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EKEvent"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEvent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EKEvent"
        }
      ],
      "role": "symbol",
      "title": "EKEvent",
      "type": "topic",
      "url": "/documentation/eventkit/ekevent"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEvent/compareStartDate(with:)": {
      "abstract": [
        {
          "text": "Compares the start date of the receiving event with the start date of another event.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "compareStartDate"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKEvent",
          "text": "EKEvent"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@NSComparisonResult",
          "text": "ComparisonResult"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEvent/compareStartDate(with:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "compareStartDateWithEvent:"
        }
      ],
      "role": "symbol",
      "title": "compareStartDate(with:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekevent/comparestartdate(with:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEvent/eventIdentifier": {
      "abstract": [
        {
          "text": "A unique identifier for the event.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "eventIdentifier"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "!"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEvent/eventIdentifier",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "eventIdentifier"
        }
      ],
      "role": "symbol",
      "title": "eventIdentifier",
      "type": "topic",
      "url": "/documentation/eventkit/ekevent/eventidentifier"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore": {
      "abstract": [
        {
          "text": "An object that accesses a person’s calendar events and reminders and supports the scheduling of new events.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EKEventStore"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EKEventStore"
        }
      ],
      "role": "symbol",
      "title": "EKEventStore",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/calendarItem(withIdentifier:)": {
      "abstract": [
        {
          "text": "Locates a reminder or the first occurrence of an event with the specified identifier.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "calendarItem"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "withIdentifier"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKCalendarItem",
          "text": "EKCalendarItem"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/calendarItem(withIdentifier:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "calendarItemWithIdentifier:"
        }
      ],
      "role": "symbol",
      "title": "calendarItem(withIdentifier:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/calendaritem(withidentifier:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/calendars(for:)": {
      "abstract": [
        {
          "text": "Identifies the calendars that support a given entity type, such as reminders or events.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "calendars"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "for"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@EKEntityType",
          "text": "EKEntityType"
        },
        {
          "kind": "text",
          "text": ") -> ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKCalendar",
          "text": "EKCalendar"
        },
        {
          "kind": "text",
          "text": "]"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/calendars(for:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "calendarsForEntityType:"
        }
      ],
      "role": "symbol",
      "title": "calendars(for:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/calendars(for:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/cancelFetchRequest(_:)": {
      "abstract": [
        {
          "text": "Cancels the request to fetch reminders.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "cancelFetchRequest"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "Any"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/cancelFetchRequest(_:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "cancelFetchRequest:"
        }
      ],
      "role": "symbol",
      "title": "cancelFetchRequest(_:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/cancelfetchrequest(_:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/event(withIdentifier:)": {
      "abstract": [
        {
          "text": "Locates the first occurrence of an event with a given identifier.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "event"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "withIdentifier"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKEvent",
          "text": "EKEvent"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/event(withIdentifier:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "eventWithIdentifier:"
        }
      ],
      "role": "symbol",
      "title": "event(withIdentifier:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/event(withidentifier:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/events(matching:)": {
      "abstract": [
        {
          "text": "Finds all events that match a given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "events"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "matching"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSPredicate",
          "text": "NSPredicate"
        },
        {
          "kind": "text",
          "text": ") -> ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKEvent",
          "text": "EKEvent"
        },
        {
          "kind": "text",
          "text": "]"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/events(matching:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "eventsMatchingPredicate:"
        }
      ],
      "role": "symbol",
      "title": "events(matching:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/events(matching:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/fetchReminders(matching:completion:)": {
      "abstract": [
        {
          "text": "Fetches reminders that match a given predicate.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "fetchReminders"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "matching"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSPredicate",
          "text": "NSPredicate"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "completion"
        },
        {
          "kind": "text",
          "text": ": (["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKReminder",
          "text": "EKReminder"
        },
        {
          "kind": "text",
          "text": "]?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "Any"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/fetchReminders(matching:completion:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "fetchRemindersMatchingPredicate:completion:"
        }
      ],
      "role": "symbol",
      "title": "fetchReminders(matching:completion:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/fetchreminders(matching:completion:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForCompletedReminders(withCompletionDateStarting:ending:calendars:)": {
      "abstract": [
        {
          "text": "Creates a predicate to identify all completed reminders that occur within a given date range.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "predicateForCompletedReminders"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "withCompletionDateStarting"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV",
          "text": "Date"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "ending"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV",
          "text": "Date"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "calendars"
        },
        {
          "kind": "text",
          "text": ": ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKCalendar",
          "text": "EKCalendar"
        },
        {
          "kind": "text",
          "text": "]?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSPredicate",
          "text": "NSPredicate"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForCompletedReminders(withCompletionDateStarting:ending:calendars:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:"
        }
      ],
      "role": "symbol",
      "title": "predicateForCompletedReminders(withCompletionDateStarting:ending:calendars:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/predicateforcompletedreminders(withcompletiondatestarting:ending:calendars:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForEvents(withStart:end:calendars:)": {
      "abstract": [
        {
          "text": "Creates a predicate to identify events that occur within a given date range.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "predicateForEvents"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "withStart"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV",
          "text": "Date"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "end"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV",
          "text": "Date"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "calendars"
        },
        {
          "kind": "text",
          "text": ": ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKCalendar",
          "text": "EKCalendar"
        },
        {
          "kind": "text",
          "text": "]?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSPredicate",
          "text": "NSPredicate"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForEvents(withStart:end:calendars:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "predicateForEventsWithStartDate:endDate:calendars:"
        }
      ],
      "role": "symbol",
      "title": "predicateForEvents(withStart:end:calendars:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/predicateforevents(withstart:end:calendars:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForIncompleteReminders(withDueDateStarting:ending:calendars:)": {
      "abstract": [
        {
          "text": "Creates a predicate to identify all incomplete reminders that occur within a given date range.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "predicateForIncompleteReminders"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "withDueDateStarting"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV",
          "text": "Date"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "ending"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation4DateV",
          "text": "Date"
        },
        {
          "kind": "text",
          "text": "?, "
        },
        {
          "kind": "externalParam",
          "text": "calendars"
        },
        {
          "kind": "text",
          "text": ": ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKCalendar",
          "text": "EKCalendar"
        },
        {
          "kind": "text",
          "text": "]?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSPredicate",
          "text": "NSPredicate"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForIncompleteReminders(withDueDateStarting:ending:calendars:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:"
        }
      ],
      "role": "symbol",
      "title": "predicateForIncompleteReminders(withDueDateStarting:ending:calendars:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/predicateforincompletereminders(withduedatestarting:ending:calendars:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForReminders(in:)": {
      "abstract": [
        {
          "text": "Creates a predicate to identify all reminders in a collection of calendars.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "predicateForReminders"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "in"
        },
        {
          "kind": "text",
          "text": ": ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)EKCalendar",
          "text": "EKCalendar"
        },
        {
          "kind": "text",
          "text": "]?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSPredicate",
          "text": "NSPredicate"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKEventStore/predicateForReminders(in:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "predicateForRemindersInCalendars:"
        }
      ],
      "role": "symbol",
      "title": "predicateForReminders(in:)",
      "type": "topic",
      "url": "/documentation/eventkit/ekeventstore/predicateforreminders(in:)"
    },
    "doc://com.apple.eventkit/documentation/EventKit/EKReminder": {
      "abstract": [
        {
          "text": "A class that represents a reminder in a calendar.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EKReminder"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/EKReminder",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EKReminder"
        }
      ],
      "role": "symbol",
      "title": "EKReminder",
      "type": "topic",
      "url": "/documentation/eventkit/ekreminder"
    },
    "doc://com.apple.eventkit/documentation/EventKit/accessing-the-event-store": {
      "abstract": [
        {
          "text": "Request access to a person’s calendar data through the event store.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/accessing-the-event-store",
      "kind": "article",
      "role": "article",
      "title": "Accessing the event store",
      "type": "topic",
      "url": "/documentation/eventkit/accessing-the-event-store"
    },
    "doc://com.apple.eventkit/documentation/EventKit/creating-events-and-reminders": {
      "abstract": [
        {
          "text": "Create and modify events and reminders in a person’s database.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/creating-events-and-reminders",
      "kind": "article",
      "role": "article",
      "title": "Creating events and reminders",
      "type": "topic",
      "url": "/documentation/eventkit/creating-events-and-reminders"
    },
    "doc://com.apple.eventkit/documentation/EventKit/managing-location-based-reminders": {
      "abstract": [
        {
          "text": "Add, fetch, complete, remove, and sort location-based reminders in your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/managing-location-based-reminders",
      "kind": "article",
      "role": "sampleCode",
      "title": "Managing Location-Based Reminders",
      "type": "topic",
      "url": "/documentation/eventkit/managing-location-based-reminders"
    },
    "doc://com.apple.eventkit/documentation/EventKit/updating-with-notifications": {
      "abstract": [
        {
          "text": "Register for notifications about changes and keep your app up to date.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.eventkit/documentation/EventKit/updating-with-notifications",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Updating with notifications",
      "type": "topic",
      "url": "/documentation/eventkit/updating-with-notifications"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Events-and-reminders",
      "generated": true,
      "identifiers": [
        "doc://com.apple.eventkit/documentation/EventKit/creating-events-and-reminders",
        "doc://com.apple.eventkit/documentation/EventKit/updating-with-notifications",
        "doc://com.apple.eventkit/documentation/EventKit/managing-location-based-reminders",
        "doc://com.apple.eventkit/documentation/EventKit/EKEvent",
        "doc://com.apple.eventkit/documentation/EventKit/EKReminder"
      ],
      "title": "Events and reminders"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Events-and-reminders",
              "generated": true,
              "identifiers": [
                "doc://com.apple.eventkit/documentation/EventKit/creating-events-and-reminders",
                "doc://com.apple.eventkit/documentation/EventKit/updating-with-notifications",
                "doc://com.apple.eventkit/documentation/EventKit/managing-location-based-reminders",
                "doc://com.apple.eventkit/documentation/EventKit/EKEvent",
                "doc://com.apple.eventkit/documentation/EventKit/EKReminder"
              ],
              "title": "Events and reminders"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1cancelFetchRequest(_:)/title",
          "value": "cancelFetchRequest:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1cancelFetchRequest(_:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "cancelFetchRequest:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1predicateForCompletedReminders(withCompletionDateStarting:ending:calendars:)/title",
          "value": "predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1predicateForCompletedReminders(withCompletionDateStarting:ending:calendars:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1fetchReminders(matching:completion:)/title",
          "value": "fetchRemindersMatchingPredicate:completion:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1fetchReminders(matching:completion:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "fetchRemindersMatchingPredicate:completion:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEvent~1compareStartDate(with:)/title",
          "value": "compareStartDateWithEvent:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEvent~1compareStartDate(with:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "compareStartDateWithEvent:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1predicateForIncompleteReminders(withDueDateStarting:ending:calendars:)/title",
          "value": "predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1predicateForIncompleteReminders(withDueDateStarting:ending:calendars:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1predicateForEvents(withStart:end:calendars:)/title",
          "value": "predicateForEventsWithStartDate:endDate:calendars:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1predicateForEvents(withStart:end:calendars:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "predicateForEventsWithStartDate:endDate:calendars:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKCalendar/title",
          "value": "EKCalendar"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKCalendar/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "EKCalendar"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKCalendar/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "EKCalendar"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1event(withIdentifier:)/title",
          "value": "eventWithIdentifier:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1event(withIdentifier:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "eventWithIdentifier:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1events(matching:)/title",
          "value": "eventsMatchingPredicate:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1events(matching:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "eventsMatchingPredicate:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1calendarItem(withIdentifier:)/title",
          "value": "calendarItemWithIdentifier:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1calendarItem(withIdentifier:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "calendarItemWithIdentifier:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEvent/title",
          "value": "EKEvent"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEvent/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "EKEvent"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEvent/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "EKEvent"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore/title",
          "value": "EKEventStore"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "EKEventStore"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "EKEventStore"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKReminder/title",
          "value": "EKReminder"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKReminder/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "EKReminder"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKReminder/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "EKReminder"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEvent~1eventIdentifier/title",
          "value": "eventIdentifier"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEvent~1eventIdentifier/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "eventIdentifier"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1foundation~1nsarray~11410025-sortedarray/title",
          "value": "sortedArrayUsingSelector:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1calendars(for:)/title",
          "value": "calendarsForEntityType:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1calendars(for:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "calendarsForEntityType:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1predicateForReminders(in:)/title",
          "value": "predicateForRemindersInCalendars:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.eventkit~1documentation~1EventKit~1EKEventStore~1predicateForReminders(in:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "predicateForRemindersInCalendars:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1foundation~1operation/title",
          "value": "NSOperation"
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/eventkit/retrieving-events-and-reminders"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/eventkit/retrieving-events-and-reminders"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
