{
  "abstract": [
    {
      "text": "Forecast future data points by training a machine learning model using historical data.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/creating-a-time-series-forecaster"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Create ML Components"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Creating a time-series forecaster"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Some signals have patterns that repeat over time or have clear trends.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, the energy consumption of a city has a pattern with peaks in the evening when most people get home.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "It’s common practice to refer to these signals as time-series data.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Other examples of time-series data are:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The accelerometer on your phone when performing an action.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The temperature of a machine in a factory.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Your heart rate during a gym session.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "Even though there are patterns to the data, these patterns aren’t trivial to forecast.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You can perform forecasts on these data by training an ML model.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, you can forecast future energy consumption based on historical consumption.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Training a time-series forecaster with the Create ML Components framework shares common training behavior with other model types.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Prepare-your-training-data",
          "level": 3,
          "text": "Prepare your training data",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The first step to begin forecasting the energy consumption is to prepare the data.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Gather the data as a CSV file, using the following structure:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "Date",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Consumption",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "2024-04-01 00:00:00",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1.948",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "2024-04-01 01:00:00",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1.678",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "2024-04-01 02:00:00",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1.873",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "2024-04-01 03:00:00",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1.604",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "inlineContent": [
            {
              "text": "The table shows a energy consumption reading for every hour (in GWh).",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Use the date and time because the consumption depends on the season and the time of day.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Parse the date string into a ",
              "type": "text"
            },
            {
              "code": "Date",
              "type": "codeVoice"
            },
            {
              "text": " type by using ",
              "type": "text"
            },
            {
              "code": "CSVReadingOptions",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "Date.ParseStrategy",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var options = CSVReadingOptions()",
            "options.floatingPointType = .float",
            "options.addDateParseStrategy(",
            "    Date.ParseStrategy(",
            "        format: \"\\(year: .defaultDigits)-\\(month: .twoDigits)-\\(day: .twoDigits) \\(hour: .twoDigits(clock: .twentyFourHour, hourCycle: .zeroBased)):\\(minute: .twoDigits):\\(second: .twoDigits))\",",
            "        locale: Locale(identifier: \"en_US\"),",
            "        timeZone: TimeZone(abbreviation: \"GMT\")!",
            "    )",
            ")",
            "let dataFrame = try DataFrame(contentsOfCSVFile: url, columns: [\"Date\", \"Temp\"], types: [\"Date\": .date], options: options)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Now that you have a data frame with a ",
              "type": "text"
            },
            {
              "code": "Date",
              "type": "codeVoice"
            },
            {
              "text": " column and a ",
              "type": "text"
            },
            {
              "code": "Float",
              "type": "codeVoice"
            },
            {
              "text": " column, create a preprocessing pipeline.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "First, scale the training consumptions to have a normal distribution.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "This makes it easier for the model to learn.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Take note of the mean and standard deviation to reverse this operation later.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Compute the scale of the training portion.",
            "let scalerEstimator = ColumnSelector<_, Float>(",
            "    .include(columnNames: [\"Temp\"]),",
            "    estimator: OptionalUnwrapper().appending(StandardScaler<Float>())",
            ")",
            "let trainingDataFrame = DataFrame(dataFrame[trainingPortion])",
            "let scaler = try await scalerEstimator.fitted(to: trainingDataFrame)",
            "",
            "// Scale the features.",
            "let scaledDataFrame = try await scaler.applied(to: dataFrame)",
            "let mean = scaler.transformers[\"Temp\"]!.outer.mean",
            "let stddev = scaler.transformers[\"Temp\"]!.outer.standardDeviation"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Extract features from the dates by using ",
              "type": "text"
            },
            {
              "code": "DateFeatureExtractor",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The extractor creates values in the range ",
              "type": "text"
            },
            {
              "code": "-0.5 ... 0.5",
              "type": "codeVoice"
            },
            {
              "text": " and represents the components you select.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Concatenate all features into a single column of ",
              "type": "text"
            },
            {
              "code": "MLShapedArray<Float>",
              "type": "codeVoice"
            },
            {
              "text": " values and create a features data frame.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Extract the date features.",
            "let dateFeatureExtractor = ColumnSelector<_, Date>(",
            "    .include(columnNames: [\"Date\"]),",
            "    transformer: OptionalUnwrapper().appending(",
            "        DateFeatureExtractor<Float>(features: [.hour, .weekday, .day, .dayOfYear])",
            "    )",
            ")",
            "// Concatenate the features.",
            "let concatenator = ColumnConcatenator<Float>(",
            "    columnSelection: .all,",
            "    concatenatedColumnName: \"Features\"",
            ")",
            "let preprocessor = try await dateFeatureExtractor.appending(concatenator).fitted(to: scaledDataFrame)",
            "let featuresDataFrame = try await preprocessor.applied(to: dataFrame)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, extract features and annotations, and divide the data into training, validation, and testing sets:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let features = featuresDataFrame[\"Features\", MLShapedArray<Float>.self]",
            "    .filled(with: MLShapedArray<Float>())",
            "let annotations = scaledDataFrame[\"Temp\", Float.self]",
            "    .filled(with: 0.0)",
            "    .map({ MLShapedArray<Float>(scalars: [Float($0)], shape: [1]) })",
            "",
            "// Create the training, validation, and testing splits.",
            "let dayInHours = 24",
            "let monthInHours = 30 * dayInHours",
            "let yearInHours = 12 * monthInHours",
            "",
            "let trainingPortion = 0 ..< yearInHours",
            "let testingPotion = yearInHours + 4 * monthInHours - configuration.inputWindowSize ..< yearInHours + 8 * monthInHours",
            "let validationPortion = yearInHours - configuration.inputWindowSize ..< yearInHours + 4 * monthInHours",
            "",
            "let training = zip(features[trainingPortion], annotations[trainingPortion]).map(AnnotatedFeature.init)",
            "let validation = zip(features[validationPortion], annotations[validationPortion]).map(AnnotatedFeature.init)",
            "let testing = zip(features[testingPotion], annotations[testingPotion]).map(AnnotatedFeature.init)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Build-and-train-a-time-series-forecaster",
          "level": 3,
          "text": "Build and train a time-series forecaster",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "After preparing your training data, you can create a forecaster.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The forecaster configuration takes the input window size and forecast window size.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Depending on your task you may want to adjust these values.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "A larger input window provides more context to the model, but results in a larger model.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For this example, set the input window size to 14 days (336 samples) and the forecast window size to 4 days (96 samples).",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var configuration = LinearTimeSeriesForecasterConfiguration(",
            "    inputWindowSize: 14 * dayInHours,",
            "    forecastWindowSize: 4 * dayInHours",
            ")",
            "configuration.maximumIterationCount = 20",
            "",
            "let estimator = LinearTimeSeriesForecaster<Float>(configuration: configuration)",
            "let model = try await estimator.fitted(to: training, validateOn: validation) { event in",
            "    if let validationLoss = event.metrics[MetricsKey.validationLoss] as? Double {",
            "        print(\"Validation loss: \\(validationLoss)\")",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Evaluate-the-model",
          "level": 3,
          "text": "Evaluate the model",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use your testing set to evaluate your model.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Two useful metrics you use to check a forecaster model are the mean-squared error (MSE) and the mean-absolute error (MAE).",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var mseValues = [Double]()",
            "var maeValues = [Double]()",
            "let predictions = try await model.applied(to: testing.map(\\.feature))",
            "let groundTruths = testing.dropFirst(configuration.forecastWindowSize).map(\\.annotation)",
            "for (prediction, groundTruth) in zip(predictions, groundTruths) {",
            "    let mse = meanSquaredError(prediction.scalars, groundTruth.scalars)",
            "    let mae = meanAbsoluteError(prediction.scalars, groundTruth.scalars)",
            "    mseValues.append(Double(mse))",
            "    maeValues.append(Double(mae))",
            "}",
            "",
            "let mseSum = mseValues.reduce(0, +)",
            "let mse = mseSum / Double(mseValues.count)",
            "print(\"MSE: \\(mse)\")",
            "",
            "let maeSum = maeValues.reduce(0, +)",
            "let mae = maeSum / Double(maeValues.count)",
            "print(\"MAE: \\(mae)\")"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Export-the-model",
          "level": 3,
          "text": "Export the model",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you’re satisfied with the model’s accuracy, export it as a Core ML package:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "try model.export(to: URL(filePath: \"forecaster.mlpackage\"))"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Deploy the model you export and use Core ML to perform predictions.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "When you use the model, you need to concatenate the input window samples into a single shaped array.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "If you provide more than one window of input, the model returns multiple results in a shaped array.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let mlmodel = try MLModel(contentsOf: modelURL)",
            "let testFeatures = MLShapedArray<Float>(",
            "    concatenating: testing[0 ..< 14 * dayInHours].map(\\.feature).map({ $0.expandingShape(at: 0) }),",
            "    alongAxis: 0",
            ")",
            "let featureValue = MLFeatureValue(shapedArray: testFeatures)",
            "let featureProvider = try MLDictionaryFeatureProvider(dictionary: [\"input\": featureValue])",
            "let modelOutput = try await mlmodel.prediction(from: featureProvider)",
            "let result = modelOutput.featureValue(for: \"output\")!.shapedArrayValue(of: Float.self)!"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The model output provides scaled temperatures, so use the mean and standard deviation values to compute the temperatures:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let temperatures = result.scalars.map({ $0 * stddev + mean })",
            "print(temperatures)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents": {
      "abstract": [
        {
          "text": "Create more customizable machine learning models in your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents",
      "kind": "symbol",
      "role": "collection",
      "title": "Create ML Components",
      "type": "topic",
      "url": "/documentation/createmlcomponents"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/DateFeatureExtractor": {
      "abstract": [
        {
          "text": "A time and date feature extractor.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DateFeatureExtractor"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/DateFeatureExtractor",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DateFeatureExtractor"
        }
      ],
      "role": "symbol",
      "title": "DateFeatureExtractor",
      "type": "topic",
      "url": "/documentation/createmlcomponents/datefeatureextractor"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/DateFeatures": {
      "abstract": [
        {
          "text": "A set of date and time features.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DateFeatures"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/DateFeatures",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DateFeatures"
        }
      ],
      "role": "symbol",
      "title": "DateFeatures",
      "type": "topic",
      "url": "/documentation/createmlcomponents/datefeatures"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/Downsampler": {
      "abstract": [
        {
          "text": "A temporal transformer that down samples the input stream.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Downsampler"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/Downsampler",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Downsampler"
        }
      ],
      "role": "symbol",
      "title": "Downsampler",
      "type": "topic",
      "url": "/documentation/createmlcomponents/downsampler"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/LinearTimeSeriesForecaster": {
      "abstract": [
        {
          "text": "A time-series forecasting estimator.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LinearTimeSeriesForecaster"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/LinearTimeSeriesForecaster",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LinearTimeSeriesForecaster"
        }
      ],
      "role": "symbol",
      "title": "LinearTimeSeriesForecaster",
      "type": "topic",
      "url": "/documentation/createmlcomponents/lineartimeseriesforecaster"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/LinearTimeSeriesForecasterConfiguration": {
      "abstract": [
        {
          "text": "The configuration for a linear time-series forecaster.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LinearTimeSeriesForecasterConfiguration"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/LinearTimeSeriesForecasterConfiguration",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LinearTimeSeriesForecasterConfiguration"
        }
      ],
      "role": "symbol",
      "title": "LinearTimeSeriesForecasterConfiguration",
      "type": "topic",
      "url": "/documentation/createmlcomponents/lineartimeseriesforecasterconfiguration"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/SlidingWindowTransformer": {
      "abstract": [
        {
          "text": "A temporal transformer that groups input elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SlidingWindowTransformer"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/SlidingWindowTransformer",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SlidingWindowTransformer"
        }
      ],
      "role": "symbol",
      "title": "SlidingWindowTransformer",
      "type": "topic",
      "url": "/documentation/createmlcomponents/slidingwindowtransformer"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/SlidingWindows": {
      "abstract": [
        {
          "text": "A sequence of windows on a time series shaped array.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SlidingWindows"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/SlidingWindows",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SlidingWindows"
        }
      ],
      "role": "symbol",
      "title": "SlidingWindows",
      "type": "topic",
      "url": "/documentation/createmlcomponents/slidingwindows"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalFeature": {
      "abstract": [
        {
          "text": "A temporal feature contains a segment identifier and a feature value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TemporalFeature"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalFeature",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TemporalFeature"
        }
      ],
      "role": "symbol",
      "title": "TemporalFeature",
      "type": "topic",
      "url": "/documentation/createmlcomponents/temporalfeature"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalFileSegment": {
      "abstract": [
        {
          "text": "A URL and a time range identifying a specific segment of a time-based (temporal) file.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TemporalFileSegment"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalFileSegment",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TemporalFileSegment"
        }
      ],
      "role": "symbol",
      "title": "TemporalFileSegment",
      "type": "topic",
      "url": "/documentation/createmlcomponents/temporalfilesegment"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalSegmentIdentifier": {
      "abstract": [
        {
          "text": "Uniquely identifiers a segment of a temporal sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TemporalSegmentIdentifier"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalSegmentIdentifier",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TemporalSegmentIdentifier"
        }
      ],
      "role": "symbol",
      "title": "TemporalSegmentIdentifier",
      "type": "topic",
      "url": "/documentation/createmlcomponents/temporalsegmentidentifier"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalSequence": {
      "abstract": [
        {
          "text": "Async sequence for temporal features.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TemporalSequence"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalSequence",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TemporalSequence"
        }
      ],
      "role": "symbol",
      "title": "TemporalSequence",
      "type": "topic",
      "url": "/documentation/createmlcomponents/temporalsequence"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TimeSeriesForecasterAnnotatedWindows": {
      "abstract": [
        {
          "text": "A sequence of forecasting windows on a time series shaped array.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TimeSeriesForecasterAnnotatedWindows"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TimeSeriesForecasterAnnotatedWindows",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TimeSeriesForecasterAnnotatedWindows"
        }
      ],
      "role": "symbol",
      "title": "TimeSeriesForecasterAnnotatedWindows",
      "type": "topic",
      "url": "/documentation/createmlcomponents/timeseriesforecasterannotatedwindows"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TimeSeriesForecasterBatches": {
      "abstract": [
        {
          "text": "A sequence of forecaster batches on a time series shaped array.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TimeSeriesForecasterBatches"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TimeSeriesForecasterBatches",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TimeSeriesForecasterBatches"
        }
      ],
      "role": "symbol",
      "title": "TimeSeriesForecasterBatches",
      "type": "topic",
      "url": "/documentation/createmlcomponents/timeseriesforecasterbatches"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/VideoReader": {
      "abstract": [
        {
          "text": "A video file reader.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "VideoReader"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/VideoReader",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "VideoReader"
        }
      ],
      "role": "symbol",
      "title": "VideoReader",
      "type": "topic",
      "url": "/documentation/createmlcomponents/videoreader"
    },
    "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/creating-a-time-series-classifier": {
      "abstract": [
        {
          "text": "Train a machine learning model to predict the class label of time-series signals.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/creating-a-time-series-classifier",
      "kind": "article",
      "role": "article",
      "title": "Creating a time-series classifier",
      "type": "topic",
      "url": "/documentation/createmlcomponents/creating-a-time-series-classifier"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Time-based-components",
      "generated": true,
      "identifiers": [
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/creating-a-time-series-classifier",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/DateFeatures",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/DateFeatureExtractor",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/LinearTimeSeriesForecaster",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/LinearTimeSeriesForecasterConfiguration",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TimeSeriesForecasterBatches",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TimeSeriesForecasterAnnotatedWindows",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalFeature",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalSequence",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalSegmentIdentifier",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/SlidingWindows",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/SlidingWindowTransformer",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/Downsampler",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/VideoReader",
        "doc://com.apple.CreateMLComponents/documentation/CreateMLComponents/TemporalFileSegment"
      ],
      "title": "Time-based components"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/createmlcomponents/creating-a-time-series-forecaster"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
