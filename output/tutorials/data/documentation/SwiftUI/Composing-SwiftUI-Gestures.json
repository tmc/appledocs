{
  "abstract": [
    {
      "text": "Combine gestures to create complex interactions.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Gestures"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/Composing-SwiftUI-Gestures"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Composing SwiftUI gestures"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you add multiple gestures to your appâ€™s view hierarchy, you need to decide how",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the gestures interact with each other. You use gesture composition to define the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "order SwiftUI recognizes gestures. There are three gesture composition types:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Simultaneous",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Sequenced",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Exclusive",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "When you combine gesture modifiers simultaneously, SwiftUI must recognize all subgesture",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "patterns at the same time for it to recognize the combining gesture. When you sequence",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "gesture modifiers one after the other, SwiftUI must recognize each subgesture in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "order. Finally, when you combine gestures exclusively, SwiftUI recognizes the entire",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "gesture pattern when SwiftUI only recognizes one subgesture but not the others.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Sequence-one-gesture-after-another",
          "level": 3,
          "text": "Sequence one gesture after another",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you sequence one gesture after another, SwiftUI recognizes the first gesture",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "before it recognizes the second. For example, to require a long press before the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "user can drag a view, you sequence a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/DragGesture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " after a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Model-sequenced-gesture-states",
          "level": 4,
          "text": "Model sequenced gesture states",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To make it easier to track complicated states, use an enumeration that captures all",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of the states you need to configure your views. In the following example, there are",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "three important states: no interaction (",
              "type": "text"
            },
            {
              "code": "inactive",
              "type": "codeVoice"
            },
            {
              "text": "), long press in progress (",
              "type": "text"
            },
            {
              "code": "pressing",
              "type": "codeVoice"
            },
            {
              "text": "),",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and dragging (",
              "type": "text"
            },
            {
              "code": "dragging",
              "type": "codeVoice"
            },
            {
              "text": ").",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct DraggableCircle: View {",
            "",
            "    enum DragState {",
            "        case inactive",
            "        case pressing",
            "        case dragging(translation: CGSize)",
            "        ",
            "        var translation: CGSize {",
            "            switch self {",
            "            case .inactive, .pressing:",
            "                return .zero",
            "            case .dragging(let translation):",
            "                return translation",
            "            }",
            "        }",
            "        ",
            "        var isActive: Bool {",
            "            switch self {",
            "            case .inactive:",
            "                return false",
            "            case .pressing, .dragging:",
            "                return true",
            "            }",
            "        }",
            "        ",
            "        var isDragging: Bool {",
            "            switch self {",
            "            case .inactive, .pressing:",
            "                return false",
            "            case .dragging:",
            "                return true",
            "            }",
            "        }",
            "    }",
            "    ",
            "    @GestureState private var dragState = DragState.inactive",
            "    @State private var viewState = CGSize.zero"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Create-gestures-and-update-the-UI-state",
          "level": 4,
          "text": "Create gestures and update the UI state",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you sequence two gestures, the callbacks capture the state of both gestures.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In the update callback, the new ",
              "type": "text"
            },
            {
              "code": "value",
              "type": "codeVoice"
            },
            {
              "text": " uses an enumeration to represent the combination",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of the possible gesture states. The code below converts the underlying gesture states",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "into the high-level ",
              "type": "text"
            },
            {
              "code": "DragState",
              "type": "codeVoice"
            },
            {
              "text": " enumeration defined above.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var body: some View {",
            "        let minimumLongPressDuration = 0.5",
            "        let longPressDrag = LongPressGesture(minimumDuration: minimumLongPressDuration)",
            "            .sequenced(before: DragGesture())",
            "            .updating($dragState) { value, state, transaction in",
            "                switch value {",
            "                // Long press begins.",
            "                case .first(true):",
            "                    state = .pressing",
            "                // Long press confirmed, dragging may begin.",
            "                case .second(true, let drag):",
            "                    state = .dragging(translation: drag?.translation ?? .zero)",
            "                // Dragging ended or the long press cancelled.",
            "                default:",
            "                    state = .inactive",
            "                }",
            "            }",
            "            .onEnded { value in",
            "                guard case .second(true, let drag?) = value else { return }",
            "                self.viewState.width += drag.translation.width",
            "                self.viewState.height += drag.translation.height",
            "            }"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When the user begins pressing the view, the drag state changes to ",
              "type": "text"
            },
            {
              "code": "pressing",
              "type": "codeVoice"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a shadow animates under the shape. After the user finishes the long press and the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "drag state changes to ",
              "type": "text"
            },
            {
              "code": "dragging",
              "type": "codeVoice"
            },
            {
              "text": ", a border appears around the shape to indicate that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the user may begin moving the view.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "        return Circle()",
            "            .fill(Color.blue)",
            "            .overlay(dragState.isDragging ? Circle().stroke(Color.white, lineWidth: 2) : nil)",
            "            .frame(width: 100, height: 100, alignment: .center)",
            "            .offset(",
            "                x: viewState.width + dragState.translation.width,",
            "                y: viewState.height + dragState.translation.height",
            "            )",
            "            .animation(nil)",
            "            .shadow(radius: dragState.isActive ? 8 : 0)",
            "            .animation(.linear(duration: minimumLongPressDuration))",
            "            .gesture(longPressDrag)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/DragGesture": {
      "abstract": [
        {
          "text": "A dragging motion that invokes an action as the drag-event sequence changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DragGesture"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/DragGesture",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DragGesture"
        }
      ],
      "role": "symbol",
      "title": "DragGesture",
      "type": "topic",
      "url": "/documentation/swiftui/draggesture"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/ExclusiveGesture": {
      "abstract": [
        {
          "text": "A gesture that consists of two gestures where only one of them can succeed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExclusiveGesture"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ExclusiveGesture",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExclusiveGesture"
        }
      ],
      "role": "symbol",
      "title": "ExclusiveGesture",
      "type": "topic",
      "url": "/documentation/swiftui/exclusivegesture"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Gestures": {
      "abstract": [
        {
          "text": "Define interactions from taps, clicks, and swipes to fine-grained gestures.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gestures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Gestures",
      "type": "topic",
      "url": "/documentation/swiftui/gestures"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture": {
      "abstract": [
        {
          "text": "A gesture that succeeds when the user performs a long press.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LongPressGesture"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LongPressGesture"
        }
      ],
      "role": "symbol",
      "title": "LongPressGesture",
      "type": "topic",
      "url": "/documentation/swiftui/longpressgesture"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/SequenceGesture": {
      "abstract": [
        {
          "text": "A gesture thatâ€™s a sequence of two gestures.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SequenceGesture"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/SequenceGesture",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SequenceGesture"
        }
      ],
      "role": "symbol",
      "title": "SequenceGesture",
      "type": "topic",
      "url": "/documentation/swiftui/sequencegesture"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/SimultaneousGesture": {
      "abstract": [
        {
          "text": "A gesture containing two gestures that can happen at the same time with",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "neither of them preceding the other.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SimultaneousGesture"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/SimultaneousGesture",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SimultaneousGesture"
        }
      ],
      "role": "symbol",
      "title": "SimultaneousGesture",
      "type": "topic",
      "url": "/documentation/swiftui/simultaneousgesture"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:including:)": {
      "abstract": [
        {
          "text": "Attaches a gesture to the view to process simultaneously with gestures",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "defined by the view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "simultaneousGesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "including"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI11GestureMaskV",
          "text": "GestureMask"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:including:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "simultaneousGesture(_:including:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/simultaneousgesture(_:including:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:isEnabled:)": {
      "abstract": [
        {
          "text": "Attaches a gesture to the view to process simultaneously with gestures",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "defined by the view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "simultaneousGesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isEnabled"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:isEnabled:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "simultaneousGesture(_:isEnabled:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/simultaneousgesture(_:isenabled:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:name:isEnabled:)": {
      "abstract": [
        {
          "text": "Attaches a gesture to the view to process simultaneously with gestures",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "defined by the view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "simultaneousGesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "name"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isEnabled"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:name:isEnabled:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "simultaneousGesture(_:name:isEnabled:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/simultaneousgesture(_:name:isenabled:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Combining-gestures",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:including:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:isEnabled:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/simultaneousGesture(_:name:isEnabled:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/SequenceGesture",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/SimultaneousGesture",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/ExclusiveGesture"
      ],
      "title": "Combining gestures"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/composing-swiftui-gestures"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
