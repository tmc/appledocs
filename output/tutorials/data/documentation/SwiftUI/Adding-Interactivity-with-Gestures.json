{
  "abstract": [
    {
      "text": "Use gesture modifiers to add interactivity to your app.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Gestures"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/Adding-Interactivity-with-Gestures"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Adding interactivity with gestures"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Gesture modifiers handle all of the logic needed to process user-input events such",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as touches, and recognize when those events match a known gesture pattern, such as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a long press or rotation. When recognizing a pattern, SwiftUI runs a callback you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use to update the state of a view or perform an action.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Add-gesture-modifiers-to-a-view",
          "level": 3,
          "text": "Add gesture modifiers to a view",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Each gesture you add applies to a specific view in the view hierarchy. To recognize",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a gesture event on a particular view, create and configure the gesture, and then",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/gesture(_:including:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " modifier:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ShapeTapView: View {",
            "    var body: some View {",
            "        let tap = TapGesture()",
            "            .onEnded { _ in",
            "                print(\"View tapped!\")",
            "            }",
            "        ",
            "        return Circle()",
            "            .fill(Color.blue)",
            "            .frame(width: 100, height: 100, alignment: .center)",
            "            .gesture(tap)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Respond-to-gesture-callbacks",
          "level": 3,
          "text": "Respond to gesture callbacks",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Depending on the callbacks you add to a gesture modifier, SwiftUI reports back to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "your code whenever the state of the gesture changes. Gesture modifiers offer three",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "ways to receive updates: ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/updating(_:body:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onChanged(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onEnded(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Update-transient-UI-state",
          "level": 4,
          "text": "Update transient UI state",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To update a view as a gesture changes, add a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/GestureState",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "your view and update it in the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/updating(_:body:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " callback. SwiftUI invokes the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "updating callback as soon as it recognizes the gesture and whenever the value of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the gesture changes. For example, SwiftUI invokes the updating callback as soon as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a magnification gesture begins and then again whenever the magnification value changes.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "SwiftUI doesnâ€™t invoke the updating callback when the user ends or cancels a gesture.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Instead, the gesture state property automatically resets its state back to its initial",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "value.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, to make a view that changes color while the user performs a long press,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "add a gesture state property and update it in the updating callback.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct CounterView: View {",
            "    @GestureState private var isDetectingLongPress = false",
            "    ",
            "    var body: some View {",
            "        let press = LongPressGesture(minimumDuration: 1)",
            "            .updating($isDetectingLongPress) { currentState, gestureState, transaction in",
            "                gestureState = currentState",
            "            }",
            "        ",
            "        return Circle()",
            "            .fill(isDetectingLongPress ? Color.yellow : Color.green)",
            "            .frame(width: 100, height: 100, alignment: .center)",
            "            .gesture(press)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Update-permanent-state-during-a-gesture",
          "level": 4,
          "text": "Update permanent state during a gesture",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To track changes to a gesture that shouldnâ€™t reset once the gesture ends, use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onChanged(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " callback. For example, to count the number of times",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "your app recognizes a long press, add an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onChanged(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " callback",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and increment a counter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct CounterView: View {",
            "    @GestureState private var isDetectingLongPress = false",
            "    @State private var totalNumberOfTaps = 0",
            "    ",
            "    var body: some View {",
            "        let press = LongPressGesture(minimumDuration: 1)",
            "            .updating($isDetectingLongPress) { currentState, gestureState, transaction in",
            "                gestureState = currentState",
            "            }.onChanged { _ in",
            "                self.totalNumberOfTaps += 1",
            "            }",
            "        ",
            "        return VStack {",
            "            Text(\"\\(totalNumberOfTaps)\")",
            "                .font(.largeTitle)",
            "            ",
            "            Circle()",
            "                .fill(isDetectingLongPress ? Color.yellow : Color.green)",
            "                .frame(width: 100, height: 100, alignment: .center)",
            "                .gesture(press)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Update-permanent-state-when-a-gesture-ends",
          "level": 4,
          "text": "Update permanent state when a gesture ends",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To recognize when a gesture successfully completes and to retrieve the gestureâ€™s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "final value, use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onEnded(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function to update your appâ€™s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "state in the callback. SwiftUI only invokes the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onEnded(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " callback",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "when the gesture succeeds. For example, during a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " if",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the user stops touching the view before ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture/minimumDuration",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "seconds have elapsed or moves their finger more than ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture/maximumDistance",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "points SwiftUI does not invoke the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onEnded(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " callback.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, to stop counting long press attempts after the user completes a long",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "press, add an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onEnded(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " callback and conditionally apply the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "gesture modifier.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct CounterView: View {",
            "    @GestureState private var isDetectingLongPress = false",
            "    @State private var totalNumberOfTaps = 0",
            "    @State private var doneCounting = false",
            "    ",
            "    var body: some View {",
            "        let press = LongPressGesture(minimumDuration: 1)",
            "            .updating($isDetectingLongPress) { currentState, gestureState, transaction in",
            "                gestureState = currentState",
            "            }.onChanged { _ in",
            "                self.totalNumberOfTaps += 1",
            "            }",
            "            .onEnded { _ in",
            "                self.doneCounting = true",
            "            }",
            "        ",
            "        return VStack {",
            "            Text(\"\\(totalNumberOfTaps)\")",
            "                .font(.largeTitle)",
            "            ",
            "            Circle()",
            "                .fill(doneCounting ? Color.red : isDetectingLongPress ? Color.yellow : Color.green)",
            "                .frame(width: 100, height: 100, alignment: .center)",
            "                .gesture(doneCounting ? nil : press)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onChanged(_:)": {
      "abstract": [
        {
          "text": "Adds an action to perform when the gestureâ€™s value changes.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "onChanged"
        },
        {
          "kind": "text",
          "text": "(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7GestureP5ValueQa",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "_ChangedGesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onChanged(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "onChanged(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/gesture/onchanged(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onEnded(_:)": {
      "abstract": [
        {
          "text": "Adds an action to perform when the gesture ends.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "onEnded"
        },
        {
          "kind": "text",
          "text": "(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7GestureP5ValueQa",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "_EndedGesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/onEnded(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "onEnded(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/gesture/onended(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/updating(_:body:)": {
      "abstract": [
        {
          "text": "Updates the provided gesture state property as the gestureâ€™s value",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "updating"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "State"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI12GestureStateV",
          "text": "GestureState"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "State"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "kind": "externalParam",
          "text": "body"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7GestureP5ValueQa",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "State"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI11TransactionV",
          "text": "Transaction"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI012GestureStateC0V",
          "text": "GestureStateGesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "State"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gesture/updating(_:body:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "updating(_:body:)",
      "type": "topic",
      "url": "/documentation/swiftui/gesture/updating(_:body:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/GestureState": {
      "abstract": [
        {
          "text": "A property wrapper type that updates a property while the user performs a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "gesture and resets the property back to its initial state when the gesture",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "ends.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "GestureState"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/GestureState",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "GestureState"
        }
      ],
      "role": "symbol",
      "title": "GestureState",
      "type": "topic",
      "url": "/documentation/swiftui/gesturestate"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Gestures": {
      "abstract": [
        {
          "text": "Define interactions from taps, clicks, and swipes to fine-grained gestures.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Gestures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Gestures",
      "type": "topic",
      "url": "/documentation/swiftui/gestures"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture": {
      "abstract": [
        {
          "text": "A gesture that succeeds when the user performs a long press.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LongPressGesture"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LongPressGesture"
        }
      ],
      "role": "symbol",
      "title": "LongPressGesture",
      "type": "topic",
      "url": "/documentation/swiftui/longpressgesture"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture/maximumDistance": {
      "abstract": [
        {
          "text": "The maximum distance that the long press can move before the gesture",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "fails.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "maximumDistance"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:14CoreFoundation7CGFloatV",
          "text": "CGFloat"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture/maximumDistance",
      "kind": "symbol",
      "role": "symbol",
      "title": "maximumDistance",
      "type": "topic",
      "url": "/documentation/swiftui/longpressgesture/maximumdistance"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture/minimumDuration": {
      "abstract": [
        {
          "text": "The minimum duration of the long press that must elapse before the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "gesture succeeds.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "minimumDuration"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LongPressGesture/minimumDuration",
      "kind": "symbol",
      "role": "symbol",
      "title": "minimumDuration",
      "type": "topic",
      "url": "/documentation/swiftui/longpressgesture/minimumduration"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/gesture(_:including:)": {
      "abstract": [
        {
          "text": "Attaches a gesture to the view with a lower precedence than gestures",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "defined by the view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "gesture"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "including"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI11GestureMaskV",
          "text": "GestureMask"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/gesture(_:including:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "gesture(_:including:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/gesture(_:including:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/adding-interactivity-with-gestures"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
