{
  "abstract": [
    {
      "text": "A property wrapper type that can read and write a value owned by a source of",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "truth.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:7SwiftUI7BindingV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Binding"
      }
    ],
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "Binding"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.15",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "6.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "Binding"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "attribute",
              "text": "@propertyWrapper"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "attribute",
              "text": "@dynamicMemberLookup"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Binding"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Value"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "mentions",
      "mentions": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Performing-a-search-operation",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-search-interface-activation",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Adding-a-search-interface-to-your-app"
      ]
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use a binding to create a two-way connection between a property that stores",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "data, and a view that displays and changes the data. A binding connects a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property to a source of truth stored elsewhere, instead of storing data",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "directly. For example, a button that toggles between play and pause can",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "create a binding to a property of its parent view using the ",
              "type": "text"
            },
            {
              "code": "Binding",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property wrapper.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct PlayButton: View {",
            "    @Binding var isPlaying: Bool",
            "",
            "    var body: some View {",
            "        Button(isPlaying ? \"Pause\" : \"Play\") {",
            "            isPlaying.toggle()",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The parent view declares a property to hold the playing state, using the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property wrapper to indicate that this property is the value’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "source of truth.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct PlayerView: View {",
            "    var episode: Episode",
            "    @State private var isPlaying: Bool = false",
            "",
            "    var body: some View {",
            "        VStack {",
            "            Text(episode.title)",
            "                .foregroundStyle(isPlaying ? .primary : .secondary)",
            "            PlayButton(isPlaying: $isPlaying) // Pass a binding.",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "When ",
              "type": "text"
            },
            {
              "code": "PlayerView",
              "type": "codeVoice"
            },
            {
              "text": " initializes ",
              "type": "text"
            },
            {
              "code": "PlayButton",
              "type": "codeVoice"
            },
            {
              "text": ", it passes a binding of its state",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property into the button’s binding property. Applying the ",
              "type": "text"
            },
            {
              "code": "$",
              "type": "codeVoice"
            },
            {
              "text": " prefix to a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property wrapped value returns its ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/projectedValue",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", which for a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "state property wrapper returns a binding to the value.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Whenever the user taps the ",
              "type": "text"
            },
            {
              "code": "PlayButton",
              "type": "codeVoice"
            },
            {
              "text": ", the ",
              "type": "text"
            },
            {
              "code": "PlayerView",
              "type": "codeVoice"
            },
            {
              "text": " updates its",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "isPlaying",
              "type": "codeVoice"
            },
            {
              "text": " state.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "A binding conforms to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": " only if its wrapped value type also",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "conforms to ",
              "type": "text"
            },
            {
              "code": "Sendable",
              "type": "codeVoice"
            },
            {
              "text": ". It is always safe to pass a sendable binding",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "between different concurrency domains. However, reading from or writing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to a binding’s wrapped value from a different concurrency domain may or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "may not be safe, depending on how the binding was created. SwiftUI will",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "issue a warning at runtime if it detects a binding being used in a way",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that may compromise data safety.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "To create bindings to properties of a type that conforms to the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/Observation/Observable",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "protocol, use the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " property wrapper. For more information,",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "see ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Adding-a-search-interface-to-your-app": {
      "abstract": [
        {
          "text": "Present an interface that people can use to search for content in your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Adding-a-search-interface-to-your-app",
      "kind": "article",
      "role": "article",
      "title": "Adding a search interface to your app",
      "type": "topic",
      "url": "/documentation/swiftui/adding-a-search-interface-to-your-app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable": {
      "abstract": [
        {
          "text": "A property wrapper type that supports creating bindings to the mutable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "properties of observable objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bindable"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Bindable"
        }
      ],
      "role": "symbol",
      "title": "Bindable",
      "type": "topic",
      "url": "/documentation/swiftui/bindable"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value owned by a source of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "truth.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "role": "symbol",
      "title": "Binding",
      "type": "topic",
      "url": "/documentation/swiftui/binding"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/Identifiable-Implementations": {
      "abstract": [],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/Identifiable-Implementations",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Identifiable Implementations",
      "type": "topic",
      "url": "/documentation/swiftui/binding/identifiable-implementations"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/animation(_:)": {
      "abstract": [
        {
          "text": "Specifies an animation to perform when the binding value changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "animation"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI9AnimationV",
          "text": "Animation"
        },
        {
          "kind": "text",
          "text": "?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/animation(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "animation(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/binding/animation(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/constant(_:)": {
      "abstract": [
        {
          "text": "Creates a binding with an immutable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "constant"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/constant(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "constant(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/binding/constant(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/id": {
      "abstract": [
        {
          "text": "The stable identity of the entity associated with this instance,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "corresponding to the ",
          "type": "text"
        },
        {
          "code": "id",
          "type": "codeVoice"
        },
        {
          "text": " of the binding’s wrapped value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Identifiable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "id"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s12IdentifiableP2IDQa",
          "text": "ID"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/id",
      "kind": "symbol",
      "role": "symbol",
      "title": "id",
      "type": "topic",
      "url": "/documentation/swiftui/binding/id"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(_:)": {
      "abstract": [
        {
          "text": "Creates a binding by projecting the base value to a hashable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": ":)"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(_:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "keyword",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": ":)"
        }
      ],
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/binding/init(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(get:set:)": {
      "abstract": [
        {
          "text": "Creates a binding with closures that read and write the binding value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "get"
        },
        {
          "kind": "text",
          "text": ":"
        },
        {
          "kind": "externalParam",
          "text": "set"
        },
        {
          "kind": "text",
          "text": ":)"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(get:set:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "keyword",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "get"
        },
        {
          "kind": "text",
          "text": ":"
        },
        {
          "kind": "externalParam",
          "text": "set"
        },
        {
          "kind": "text",
          "text": ":)"
        }
      ],
      "role": "symbol",
      "title": "init(get:set:)",
      "type": "topic",
      "url": "/documentation/swiftui/binding/init(get:set:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(projectedValue:)": {
      "abstract": [
        {
          "text": "Creates a binding from the value of another binding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "projectedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(projectedValue:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(projectedValue:)",
      "type": "topic",
      "url": "/documentation/swiftui/binding/init(projectedvalue:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/projectedValue": {
      "abstract": [
        {
          "text": "A projection of the binding value that returns a binding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "projectedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/projectedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "projectedValue",
      "type": "topic",
      "url": "/documentation/swiftui/binding/projectedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/subscript(dynamicMember:)": {
      "abstract": [
        {
          "text": "Returns a binding to the resulting value of a given key path.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "subscript"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Subject"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "dynamicMember"
        },
        {
          "kind": "text",
          "text": " _: "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s15WritableKeyPathC",
          "text": "WritableKeyPath"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Subject"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Subject"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/subscript(dynamicMember:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "subscript(dynamicMember:)",
      "type": "topic",
      "url": "/documentation/swiftui/binding/subscript(dynamicmember:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/transaction": {
      "abstract": [
        {
          "text": "The binding’s transaction.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "transaction"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI11TransactionV",
          "text": "Transaction"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/transaction",
      "kind": "symbol",
      "role": "symbol",
      "title": "transaction",
      "type": "topic",
      "url": "/documentation/swiftui/binding/transaction"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/transaction(_:)": {
      "abstract": [
        {
          "text": "Specifies a transaction for the binding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "transaction"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI11TransactionV",
          "text": "Transaction"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/transaction(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "transaction(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/binding/transaction(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/wrappedValue": {
      "abstract": [
        {
          "text": "The underlying value referenced by the binding variable.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/wrappedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappedValue",
      "type": "topic",
      "url": "/documentation/swiftui/binding/wrappedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty": {
      "abstract": [
        {
          "text": "An interface for a stored variable that updates an external property of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "view.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "role": "symbol",
      "title": "DynamicProperty",
      "type": "topic",
      "url": "/documentation/swiftui/dynamicproperty"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State": {
      "abstract": [
        {
          "text": "Encapsulate view-specific data within your app’s view hierarchy to make your",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "views reusable.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State",
      "kind": "article",
      "role": "article",
      "title": "Managing user interface state",
      "type": "topic",
      "url": "/documentation/swiftui/managing-user-interface-state"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-search-interface-activation": {
      "abstract": [
        {
          "text": "Programmatically detect and dismiss a search field.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-search-interface-activation",
      "kind": "article",
      "role": "article",
      "title": "Managing search interface activation",
      "type": "topic",
      "url": "/documentation/swiftui/managing-search-interface-activation"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro": {
      "abstract": [
        {
          "text": "Update your existing app to leverage the benefits of Observation in Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
      "kind": "article",
      "role": "sampleCode",
      "title": "Migrating from the Observable Object protocol to the Observable macro",
      "type": "topic",
      "url": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Performing-a-search-operation": {
      "abstract": [
        {
          "text": "Update search results based on search text and optional tokens that you store.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Performing-a-search-operation",
      "kind": "article",
      "role": "article",
      "title": "Performing a search operation",
      "type": "topic",
      "url": "/documentation/swiftui/performing-a-search-operation"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value managed by SwiftUI.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "role": "symbol",
      "title": "State",
      "type": "topic",
      "url": "/documentation/swiftui/state"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State/projectedValue": {
      "abstract": [
        {
          "text": "A binding to the state value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "projectedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/projectedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "projectedValue",
      "type": "topic",
      "url": "/documentation/swiftui/state/projectedvalue"
    },
    "doc://com.apple.documentation/documentation/Observation/Observable": {
      "abstract": [
        {
          "text": "A type that emits notifications to observers when underlying data changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Observable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Observation/Observable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Observable",
      "type": "topic",
      "url": "/documentation/Observation/Observable"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:SK": {
      "abstract": [
        {
          "text": "A collection that supports backward as well as forward traversal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BidirectionalCollection"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SK7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl",
          "text": "Collection"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl7IndicesQa",
          "text": "Indices"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SK",
          "text": "BidirectionalCollection"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SK",
          "text": "BidirectionalCollection"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SK",
      "kind": "symbol",
      "role": "symbol",
      "title": "BidirectionalCollection",
      "type": "topic",
      "url": "/documentation/Swift/BidirectionalCollection"
    },
    "doc://com.externally.resolved.symbol/s:ST": {
      "abstract": [
        {
          "text": "A type that provides sequential, iterated access to its elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ST",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sequence",
      "type": "topic",
      "url": "/documentation/Swift/Sequence"
    },
    "doc://com.externally.resolved.symbol/s:Sk": {
      "abstract": [
        {
          "text": "A collection that supports efficient random-access index traversal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RandomAccessCollection"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sk7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SK",
          "text": "BidirectionalCollection"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl7IndicesQa",
          "text": "Indices"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sk",
          "text": "RandomAccessCollection"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sk",
          "text": "RandomAccessCollection"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Sk",
      "kind": "symbol",
      "role": "symbol",
      "title": "RandomAccessCollection",
      "type": "topic",
      "url": "/documentation/Swift/RandomAccessCollection"
    },
    "doc://com.externally.resolved.symbol/s:Sl": {
      "abstract": [
        {
          "text": "A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Collection"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST",
          "text": "Sequence"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Sl",
      "kind": "symbol",
      "role": "symbol",
      "title": "Collection",
      "type": "topic",
      "url": "/documentation/Swift/Collection"
    },
    "doc://com.externally.resolved.symbol/s:s12IdentifiableP": {
      "abstract": [
        {
          "text": "A class of types whose instances hold the value of an entity with stable identity.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Identifiable"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s12IdentifiableP2IDQa",
          "text": "ID"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s12IdentifiableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Identifiable",
      "type": "topic",
      "url": "/documentation/Swift/Identifiable"
    },
    "doc://com.externally.resolved.symbol/s:s8CopyableP": {
      "abstract": [
        {
          "text": "A type whose values can be implicitly or explicitly copied.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s8CopyableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Copyable",
      "type": "topic",
      "url": "/documentation/Swift/Copyable"
    },
    "doc://com.externally.resolved.symbol/s:s8SendableP": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s8SendableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/Swift/Sendable"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.externally.resolved.symbol/s:SK",
        "doc://com.externally.resolved.symbol/s:Sl",
        "doc://com.externally.resolved.symbol/s:s8CopyableP",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty",
        "doc://com.externally.resolved.symbol/s:s12IdentifiableP",
        "doc://com.externally.resolved.symbol/s:Sk",
        "doc://com.externally.resolved.symbol/s:s8SendableP",
        "doc://com.externally.resolved.symbol/s:ST"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Creating-and-sharing-view-state",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable"
      ],
      "title": "Creating and sharing view state"
    }
  ],
  "topicSections": [
    {
      "anchor": "Creating-a-binding",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(_:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(projectedValue:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/init(get:set:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/constant(_:)"
      ],
      "title": "Creating a binding"
    },
    {
      "anchor": "Getting-the-value",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/wrappedValue",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/projectedValue",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/subscript(dynamicMember:)"
      ],
      "title": "Getting the value"
    },
    {
      "anchor": "Managing-changes",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/id",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/animation(_:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/transaction(_:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/transaction"
      ],
      "title": "Managing changes"
    },
    {
      "anchor": "Default-Implementations",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding/Identifiable-Implementations"
      ],
      "title": "Default Implementations"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/binding"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
