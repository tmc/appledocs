{
  "abstract": [
    {
      "text": "Manage the data that your app uses to drive its interface.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/Model-data"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "role": "collectionGroup",
    "roleHeading": "API Collection",
    "title": "Model data"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "SwiftUI offers a declarative approach to user interface design. As you compose a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "hierarchy of views, you also indicate data dependencies for the views.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "When the data changes, either due to an external event or because of an action",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that the user performs, SwiftUI automatically updates the affected parts of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "interface. As a result, the framework automatically performs most of the work",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that view controllers traditionally do.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "model-data-hero",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The framework provides tools, like state variables and bindings, for connecting",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "your app’s data to the user interface. These tools help you maintain a single",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "source of truth for every piece of data in your app, in part by reducing the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "amount of glue logic you write. Select the tool that best suits the task you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "need to perform:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Manage transient UI state locally within a view by wrapping value types as",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " properties.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Share a reference to a source of truth, like local state, using the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property wrapper.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Connect to and observe reference model data in views by applying the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Observation/Observable()",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "macro to the model data type. Instantiate an observable model data type",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "directly in a view using a ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property. Share the observable model data",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "with other views in the hierarchy without passing a reference using the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Environment",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property wrapper.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Leveraging-property-wrappers",
          "level": 3,
          "text": "Leveraging property wrappers",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "SwiftUI implements many data management types, like ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as Swift property wrappers. Apply a property wrapper by adding an attribute with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the wrapper’s name to a property’s declaration.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@State private var isVisible = true // Declares isVisible as a state variable."
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The property gains the behavior that the wrapper specifies. The state and data",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "flow property wrappers in SwiftUI watch for changes in your data, and automatically",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "update affected views as necessary. When you refer directly to the property in your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "code, you access the wrapped value, which for the ",
              "type": "text"
            },
            {
              "code": "isVisible",
              "type": "codeVoice"
            },
            {
              "text": " state property in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the example above is the stored Boolean.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "if isVisible == true {",
            "    Text(\"Hello\") // Only renders when isVisible is true.",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Alternatively, you can access a property wrapper’s projected value by prefixing",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the property name with the dollar sign (",
              "type": "text"
            },
            {
              "code": "$",
              "type": "codeVoice"
            },
            {
              "text": "). SwiftUI state and data flow",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property wrappers project a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", which is a two-way connection to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the wrapped value, allowing another view to access and mutate a single source of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "truth.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Toggle(\"Visible\", isOn: $isVisible) // The toggle can update the stored value."
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about property wrappers, see ",
              "type": "text"
            },
            {
              "identifier": "https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "in ",
              "type": "text"
            },
            {
              "identifier": "https://swift.org/documentation/#the-swift-programming-language",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable": {
      "abstract": [
        {
          "text": "A property wrapper type that supports creating bindings to the mutable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "properties of observable objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bindable"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Bindable"
        }
      ],
      "role": "symbol",
      "title": "Bindable",
      "type": "topic",
      "url": "/documentation/swiftui/bindable"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value owned by a source of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "truth.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "role": "symbol",
      "title": "Binding",
      "type": "topic",
      "url": "/documentation/swiftui/binding"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty": {
      "abstract": [
        {
          "text": "An interface for a stored variable that updates an external property of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "role": "symbol",
      "title": "DynamicProperty",
      "type": "topic",
      "url": "/documentation/swiftui/dynamicproperty"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Environment": {
      "abstract": [
        {
          "text": "A property wrapper that reads a value from a view’s environment.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Environment"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Environment",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Environment"
        }
      ],
      "role": "symbol",
      "title": "Environment",
      "type": "topic",
      "url": "/documentation/swiftui/environment"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Environment-values": {
      "abstract": [
        {
          "text": "Share data throughout a view hierarchy using the environment.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Environment-values",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Environment values",
      "type": "topic",
      "url": "/documentation/swiftui/environment-values"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject": {
      "abstract": [
        {
          "text": "A property wrapper type for an observable object that a parent or ancestor",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "view supplies.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EnvironmentObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EnvironmentObject"
        }
      ],
      "role": "symbol",
      "title": "EnvironmentObject",
      "type": "topic",
      "url": "/documentation/swiftui/environmentobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State": {
      "abstract": [
        {
          "text": "Encapsulate view-specific data within your app’s view hierarchy to make your",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "views reusable.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State",
      "kind": "article",
      "role": "article",
      "title": "Managing user interface state",
      "type": "topic",
      "url": "/documentation/swiftui/managing-user-interface-state"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app": {
      "abstract": [
        {
          "text": "Create connections between your app’s data model and views.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app",
      "kind": "article",
      "role": "sampleCode",
      "title": "Managing model data in your app",
      "type": "topic",
      "url": "/documentation/swiftui/managing-model-data-in-your-app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro": {
      "abstract": [
        {
          "text": "Update your existing app to leverage the benefits of Observation in Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
      "kind": "article",
      "role": "sampleCode",
      "title": "Migrating from the Observable Object protocol to the Observable macro",
      "type": "topic",
      "url": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Monitoring-model-data-changes-in-your-app": {
      "abstract": [
        {
          "text": "Show changes to data in your app’s user interface by using observable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "objects.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Monitoring-model-data-changes-in-your-app",
      "kind": "article",
      "role": "sampleCode",
      "title": "Monitoring data changes in your app",
      "type": "topic",
      "url": "/documentation/swiftui/monitoring-model-data-changes-in-your-app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject": {
      "abstract": [
        {
          "text": "A property wrapper type that subscribes to an observable object and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "invalidates a view whenever the observable object changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservedObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObservedObject"
        }
      ],
      "role": "symbol",
      "title": "ObservedObject",
      "type": "topic",
      "url": "/documentation/swiftui/observedobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Persistent-storage": {
      "abstract": [
        {
          "text": "Store data for use across sessions of your app.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Persistent-storage",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Persistent storage",
      "type": "topic",
      "url": "/documentation/swiftui/persistent-storage"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Preferences": {
      "abstract": [
        {
          "text": "Indicate configuration preferences from views to their container views.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Preferences",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Preferences",
      "type": "topic",
      "url": "/documentation/swiftui/preferences"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene/environmentObject(_:)": {
      "abstract": [
        {
          "text": "Supplies an ",
          "type": "text"
        },
        {
          "code": "ObservableObject",
          "type": "codeVoice"
        },
        {
          "text": " to a view subhierarchy.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "environmentObject"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI5SceneP",
          "text": "Scene"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene/environmentObject(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "environmentObject(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/scene/environmentobject(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value managed by SwiftUI.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "role": "symbol",
      "title": "State",
      "type": "topic",
      "url": "/documentation/swiftui/state"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject": {
      "abstract": [
        {
          "text": "A property wrapper type that instantiates an observable object.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StateObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StateObject"
        }
      ],
      "role": "symbol",
      "title": "StateObject",
      "type": "topic",
      "url": "/documentation/swiftui/stateobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)": {
      "abstract": [
        {
          "text": "Supplies an observable object to a view’s hierarchy.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "environmentObject"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "environmentObject(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/environmentobject(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/onChange(of:initial:_:)": {
      "abstract": [
        {
          "text": "Adds a modifier for this view that fires an action when a specific",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "onChange"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ":"
        },
        {
          "kind": "externalParam",
          "text": "initial"
        },
        {
          "kind": "text",
          "text": ":"
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": ":)"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/onChange(of:initial:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "onChange(of:initial:_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/onchange(of:initial:_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/onReceive(_:perform:)": {
      "abstract": [
        {
          "text": "Adds an action to perform when this view detects data emitted by the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "given publisher.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "onReceive"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "P"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "P"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "perform"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "P"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine9PublisherP6OutputQa",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/onReceive(_:perform:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "onReceive(_:perform:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/onreceive(_:perform:)"
    },
    "doc://com.apple.documentation/documentation/Combine/ObservableObject": {
      "abstract": [
        {
          "text": "A type of object with a publisher that emits before the object has changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservableObject"
        },
        {
          "kind": "text",
          "text": " : AnyObject"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObservableObject",
      "type": "topic",
      "url": "/documentation/Combine/ObservableObject"
    },
    "doc://com.apple.documentation/documentation/Observation/Observable()": {
      "abstract": [
        {
          "text": "Defines and implements conformance of the Observable protocol.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(member, names: named(_$observationRegistrar), named(access), named(withMutation)) "
        },
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(memberAttribute) "
        },
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(extension, conformances: "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:11Observation10ObservableP",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Observation/Observable()",
      "kind": "symbol",
      "role": "symbol",
      "title": "Observable()",
      "type": "topic",
      "url": "/documentation/Observation/Observable()"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617": {
      "identifier": "https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617",
      "title": "Property Wrappers",
      "titleInlineContent": [
        {
          "text": "Property Wrappers",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617"
    },
    "https://swift.org/documentation/#the-swift-programming-language": {
      "identifier": "https://swift.org/documentation/#the-swift-programming-language",
      "title": "The Swift Programming Language",
      "titleInlineContent": [
        {
          "text": "The Swift Programming Language",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://swift.org/documentation/#the-swift-programming-language"
    },
    "model-data-hero": {
      "alt": null,
      "identifier": "model-data-hero",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/7a8488351b0c9f662b694bc1153162a5/model-data-hero@2x.png"
        }
      ]
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Data-and-storage",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Environment-values",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Preferences",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Persistent-storage"
      ],
      "title": "Data and storage"
    }
  ],
  "topicSections": [
    {
      "anchor": "Creating-and-sharing-view-state",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding"
      ],
      "title": "Creating and sharing view state"
    },
    {
      "anchor": "Creating-model-data",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
        "doc://com.apple.documentation/documentation/Observation/Observable()",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Monitoring-model-data-changes-in-your-app",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject",
        "doc://com.apple.documentation/documentation/Combine/ObservableObject"
      ],
      "title": "Creating model data"
    },
    {
      "anchor": "Responding-to-data-changes",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/onChange(of:initial:_:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/onReceive(_:perform:)"
      ],
      "title": "Responding to data changes"
    },
    {
      "anchor": "Distributing-model-data-throughout-your-app",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene/environmentObject(_:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject"
      ],
      "title": "Distributing model data throughout your app"
    },
    {
      "anchor": "Managing-dynamic-data",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty"
      ],
      "title": "Managing dynamic data"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/model-data"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
