{
  "abstract": [
    {
      "text": "A property wrapper type that can read and write a value that SwiftUI updates",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "as the placement of focus within the scene changes.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:7SwiftUI10FocusStateV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "FocusState"
      }
    ],
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "FocusState"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "12.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "8.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "FocusState"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "attribute",
              "text": "@propertyWrapper"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "FocusState"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Value"
            },
            {
              "kind": "text",
              "text": "> "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "Value"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:SH",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SH",
              "text": "Hashable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this property wrapper in conjunction with ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/focused(_:equals:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/focused(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "describe views whose appearance and contents relate to the location of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "focus in the scene. When focus enters the modified view, the wrapped value",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of this property updates to match a given prototype value. Similarly, when",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "focus leaves, the wrapped value of this property resets to ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": ". Setting the property’s value programmatically has the reverse",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "effect, causing focus to move to the view associated with the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "updated value.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In the following example of a simple login screen, when the user presses the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Sign In button and one of the fields is still empty, focus moves to that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "field. Otherwise, the sign-in process proceeds.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct LoginForm {",
            "    enum Field: Hashable {",
            "        case username",
            "        case password",
            "    }",
            "",
            "    @State private var username = \"\"",
            "    @State private var password = \"\"",
            "    @FocusState private var focusedField: Field?",
            "",
            "    var body: some View {",
            "        Form {",
            "            TextField(\"Username\", text: $username)",
            "                .focused($focusedField, equals: .username)",
            "",
            "            SecureField(\"Password\", text: $password)",
            "                .focused($focusedField, equals: .password)",
            "",
            "            Button(\"Sign In\") {",
            "                if username.isEmpty {",
            "                    focusedField = .username",
            "                } else if password.isEmpty {",
            "                    focusedField = .password",
            "                } else {",
            "                    handleLogin(username, password)",
            "                }",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To allow for cases where focus is completely absent from a view tree, the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "wrapped value must be either an optional or a Boolean. Set the focus binding",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": " as appropriate to remove focus from all bound fields.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You can also use this to remove focus from a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and thereby",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "dismiss the keyboard.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Avoid-ambiguous-focus-bindings",
          "level": 3,
          "text": "Avoid ambiguous focus bindings",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The same view can have multiple focus bindings. In the following example,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "setting ",
              "type": "text"
            },
            {
              "code": "focusedField",
              "type": "codeVoice"
            },
            {
              "text": " to either ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "fullName",
              "type": "codeVoice"
            },
            {
              "text": " causes the field",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to receive focus:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ContentView: View {",
            "    enum Field: Hashable {",
            "        case name",
            "        case fullName",
            "    }",
            "    @FocusState private var focusedField: Field?",
            "",
            "    var body: some View {",
            "        TextField(\"Full Name\", ...)",
            "            .focused($focusedField, equals: .name)",
            "            .focused($focusedField, equals: .fullName)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "On the other hand, binding the same value to two views is ambiguous. In",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the following example, two separate fields bind focus to the ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": " value:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ContentView: View {",
            "    enum Field: Hashable {",
            "        case name",
            "        case fullName",
            "    }",
            "    @FocusState private var focusedField: Field?",
            "",
            "    var body: some View {",
            "        TextField(\"Name\", ...)",
            "            .focused($focusedField, equals: .name)",
            "        TextField(\"Full Name\", ...)",
            "            .focused($focusedField, equals: .name) // incorrect re-use of .name",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If the user moves focus to either field, the ",
              "type": "text"
            },
            {
              "code": "focusedField",
              "type": "codeVoice"
            },
            {
              "text": " binding updates",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": ". However, if the app programmatically sets the value to ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "SwiftUI chooses the first candidate, which in this case is the “Name”",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "field. SwiftUI also emits a runtime warning in this case, since the repeated",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "binding is likely a programmer error.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty": {
      "abstract": [
        {
          "text": "An interface for a stored variable that updates an external property of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "role": "symbol",
      "title": "DynamicProperty",
      "type": "topic",
      "url": "/documentation/swiftui/dynamicproperty"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Entry()": {
      "abstract": [
        {
          "text": "Creates an environment values, transaction, container values,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "or focused values entry.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Entry"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Entry()",
      "kind": "symbol",
      "role": "symbol",
      "title": "Entry()",
      "type": "topic",
      "url": "/documentation/swiftui/entry()"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentValues/isFocused": {
      "abstract": [
        {
          "text": "Returns whether the nearest focusable ancestor has focus.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isFocused"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentValues/isFocused",
      "kind": "symbol",
      "role": "symbol",
      "title": "isFocused",
      "type": "topic",
      "url": "/documentation/swiftui/environmentvalues/isfocused"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value that SwiftUI updates",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "as the placement of focus within the scene changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FocusState"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FocusState"
        }
      ],
      "role": "symbol",
      "title": "FocusState",
      "type": "topic",
      "url": "/documentation/swiftui/focusstate"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/Binding": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value that indicates",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the current focus location.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/Binding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "role": "symbol",
      "title": "FocusState.Binding",
      "type": "topic",
      "url": "/documentation/swiftui/focusstate/binding"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/init()": {
      "abstract": [
        {
          "text": "Creates a focus state that binds to a Boolean.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/init()",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "keyword",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "role": "symbol",
      "title": "init()",
      "type": "topic",
      "url": "/documentation/swiftui/focusstate/init()"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/projectedValue": {
      "abstract": [
        {
          "text": "A projection of the focus state value that returns a binding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "projectedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV",
          "text": "FocusState"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV7BindingV",
          "text": "Binding"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/projectedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "projectedValue",
      "type": "topic",
      "url": "/documentation/swiftui/focusstate/projectedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/wrappedValue": {
      "abstract": [
        {
          "text": "The current state value, taking into account whatever bindings might be",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "in effect due to the current location of focus.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/wrappedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappedValue",
      "type": "topic",
      "url": "/documentation/swiftui/focusstate/wrappedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedBinding": {
      "abstract": [
        {
          "text": "A convenience property wrapper for observing and automatically unwrapping",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "state bindings from the focused view or one of its ancestors.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FocusedBinding"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedBinding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FocusedBinding"
        }
      ],
      "role": "symbol",
      "title": "FocusedBinding",
      "type": "topic",
      "url": "/documentation/swiftui/focusedbinding"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedValue": {
      "abstract": [
        {
          "text": "A property wrapper for observing values from the focused view or one of its",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "ancestors.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FocusedValue"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedValue",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FocusedValue"
        }
      ],
      "role": "symbol",
      "title": "FocusedValue",
      "type": "topic",
      "url": "/documentation/swiftui/focusedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedValueKey": {
      "abstract": [
        {
          "text": "A protocol for identifier types used when publishing and observing focused",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FocusedValueKey"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedValueKey",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FocusedValueKey"
        }
      ],
      "role": "symbol",
      "title": "FocusedValueKey",
      "type": "topic",
      "url": "/documentation/swiftui/focusedvaluekey"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField": {
      "abstract": [
        {
          "text": "A control that displays an editable text interface.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TextField"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TextField"
        }
      ],
      "role": "symbol",
      "title": "TextField",
      "type": "topic",
      "url": "/documentation/swiftui/textfield"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/focused(_:)": {
      "abstract": [
        {
          "text": "Modifies this view by binding its focus state to the given Boolean state",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "focused"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV",
          "text": "FocusState"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/focused(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "focused(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/focused(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/focused(_:equals:)": {
      "abstract": [
        {
          "text": "Modifies this view by binding its focus state to the given state value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "focused"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV",
          "text": "FocusState"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "equals"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/focused(_:equals:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "focused(_:equals:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/focused(_:equals:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/searchFocused(_:)": {
      "abstract": [
        {
          "text": "Modifies this view by binding the focus state of the search field",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "associated with the nearest searchable modifier to the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "Boolean value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "searchFocused"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV",
          "text": "FocusState"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/searchFocused(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "searchFocused(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/searchfocused(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/searchFocused(_:equals:)": {
      "abstract": [
        {
          "text": "Modifies this view by binding the focus state of the search field",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "associated with the nearest searchable modifier to the given value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "searchFocused"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV",
          "text": "FocusState"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10FocusStateV7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "equals"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/searchFocused(_:equals:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "searchFocused(_:equals:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/searchfocused(_:equals:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:SH": {
      "abstract": [
        {
          "text": "A type that can be hashed into a `Hasher` to produce an integer hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SQ",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SH",
      "kind": "symbol",
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/Swift/Hashable"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Managing-focus-state",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/focused(_:equals:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/focused(_:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentValues/isFocused",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedValue",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Entry()",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedValueKey",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusedBinding",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/searchFocused(_:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/View/searchFocused(_:equals:)"
      ],
      "title": "Managing focus state"
    }
  ],
  "topicSections": [
    {
      "anchor": "Creating-a-focus-state",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/init()"
      ],
      "title": "Creating a focus state"
    },
    {
      "anchor": "Inspecting-the-focus-state",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/projectedValue",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/Binding",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState/wrappedValue"
      ],
      "title": "Inspecting the focus state"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/focusstate"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
