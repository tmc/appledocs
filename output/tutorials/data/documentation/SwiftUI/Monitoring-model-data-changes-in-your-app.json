{
  "abstract": [
    {
      "text": "Show changes to data in your app’s user interface by using observable",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "objects.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Model-data"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/Monitoring-model-data-changes-in-your-app"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "16.2",
        "name": "iOS"
      },
      {
        "beta": false,
        "introducedAt": "16.2",
        "name": "iPadOS"
      },
      {
        "beta": false,
        "introducedAt": "13.1",
        "name": "macOS"
      },
      {
        "beta": false,
        "introducedAt": "14.3",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Monitoring data changes in your app"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You typically store and process data in your app using a data model that’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "separate from your app’s user interface (UI) and other logic. The separation",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "promotes modularity, improves testability, and makes it easier to reason about",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "how your app works.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Traditionally, you use a view controller to move data back and forth between the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "model and the UI, but SwiftUI handles most of this synchronization",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "for you. To update views when data changes, you make your data model",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "classes observable objects, publish their properties, and declare instances of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "them using property wrappers. To ensure user-driven data changes flow back into",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the model, you bind UI controls to model properties. Working",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "together, these features help you to maintain a single source of truth for your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "This article explains how to observe model data changes in SwiftUI",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "apps that have a minimum deployment target that is prior to iOS 17, iPadOS 17,",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "macOS 14, tvOS 17, or watchOS 10. To prepare your app for a newer version of",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "one of those operating systems, see",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ". If",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "your app’s minimum deployment target is iOS 17, iPadOS 17, macOS 14, tvOS 17,",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "or watchOS 10 or later, use the observation approach described in",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "anchor": "Make-model-data-observable",
          "level": 3,
          "text": "Make model data observable",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To make the data changes in your model visible to SwiftUI, adopt the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "protocol for model classes. For example, you can create a ",
              "type": "text"
            },
            {
              "code": "Book",
              "type": "codeVoice"
            },
            {
              "text": " class that’s an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "observable object:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class Book: ObservableObject {",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The system automatically infers the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject/ObjectWillChangePublisher",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "associated type for the class and synthesizes the required",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "doc://com.apple.documentation/documentation/Combine/ObservableObject/objectWillChange-2oa5v",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "method that emits the changed values of published properties. To publish a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property, add the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Combine/Published",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "wrapper to the property’s declaration:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class Book: ObservableObject {",
            "    @Published var title = \"Sample Book Title\"",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Avoid the overhead of a published property when you don’t need it. Only publish",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "properties that both can change and that matter to the UI. For",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example, the ",
              "type": "text"
            },
            {
              "code": "Book",
              "type": "codeVoice"
            },
            {
              "text": " class might have an ",
              "type": "text"
            },
            {
              "code": "identifier",
              "type": "codeVoice"
            },
            {
              "text": " property that never changes",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "after initialization:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class Book: ObservableObject {",
            "    @Published var title = \"Sample Book Title\"",
            "",
            "    let identifier = UUID() // A unique identifier that never changes.",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can still display the identifier in your user interface, but because it",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "isn’t published, SwiftUI doesn’t watch that particular property for changes.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Monitor-changes-in-observable-objects",
          "level": 3,
          "text": "Monitor changes in observable objects",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To tell SwiftUI to monitor an observable object, add the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property wrapper to the property’s declaration:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct BookView: View {",
            "    @ObservedObject var book: Book",
            "    ",
            "    var body: some View {",
            "        Text(book.title)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can pass individual properties of an observed object to child views, as",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "shown above. When the data changes, like when you load new data from",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "disk, SwiftUI updates all the affected views. You can also pass an entire",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "observable object to a child view and share model objects across levels of a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "view hierarchy:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct BookView: View {",
            "    @ObservedObject var book: Book",
            "    ",
            "    var body: some View {",
            "        BookEditView(book: book)",
            "    }",
            "}",
            "",
            "struct BookEditView: View {",
            "    @ObservedObject var book: Book",
            "",
            "    // ...",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Instantiate-a-model-object-in-a-view",
          "level": 3,
          "text": "Instantiate a model object in a view",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "SwiftUI might create or recreate a view at any time, so it’s important that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initializing a view with a given set of inputs always results in the same view.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "As a result, it’s unsafe to create an observed object inside a view. Instead,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "SwiftUI provides the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property wrapper, which creates a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "single source of truth for a reference type that you store in a view hierarchy.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You can safely create a ",
              "type": "text"
            },
            {
              "code": "Book",
              "type": "codeVoice"
            },
            {
              "text": " instance inside a view this way:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct LibraryView: View {",
            "    @StateObject private var book = Book()",
            "    ",
            "    var body: some View {",
            "        BookView(book: book)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "A state object behaves like an observed object, except that SwiftUI",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "creates and manages a single object instance for a given view instance,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "regardless of how many times it recreates the view. You can use the object",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "locally, or pass the state object into another view’s observed object property,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "as shown in the above example.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "While SwiftUI doesn’t recreate the state object within a view, it does create a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "distinct object instance for each view instance. For example, each",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "LibraryView",
              "type": "codeVoice"
            },
            {
              "text": " in the following code gets a unique ",
              "type": "text"
            },
            {
              "code": "Book",
              "type": "codeVoice"
            },
            {
              "text": " instance:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "VStack {",
            "    LibraryView()",
            "    LibraryView()",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "You can also create a state object in your top level ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/App",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or in one of your app’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instances. For example, if you define",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an observable object called ",
              "type": "text"
            },
            {
              "code": "Library",
              "type": "codeVoice"
            },
            {
              "text": " to hold a collection of books for a book",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "reader app, you could create a single library instance in the app’s top level",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "structure:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@main",
            "struct BookReader: App {",
            "    @StateObject private var library = Library()",
            "",
            "    // ...",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Share-an-object-throughout-your-app",
          "level": 3,
          "text": "Share an object throughout your app",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you have a data model object that you want to use throughout your app, but",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "don’t want to pass it through many layers of hierarchy, you can use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " view modifier to put the object into the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "environment instead:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@main",
            "struct BookReader: App {",
            "    @StateObject private var library = Library()",
            "    ",
            "    var body: some Scene {",
            "        WindowGroup {",
            "            LibraryView()",
            "                .environmentObject(library)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Any descendant view of the view to which you apply the modifier can then access",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the data model instance by declaring a property with the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property wrapper:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct LibraryView: View {",
            "    @EnvironmentObject var library: Library",
            "    ",
            "    // ...",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If you use an environment object, you might add it to the view at the top of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "your app’s hierarchy, as shown above. Alternatively, you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "might add it to the root view of a subtree in your view hierarchy. Either way,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "remember to also add it to the preview provider of any view that uses the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "object, or that has a descendant that uses the object:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct LibraryView_Previews: PreviewProvider {",
            "    static var previews: some View {",
            "        LibraryView()",
            "            .environmentObject(Library())",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "Create-a-two-way-connection-using-bindings",
          "level": 3,
          "text": "Create a two-way connection using bindings",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you allow a person to change the data in the UI, use a binding",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to the corresponding property. This ensures that updates flow back into the data",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "model automatically. You can get a binding to an observed object, state object,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or environment object property by prefixing the name of the object with the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "dollar sign (",
              "type": "text"
            },
            {
              "code": "$",
              "type": "codeVoice"
            },
            {
              "text": "). For example, if you let someone edit the title of a book by",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "adding a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to the ",
              "type": "text"
            },
            {
              "code": "BookEditView",
              "type": "codeVoice"
            },
            {
              "text": ", give the text field a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "binding to the book’s ",
              "type": "text"
            },
            {
              "code": "title",
              "type": "codeVoice"
            },
            {
              "text": " property:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct BookEditView: View {",
            "    @ObservedObject var book: Book",
            "    ",
            "    var body: some View {",
            "        TextField(\"Title\", text: $book.title)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The binding connects the view element to the underlying model so that a person",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "makes changes directly to the model data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "6c60346a45d3/ObservableObjectSample.zip": {
      "checksum": "6c60346a45d3580cc1e6f123b33b94ef068f277876465577d8ec543e1e15dfcfa44ee4453ad793282b63ab64519b4267f85545230cda12f23dd313a570a9d6c0",
      "identifier": "6c60346a45d3/ObservableObjectSample.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/6c60346a45d3/ObservableObjectSample.zip"
    },
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/App": {
      "abstract": [
        {
          "text": "A type that represents the structure and behavior of an app.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "App"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/App",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "App"
        }
      ],
      "role": "symbol",
      "title": "App",
      "type": "topic",
      "url": "/documentation/swiftui/app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject": {
      "abstract": [
        {
          "text": "A property wrapper type for an observable object that a parent or ancestor",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "view supplies.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EnvironmentObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EnvironmentObject"
        }
      ],
      "role": "symbol",
      "title": "EnvironmentObject",
      "type": "topic",
      "url": "/documentation/swiftui/environmentobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app": {
      "abstract": [
        {
          "text": "Create connections between your app’s data model and views.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app",
      "kind": "article",
      "role": "sampleCode",
      "title": "Managing model data in your app",
      "type": "topic",
      "url": "/documentation/swiftui/managing-model-data-in-your-app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro": {
      "abstract": [
        {
          "text": "Update your existing app to leverage the benefits of Observation in Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
      "kind": "article",
      "role": "sampleCode",
      "title": "Migrating from the Observable Object protocol to the Observable macro",
      "type": "topic",
      "url": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Model-data": {
      "abstract": [
        {
          "text": "Manage the data that your app uses to drive its interface.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Model-data",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Model data",
      "type": "topic",
      "url": "/documentation/swiftui/model-data"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject": {
      "abstract": [
        {
          "text": "A property wrapper type that subscribes to an observable object and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "invalidates a view whenever the observable object changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservedObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObservedObject"
        }
      ],
      "role": "symbol",
      "title": "ObservedObject",
      "type": "topic",
      "url": "/documentation/swiftui/observedobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene": {
      "abstract": [
        {
          "text": "A part of an app’s user interface with a life cycle managed by the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "system.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Scene"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Scene"
        }
      ],
      "role": "symbol",
      "title": "Scene",
      "type": "topic",
      "url": "/documentation/swiftui/scene"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject": {
      "abstract": [
        {
          "text": "A property wrapper type that instantiates an observable object.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StateObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StateObject"
        }
      ],
      "role": "symbol",
      "title": "StateObject",
      "type": "topic",
      "url": "/documentation/swiftui/stateobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField": {
      "abstract": [
        {
          "text": "A control that displays an editable text interface.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TextField"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TextField"
        }
      ],
      "role": "symbol",
      "title": "TextField",
      "type": "topic",
      "url": "/documentation/swiftui/textfield"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)": {
      "abstract": [
        {
          "text": "Supplies an observable object to a view’s hierarchy.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "environmentObject"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "environmentObject(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/environmentobject(_:)"
    },
    "doc://com.apple.documentation/documentation/Combine/ObservableObject": {
      "abstract": [
        {
          "text": "A type of object with a publisher that emits before the object has changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservableObject"
        },
        {
          "kind": "text",
          "text": " : AnyObject"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObservableObject",
      "type": "topic",
      "url": "/documentation/Combine/ObservableObject"
    },
    "doc://com.apple.documentation/documentation/Combine/ObservableObject/ObjectWillChangePublisher": {
      "abstract": [
        {
          "text": "The type of publisher that emits before the object has changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObjectWillChangePublisher"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine9PublisherP",
          "text": "Publisher"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine25ObservableObjectPublisherC",
          "text": "ObservableObjectPublisher"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine16ObservableObjectP0C19WillChangePublisherQa",
          "text": "ObjectWillChangePublisher"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7Combine9PublisherP7FailureQa",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5NeverO",
          "text": "Never"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject/ObjectWillChangePublisher",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObjectWillChangePublisher",
      "type": "topic",
      "url": "/documentation/Combine/ObservableObject/ObjectWillChangePublisher"
    },
    "doc://com.apple.documentation/documentation/Combine/Published": {
      "abstract": [
        {
          "text": "A type that publishes a property marked with an attribute.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@propertyWrapper"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Published"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Combine/Published",
      "kind": "symbol",
      "role": "symbol",
      "title": "Published",
      "type": "topic",
      "url": "/documentation/Combine/Published"
    },
    "doc://com.apple.documentation/documentation/Observation/Observable()": {
      "abstract": [
        {
          "text": "Defines and implements conformance of the Observable protocol.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(member, names: named(_$observationRegistrar), named(access), named(withMutation)) "
        },
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(memberAttribute) "
        },
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(extension, conformances: "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:11Observation10ObservableP",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Observation/Observable()",
      "kind": "symbol",
      "role": "symbol",
      "title": "Observable()",
      "type": "topic",
      "url": "/documentation/Observation/Observable()"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "6c60346a45d3/ObservableObjectSample.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Creating-model-data",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
        "doc://com.apple.documentation/documentation/Observation/Observable()",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject",
        "doc://com.apple.documentation/documentation/Combine/ObservableObject"
      ],
      "title": "Creating model data"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Creating-model-data",
              "generated": true,
              "identifiers": [
                "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro"
              ],
              "title": "Creating model data"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/monitoring-model-data-changes-in-your-app"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/swiftui/monitoring-model-data-changes-in-your-app"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
