{
  "abstract": [
    {
      "text": "A type that defines how an animatable value changes over time.",
      "type": "text"
    }
  ],
  "diffAvailability": {
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "16.0",
        "16.3 beta 2"
      ]
    }
  },
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:7SwiftUI15CustomAnimationP",
    "fragments": [
      {
        "kind": "keyword",
        "text": "protocol"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "CustomAnimation"
      }
    ],
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "CustomAnimation"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "17.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "17.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "17.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "17.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Protocol",
    "symbolKind": "protocol",
    "title": "CustomAnimation"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@preconcurrency"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "protocol"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "CustomAnimation"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:SH",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SH",
              "text": "Hashable"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:s8SendableP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s8SendableP",
              "text": "Sendable"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this protocol to create a type that changes an animatable value over",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "time, which produces a custom visual transition of a view. For example, the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "follow code changes an animatable value using an elastic ease-in ease-out",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "function:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ElasticEaseInEaseOutAnimation: CustomAnimation {",
            "    let duration: TimeInterval",
            "",
            "    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {",
            "        if time > duration { return nil } // The animation has finished.",
            "",
            "        let p = time / duration",
            "        let s = sin((20 * p - 11.125) * ((2 * Double.pi) / 4.5))",
            "        if p < 0.5 {",
            "            return value.scaled(by: -(pow(2, 20 * p - 10) * s) / 2)",
            "        } else {",
            "            return value.scaled(by: (pow(2, -20 * p + 10) * s) / 2 + 1)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "To maintain state during the life span of a custom animation, use",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext/state",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " property available on the ",
                  "type": "text"
                },
                {
                  "code": "context",
                  "type": "codeVoice"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "parameter value. You can also use contextâ€™s",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext/environment",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " property to retrieve environment values",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "from the view that created the custom animation. For more information, see",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "To create an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Animation",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instance of a custom animation, use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Animation/init(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " initializer, passing in an instance of a custom",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "animation; for example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Animation(ElasticEaseInEaseOutAnimation(duration: 5.0))"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To help make view code more readable, extend ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Animation",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and add a static",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property and function that returns an ",
              "type": "text"
            },
            {
              "code": "Animation",
              "type": "codeVoice"
            },
            {
              "text": " instance of a custom",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "animation. For example, the following code adds the static property",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "elasticEaseInEaseOut",
              "type": "codeVoice"
            },
            {
              "text": " that returns the elastic ease-in ease-out animation",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with a default duration of ",
              "type": "text"
            },
            {
              "code": "0.35",
              "type": "codeVoice"
            },
            {
              "text": " seconds. Next, the code adds a method",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that returns the animation with a specified duration.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "extension Animation {",
            "    static var elasticEaseInEaseOut: Animation { elasticEaseInEaseOut(duration: 0.35) }",
            "    static func elasticEaseInEaseOut(duration: TimeInterval) -> Animation {",
            "        Animation(ElasticEaseInEaseOutAnimation(duration: duration))",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To animate a view with the elastic ease-in ease-out animation, a view calls",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "either ",
              "type": "text"
            },
            {
              "code": ".elasticEaseInEaseOut",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": ".elasticEaseInEaseOut(duration:)",
              "type": "codeVoice"
            },
            {
              "text": ". For",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example, the follow code includes an Animate button that, when clicked,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "animates a circle as it moves from one edge of the view to the other,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "using the elastic ease-in ease-out animation with a duration of ",
              "type": "text"
            },
            {
              "code": "5",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "seconds:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ElasticEaseInEaseOutView: View {",
            "    @State private var isActive = false",
            "",
            "    var body: some View {",
            "        VStack(alignment: isActive ? .trailing : .leading) {",
            "            Circle()",
            "                .frame(width: 100.0)",
            "                .foregroundColor(.accentColor)",
            "",
            "            Button(\"Animate\") {",
            "                withAnimation(.elasticEaseInEaseOut(duration: 5.0)) {",
            "                    isActive.toggle()",
            "                }",
            "            }",
            "            .frame(maxWidth: .infinity)",
            "        }",
            "        .padding()",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "identifier": "animation-20-elastic.mp4",
          "type": "video"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "animation-20-elastic.mp4": {
      "alt": "A video that shows a circle that moves from one edge of the view to the other using an elastic ease-in ease-out animation. The circle's initial position is near the leading edge of the view. The circle begins moving slightly towards the leading, then towards trail edges of the view before it moves off the leading edge showing only two-thirds of the circle. The circle then moves quickly to the trailing edge of the view, going slightly beyond the edge so that only two-thirds of the circle is visible. The circle bounces back into full view before settling into position near the trailing edge of the view. The circle repeats this animation in reverse, going from the trailing edge of the view to the leading edge.",
      "identifier": "animation-20-elastic.mp4",
      "poster": "animation-20-elastic.png",
      "type": "video",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/42cf84f4e803f09fbf8fcfd0ec9b0b00/animation-20-elastic.mp4"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/058ed930a90cc66536b23274181069aa/animation-20-elastic~dark.mp4"
        }
      ]
    },
    "animation-20-elastic.png": {
      "alt": null,
      "identifier": "animation-20-elastic.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/d98249e623959f250481ff0aa4461587/animation-20-elastic@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/bc6fb8a2d795cc713eb5c4a128ac3061/animation-20-elastic~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Animation": {
      "abstract": [
        {
          "text": "The way a view changes over time to create a smooth visual transition from",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "one state to another.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Animation"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Animation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Animation"
        }
      ],
      "role": "symbol",
      "title": "Animation",
      "type": "topic",
      "url": "/documentation/swiftui/animation"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Animation/init(_:)": {
      "abstract": [
        {
          "text": "Create an ",
          "type": "text"
        },
        {
          "code": "Animation",
          "type": "codeVoice"
        },
        {
          "text": " that contains the specified custom animation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "A"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "A"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Animation/init(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/animation/init(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext": {
      "abstract": [
        {
          "text": "Contextual values that a custom animation can use to manage state and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "access a viewâ€™s environment.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnimationContext"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnimationContext"
        }
      ],
      "role": "symbol",
      "title": "AnimationContext",
      "type": "topic",
      "url": "/documentation/swiftui/animationcontext"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext/environment": {
      "abstract": [
        {
          "text": "The current environment of the view that created the custom animation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "environment"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI17EnvironmentValuesV",
          "text": "EnvironmentValues"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext/environment",
      "kind": "symbol",
      "role": "symbol",
      "title": "environment",
      "type": "topic",
      "url": "/documentation/swiftui/animationcontext/environment"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext/state": {
      "abstract": [
        {
          "text": "The current state of a custom animation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "state"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI14AnimationStateV",
          "text": "AnimationState"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext/state",
      "kind": "symbol",
      "role": "symbol",
      "title": "state",
      "type": "topic",
      "url": "/documentation/swiftui/animationcontext/state"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationState": {
      "abstract": [
        {
          "text": "A container that stores the state for a custom animation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnimationState"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationState",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnimationState"
        }
      ],
      "role": "symbol",
      "title": "AnimationState",
      "type": "topic",
      "url": "/documentation/swiftui/animationstate"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationStateKey": {
      "abstract": [
        {
          "text": "A key for accessing animation state values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnimationStateKey"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationStateKey",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "AnimationStateKey"
        }
      ],
      "role": "symbol",
      "title": "AnimationStateKey",
      "type": "topic",
      "url": "/documentation/swiftui/animationstatekey"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation": {
      "abstract": [
        {
          "text": "A type that defines how an animatable value changes over time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomAnimation"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomAnimation"
        }
      ],
      "role": "symbol",
      "title": "CustomAnimation",
      "type": "topic",
      "url": "/documentation/swiftui/customanimation"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/animate(value:time:context:)": {
      "abstract": [
        {
          "text": "Calculates the value of the animation at the specified time.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "animate"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "value"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "time"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@NSTimeInterval",
          "text": "TimeInterval"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "context"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI16AnimationContextV",
          "text": "AnimationContext"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/animate(value:time:context:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "animate(value:time:context:)",
      "type": "topic",
      "url": "/documentation/swiftui/customanimation/animate(value:time:context:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/shouldMerge(previous:value:time:context:)": {
      "abstract": [
        {
          "text": "Determines whether an instance of the animation can merge with other",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "instance of the same type.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "shouldMerge"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "previous"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI9AnimationV",
          "text": "Animation"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "value"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "time"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@NSTimeInterval",
          "text": "TimeInterval"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "context"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI16AnimationContextV",
          "text": "AnimationContext"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/shouldMerge(previous:value:time:context:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "shouldMerge(previous:value:time:context:)",
      "type": "topic",
      "url": "/documentation/swiftui/customanimation/shouldmerge(previous:value:time:context:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/velocity(value:time:context:)": {
      "abstract": [
        {
          "text": "Calculates the velocity of the animation at a specified time.",
          "type": "text"
        }
      ],
      "defaultImplementations": 1,
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "velocity"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "value"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "time"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@T@NSTimeInterval",
          "text": "TimeInterval"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "context"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI16AnimationContextV",
          "text": "AnimationContext"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "V"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/velocity(value:time:context:)",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "velocity(value:time:context:)",
      "type": "topic",
      "url": "/documentation/swiftui/customanimation/velocity(value:time:context:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Spring": {
      "abstract": [
        {
          "text": "A representation of a springâ€™s motion.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Spring"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Spring",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Spring"
        }
      ],
      "role": "symbol",
      "title": "Spring",
      "type": "topic",
      "url": "/documentation/swiftui/spring"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/UnitCurve": {
      "abstract": [
        {
          "text": "A  function defined by a two-dimensional curve that maps an input",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "progress in the range [0,1] to an output progress that is also in the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "range [0,1]. By changing the shape of the curve, the effective speed",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "of an animation or other interpolation can be changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnitCurve"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/UnitCurve",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnitCurve"
        }
      ],
      "role": "symbol",
      "title": "UnitCurve",
      "type": "topic",
      "url": "/documentation/swiftui/unitcurve"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:SH": {
      "abstract": [
        {
          "text": "A type that can be hashed into a `Hasher` to produce an integer hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SQ",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SH",
      "kind": "symbol",
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/Swift/Hashable"
    },
    "doc://com.externally.resolved.symbol/s:SQ": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:SQ",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/Swift/Equatable"
    },
    "doc://com.externally.resolved.symbol/s:s8SendableP": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s8SendableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/Swift/Sendable"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.externally.resolved.symbol/s:SQ",
        "doc://com.externally.resolved.symbol/s:SH",
        "doc://com.externally.resolved.symbol/s:s8SendableP"
      ],
      "kind": "relationships",
      "title": "Inherits From",
      "type": "inheritsFrom"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Creating-custom-animations",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationContext",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationState",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/AnimationStateKey",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/UnitCurve",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Spring"
      ],
      "title": "Creating custom animations"
    }
  ],
  "topicSections": [
    {
      "anchor": "Animating-a-value",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/animate(value:time:context:)"
      ],
      "title": "Animating a value"
    },
    {
      "anchor": "Getting-the-velocity",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/velocity(value:time:context:)"
      ],
      "title": "Getting the velocity"
    },
    {
      "anchor": "Determining-whether-to-merge",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/CustomAnimation/shouldMerge(previous:value:time:context:)"
      ],
      "title": "Determining whether to merge"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/customanimation"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
