{
  "abstract": [
    {
      "text": "A property wrapper type that can read and write a value managed by SwiftUI.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/State"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:7SwiftUI5StateV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "State"
      }
    ],
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "State"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.15",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "13.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "6.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "State"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "attribute",
              "text": "@propertyWrapper"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "State"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "Value"
            },
            {
              "kind": "text",
              "text": ">"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "mentions",
      "mentions": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Performing-a-search-operation"
      ]
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use state as the single source of truth for a given value type that you",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "store in a view hierarchy. Create a state value in an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/App",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " by applying the ",
              "type": "text"
            },
            {
              "code": "@State",
              "type": "codeVoice"
            },
            {
              "text": " attribute to a property declaration",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and providing an initial value. Declare state as private to prevent setting",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it in a memberwise initializer, which can conflict with the storage",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "management that SwiftUI provides:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct PlayButton: View {",
            "    @State private var isPlaying: Bool = false // Create the state.",
            "",
            "    var body: some View {",
            "        Button(isPlaying ? \"Pause\" : \"Play\") { // Read the state.",
            "            isPlaying.toggle() // Write the state.",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "SwiftUI manages the property’s storage. When the value changes, SwiftUI",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "updates the parts of the view hierarchy that depend on the value.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "To access a state’s underlying value, you use its ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/wrappedValue",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "However, as a shortcut Swift enables you to access the wrapped value by",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "referring directly to the state instance. The above example reads and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "writes the ",
              "type": "text"
            },
            {
              "code": "isPlaying",
              "type": "codeVoice"
            },
            {
              "text": " state property’s wrapped value by referring to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property directly.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Declare state as private in the highest view in the view hierarchy that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "needs access to the value. Then share the state with any subviews that also",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "need access, either directly for read-only access, or as a binding for",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "read-write access. You can safely mutate state properties from any thread.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Share-state-with-subviews",
          "level": 3,
          "text": "Share state with subviews",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you pass a state property to a subview, SwiftUI updates the subview",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "any time the value changes in the container view, but the subview can’t",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "modify the value. To enable the subview to modify the state’s stored value,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "pass a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " instead.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, you can remove the ",
              "type": "text"
            },
            {
              "code": "isPlaying",
              "type": "codeVoice"
            },
            {
              "text": " state from the play button in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the above example, and instead make the button take a binding:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct PlayButton: View {",
            "    @Binding var isPlaying: Bool // Play button now receives a binding.",
            "",
            "    var body: some View {",
            "        Button(isPlaying ? \"Pause\" : \"Play\") {",
            "            isPlaying.toggle()",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Then you can define a player view that declares the state and creates a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "binding to the state. Get the binding to the state value by accessing the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "state’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/projectedValue",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", which you get by prefixing the property name",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with a dollar sign (",
              "type": "text"
            },
            {
              "code": "$",
              "type": "codeVoice"
            },
            {
              "text": "):",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct PlayerView: View {",
            "    @State private var isPlaying: Bool = false // Create the state here now.",
            "",
            "    var body: some View {",
            "        VStack {",
            "            PlayButton(isPlaying: $isPlaying) // Pass a binding.",
            "",
            "            // ...",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Like you do for a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", declare ",
              "type": "text"
            },
            {
              "code": "State",
              "type": "codeVoice"
            },
            {
              "text": " as private to prevent",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "setting it in a memberwise initializer, which can conflict with the storage",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "management that SwiftUI provides. Unlike a state object, always",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initialize state by providing a default value in the state’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "declaration, as in the above examples. Use state only for storage that’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "local to a view and its subviews.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Store-observable-objects",
          "level": 3,
          "text": "Store observable objects",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can also store observable objects that you create with the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Observation/Observable()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "macro in ",
              "type": "text"
            },
            {
              "code": "State",
              "type": "codeVoice"
            },
            {
              "text": "; for example:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Observable",
            "class Library {",
            "    var name = \"My library of books\"",
            "    // ...",
            "}",
            "",
            "struct ContentView: View {",
            "    @State private var library = Library()",
            "",
            "    var body: some View {",
            "        LibraryView(library: library)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "A ",
              "type": "text"
            },
            {
              "code": "State",
              "type": "codeVoice"
            },
            {
              "text": " property always instantiates its default value when SwiftUI",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instantiates the view. For this reason, avoid side effects and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "performance-intensive work when initializing the default value. For",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example, if a view updates frequently, allocating a new default object each",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "time the view initializes can become expensive. Instead, you can defer the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "creation of the object using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/task(priority:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " modifier, which",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "is called only once when the view first appears:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ContentView: View {",
            "    @State private var library: Library?",
            "",
            "    var body: some View {",
            "        LibraryView(library: library)",
            "            .task {",
            "                library = Library()",
            "            }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Delaying the creation of the observable state object ensures that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "unnecessary allocations of the object doesn’t happen each time SwiftUI",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initializes the view. Using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/task(priority:_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " modifier is also",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "an effective way to defer any other kind of work required to create the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initial state of the view, such as network calls or file access.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "It’s possible to store an object that conforms to the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "protocol in a ",
                  "type": "text"
                },
                {
                  "code": "State",
                  "type": "codeVoice"
                },
                {
                  "text": " property. However the view will only update when",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "the reference to the object changes, such as when setting the property with",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "a reference to another object. The view will not update if any of the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "object’s published properties change. To track changes to both the reference",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "and the object’s published properties, use ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " instead of",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " when storing the object.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Share-observable-state-objects-with-subviews",
          "level": 3,
          "text": "Share observable state objects with subviews",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To share an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Observation/Observable",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "object stored in ",
              "type": "text"
            },
            {
              "code": "State",
              "type": "codeVoice"
            },
            {
              "text": " with a subview, pass the object reference to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the subview. SwiftUI updates the subview anytime an observable property of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the object changes, but only when the subview’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/body-8kl5o",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " reads the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property. For example, in the following code ",
              "type": "text"
            },
            {
              "code": "BookView",
              "type": "codeVoice"
            },
            {
              "text": " updates each time",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "title",
              "type": "codeVoice"
            },
            {
              "text": " changes but not when ",
              "type": "text"
            },
            {
              "code": "isAvailable",
              "type": "codeVoice"
            },
            {
              "text": " changes:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Observable",
            "class Book {",
            "    var title = \"A sample book\"",
            "    var isAvailable = true",
            "}",
            "",
            "struct ContentView: View {",
            "    @State private var book = Book()",
            "",
            "    var body: some View {",
            "        BookView(book: book)",
            "    }",
            "}",
            "",
            "struct BookView: View {",
            "    var book: Book",
            "",
            "    var body: some View {",
            "        Text(book.title)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "code": "State",
              "type": "codeVoice"
            },
            {
              "text": " properties provide bindings to their value. When storing an object,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you can get a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to that object, specifically the reference to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "object. This is useful when you need to change the reference stored in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "state in some other subview, such as setting the reference to ",
              "type": "text"
            },
            {
              "code": "nil",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ContentView: View {",
            "    @State private var book: Book?",
            "",
            "    var body: some View {",
            "        DeleteBookView(book: $book)",
            "            .task {",
            "                book = Book()",
            "            }",
            "    }",
            "}",
            "",
            "struct DeleteBookView: View {",
            "    @Binding var book: Book?",
            "",
            "    var body: some View {",
            "        Button(\"Delete book\") {",
            "            book = nil",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "However, passing a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to an object stored in ",
              "type": "text"
            },
            {
              "code": "State",
              "type": "codeVoice"
            },
            {
              "text": " isn’t",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "necessary when you need to change properties of that object. For example,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you can set the properties of the object to new values in a subview by",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "passing the object reference instead of a binding to the reference:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ContentView: View {",
            "    @State private var book = Book()",
            "",
            "    var body: some View {",
            "        BookCheckoutView(book: book)",
            "    }",
            "}",
            "",
            "struct BookCheckoutView: View {",
            "    var book: Book",
            "",
            "    var body: some View {",
            "        Button(book.isAvailable ? \"Check out book\" : \"Return book\") {",
            "            book.isAvailable.toggle()",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "If you need a binding to a specific property of the object, pass either the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "binding to the object and extract bindings to specific properties where",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "needed, or pass the object reference and use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " property",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "wrapper to create bindings to specific properties. For example, in the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "following code ",
              "type": "text"
            },
            {
              "code": "BookEditorView",
              "type": "codeVoice"
            },
            {
              "text": " wraps ",
              "type": "text"
            },
            {
              "code": "book",
              "type": "codeVoice"
            },
            {
              "text": " with ",
              "type": "text"
            },
            {
              "code": "@Bindable",
              "type": "codeVoice"
            },
            {
              "text": ". Then the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "view uses the ",
              "type": "text"
            },
            {
              "code": "$",
              "type": "codeVoice"
            },
            {
              "text": " syntax to pass to a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " a binding to ",
              "type": "text"
            },
            {
              "code": "title",
              "type": "codeVoice"
            },
            {
              "text": ":",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct ContentView: View {",
            "    @State private var book = Book()",
            "",
            "    var body: some View {",
            "        BookView(book: book)",
            "    }",
            "}",
            "",
            "struct BookView: View {",
            "    let book: Book",
            "",
            "    var body: some View {",
            "        BookEditorView(book: book)",
            "    }",
            "}",
            "",
            "struct BookEditorView: View {",
            "    @Bindable var book: Book",
            "",
            "    var body: some View {",
            "        TextField(\"Title\", text: $book.title)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/App": {
      "abstract": [
        {
          "text": "A type that represents the structure and behavior of an app.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "App"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/App",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "App"
        }
      ],
      "role": "symbol",
      "title": "App",
      "type": "topic",
      "url": "/documentation/swiftui/app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable": {
      "abstract": [
        {
          "text": "A property wrapper type that supports creating bindings to the mutable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "properties of observable objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bindable"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Bindable"
        }
      ],
      "role": "symbol",
      "title": "Bindable",
      "type": "topic",
      "url": "/documentation/swiftui/bindable"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value owned by a source of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "truth.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "role": "symbol",
      "title": "Binding",
      "type": "topic",
      "url": "/documentation/swiftui/binding"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty": {
      "abstract": [
        {
          "text": "An interface for a stored variable that updates an external property of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "role": "symbol",
      "title": "DynamicProperty",
      "type": "topic",
      "url": "/documentation/swiftui/dynamicproperty"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State": {
      "abstract": [
        {
          "text": "Encapsulate view-specific data within your app’s view hierarchy to make your",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "views reusable.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State",
      "kind": "article",
      "role": "article",
      "title": "Managing user interface state",
      "type": "topic",
      "url": "/documentation/swiftui/managing-user-interface-state"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Performing-a-search-operation": {
      "abstract": [
        {
          "text": "Update search results based on search text and optional tokens that you store.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Performing-a-search-operation",
      "kind": "article",
      "role": "article",
      "title": "Performing a search operation",
      "type": "topic",
      "url": "/documentation/swiftui/performing-a-search-operation"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene": {
      "abstract": [
        {
          "text": "A part of an app’s user interface with a life cycle managed by the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "system.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Scene"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Scene"
        }
      ],
      "role": "symbol",
      "title": "Scene",
      "type": "topic",
      "url": "/documentation/swiftui/scene"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value managed by SwiftUI.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "role": "symbol",
      "title": "State",
      "type": "topic",
      "url": "/documentation/swiftui/state"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init()": {
      "abstract": [
        {
          "text": "Creates a state property without an initial value.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Value",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "ExpressibleByNilLiteral",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init()",
      "kind": "symbol",
      "role": "symbol",
      "title": "init()",
      "type": "topic",
      "url": "/documentation/swiftui/state/init()"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init(initialValue:)": {
      "abstract": [
        {
          "text": "Creates a state property that stores an initial value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "initialValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init(initialValue:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(initialValue:)",
      "type": "topic",
      "url": "/documentation/swiftui/state/init(initialvalue:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init(wrappedValue:)": {
      "abstract": [
        {
          "text": "Creates a state property that stores an initial wrapped value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "wrappedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init(wrappedValue:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(wrappedValue:)",
      "type": "topic",
      "url": "/documentation/swiftui/state/init(wrappedvalue:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State/projectedValue": {
      "abstract": [
        {
          "text": "A binding to the state value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "projectedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI7BindingV",
          "text": "Binding"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/projectedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "projectedValue",
      "type": "topic",
      "url": "/documentation/swiftui/state/projectedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State/wrappedValue": {
      "abstract": [
        {
          "text": "The underlying value referenced by the state variable.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State/wrappedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappedValue",
      "type": "topic",
      "url": "/documentation/swiftui/state/wrappedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject": {
      "abstract": [
        {
          "text": "A property wrapper type that instantiates an observable object.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StateObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StateObject"
        }
      ],
      "role": "symbol",
      "title": "StateObject",
      "type": "topic",
      "url": "/documentation/swiftui/stateobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField": {
      "abstract": [
        {
          "text": "A control that displays an editable text interface.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TextField"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TextField",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TextField"
        }
      ],
      "role": "symbol",
      "title": "TextField",
      "type": "topic",
      "url": "/documentation/swiftui/textfield"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View": {
      "abstract": [
        {
          "text": "A type that represents part of your app’s user interface and provides",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "modifiers that you use to configure views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "role": "symbol",
      "title": "View",
      "type": "topic",
      "url": "/documentation/swiftui/view"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/body-8kl5o": {
      "abstract": [
        {
          "text": "The content and behavior of the view.",
          "type": "text"
        }
      ],
      "defaultImplementations": 6,
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "body"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP4BodyQa",
          "text": "Body"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/body-8kl5o",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "body",
      "type": "topic",
      "url": "/documentation/swiftui/view/body-8kl5o"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/task(priority:_:)": {
      "abstract": [
        {
          "text": "Adds an asynchronous task to perform before this view appears.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "task"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "priority"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScP",
          "text": "TaskPriority"
        },
        {
          "kind": "text",
          "text": ", () "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/task(priority:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "task(priority:_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/task(priority:_:)"
    },
    "doc://com.apple.documentation/documentation/Combine/ObservableObject": {
      "abstract": [
        {
          "text": "A type of object with a publisher that emits before the object has changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservableObject"
        },
        {
          "kind": "text",
          "text": " : AnyObject"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObservableObject",
      "type": "topic",
      "url": "/documentation/Combine/ObservableObject"
    },
    "doc://com.apple.documentation/documentation/Observation/Observable": {
      "abstract": [
        {
          "text": "A type that emits notifications to observers when underlying data changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Observable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Observation/Observable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Observable",
      "type": "topic",
      "url": "/documentation/Observation/Observable"
    },
    "doc://com.apple.documentation/documentation/Observation/Observable()": {
      "abstract": [
        {
          "text": "Defines and implements conformance of the Observable protocol.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(member, names: named(_$observationRegistrar), named(access), named(withMutation)) "
        },
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(memberAttribute) "
        },
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(extension, conformances: "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:11Observation10ObservableP",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Observation/Observable()",
      "kind": "symbol",
      "role": "symbol",
      "title": "Observable()",
      "type": "topic",
      "url": "/documentation/Observation/Observable()"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:s8SendableP": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s8SendableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/Swift/Sendable"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty",
        "doc://com.externally.resolved.symbol/s:s8SendableP"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Creating-and-sharing-view-state",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-User-Interface-State",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Bindable",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding"
      ],
      "title": "Creating and sharing view state"
    }
  ],
  "topicSections": [
    {
      "anchor": "Creating-a-state",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init(wrappedValue:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init(initialValue:)",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/State/init()"
      ],
      "title": "Creating a state"
    },
    {
      "anchor": "Getting-the-value",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/State/wrappedValue",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/State/projectedValue"
      ],
      "title": "Getting the value"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/state"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
