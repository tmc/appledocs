{
  "abstract": [
    {
      "text": "Hides the tab from the user.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent/hidden(_:)"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "extendedModule": "SwiftUI",
    "externalID": "s:7SwiftUI10TabContentPAAE6hiddenyQrSbF",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "hidden"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Sb",
        "text": "Bool"
      },
      {
        "kind": "text",
        "text": ") -> "
      },
      {
        "kind": "keyword",
        "text": "some"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7SwiftUI10TabContentP",
        "text": "TabContent"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "typeIdentifier",
        "text": "Self"
      },
      {
        "kind": "text",
        "text": "."
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:7SwiftUI10TabContentP0C5ValueQa",
        "text": "TabValue"
      },
      {
        "kind": "text",
        "text": ">\n"
      }
    ],
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "18.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "15.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "2.0",
        "name": "visionOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "method",
    "title": "hidden(_:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "visionOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "nonisolated"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "hidden"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "_"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "hidden"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Sb",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": " = true) -> "
            },
            {
              "kind": "keyword",
              "text": "some"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI10TabContentP",
              "text": "TabContent"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "typeIdentifier",
              "text": "Self"
            },
            {
              "kind": "text",
              "text": "."
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent/TabValue",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7SwiftUI10TabContentP0C5ValueQa",
              "text": "TabValue"
            },
            {
              "kind": "text",
              "text": ">\n"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Whether the tab is hidden.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "hidden"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Unlike removing or adding tabs with ",
              "type": "text"
            },
            {
              "code": "if",
              "type": "codeVoice"
            },
            {
              "text": " statements,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "this modifier preserves the associated state of the tab’s content view",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "when the tab is hidden.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "When you hide a tab using this modifier, make sure to update",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the TabView’s selection appropriately, since that tab could be selected.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following example shows a ",
              "type": "text"
            },
            {
              "code": "TabView",
              "type": "codeVoice"
            },
            {
              "text": " with 4 tabs in compact and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "5 tabs in regular. In compact, one of the tabs is a ‘Browse’ tab that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "displays a custom list view. This list view allows navigating to the destinations",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that are contained within the ‘Library’ and ‘Playlists’ sections in regular.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The navigation path and the selection state are updated when the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "number of tabs changes.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct BrowseTabExample: View {",
            "    @Environment(\\.horizontalSizeClass) var sizeClass",
            "",
            "    @State var selection: MusicTab = .listenNow",
            "    @State var browseTabPath: [MusicTab] = []",
            "    @State var playlists = [Playlist(\"All Playlists\"), Playlist(\"Running\")]",
            "",
            "    var body: some View {",
            "            TabView(selection: $selection) {",
            "                Tab(\"Listen Now\", systemImage: \"play.circle\", value: .listenNow) {",
            "                    ListenNowView()",
            "                }",
            "",
            "                Tab(\"Radio\", systemImage: \"dot.radiowaves.left.and.right\", value: .radio) {",
            "                    RadioView()",
            "                }",
            "",
            "                Tab(\"Search\", systemImage: \"magnifyingglass\", value: .search) {",
            "                    SearchDetailView()",
            "                }",
            "",
            "                Tab(\"Browse\", systemImage: \"list.bullet\", value: .browse) {",
            "                    LibraryView(path: $browseTabPath)",
            "                }",
            "                .hidden(sizeClass != .compact)",
            "",
            "                TabSection(\"Library\") {",
            "                    Tab(\"Recently Added\", systemImage: \"clock\", value: MusicTab.library(.recentlyAdded)) {",
            "                        RecentlyAddedView()",
            "                    }",
            "",
            "                    Tab(\"Artists\", systemImage: \"music.mic\", value: MusicTab.library(.artists)) {",
            "                        ArtistsView()",
            "                    }",
            "                }",
            "                .hidden(sizeClass == .compact)",
            "",
            "                TabSection(\"Playlists\") {",
            "                    ForEach(playlists) { playlist in",
            "                        Tab(playlist.name, image: playlist.imafe, value: MusicTab.playlists(playlist)) {",
            "                            playlist.detailView()",
            "                        }",
            "                    }",
            "                }",
            "                .hidden(sizeClass == .compact)",
            "            }",
            "            .tabViewStyle(.sidebarAdaptable)",
            "            .onChange(of: sizeClass, initial: true) { _, sizeClass in",
            "                if sizeClass == .compact && selection.showInBrowseTab {",
            "                    browseTabPath = [selection]",
            "                    selection = .browse",
            "                } else if sizeClass == .regular && selection == .browse {",
            "                    selection = browseTabPath.last ?? .library(.recentlyAdded)",
            "                }",
            "            }",
            "        }",
            "    }",
            "}",
            "",
            "struct LibraryView: View {",
            "    @Binding var path: [MusicTab]",
            "",
            "    var body: some View {",
            "        NavigationStack(path: $path) {",
            "            List {",
            "                ForEach(MusicLibraryTab.allCases, id: \\.self) { tab in",
            "                    NavigationLink(tab.rawValue, value: MusicTab.library(tab))",
            "                }",
            "                // Code to add playlists here",
            "            }",
            "            .navigationDestination(for: MusicTab.self) { tab in",
            "                tab.detail()",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent": {
      "abstract": [
        {
          "text": "A type that provides content for programmatically selectable tabs in a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "tab view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TabContent"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "TabContent"
        }
      ],
      "role": "symbol",
      "title": "TabContent",
      "type": "topic",
      "url": "/documentation/swiftui/tabcontent"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent/TabValue": {
      "abstract": [
        {
          "text": "The type used to drive selection for the containing tab view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "TabValue"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SH",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent/TabValue",
      "kind": "symbol",
      "required": true,
      "role": "symbol",
      "title": "TabValue",
      "type": "topic",
      "url": "/documentation/swiftui/tabcontent/tabvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent/hidden(_:)": {
      "abstract": [
        {
          "text": "Hides the tab from the user.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hidden"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10TabContentP",
          "text": "TabContent"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI10TabContentP0C5ValueQa",
          "text": "TabValue"
        },
        {
          "kind": "text",
          "text": ">\n"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/TabContent/hidden(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "hidden(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/tabcontent/hidden(_:)"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:Sb": {
      "abstract": [
        {
          "text": "A value type whose instances are either `true` or `false`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Sb",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/Swift/Bool"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/tabcontent/hidden(_:)"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
