{
  "abstract": [
    {
      "text": "A property wrapper type that instantiates an observable object.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftUI/documentation/SwiftUI"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "s:7SwiftUI11StateObjectV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "struct"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "StateObject"
      }
    ],
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "navigatorTitle": [
      {
        "kind": "identifier",
        "text": "StateObject"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "11.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "7.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Structure",
    "symbolKind": "struct",
    "title": "StateObject"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@"
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ScM",
              "kind": "attribute",
              "preciseIdentifier": "s:ScM",
              "text": "MainActor"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "attribute",
              "text": "@frozen"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "attribute",
              "text": "@propertyWrapper"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "attribute",
              "text": "@preconcurrency"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "StateObject"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "genericParameter",
              "text": "ObjectType"
            },
            {
              "kind": "text",
              "text": "> "
            },
            {
              "kind": "keyword",
              "text": "where"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "text": "ObjectType"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:7Combine16ObservableObjectP",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7Combine16ObservableObjectP",
              "text": "ObservableObject"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use a state object as the single source of truth for a reference type that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you store in a view hierarchy. Create a state object in an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/App",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", or ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " by applying the ",
              "type": "text"
            },
            {
              "code": "@StateObject",
              "type": "codeVoice"
            },
            {
              "text": " attribute to a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property declaration and providing an initial value that conforms to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "protocol. Declare state objects as private to prevent setting them from a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "memberwise initializer, which can conflict with the storage management that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "SwiftUI provides:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "class DataModel: ObservableObject {",
            "    @Published var name = \"Some Name\"",
            "    @Published var isEnabled = false",
            "}",
            "",
            "struct MyView: View {",
            "    @StateObject private var model = DataModel() // Create the state object.",
            "",
            "    var body: some View {",
            "        Text(model.name) // Updates when the data model changes.",
            "        MySubView()",
            "            .environmentObject(model)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "SwiftUI creates a new instance of the model object only once during the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "lifetime of the container that declares the state object. For example,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "SwiftUI doesn’t create a new instance if a view’s inputs change, but does",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "create a new instance if the identity of a view changes. When published",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "properties of the observable object change, SwiftUI updates any view that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "depends on those properties, like the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Text",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " view in the above example.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "If you need to store a value type, like a structure, string, or",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "integer, use the ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " property wrapper instead. Also use ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "if you need to store a reference type that conforms to the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.documentation/documentation/Observation/Observable()",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "protocol. To learn more about Observation in SwiftUI, see",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Share-state-objects-with-subviews",
          "level": 3,
          "text": "Share state objects with subviews",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can pass a state object into a subview through a property that has the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " attribute. Alternatively, add the object to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "environment of a view hierarchy by applying the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " modifier to a view, like ",
              "type": "text"
            },
            {
              "code": "MySubView",
              "type": "codeVoice"
            },
            {
              "text": " in the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "above code. You can then read the object inside ",
              "type": "text"
            },
            {
              "code": "MySubView",
              "type": "codeVoice"
            },
            {
              "text": " or any of its",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "descendants using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " attribute:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct MySubView: View {",
            "    @EnvironmentObject var model: DataModel",
            "",
            "    var body: some View {",
            "        Toggle(\"Enabled\", isOn: $model.isEnabled)",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Get a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to the state object’s properties using the dollar sign",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(",
              "type": "text"
            },
            {
              "code": "$",
              "type": "codeVoice"
            },
            {
              "text": ") operator. Use a binding when you want to create a two-way connection.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In the above code, the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Toggle",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " controls the model’s ",
              "type": "text"
            },
            {
              "code": "isEnabled",
              "type": "codeVoice"
            },
            {
              "text": " value",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "through a binding.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Initialize-state-objects-using-external-data",
          "level": 3,
          "text": "Initialize state objects using external data",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When a state object’s initial state depends on data that comes from",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "outside its container, you can call the object’s initializer",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "explicitly from within its container’s initializer. For example,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "suppose the data model from the previous example takes a ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "input during initialization and you want to use a value for that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "name that comes from outside the view. You can do this with",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "a call to the state object’s initializer inside an explicit initializer",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that you create for the view:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct MyInitializableView: View {",
            "    @StateObject private var model: DataModel",
            "",
            "    init(name: String) {",
            "        // SwiftUI ensures that the following initialization uses the",
            "        // closure only once during the lifetime of the view, so",
            "        // later changes to the view's name input have no effect.",
            "        _model = StateObject(wrappedValue: DataModel(name: name))",
            "    }",
            "",
            "    var body: some View {",
            "        VStack {",
            "            Text(\"Name: \\(model.name)\")",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Use caution when doing this. SwiftUI only initializes a state object",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the first time you call its initializer in a given view. This",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "ensures that the object provides stable storage even as the view’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "inputs change. However, it might result in unexpected behavior or",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "unwanted side effects if you explicitly initialize the state object.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In the above example, if the ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": " input to ",
              "type": "text"
            },
            {
              "code": "MyInitializableView",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "changes, SwiftUI reruns the view’s initializer with the new value. However,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "SwiftUI runs the autoclosure that you provide to the state object’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "initializer only the first time you call the state object’s initializer, so",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the model’s stored ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": " value doesn’t change.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Explicit state object initialization works well when the external data",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that the object depends on doesn’t change for a given instance of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "object’s container. For example, you can create two views with different",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "constant names:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var body: some View {",
            "    VStack {",
            "        MyInitializableView(name: \"Ravi\")",
            "        MyInitializableView(name: \"Maria\")",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Even for a configurable state object, you still declare it",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "as private. This ensures that you can’t accidentally set the parameter",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "through a memberwise initializer of the view, because doing so can",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "conflict with the framework’s storage management and produce unexpected",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "results.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "anchor": "Force-reinitialization-by-changing-view-identity",
          "level": 3,
          "text": "Force reinitialization by changing view identity",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you want SwiftUI to reinitialize a state object when a view input",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "changes, make sure that the view’s identity changes at the same time.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "One way to do this is to bind the view’s identity to the value that changes",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/id(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " modifier. For example, you can ensure that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the identity of an instance of ",
              "type": "text"
            },
            {
              "code": "MyInitializableView",
              "type": "codeVoice"
            },
            {
              "text": " changes when its",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": " input changes:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "MyInitializableView(name: name)",
            "    .id(name) // Binds the identity of the view to the name property."
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "If your view appears inside a ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ForEach",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ", it implicitly receives an",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/id(_:)",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": " modifier that uses the identifier of the corresponding",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "data element.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "If you need the view to reinitialize state based on changes in more than",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "one value, you can combine the values into a single identifier using a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.documentation/documentation/Swift/Hasher",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ". For example,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "if you want to update the data model in ",
              "type": "text"
            },
            {
              "code": "MyInitializableView",
              "type": "codeVoice"
            },
            {
              "text": " when the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "values of either ",
              "type": "text"
            },
            {
              "code": "name",
              "type": "codeVoice"
            },
            {
              "text": " or ",
              "type": "text"
            },
            {
              "code": "isEnabled",
              "type": "codeVoice"
            },
            {
              "text": " change, you can combine both",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "variables into a single hash:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "var hash: Int {",
            "    var hasher = Hasher()",
            "    hasher.combine(name)",
            "    hasher.combine(isEnabled)",
            "    return hasher.finalize()",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Then apply the combined hash to the view as an identifier:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "MyInitializableView(name: name, isEnabled: isEnabled)",
            "    .id(hash)"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Be mindful of the performance cost of reinitializing the state object every",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "time the input changes. Also, changing view identity can have side",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "effects. For example, SwiftUI doesn’t automatically animate",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "changes inside the view if the view’s identity changes at the same time.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Also, changing the identity resets ",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "all",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": " state held by the view, including",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "values that you manage as ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/GestureState",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ",",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and so on.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "SwiftUI-PageImage-card.png": {
      "alt": "A black Swift logo on a swirly blue and purple background.",
      "identifier": "SwiftUI-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/b1de0de086f81a5d0eac3839a0af6e6f/SwiftUI-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1450d0b30a6b024e10c148e3f31dafe9/SwiftUI-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI": {
      "abstract": [
        {
          "text": "Declare the user interface and behavior for your app on every platform.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI",
      "images": [
        {
          "identifier": "SwiftUI-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/App": {
      "abstract": [
        {
          "text": "A type that represents the structure and behavior of an app.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "App"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/App",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "App"
        }
      ],
      "role": "symbol",
      "title": "App",
      "type": "topic",
      "url": "/documentation/swiftui/app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value owned by a source of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "truth.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Binding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Binding"
        }
      ],
      "role": "symbol",
      "title": "Binding",
      "type": "topic",
      "url": "/documentation/swiftui/binding"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty": {
      "abstract": [
        {
          "text": "An interface for a stored variable that updates an external property of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "view.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "DynamicProperty"
        }
      ],
      "role": "symbol",
      "title": "DynamicProperty",
      "type": "topic",
      "url": "/documentation/swiftui/dynamicproperty"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject": {
      "abstract": [
        {
          "text": "A property wrapper type for an observable object that a parent or ancestor",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "view supplies.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "EnvironmentObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/EnvironmentObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "EnvironmentObject"
        }
      ],
      "role": "symbol",
      "title": "EnvironmentObject",
      "type": "topic",
      "url": "/documentation/swiftui/environmentobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value that SwiftUI updates",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "as the placement of focus within the scene changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FocusState"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/FocusState",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FocusState"
        }
      ],
      "role": "symbol",
      "title": "FocusState",
      "type": "topic",
      "url": "/documentation/swiftui/focusstate"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/ForEach": {
      "abstract": [
        {
          "text": "A structure that computes views on demand from an underlying collection of",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "identified data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ForEach"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ForEach",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ForEach"
        }
      ],
      "role": "symbol",
      "title": "ForEach",
      "type": "topic",
      "url": "/documentation/swiftui/foreach"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/GestureState": {
      "abstract": [
        {
          "text": "A property wrapper type that updates a property while the user performs a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "gesture and resets the property back to its initial state when the gesture",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "ends.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "GestureState"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/GestureState",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "GestureState"
        }
      ],
      "role": "symbol",
      "title": "GestureState",
      "type": "topic",
      "url": "/documentation/swiftui/gesturestate"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app": {
      "abstract": [
        {
          "text": "Create connections between your app’s data model and views.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app",
      "kind": "article",
      "role": "sampleCode",
      "title": "Managing model data in your app",
      "type": "topic",
      "url": "/documentation/swiftui/managing-model-data-in-your-app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro": {
      "abstract": [
        {
          "text": "Update your existing app to leverage the benefits of Observation in Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
      "kind": "article",
      "role": "sampleCode",
      "title": "Migrating from the Observable Object protocol to the Observable macro",
      "type": "topic",
      "url": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Monitoring-model-data-changes-in-your-app": {
      "abstract": [
        {
          "text": "Show changes to data in your app’s user interface by using observable",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "objects.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Monitoring-model-data-changes-in-your-app",
      "kind": "article",
      "role": "sampleCode",
      "title": "Monitoring data changes in your app",
      "type": "topic",
      "url": "/documentation/swiftui/monitoring-model-data-changes-in-your-app"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject": {
      "abstract": [
        {
          "text": "A property wrapper type that subscribes to an observable object and",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "invalidates a view whenever the observable object changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservedObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObservedObject"
        }
      ],
      "role": "symbol",
      "title": "ObservedObject",
      "type": "topic",
      "url": "/documentation/swiftui/observedobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene": {
      "abstract": [
        {
          "text": "A part of an app’s user interface with a life cycle managed by the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "system.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Scene"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Scene",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Scene"
        }
      ],
      "role": "symbol",
      "title": "Scene",
      "type": "topic",
      "url": "/documentation/swiftui/scene"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/State": {
      "abstract": [
        {
          "text": "A property wrapper type that can read and write a value managed by SwiftUI.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/State",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "State"
        }
      ],
      "role": "symbol",
      "title": "State",
      "type": "topic",
      "url": "/documentation/swiftui/state"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject": {
      "abstract": [
        {
          "text": "A property wrapper type that instantiates an observable object.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StateObject"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StateObject"
        }
      ],
      "role": "symbol",
      "title": "StateObject",
      "type": "topic",
      "url": "/documentation/swiftui/stateobject"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/init(wrappedValue:)": {
      "abstract": [
        {
          "text": "Creates a new state object with an initial wrapped value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "wrappedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "ObjectType"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/init(wrappedValue:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(wrappedValue:)",
      "type": "topic",
      "url": "/documentation/swiftui/stateobject/init(wrappedvalue:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/projectedValue": {
      "abstract": [
        {
          "text": "A projection of the state object that creates bindings to its",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "properties.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "projectedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI14ObservedObjectV",
          "text": "ObservedObject"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "ObjectType"
        },
        {
          "kind": "text",
          "text": ">."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI14ObservedObjectV7WrapperV",
          "text": "Wrapper"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/projectedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "projectedValue",
      "type": "topic",
      "url": "/documentation/swiftui/stateobject/projectedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/wrappedValue": {
      "abstract": [
        {
          "text": "The underlying value referenced by the state object.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "wrappedValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "ObjectType"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/wrappedValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "wrappedValue",
      "type": "topic",
      "url": "/documentation/swiftui/stateobject/wrappedvalue"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Text": {
      "abstract": [
        {
          "text": "A view that displays one or more lines of read-only text.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Text"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Text",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Text"
        }
      ],
      "role": "symbol",
      "title": "Text",
      "type": "topic",
      "url": "/documentation/swiftui/text"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Toggle": {
      "abstract": [
        {
          "text": "A control that toggles between on and off states.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Toggle"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Toggle",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Toggle"
        }
      ],
      "role": "symbol",
      "title": "Toggle",
      "type": "topic",
      "url": "/documentation/swiftui/toggle"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View": {
      "abstract": [
        {
          "text": "A type that represents part of your app’s user interface and provides",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "modifiers that you use to configure views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "View"
        }
      ],
      "role": "symbol",
      "title": "View",
      "type": "topic",
      "url": "/documentation/swiftui/view"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)": {
      "abstract": [
        {
          "text": "Supplies an observable object to a view’s hierarchy.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "environmentObject"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/environmentObject(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "environmentObject(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/environmentobject(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/id(_:)": {
      "abstract": [
        {
          "text": "Binds a view’s identity to the given proxy value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "id"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "ID"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "ID"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "keyword",
          "text": "some"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7SwiftUI4ViewP",
          "text": "View"
        }
      ],
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/id(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "id(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/id(_:)"
    },
    "doc://com.apple.documentation/documentation/Combine/ObservableObject": {
      "abstract": [
        {
          "text": "A type of object with a publisher that emits before the object has changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservableObject"
        },
        {
          "kind": "text",
          "text": " : AnyObject"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Combine/ObservableObject",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObservableObject",
      "type": "topic",
      "url": "/documentation/Combine/ObservableObject"
    },
    "doc://com.apple.documentation/documentation/Observation/Observable()": {
      "abstract": [
        {
          "text": "Defines and implements conformance of the Observable protocol.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(member, names: named(_$observationRegistrar), named(access), named(withMutation)) "
        },
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(memberAttribute) "
        },
        {
          "kind": "attribute",
          "text": "@attached"
        },
        {
          "kind": "text",
          "text": "(extension, conformances: "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:11Observation10ObservableP",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Observation/Observable()",
      "kind": "symbol",
      "role": "symbol",
      "title": "Observable()",
      "type": "topic",
      "url": "/documentation/Observation/Observable()"
    },
    "doc://com.apple.documentation/documentation/Swift/Hasher": {
      "abstract": [
        {
          "text": "The universal hash function used by `Set` and `Dictionary`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hasher"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Hasher",
      "kind": "symbol",
      "role": "symbol",
      "title": "Hasher",
      "type": "topic",
      "url": "/documentation/Swift/Hasher"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:7Combine16ObservableObjectP": {
      "abstract": [
        {
          "text": "A type of object with a publisher that emits before the object has changed.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservableObject"
        },
        {
          "kind": "text",
          "text": " : AnyObject"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:7Combine16ObservableObjectP",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObservableObject",
      "type": "topic",
      "url": "/documentation/Combine/ObservableObject"
    },
    "doc://com.externally.resolved.symbol/s:ScM": {
      "abstract": [
        {
          "text": "A singleton actor whose executor is equivalent to the main dispatch queue.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@globalActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "final"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "actor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MainActor"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ScM",
      "kind": "symbol",
      "role": "symbol",
      "title": "MainActor",
      "type": "topic",
      "url": "/documentation/Swift/MainActor"
    },
    "doc://com.externally.resolved.symbol/s:s8SendableP": {
      "abstract": [
        {
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent contexts without introducing a risk of data races.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s8SendableP",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sendable",
      "type": "topic",
      "url": "/documentation/Swift/Sendable"
    }
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/DynamicProperty",
        "doc://com.externally.resolved.symbol/s:s8SendableP"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Creating-model-data",
      "generated": true,
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Managing-model-data-in-your-app",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
        "doc://com.apple.documentation/documentation/Observation/Observable()",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/Monitoring-model-data-changes-in-your-app",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/ObservedObject",
        "doc://com.apple.documentation/documentation/Combine/ObservableObject"
      ],
      "title": "Creating model data"
    }
  ],
  "topicSections": [
    {
      "anchor": "Creating-a-state-object",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/init(wrappedValue:)"
      ],
      "title": "Creating a state object"
    },
    {
      "anchor": "Getting-the-value",
      "identifiers": [
        "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/wrappedValue",
        "doc://com.apple.SwiftUI/documentation/SwiftUI/StateObject/projectedValue"
      ],
      "title": "Getting the value"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/swiftui/stateobject"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
