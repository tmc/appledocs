{
  "abstract": [
    {
      "text": "Arrange views in your app’s interface using layout tools that SwiftUI provides.",
      "type": "text"
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/swiftui"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui"
  },
  "kind": "article",
  "legacy_identifier": 3978331,
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "SwiftUI"
      }
    ],
    "platforms": [
      {
        "current": "18.4",
        "introducedAt": "16.0",
        "name": "iOS"
      },
      {
        "current": "18.4",
        "introducedAt": "16.0",
        "name": "iPadOS"
      },
      {
        "current": "15.4",
        "introducedAt": "13.0",
        "name": "macOS"
      },
      {
        "current": "16.3",
        "introducedAt": "14.0",
        "name": "Xcode"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Composing custom layouts with SwiftUI"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "This sample app demonstrates many of the layout tools that SwiftUI provides by building an interface that enables people to vote for their favorite kind of pet. The app offers buttons to vote for a specific pet type, and displays the vote counts and relative rankings of the various contenders on a leaderboard. It also shows avatars for the pets, arranged in a way that reflects the current rankings.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "media-4063977",
              "metadata": {
                "anchor": "4063977",
                "title": "Figure 1"
              },
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "This sample code project is associated with WWDC22 session ",
                  "type": "text"
                },
                {
                  "identifier": "link-4030067",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "4064000",
          "level": 3,
          "text": "Arrange views in two dimensions with a grid",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To draw a leaderboard in the middle of the display that shows vote counts and percentages, the sample uses a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Grid",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " view.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "media-4063979",
              "metadata": {
                "anchor": "4063979",
                "title": "Figure 2"
              },
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The grid contains a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/GridRow",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " inside a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ForEach",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", where each view in the row creates a column cell. So the first view appears in the first column, the second in the second column, and so on. Because the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Divider",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " appears outside of a grid row instance, it creates a row that spans the width of the grid.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "Grid(alignment: .leading) {",
            "    ForEach(model.pets) { pet in",
            "        GridRow {",
            "            Text(pet.type)",
            "            ProgressView(",
            "                value: Double(pet.votes),",
            "                total: Double(max(1, model.totalVotes))) // Avoid dividing by zero.",
            "            Text(\"\\(pet.votes)\")",
            "                .gridColumnAlignment(.trailing)",
            "        }",
            "",
            "        Divider()",
            "    }",
            "}"
          ],
          "metadata": {
            "anchor": "4063980",
            "title": "Listing 1"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The sample initializes the grid with leading-edge alignment, which applies to every cell in the grid. Meanwhile, the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/gridColumnAlignment(_:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " view modifier that appears on the vote count cell overrides the alignment of cells in that column to use trailing-edge alignment.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "4064001",
          "level": 3,
          "text": "Create a custom equal-width layout",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The app offers buttons for voting at the bottom of the interface.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "media-4063982",
              "metadata": {
                "anchor": "4063982",
                "title": "Figure 3"
              },
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To ensure the buttons all have the same width, but are no wider than the widest button text, the app creates a custom layout container type that conforms to the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View-Layout",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol. The equal-width horizontal stack (",
              "type": "text"
            },
            {
              "code": "MyEqualWidthHStack",
              "type": "codeVoice"
            },
            {
              "text": ") measures the ideal sizes of all its subviews, and offers the widest ideal size to each subview.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The custom stack implements the protocol’s two required methods. First, ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/sizeThatFits(proposal:subviews:cache:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " reports the container’s size, given a set of subviews.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func sizeThatFits(",
            "    proposal: ProposedViewSize,",
            "    subviews: Subviews,",
            "    cache: inout Void",
            ") -> CGSize {",
            "    guard !subviews.isEmpty else { return .zero }",
            "",
            "    let maxSize = maxSize(subviews: subviews)",
            "    let spacing = spacing(subviews: subviews)",
            "    let totalSpacing = spacing.reduce(0) { $0 + $1 }",
            "",
            "    return CGSize(",
            "        width: maxSize.width * CGFloat(subviews.count) + totalSpacing,",
            "        height: maxSize.height)",
            "}"
          ],
          "metadata": {
            "anchor": "4063983",
            "title": "Listing 2"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This method combines the largest size in each dimension with the horizontal spacing between subviews to find the container’s total size. Then, ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/placeSubviews(in:proposal:subviews:cache:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " tells each of the subviews where to appear within the layout’s bounds.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func placeSubviews(",
            "    in bounds: CGRect,",
            "    proposal: ProposedViewSize,",
            "    subviews: Subviews,",
            "    cache: inout Void",
            ") {",
            "    guard !subviews.isEmpty else { return }",
            "",
            "    let maxSize = maxSize(subviews: subviews)",
            "    let spacing = spacing(subviews: subviews)",
            "",
            "    let placementProposal = ProposedViewSize(width: maxSize.width, height: maxSize.height)",
            "    var nextX = bounds.minX + maxSize.width / 2",
            "",
            "    for index in subviews.indices {",
            "        subviews[index].place(",
            "            at: CGPoint(x: nextX, y: bounds.midY),",
            "            anchor: .center,",
            "            proposal: placementProposal)",
            "        nextX += maxSize.width + spacing[index]",
            "    }",
            "}"
          ],
          "metadata": {
            "anchor": "4063984",
            "title": "Listing 3"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The method creates a single size proposal for the subviews, and then uses that, along with a point that changes for each subview, to arrange the buttons in a horizontal line with default spacing.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "4064002",
          "level": 3,
          "text": "Choose the view that fits",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The size of the voting buttons depends on the width of the text they contain. For people that speak another language or that use a larger text size, the horizontally arranged buttons might not fit in the display. So the app uses ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ViewThatFits",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to let SwiftUI choose between a horizontal and a vertical arrangement of the buttons for the one that fits in the available space.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "ViewThatFits { // Choose the first view that fits.",
            "    MyEqualWidthHStack { // Arrange horizontally if it fits...",
            "        Buttons()",
            "    }",
            "    MyEqualWidthVStack { // ...or vertically, otherwise.",
            "        Buttons()",
            "    }",
            "}"
          ],
          "metadata": {
            "anchor": "4063986",
            "title": "Listing 4"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To ensure that the buttons maintain their equal-width property when arranged vertically, the app uses a custom equal-width vertical stack (",
              "type": "text"
            },
            {
              "code": "MyEqualWidthVStack",
              "type": "codeVoice"
            },
            {
              "text": ") that’s very similar to the horizontal version.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "4064003",
          "level": 3,
          "text": "Improve layout efficiency with a cache",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The methods of the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View-Layout",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol take a bidirectional ",
              "type": "text"
            },
            {
              "code": "cache",
              "type": "codeVoice"
            },
            {
              "text": " parameter. The cache provides access to optional storage that’s shared among all the methods of a particular layout instance. To demonstrate the use of a cache, the sample app’s equal-width vertical layout creates storage to share size and spacing calculations between its ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/sizeThatFits(proposal:subviews:cache:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/placeSubviews(in:proposal:subviews:cache:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " implementations.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "First, the layout defines a ",
              "type": "text"
            },
            {
              "code": "CacheData",
              "type": "codeVoice"
            },
            {
              "text": " type for the storage.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "struct CacheData {",
            "    let maxSize: CGSize",
            "    let spacing: [CGFloat]",
            "    let totalSpacing: CGFloat",
            "}"
          ],
          "metadata": {
            "anchor": "4063988",
            "title": "Listing 5"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "It then implements the protocol’s optional ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/makeCache(subviews:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method to do the calculations for a set of subviews, returning a value of the type defined above.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func makeCache(subviews: Subviews) -> CacheData {",
            "    let maxSize = maxSize(subviews: subviews)",
            "    let spacing = spacing(subviews: subviews)",
            "    let totalSpacing = spacing.reduce(0) { $0 + $1 }",
            "",
            "    return CacheData(",
            "        maxSize: maxSize,",
            "        spacing: spacing,",
            "        totalSpacing: totalSpacing)",
            "}"
          ],
          "metadata": {
            "anchor": "4063989",
            "title": "Listing 6"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If the subviews change, SwiftUI calls the layout’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/updateCache(_:subviews:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. The default implementation of that method calls ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/makeCache(subviews:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " again, which recalculates the data. Then the ",
              "type": "text"
            },
            {
              "code": "sizeThatFits(proposal:subviews:cache:)",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "placeSubviews(in:proposal:subviews:cache:)",
              "type": "codeVoice"
            },
            {
              "text": " methods make use of their ",
              "type": "text"
            },
            {
              "code": "cache",
              "type": "codeVoice"
            },
            {
              "text": " parameter to retrieve the data. For example, ",
              "type": "text"
            },
            {
              "code": "placeSubviews(in:proposal:subviews:cache:)",
              "type": "codeVoice"
            },
            {
              "text": " reads the size and the spacing array from the cache.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let maxSize = cache.maxSize",
            "let spacing = cache.spacing"
          ],
          "metadata": {
            "anchor": "4063990",
            "title": "Listing 7"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Contrast this with the equal-width horizontal stack, which doesn’t use a cache, and instead calculates the size and spacing information every time it needs that information.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Most simple layouts, including the equal-width vertical stack, don’t gain much efficiency from using a cache. Developers can profile their app with Instruments to find out whether a particular layout type actually benefits from a cache.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "4064004",
          "level": 3,
          "text": "Create a custom radial layout with an offset",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To display the pet avatars in a circle, the app defines a radial layout (",
              "type": "text"
            },
            {
              "code": "MyRadialLayout",
              "type": "codeVoice"
            },
            {
              "text": ").",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "media-4063992",
              "metadata": {
                "anchor": "4063992",
                "title": "Figure 4"
              },
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Like other custom layouts, this layout needs the two required methods. For ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/sizeThatFits(proposal:subviews:cache:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", the layout fills the available space by returning whatever size its container proposes.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "proposal.replacingUnspecifiedDimensions()"
          ],
          "metadata": {
            "anchor": "4063993",
            "title": "Listing 8"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The app uses the proposal’s ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ProposedViewSize/replacingUnspecifiedDimensions(by:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method to convert the proposal into a concrete size. Then, to place subviews, the layout rotates a vector, translates the vector to the middle of the placement region, and uses that as the anchor for the subview.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "for (index, subview) in subviews.enumerated() {",
            "    // Find a vector with an appropriate size and rotation.",
            "    var point = CGPoint(x: 0, y: -radius)",
            "        .applying(CGAffineTransform(",
            "            rotationAngle: angle * Double(index) + offset))",
            "",
            "    // Shift the vector to the middle of the region.",
            "    point.x += bounds.midX",
            "    point.y += bounds.midY",
            "",
            "    // Place the subview.",
            "    subview.place(at: point, anchor: .center, proposal: .unspecified)",
            "}"
          ],
          "metadata": {
            "anchor": "4063994",
            "title": "Listing 9"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The offset that the app applies to the rotation accounts for the current rankings, placing higher-ranked pets closer to the top of the interface. The app stores ranks on the subviews using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LayoutValueKey",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol, and then reads the values to calculate the offset before placing views.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "4064005",
          "level": 3,
          "text": "Animate transitions between layouts",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The radial layout can calculate an offset that creates an appropriate arrangement for all but one set of rankings: there’s no way to show a three-way tie with the avatars in a circle. To resolve this, the app detects this condition, and uses it to put the avatars in a line instead, using a the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/HStackLayout",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " type, which is a version of the built-in ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/HStack",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " that conforms to the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View-Layout",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol. To transition between these layout types, the app uses the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnyLayout",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let layout = model.isAllWayTie ? AnyLayout(HStackLayout()) : AnyLayout(MyRadialLayout())",
            "",
            "Podium()",
            "    .overlay(alignment: .top) {",
            "        layout {",
            "            ForEach(model.pets) { pet in",
            "                Avatar(pet: pet)",
            "                    .rank(model.rank(pet))",
            "            }",
            "        }",
            "        .animation(.default, value: model.pets)",
            "    }"
          ],
          "metadata": {
            "anchor": "4063996",
            "title": "Listing 10"
          },
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Because the structural identity of the views remains the same throughout, the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/animation(_:value:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " view modifier creates animated transitions between layout types. The modifier also animates radial layout changes that result from changes in the rankings because the calculated offsets depend on the same pet data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "4064006",
          "level": 3,
          "text": "Build documentation for the app",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "To see more information about the symbols defined by this app, you can build the app’s documentation. Open the project in Xcode and select Product > Build Documentation.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For information about how to include documentation in your own apps, see ",
              "type": "text"
            },
            {
              "code": "DocC",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.SwiftUI/documentation/SwiftUI/AnyLayout": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/AnyLayout",
      "kind": "symbol",
      "role": "symbol",
      "title": "AnyLayout",
      "type": "topic",
      "url": "/documentation/swiftui/anylayout"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Divider": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Divider",
      "kind": "symbol",
      "role": "symbol",
      "title": "Divider",
      "type": "topic",
      "url": "/documentation/swiftui/divider"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/ForEach": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ForEach",
      "kind": "symbol",
      "role": "symbol",
      "title": "ForEach",
      "type": "topic",
      "url": "/documentation/swiftui/foreach"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Grid": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Grid",
      "kind": "symbol",
      "role": "symbol",
      "title": "Grid",
      "type": "topic",
      "url": "/documentation/swiftui/grid"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/GridRow": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/GridRow",
      "kind": "symbol",
      "role": "symbol",
      "title": "GridRow",
      "type": "topic",
      "url": "/documentation/swiftui/gridrow"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/HStack": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/HStack",
      "kind": "symbol",
      "role": "symbol",
      "title": "HStack",
      "type": "topic",
      "url": "/documentation/swiftui/hstack"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/HStackLayout": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/HStackLayout",
      "kind": "symbol",
      "role": "symbol",
      "title": "HStackLayout",
      "type": "topic",
      "url": "/documentation/swiftui/hstacklayout"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/makeCache(subviews:)": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/makeCache(subviews:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "makeCache(subviews:)",
      "type": "topic",
      "url": "/documentation/swiftui/layout/makecache(subviews:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/placeSubviews(in:proposal:subviews:cache:)": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/placeSubviews(in:proposal:subviews:cache:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "placeSubviews(in:proposal:subviews:cache:)",
      "type": "topic",
      "url": "/documentation/swiftui/layout/placesubviews(in:proposal:subviews:cache:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/sizeThatFits(proposal:subviews:cache:)": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/sizeThatFits(proposal:subviews:cache:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "sizeThatFits(proposal:subviews:cache:)",
      "type": "topic",
      "url": "/documentation/swiftui/layout/sizethatfits(proposal:subviews:cache:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/updateCache(_:subviews:)": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/Layout/updateCache(_:subviews:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "updateCache(_:subviews:)",
      "type": "topic",
      "url": "/documentation/swiftui/layout/updatecache(_:subviews:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/LayoutValueKey": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/LayoutValueKey",
      "kind": "symbol",
      "role": "symbol",
      "title": "LayoutValueKey",
      "type": "topic",
      "url": "/documentation/swiftui/layoutvaluekey"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/ProposedViewSize/replacingUnspecifiedDimensions(by:)": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ProposedViewSize/replacingUnspecifiedDimensions(by:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "replacingUnspecifiedDimensions(by:)",
      "type": "topic",
      "url": "/documentation/swiftui/proposedviewsize/replacingunspecifieddimensions(by:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View-Layout": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View-Layout",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Layout modifiers",
      "type": "topic",
      "url": "/documentation/swiftui/view-layout"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/animation(_:value:)": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/animation(_:value:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "animation(_:value:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/animation(_:value:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/View/gridColumnAlignment(_:)": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/View/gridColumnAlignment(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "gridColumnAlignment(_:)",
      "type": "topic",
      "url": "/documentation/swiftui/view/gridcolumnalignment(_:)"
    },
    "doc://com.apple.SwiftUI/documentation/SwiftUI/ViewThatFits": {
      "identifier": "doc://com.apple.SwiftUI/documentation/SwiftUI/ViewThatFits",
      "kind": "symbol",
      "role": "symbol",
      "title": "ViewThatFits",
      "type": "topic",
      "url": "/documentation/swiftui/viewthatfits"
    },
    "doc://com.apple.documentation/documentation/swiftui": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui",
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftUI",
      "type": "topic",
      "url": "/documentation/swiftui"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063980": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063980",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 1",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063980"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063983": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063983",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 2",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063983"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063984": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063984",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 3",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063984"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063986": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063986",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 4",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063986"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063988": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063988",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 5",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063988"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063989": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063989",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 6",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063989"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063990": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063990",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 7",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063990"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063993": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063993",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 8",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063993"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063994": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063994",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 9",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063994"
    },
    "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063996": {
      "identifier": "doc://com.apple.documentation/documentation/swiftui/composing_custom_layouts_with_swiftui#4063996",
      "kind": "article",
      "role": "codeListing",
      "title": "Listing 10",
      "type": "section",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063996"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://docs-assets.developer.apple.com/published/fbe3f0cffe/ComposingCustomLayoutsWithSwiftUI.zip": {
      "checksum": "dfa9e8544322ce473bf506ef1dc31892b9b581461b726789df8b02b654a9d8fdb2f3669c9b8b3793533eaab2c06818325d03d39558b729077d109d6f661f615f",
      "identifier": "https://docs-assets.developer.apple.com/published/fbe3f0cffe/ComposingCustomLayoutsWithSwiftUI.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/fbe3f0cffe/ComposingCustomLayoutsWithSwiftUI.zip"
    },
    "link-4030067": {
      "identifier": "link-4030067",
      "kind": "article",
      "role": "link",
      "title": "10056: Compose custom layouts with SwiftUI",
      "type": "topic",
      "url": "https://developer.apple.com/wwdc22/10056/"
    },
    "link-media-4063977": {
      "identifier": "link-media-4063977",
      "title": "Figure 1",
      "type": "link",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063977"
    },
    "link-media-4063979": {
      "identifier": "link-media-4063979",
      "title": "Figure 2",
      "type": "link",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063979"
    },
    "link-media-4063982": {
      "identifier": "link-media-4063982",
      "title": "Figure 3",
      "type": "link",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063982"
    },
    "link-media-4063992": {
      "identifier": "link-media-4063992",
      "title": "Figure 4",
      "type": "link",
      "url": "/documentation/swiftui/composing_custom_layouts_with_swiftui#4063992"
    },
    "media-4063977": {
      "alt": "An iPhone showing the layout of the app, with the three main sections called out. The group of avatars are in a circular arrangement at the top. The leaderboard grid is in the middle. The equal-width voting buttons are at the bottom.",
      "identifier": "media-4063977",
      "title": "Figure 1",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "url": "https://docs-assets.developer.apple.com/published/40ad148526/rendered2x-1658538467.png"
        },
        {
          "traits": [
            "dark",
            "2x"
          ],
          "url": "https://docs-assets.developer.apple.com/published/6c9d042e63/renderedDark2x-1658538468.png"
        }
      ]
    },
    "media-4063979": {
      "alt": "A grid with three rows and three columns. The first column and last column each contain rectangles in every cell. The middle column contains progress indicators with different amounts of progress.",
      "identifier": "media-4063979",
      "title": "Figure 2",
      "type": "image",
      "variants": [
        {
          "traits": [
            "dark",
            "2x"
          ],
          "url": "https://docs-assets.developer.apple.com/published/c3103e1aae/renderedDark2x-1657759083.png"
        },
        {
          "traits": [
            "2x"
          ],
          "url": "https://docs-assets.developer.apple.com/published/14e2932cd3/rendered2x-1657759084.png"
        }
      ]
    },
    "media-4063982": {
      "alt": "Three rectangles arranged in a horizontal line. Each rectangle contains one smaller rectangle. The smaller rectangles have varying widths. Dashed lines above each of the container rectangles show that the larger rectangles all have the same width as each other.",
      "identifier": "media-4063982",
      "title": "Figure 3",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "url": "https://docs-assets.developer.apple.com/published/9ec19124de/rendered2x-1657759085.png"
        },
        {
          "traits": [
            "dark",
            "2x"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4663d5c5e7/renderedDark2x-1657759086.png"
        }
      ]
    },
    "media-4063992": {
      "alt": "Three filled circles placed at equal distances along the outline of a larger, empty circle. The outline of the larger circle uses a dashed line.",
      "identifier": "media-4063992",
      "title": "Figure 4",
      "type": "image",
      "variants": [
        {
          "traits": [
            "dark",
            "2x"
          ],
          "url": "https://docs-assets.developer.apple.com/published/82ca6a79a3/renderedDark2x-1657759087.png"
        },
        {
          "traits": [
            "2x"
          ],
          "url": "https://docs-assets.developer.apple.com/published/2a0b3e27de/rendered2x-1657759088.png"
        }
      ]
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "https://docs-assets.developer.apple.com/published/fbe3f0cffe/ComposingCustomLayoutsWithSwiftUI.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "documentation/swiftui/composing_custom_layouts_with_swiftui"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
