{
  "abstract": [
    {
      "text": "Update your code to use new language features and test your apps against changes.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes",
        "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/xcode-10_2-release-notes"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/swift-5-release-notes-for-xcode-10_2"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "role": "article",
    "roleHeading": "Article",
    "title": "Swift 5 Release Notes for Xcode 10.2"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Read these notes when you’re writing Swift apps in Xcode 10.2.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "General",
          "level": 3,
          "text": "General",
          "type": "heading"
        },
        {
          "anchor": "Swift-5-Runtime-Support-for-Command-Line-Tools-Package",
          "level": 4,
          "text": "Swift 5 Runtime Support for Command-Line Tools Package",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Starting with Xcode 10.2, Swift command-line tools require the Swift libraries",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in macOS. They’re included by default starting with macOS Mojave 10.14.4. In macOS",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Mojave 10.14.3 and earlier, there’s an optional package to provide these runtime",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "support libraries for Swift command-line tools that you can download from",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://developer.apple.com/download/more/",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "If you installed the beta version of this package, replace it with the release version.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "This package is only needed for Swift command-line tools, not for apps with graphical",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "user interfaces.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "App-Thinning",
          "level": 3,
          "text": "App Thinning",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Swift apps no longer include dynamically linked libraries for the Swift standard",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "library and Swift SDK overlays in build variants for devices running iOS 12.2, watchOS",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "5.2, and tvOS 12.2. As a result, Swift apps can be smaller when they’re shipped in",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the App Store, deployed for testing using TestFlight, or thinned in an app archive",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "for local development distribution.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "To see the difference in file sizes between an",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "app that’s thinned for iOS 12.2 and an app that’s thinned for iOS 12.1 or earlier,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "set your app’s deployment target to iOS 12.1 or earlier, then create an archive of",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "your app with the scheme set to Generic iOS Device. After building the archive, select",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Distribute App from the Archives organizer, then select Development distribution.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Be sure to select a specific device—such as iPhone XS—in the App Thinning pull-down",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "menu. When the distribution process completes, open the App Thinning Size Report",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in the newly created folder. The variant for iOS 12.2 will be smaller than the variant",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "for iOS 12.1 and earlier. The exact size difference depends on the number of system",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "frameworks your app uses.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For information about app thinning, see ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://help.apple.com/xcode/mac/current/#/devbbdc5ce4f",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://help.apple.com/xcode/mac/current/",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". For information about",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "app file sizes, see ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://help.apple.com/app-store-connect/#/dev3b56ce97c",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://help.apple.com/app-store-connect/",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Swift-Language",
          "level": 3,
          "text": "Swift Language",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "String literals can now be expressed using enhanced delimiters. A string literal",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "with one or more number signs (",
                      "type": "text"
                    },
                    {
                      "code": "#",
                      "type": "codeVoice"
                    },
                    {
                      "text": ") before the opening quote treats backslashes and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "double-quote characters as literal unless they’re followed by the same number of",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "number signs. Use enhanced delimiters to avoid cluttering string literals that",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "contain many double-quote or backslash characters with extra escapes (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (47725014):",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "print(#\"<a href=\"\\#(url)\" title=\"Apple Developer\">\"#)",
                    "",
                    "// Equivalent to:",
                    "print(\"<a href=\\\"\\(url)\\\" title=\\\"Apple Developer\\\">\")"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If you declare a type that has the same name as a type in the standard library,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "your type now shadows the type from the standard library.  (46767892) For example,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "if you declare a ",
                      "type": "text"
                    },
                    {
                      "code": "Result",
                      "type": "codeVoice"
                    },
                    {
                      "text": " type in a module named ",
                      "type": "text"
                    },
                    {
                      "code": "Foo",
                      "type": "codeVoice"
                    },
                    {
                      "text": ":",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "// Module `Foo`.",
                    "",
                    "public enum Result<T> {",
                    "    case value(T)",
                    "    case error(Error)",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Unqualified references to ",
                      "type": "text"
                    },
                    {
                      "code": "Result",
                      "type": "codeVoice"
                    },
                    {
                      "text": " in any of your code that imports the ",
                      "type": "text"
                    },
                    {
                      "code": "Foo",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "module will resolve to ",
                      "type": "text"
                    },
                    {
                      "code": "Foo.Result",
                      "type": "codeVoice"
                    },
                    {
                      "text": ":",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "import Foo",
                    "",
                    "func doSomething() -> Result<Int> { /* … */ }"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "To refer to the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Result",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type from the Swift standard library instead, qualify the access with the “",
                      "type": "text"
                    },
                    {
                      "code": "Swift.",
                      "type": "codeVoice"
                    },
                    {
                      "text": "”",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "prefix. For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "import Foo",
                    "",
                    "func useStandardLibraryResult() -> Swift.Result<Int, Error> { /* … */ }"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "@dynamicCallable",
                      "type": "codeVoice"
                    },
                    {
                      "text": " attribute lets you call named types like you call functions",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "using a simple syntactic sugar. The primary use case is dynamic language interoperability.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (47325423)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "@dynamicCallable struct ToyCallable {",
                    "    func dynamicallyCall(withArguments: [Int]) {}",
                    "    func dynamicallyCall(withKeywordArguments: KeyValuePairs<String, Int>) {}",
                    "}",
                    "",
                    "let x = ToyCallable()",
                    "",
                    "x(1, 2, 3)",
                    "// Desugars to `x.dynamicallyCall(withArguments: [1, 2, 3])`",
                    "",
                    "x(label: 1, 2)",
                    "// Desugars to `x.dynamicallyCall(withKeywordArguments: [\"label\": 1, \"\": 2])`"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Key paths now support the identity keypath (",
                      "type": "text"
                    },
                    {
                      "code": "\\.self",
                      "type": "codeVoice"
                    },
                    {
                      "text": "), a",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/WritableKeyPath",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " that refers to its entire",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "input value (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0227-identity-keypath.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (40538312):",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let id = \\Int.self",
                    "",
                    "var x = 2",
                    "print(x[keyPath: id]) // Prints \"2\"",
                    "x[keyPath: id] = 3",
                    "print(x[keyPath: id]) // Prints \"3\""
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Prior to Swift 5, you could write an enumeration case that took variadic arguments:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "enum X {",
                    "    case foo(bar: Int...)",
                    "}",
                    "",
                    "func baz() -> X {",
                    "    return .foo(bar: 0, 1, 2, 3)",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "This was unsupported intentionally, and now generates an error. (46821582)",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Instead, change the enumeration case to take an array and explicitly pass an array",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "enum X {",
                    "    case foo(bar: [Int])",
                    "}",
                    "",
                    "func baz() -> X {",
                    "    return .foo(bar: [0, 1, 2, 3])",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, ",
                      "type": "text"
                    },
                    {
                      "code": "try?",
                      "type": "codeVoice"
                    },
                    {
                      "text": " with an expression of an ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Optional",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type flattens the resulting optional, instead of returning a nested optional. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (47313584)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If a type ",
                      "type": "text"
                    },
                    {
                      "code": "T",
                      "type": "codeVoice"
                    },
                    {
                      "text": " conforms to one of the protocols in",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/initialization-with-literals",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "—such",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "as ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/ExpressibleByIntegerLiteral",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "—and ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "literal",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "is a literal expression, then ",
                      "type": "text"
                    },
                    {
                      "code": "T(",
                      "type": "codeVoice"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "literal",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "code": ")",
                      "type": "codeVoice"
                    },
                    {
                      "text": " creates a literal of type ",
                      "type": "text"
                    },
                    {
                      "code": "T",
                      "type": "codeVoice"
                    },
                    {
                      "text": " using",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the corresponding protocol, rather than calling an initializer of ",
                      "type": "text"
                    },
                    {
                      "code": "T",
                      "type": "codeVoice"
                    },
                    {
                      "text": " with a value",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "of the protocol’s default literal type.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example, expressions like ",
                      "type": "text"
                    },
                    {
                      "code": "UInt64(0xffff_ffff_ffff_ffff)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are now valid,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "where previously they would overflow the default integer literal type of",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Int",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0213-literal-init-via-coercion.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (17088188)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "String interpolation has improved performance, clarity, and efficiency. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (43621912)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "The older ",
                      "type": "text"
                    },
                    {
                      "code": "_ExpressibleByStringInterpolation",
                      "type": "codeVoice"
                    },
                    {
                      "text": " protocol is removed; if you",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "have code that makes use of this protocol, you need to update it for the new design.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "You can use ",
                      "type": "text"
                    },
                    {
                      "code": "#if",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to conditionalize code between Swift 4.2 and Swift 5. For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "#if compiler(<5)",
                    "extension MyType: _ExpressibleByStringInterpolation { /*...*/ }",
                    "#else",
                    "extension MyType: ExpressibleByStringInterpolation { /*...*/ }",
                    "#endif"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Swift-Standard-Library",
          "level": 3,
          "text": "Swift Standard Library",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The standard library now includes the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Result",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "enumeration with ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Result/success(_:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Result/failure(_:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " cases. Use",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Result",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " to manually propagate and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "handle errors in situations where ",
                      "type": "text"
                    },
                    {
                      "code": "do-catch",
                      "type": "codeVoice"
                    },
                    {
                      "text": " statements and the ",
                      "type": "text"
                    },
                    {
                      "code": "try",
                      "type": "codeVoice"
                    },
                    {
                      "text": " expression",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "can’t be used, such as when you’re using asynchronous APIs that can fail. As part",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "of this addition, the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Error",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " protocol now",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "conforms to itself, which makes working with errors in a generic context easier. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (21200405)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/SIMD",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " types and basic operators are now defined",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in the standard library. The types provided by the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/SIMD",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "framework, like ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/simd/float2",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/simd/float3",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", are now type aliases of the new standard library types.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "SIMD types are generic over the scalar element type. For example, the old ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/simd/float3",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type is a type alias of ",
                      "type": "text"
                    },
                    {
                      "code": "SIMD3<Float>",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Any type that conforms to the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/SIMDScalar",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " protocol can be used as a scalar",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type for SIMD vectors, but effective vectorization depends on choosing a good",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "data layout and having efficient subscript operations for the associated",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/SIMDStorage",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " types.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Most existing code using ",
                      "type": "text"
                    },
                    {
                      "code": "simd",
                      "type": "codeVoice"
                    },
                    {
                      "text": " types will continue to work with the new generic",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "SIMD types, but there are a few changes to note.The new types add some new",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "conformances; SIMD vectors are now ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "This may allow you to delete some existing extensions that provide these conformances",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in your own code.The set of operators that are overloaded to provide vector-scalar",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "arithmetic is greatly expanded. This makes it easier to write some things, but",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in some cases introduces ambiguity to the typechecker and may make it necessary",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to break apart some expressions or annotate with explicit types.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Because the types are now generic rather than concrete, if you have defined your",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "own protocols over the ",
                      "type": "text"
                    },
                    {
                      "code": "simd",
                      "type": "codeVoice"
                    },
                    {
                      "text": " framework types, it may be necessary to refactor",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the conformances because a Swift generic type can’t have multiple conditional",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "conformances to a protocol. This situation is relatively rare, but what you need",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to do in general is refactor code that looks like this:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "protocol MyVectorProtocol { /* ... */ }",
                    "",
                    "extension float2: MyVectorProtocol { /* ... */ }",
                    "extension double2: MyVectorProtocol { /* ... */ }"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "To use the following structure instead:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "protocol MySIMDScalarProtocol: SIMDScalar { /* ... */ }",
                    "",
                    "extension SIMD2 where Scalar: MySIMDScalarProtocol { /* ... */ }",
                    "// Or even:",
                    "protocol MySIMDScalarProtocol: SIMDScalar { /* ... */ }",
                    "extension SIMD where Scalar: MySIMDScalarProtocol { /* ... */ }"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "This change will frequently allow you to remove many redundant implementations,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "but it requires that you define any necessary implementation hooks that reference",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the concrete functions from the C headers on Darwin systems on the scalar type.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0229-simd.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (17045503)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Set",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Dictionary",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "now use a different hash seed for each newly created instance. As a consequence,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the order of elements in equal sets and dictionaries is different much more often",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "than in previous versions:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let a: Set<Int> = [1, 2, 3, 4, 5]",
                    "",
                    "let b: Set<Int> = [1, 2, 3, 4, 5]",
                    "a == b  // true",
                    "print(a) // [1, 4, 3, 2, 5]",
                    "print(b) // [4, 2, 5, 1, 3]"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Existing code that incorrectly assumes that two unrelated",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "but equal sets or dictionaries would contain elements in the same order produces",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "incorrect results more often in Swift 5. Although element ordering isn’t stable across",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "distinct ",
                      "type": "text"
                    },
                    {
                      "code": "Set",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "Dictionary",
                      "type": "codeVoice"
                    },
                    {
                      "text": " instances, the order doesn’t vary between multiple",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "iterations over the same instance. Beyond emphasizing that these collections don’t",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "guarantee consistent element ordering, this change also fixes a number of cases where",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "bulk operations—such as ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Set/union(_:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "—exhibited",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "quadratic performance. (44760778)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "To help prevent inconsistent hashing for Cocoa objects, the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1418615-hashvalue",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property on",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " is no longer overridable.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Overrides of ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1418615-hashvalue",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "were deprecated in Swift 4.2. To customize hashing in ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "subclasses, override the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "property. The following example shows a sample implementation:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "class Person: NSObject {",
                    "    let name: String",
                    "",
                    "    init(name: String) {",
                    "        self.name = name",
                    "        super.init()",
                    "    }",
                    "",
                    "    override func isEqual(_ other: Any?) -> Bool {",
                    "        guard let other = other as? Person else { return false }",
                    "        return other.name == self.name",
                    "    }",
                    "",
                    "    override var hash: Int {",
                    "        var hasher = Hasher()",
                    "        hasher.combine(name)",
                    "        return hasher.finalize()",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Hashing and equality go hand in hand. If you override ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "you also need to override ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418795-isequal",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and vice versa. (42623458)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/DictionaryLiteral",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " type is renamed ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/KeyValuePairs",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0214-DictionaryLiteral.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ")",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(23435865)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Swift strings bridged into Objective-C code may now return a non-",
                      "type": "text"
                    },
                    {
                      "code": "nil",
                      "type": "codeVoice"
                    },
                    {
                      "text": " value from",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/corefoundation/1542133-cfstringgetcstringptr",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " when",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "appropriate, and the pointer returned from the ",
                      "type": "text"
                    },
                    {
                      "code": "UTF8String",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method is tied to the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "string’s lifetime rather than the innermost autorelease pool. Correct programs shouldn’t",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "have any problems and may see significant speed-ups. However, it may cause previously",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "untested code to run, which could expose latent bugs; for example, if there’s a check",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "for a non-",
                      "type": "text"
                    },
                    {
                      "code": "nil",
                      "type": "codeVoice"
                    },
                    {
                      "text": " value, the branch may never have been taken prior to Swift 5. (26236614)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " protocol no longer has a ",
                      "type": "text"
                    },
                    {
                      "code": "SubSequence",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "associated type. Methods on ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " that",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "previously returned ",
                      "type": "text"
                    },
                    {
                      "code": "SubSequence",
                      "type": "codeVoice"
                    },
                    {
                      "text": " now return concrete types. For example,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence/suffix(_:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " now returns an",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Array",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".  (45761817)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Extensions on ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " that use ",
                      "type": "text"
                    },
                    {
                      "code": "SubSequence",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "should be amended to either similarly use a concrete type, or be amended to be",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "extensions on ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Collection",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " instead, where",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Collection/SubSequence",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " remains",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "available.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "extension Sequence {",
                    "    func dropTwo() -> SubSequence {",
                    "        return self.dropFirst(2)",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Becomes:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "extension Sequence {",
                    "   func dropTwo() -> DropFirstSequence<Self> {",
                    "        return self.dropFirst(2)",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Or:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "extension Collection {",
                    "    func dropTwo() -> SubSequence {",
                    "        return self.dropFirst(2)",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/String",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " structure’s native encoding switched",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "from UTF-16 to UTF-8, which may improve the relative performance of",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/String/UTF8View",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " compared to",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/String/UTF16View",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". Consider re-evaluating",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "any code specifically tuned to use ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/String/UTF16View",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "for performance. (42339222)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Known-Issues",
          "level": 4,
          "text": "Known Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "count(where:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method on the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "protocol available in beta versions of Xcode 10.2 is now removed. (47549309)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Use ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/AnyCollection/reduce(_:_:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to count occurrences matching a predicate efficiently:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let occurrences = sequence.reduce(0) { predicate($1) ? $0 + 1 : $0 }"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Resolved-Issues",
          "level": 4,
          "text": "Resolved Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Setting the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/String/utf8",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "on a string now works as expected. (47864538)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Passing a null ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/UnsafeBufferPointer",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "code": "<UInt8>",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/String",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " structure’s",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/String/init(decoding:as:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " initializer now returns",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "an empty string as expected. (47864610)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Swift-Package-Manager",
          "level": 3,
          "text": "Swift Package Manager",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Targets can now declare some commonly used, target-specific build settings when",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "using the Swift 5 ",
                      "type": "text"
                    },
                    {
                      "code": "Package.swift",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "tools-version",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". The new settings can also be",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "conditionalized based on platform and build configuration. The included build",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "settings support Swift- and C-language defines, C language header search paths,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "linked libraries, and linked frameworks. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0238-package-manager-build-settings.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (23270646)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Packages can now customize the minimum deployment target setting for Apple platforms",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "when using the Swift 5 ",
                      "type": "text"
                    },
                    {
                      "code": "Package.swift",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "tools-version",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Building a package emits",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "an error if any of the package dependencies of the package specify a minimum deployment",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "target greater than the package’s own minimum deployment target.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0236-package-manager-platform-deployment-settings.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (28253354)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "A new dependency mirroring feature allows top-level packages to override dependency",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "URLs.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0219-package-manager-dependency-mirroring.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (42511642)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Use the following command to set a mirror:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "$ swift package config set-mirror \\",
                    "--package-url <original URL> --mirror-url <mirror URL>"
                  ],
                  "syntax": "shell",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "swift test",
                      "type": "codeVoice"
                    },
                    {
                      "text": " command can generate code coverage data in a standard format suitable",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "for consumption by other code coverage tools using the flag ",
                      "type": "text"
                    },
                    {
                      "code": "--enable-code-coverage",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "The generated code coverage data is available inside ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [],
                      "type": "emphasis"
                    },
                    {
                      "code": "/",
                      "type": "codeVoice"
                    },
                    {
                      "inlineContent": [],
                      "type": "emphasis"
                    },
                    {
                      "code": "/codecov",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (44567442)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Swift 5 no longer supports the Swift 3 ",
                      "type": "text"
                    },
                    {
                      "code": "Package.swift",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "tools-version",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Packages",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "still on the Swift 3 ",
                      "type": "text"
                    },
                    {
                      "code": "Package.swift",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "tools-version",
                      "type": "codeVoice"
                    },
                    {
                      "text": " should update to a newer",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "tools-version",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (41974124)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Package manager operations for larger packages are now significantly faster. (35596212)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Swift Package Manager has a new ",
                      "type": "text"
                    },
                    {
                      "code": "--disable-automatic-resolution",
                      "type": "codeVoice"
                    },
                    {
                      "text": " flag that",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "forces the package resolution to fail when the ",
                      "type": "text"
                    },
                    {
                      "code": "Package.resolved",
                      "type": "codeVoice"
                    },
                    {
                      "text": " entries are no",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "longer compatible with the dependency versions specified in the ",
                      "type": "text"
                    },
                    {
                      "code": "Package.swift",
                      "type": "codeVoice"
                    },
                    {
                      "text": " manifest",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "file. This feature can be useful for a continuous integration system to check if",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "a package’s ",
                      "type": "text"
                    },
                    {
                      "code": "Package.resolved",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is out of date. (45822895)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "swift run",
                      "type": "codeVoice"
                    },
                    {
                      "text": " command has a new ",
                      "type": "text"
                    },
                    {
                      "code": "--repl",
                      "type": "codeVoice"
                    },
                    {
                      "text": " option that launches the Swift REPL",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "with support for importing library targets of a package. This allows you to easily",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "experiment with API from a package target without needing to build an executable",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "that calls that API. (44889181)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "For more information about using the Swift Package Manager, visit ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://swift.org/getting-started/#using-the-package-manager",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "on ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://swift.org",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Swift-Compiler",
          "level": 3,
          "text": "Swift Compiler",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "To reduce the size taken up by Swift metadata, convenience initializers defined",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in Swift now only allocate an object ahead of time if they’re calling a designated",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "initializer defined in Objective-C. In most cases, this has no effect on your app,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "but if your convenience initializer is called from Objective-C and doesn’t in turn",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "delegate via ",
                      "type": "text"
                    },
                    {
                      "code": "self.init",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to an initializer exposed to Objective-C, the initial allocation",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "from ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1571958-alloc",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " is released",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "without any initializer being called. This can be problematic for users of the initializer",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "that don’t expect any sort of object replacement to happen. One instance of this",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "is with ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/OSLog/OSLogEntry/init(coder:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ": the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "implementation of ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/foundation/nskeyedunarchiver",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "may behave incorrectly if it calls into Swift implementations of",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/OSLog/OSLogEntry/init(coder:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and the archived",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "object graph contains cycles.To avoid this, ensure that convenience initializers",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "that don’t support object replacement always delegate to initializers that are",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "also exposed to Objective-C, either because they’re defined in Objective-C, or",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "because they’re marked with ",
                      "type": "text"
                    },
                    {
                      "code": "@objc",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", or because they override initializers exposed",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to Objective-C, or because they satisfy requirements of an ",
                      "type": "text"
                    },
                    {
                      "code": "@objc",
                      "type": "codeVoice"
                    },
                    {
                      "text": " protocol. (46823518)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "C types with an alignment greater than 16 bytes are no longer available in Swift.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "The Swift compiler never handled these types correctly. (31411216)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, the type of ",
                      "type": "text"
                    },
                    {
                      "code": "self",
                      "type": "codeVoice"
                    },
                    {
                      "text": " in a convenience initializer of a nonfinal",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "class is now the dynamic ",
                      "type": "text"
                    },
                    {
                      "code": "Self",
                      "type": "codeVoice"
                    },
                    {
                      "text": " type, and not the concrete class type. (47323459)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Exclusive memory access is now enforced at runtime by default in optimized (",
                      "type": "text"
                    },
                    {
                      "code": "-O",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and ",
                      "type": "text"
                    },
                    {
                      "code": "-Osize",
                      "type": "codeVoice"
                    },
                    {
                      "text": ") builds. Programs that violate exclusivity trap at runtime and produce",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "a diagnostic message: “Simultaneous accesses to […], but modification requires exclusive",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "access”. You can disable this using the command line flag ",
                      "type": "text"
                    },
                    {
                      "code": "-enforce-exclusivity=unchecked",
                      "type": "codeVoice"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "but doing so may result in undefined behavior. Runtime violations of exclusivity",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "typically result from simultaneous access of class properties or global variables—including",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "variables in top-level code or variables captured by escaping closures. For more",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "information, see ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://swift.org/blog/swift-5-exclusivity/",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-7139",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (37830912)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Swift 3 mode has been removed. Supported values for the ",
                      "type": "text"
                    },
                    {
                      "code": "-swift-version",
                      "type": "codeVoice"
                    },
                    {
                      "text": " flag are",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "4",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", ",
                      "type": "text"
                    },
                    {
                      "code": "4.2",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", and ",
                      "type": "text"
                    },
                    {
                      "code": "5",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (43101816)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, switches over enumerations that are declared in Objective-C or",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "that come from system frameworks are required to handle ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "unknown cases",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": "—cases that",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "might be added in the future, or that may be defined privately in an Objective-C",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "implementation file. Formally, Objective-C allows storing any value in an enumeration",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "as long as it fits in the underlying type. These unknown cases can be handled by",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "using the new ",
                      "type": "text"
                    },
                    {
                      "code": "@unknown default",
                      "type": "codeVoice"
                    },
                    {
                      "text": " case, which still provides warnings if any known",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "cases are omitted from the switch. They can also be handled using a normal ",
                      "type": "text"
                    },
                    {
                      "code": "default",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "case.If you’ve defined your own enumeration in Objective-C and you don’t need clients",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to handle unknown cases, you can use the ",
                      "type": "text"
                    },
                    {
                      "code": "NS_CLOSED_ENUM",
                      "type": "codeVoice"
                    },
                    {
                      "text": " macro instead of ",
                      "type": "text"
                    },
                    {
                      "code": "NS_ENUM",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "The Swift compiler recognizes this and doesn’t require switches to have a default",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "case.In Swift 4 and 4.2 modes, you can still use ",
                      "type": "text"
                    },
                    {
                      "code": "@unknown default",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". If you omit",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "it and an unknown value is passed into the switch, the program traps at runtime,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "which is the same behavior as Swift 4.2 in Xcode 10.1. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (39367045)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Default arguments are now printed in SourceKit-generated interfaces for Swift modules,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "instead of just using a placeholder default. (18675831)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "unowned",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "unowned(unsafe)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " variables now support ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Optional",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "types. (47326769)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Known-Issues",
          "level": 4,
          "text": "Known Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "A key path literal that refers to a property in a protocol extension from another",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "module may cause the compiler to crash. (48001932)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Avoid crossing the module boundary by defining a wrapper property",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in the local module, and reference the wrapper in the key path instead.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Swift compiler may crash during a build when the Thread Sanitizer is enabled. (48719789)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Disable Thread Sanitizer in the Scheme Editor’s Diagnostics tab.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Linking against a static Swift library might create a binary with missing type",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "metadata because the object files that define the metadata inside the static archive",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "are mistakenly considered unused. (47598583)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "This can manifest as a Swift runtime error with a message such as: “failed to",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "demangle superclass of ",
                      "type": "text"
                    },
                    {
                      "code": "MyClass",
                      "type": "codeVoice"
                    },
                    {
                      "text": " from mangled name ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "’<mangled name>’",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": "”.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " If you can rebuild the static library, try",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "building it with whole module optimization enabled. Otherwise, add ",
                      "type": "text"
                    },
                    {
                      "code": "-all_load",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the linker flags in the client binary to ensure all object files are linked into",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "it.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The expression ",
                      "type": "text"
                    },
                    {
                      "code": "self.init()",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is erroneously allowed in designated initializers",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in subclasses of ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/AppKit/NSView",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIView",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", even though ",
                      "type": "text"
                    },
                    {
                      "code": "init()",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is a convenience",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "initializer on ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/AppKit/NSView",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIView",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". Using ",
                      "type": "text"
                    },
                    {
                      "code": "self.init()",
                      "type": "codeVoice"
                    },
                    {
                      "text": " can result",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in stored properties being initialized more than once, which leads to memory leaks",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and other possible issues in your app. (SR-9836) (47734208)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Use ",
                      "type": "text"
                    },
                    {
                      "code": "super.init(frame:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " instead.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Resolved-Issues",
          "level": 4,
          "text": "Resolved Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Swift command line projects won’t run on macOS 10.14.3 and earlier unless you install",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the Swift 5 Runtime Support for Command Line Tools package. Without that package,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Swift command line projects crash on launch with “dyld: Library not loaded”",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "errors. (46824656)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Linking a Swift program directly from the command line with the ",
                      "type": "text"
                    },
                    {
                      "code": "swiftc",
                      "type": "codeVoice"
                    },
                    {
                      "text": " compiler",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "now results in output that runs without issue on macOS Mojave 10.14.4. (43616773)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Compile time regressions in Xcode 10.2, as compared to Xcode 10.1, are now resolved",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in most cases. Some projects may continue to experience small regressions; file bug",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "reports for cases you encounter. (47304789)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Swift compiler completes the “Merge swiftmodule” build step even if members",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "of the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIAccessibility",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " structure or other types",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "that contain ",
                      "type": "text"
                    },
                    {
                      "code": "NS_ERROR_ENUM",
                      "type": "codeVoice"
                    },
                    {
                      "text": " nested types are referenced. (47152185)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Single-element labeled tuple expressions, like ",
                      "type": "text"
                    },
                    {
                      "code": "(label: 123)",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", were allowed in",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "some contexts but often resulted in surprising, inconsistent behavior that varied",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "across compiler releases. They’re now completely disallowed.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Single-element labeled ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "types",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": ", like ",
                      "type": "text"
                    },
                    {
                      "code": "var x: (label: Int)",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", were prohibited",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "starting in Swift 3. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-8109",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (41474370)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If a key path literal refers to a property that’s defined in Objective-C or that’s",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "defined with the ",
                      "type": "text"
                    },
                    {
                      "code": "@objc",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "code": "dynamic",
                      "type": "codeVoice"
                    },
                    {
                      "text": " modifiers in Swift, it now compiles successfully",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and generates the correct hash value or equality comparison with other key paths",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "at runtime. (47184763)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Extension binding now supports extensions of nested types which themselves are",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "defined inside extensions. Previously this could fail with some declaration orders,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "producing spurious “undeclared type” errors.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-631",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (20337822)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, inferred associated types are no longer exposed publicly when",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "a public type conforms to a non-public protocol. Instead, they get the minimum possible",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "access to be visible from both the protocol and the conforming type. For source compatibility,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Swift 4 and 4.2 modes continue to expose inferred associated types as publicly as",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the enclosing type unless the inferred associated type is itself less public than",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the conforming type. (46143405)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, a class method that returns ",
                      "type": "text"
                    },
                    {
                      "code": "Self",
                      "type": "codeVoice"
                    },
                    {
                      "text": " can no longer be overridden",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "with a method that returns a concrete class type that isn’t ",
                      "type": "text"
                    },
                    {
                      "code": "final",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Such code isn’t",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type safe and needs to be updated. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-695",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (47322892)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "class Base {",
                    "    class func factory() -> Self { /*...*/ }",
                    "}",
                    "",
                    "class Derived: Base {",
                    "    class override func factory() -> Derived { /*...*/ }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, attempting to declare a static property with the same name as",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "a nested type is now always correctly rejected. Previously, it was possible to perform",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "such a redeclaration in an extension of a generic type.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-7251",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (47325738)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "struct Foo<T> {}",
                    "",
                    "extension Foo {",
                    "    struct i {}",
                    "",
                    "    // Error: Invalid redeclaration of 'i'.",
                    "    // (Prior to Swift 5, this didn't produce an error.)",
                    "    static var i: Int { return 0 }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Designated initializers with variadic parameters are now correctly inherited in",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "subclasses. (16331406)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, ",
                      "type": "text"
                    },
                    {
                      "code": "@autoclosure",
                      "type": "codeVoice"
                    },
                    {
                      "text": " parameters can no longer be forwarded to ",
                      "type": "text"
                    },
                    {
                      "code": "@autoclosure",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "arguments in another function call. Instead, you must explicitly call the function",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "value with parentheses: ",
                      "type": "text"
                    },
                    {
                      "code": "()",
                      "type": "codeVoice"
                    },
                    {
                      "text": "; the call itself is wrapped inside an implicit closure,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "guaranteeing the same behavior as in Swift 4 mode.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-5719",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (37321597)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "func foo(_ fn: @autoclosure () -> Int) {}",
                    "",
                    "func bar(_ fn: @autoclosure () -> Int) {",
                    "    foo(fn) // Incorrect, `fn` can't be forwarded and has to be called.",
                    "    foo(fn()) // OK",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Complex recursive type definitions involving classes and generics that would previously",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "cause deadlocks at runtime are now fully supported. (38890298)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, when casting an optional value to a generic placeholder type,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the compiler will be more conservative with the unwrapping of the value. The result",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "of such a cast now more closely matches the result you would get in a nongeneric",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "context. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-4248",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (47326318)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "func forceCast<U>(_ value: Any?, to type: U.Type) -> U {",
                    "    return value as! U",
                    "}",
                    "",
                    "let value: Any? = 42",
                    "print(forceCast(value, to: Any.self))",
                    "// Prints \"Optional(42)\"",
                    "// (Prior to Swift 5, this would print \"42\".)",
                    "",
                    "print(value as! Any)",
                    "// Prints \"Optional(42)\""
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Protocols can now constrain their conforming types to those that subclass a given",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "class. Two equivalent forms are supported:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "protocol MyView: UIView { /*...*/ }",
                    "",
                    "protocol MyView where Self: UIView { /*...*/ }"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Swift 4.2 accepted the second form, but it wasn’t fully implemented and could",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "sometimes crash at compile time or runtime. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-5581",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (38077232)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "In Swift 5 mode, when setting a property from within its own ",
                      "type": "text"
                    },
                    {
                      "code": "didSet",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "willSet",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "observer, the observer will now only avoid being recursively called if the property",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "is set on ",
                      "type": "text"
                    },
                    {
                      "code": "self",
                      "type": "codeVoice"
                    },
                    {
                      "text": " (either implicitly or explicitly).",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-419",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (32334826)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "class Node {",
                    "    var children = [Node]()",
                    "    var depth: Int = 0 {",
                    "        didSet {",
                    "            if depth < 0 {",
                    "                // Won't recursively call didSet, because this is setting depth",
                    "                on self.",
                    "                depth = 0",
                    "            }",
                    "",
                    "            // Will call didSet for each of the children,",
                    "            // as this isn't setting the property on self.",
                    "            // (Prior to Swift 5, this didn't trigger property",
                    "            // observers to be called again.)",
                    "            for child in children {",
                    "                child.depth = depth + 1",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "#sourceLocation",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is now honored when diagnostics are emitted in Xcode. That is,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "if your source uses ",
                      "type": "text"
                    },
                    {
                      "code": "#sourceLocation",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to map lines in a generated file back to the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "original source, diagnostics now show up in the original source file rather than",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in the generated file. (43647151)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Using a generic type alias as the parameter or return type of an ",
                      "type": "text"
                    },
                    {
                      "code": "@objc",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "no longer results in the generation of an invalid Objective-C header.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-8697",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (43347303)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes": {
      "abstract": [
        {
          "text": "Learn about changes to Xcode.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes",
      "kind": "article",
      "role": "collection",
      "title": "Xcode Release Notes",
      "type": "topic",
      "url": "/documentation/xcode-release-notes"
    },
    "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/xcode-10_2-release-notes": {
      "abstract": [
        {
          "text": "Update your apps to use new features, and test your apps against API changes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/xcode-10_2-release-notes",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Xcode 10.2 Release Notes",
      "type": "topic",
      "url": "/documentation/xcode-release-notes/xcode-10_2-release-notes"
    },
    "doc://com.apple.documentation/documentation/AppKit/NSView": {
      "abstract": [
        {
          "text": "The infrastructure for drawing, printing, and handling events in an app.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "NSView"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/AppKit/NSView",
      "kind": "symbol",
      "role": "symbol",
      "title": "NSView",
      "type": "topic",
      "url": "/documentation/AppKit/NSView"
    },
    "doc://com.apple.documentation/documentation/OSLog/OSLogEntry/init(coder:)": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "?("
        },
        {
          "kind": "externalParam",
          "text": "coder"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)NSCoder",
          "text": "NSCoder"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/OSLog/OSLogEntry/init(coder:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(coder:)",
      "type": "topic",
      "url": "/documentation/OSLog/OSLogEntry/init(coder:)"
    },
    "doc://com.apple.documentation/documentation/Swift/AnyCollection/reduce(_:_:)": {
      "abstract": [
        {
          "text": "Returns the result of combining the elements of the sequence using the given closure.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "reduce"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "initialResult"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "nextPartialResult"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/AnyCollection/reduce(_:_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "reduce(_:_:)",
      "type": "topic",
      "url": "/documentation/Swift/AnyCollection/reduce(_:_:)"
    },
    "doc://com.apple.documentation/documentation/Swift/Array": {
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Array",
      "kind": "symbol",
      "role": "symbol",
      "title": "Array",
      "type": "topic",
      "url": "/documentation/Swift/Array"
    },
    "doc://com.apple.documentation/documentation/Swift/Codable": {
      "abstract": [
        {
          "text": "A type that can convert itself into and out of an external representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Codable"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Se",
          "text": "Decodable"
        },
        {
          "kind": "text",
          "text": " & "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SE",
          "text": "Encodable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Codable",
      "type": "topic",
      "url": "/documentation/Swift/Codable"
    },
    "doc://com.apple.documentation/documentation/Swift/Collection": {
      "abstract": [
        {
          "text": "A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Collection"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST",
          "text": "Sequence"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Collection",
      "kind": "symbol",
      "role": "symbol",
      "title": "Collection",
      "type": "topic",
      "url": "/documentation/Swift/Collection"
    },
    "doc://com.apple.documentation/documentation/Swift/Collection/SubSequence": {
      "abstract": [
        {
          "text": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl",
          "text": "Collection"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5SliceV",
          "text": "Slice"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Collection/SubSequence",
      "kind": "symbol",
      "role": "symbol",
      "title": "SubSequence",
      "type": "topic",
      "url": "/documentation/Swift/Collection/SubSequence"
    },
    "doc://com.apple.documentation/documentation/Swift/Dictionary": {
      "abstract": [
        {
          "text": "A collection whose elements are key-value pairs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Dictionary"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Key"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Key"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SH",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Dictionary",
      "kind": "symbol",
      "role": "symbol",
      "title": "Dictionary",
      "type": "topic",
      "url": "/documentation/Swift/Dictionary"
    },
    "doc://com.apple.documentation/documentation/Swift/DictionaryLiteral": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "DictionaryLiteral"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Key"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": "> = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s13KeyValuePairsV",
          "text": "KeyValuePairs"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Key"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/DictionaryLiteral",
      "kind": "symbol",
      "role": "symbol",
      "title": "DictionaryLiteral",
      "type": "topic",
      "url": "/documentation/Swift/DictionaryLiteral"
    },
    "doc://com.apple.documentation/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/Swift/Equatable"
    },
    "doc://com.apple.documentation/documentation/Swift/Error": {
      "abstract": [
        {
          "text": "A type representing an error value that can be thrown.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Error"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8SendableP",
          "text": "Sendable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Error",
      "kind": "symbol",
      "role": "symbol",
      "title": "Error",
      "type": "topic",
      "url": "/documentation/Swift/Error"
    },
    "doc://com.apple.documentation/documentation/Swift/ExpressibleByIntegerLiteral": {
      "abstract": [
        {
          "text": "A type that can be initialized with an integer literal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpressibleByIntegerLiteral"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/ExpressibleByIntegerLiteral",
      "kind": "symbol",
      "role": "symbol",
      "title": "ExpressibleByIntegerLiteral",
      "type": "topic",
      "url": "/documentation/Swift/ExpressibleByIntegerLiteral"
    },
    "doc://com.apple.documentation/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a `Hasher` to produce an integer hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SQ",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/Swift/Hashable"
    },
    "doc://com.apple.documentation/documentation/Swift/Int": {
      "abstract": [
        {
          "text": "A signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Int",
      "kind": "symbol",
      "role": "symbol",
      "title": "Int",
      "type": "topic",
      "url": "/documentation/Swift/Int"
    },
    "doc://com.apple.documentation/documentation/Swift/KeyValuePairs": {
      "abstract": [
        {
          "text": "A lightweight collection of key-value pairs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "KeyValuePairs"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Key"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/KeyValuePairs",
      "kind": "symbol",
      "role": "symbol",
      "title": "KeyValuePairs",
      "type": "topic",
      "url": "/documentation/Swift/KeyValuePairs"
    },
    "doc://com.apple.documentation/documentation/Swift/Optional": {
      "abstract": [
        {
          "text": "A type that represents either a wrapped value or the absence of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Optional"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": " : ~Copyable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Optional",
      "kind": "symbol",
      "role": "symbol",
      "title": "Optional",
      "type": "topic",
      "url": "/documentation/Swift/Optional"
    },
    "doc://com.apple.documentation/documentation/Swift/Result": {
      "abstract": [
        {
          "text": "A value that represents either a success or a failure, including an associated value in each case.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Result"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": " : ~Copyable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Result",
      "kind": "symbol",
      "role": "symbol",
      "title": "Result",
      "type": "topic",
      "url": "/documentation/Swift/Result"
    },
    "doc://com.apple.documentation/documentation/Swift/Result/failure(_:)": {
      "abstract": [
        {
          "text": "A failure, storing a `Failure` value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "failure"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Failure"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Result/failure(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "Result.failure(_:)",
      "type": "topic",
      "url": "/documentation/Swift/Result/failure(_:)"
    },
    "doc://com.apple.documentation/documentation/Swift/Result/success(_:)": {
      "abstract": [
        {
          "text": "A success, storing a `Success` value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "success"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Success"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Result/success(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "Result.success(_:)",
      "type": "topic",
      "url": "/documentation/Swift/Result/success(_:)"
    },
    "doc://com.apple.documentation/documentation/Swift/SIMD": {
      "abstract": [
        {
          "text": "A SIMD vector of a fixed number of elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMD"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s11SIMDStorageP6ScalarQa",
          "text": "Scalar"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s23CustomStringConvertibleP",
          "text": "CustomStringConvertible"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Se",
          "text": "Decodable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SE",
          "text": "Encodable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s25ExpressibleByArrayLiteralP",
          "text": "ExpressibleByArrayLiteral"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SH",
          "text": "Hashable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s11SIMDStorageP",
          "text": "SIMDStorage"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/SIMD",
      "kind": "symbol",
      "role": "symbol",
      "title": "SIMD",
      "type": "topic",
      "url": "/documentation/Swift/SIMD"
    },
    "doc://com.apple.documentation/documentation/Swift/SIMDScalar": {
      "abstract": [
        {
          "text": "A type that can be used as an element in a SIMD vector.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMDScalar"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s15BitwiseCopyableP",
          "text": "BitwiseCopyable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/SIMDScalar",
      "kind": "symbol",
      "role": "symbol",
      "title": "SIMDScalar",
      "type": "topic",
      "url": "/documentation/Swift/SIMDScalar"
    },
    "doc://com.apple.documentation/documentation/Swift/SIMDStorage": {
      "abstract": [
        {
          "text": "A type that can function as storage for a SIMD vector type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SIMDStorage"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/SIMDStorage",
      "kind": "symbol",
      "role": "symbol",
      "title": "SIMDStorage",
      "type": "topic",
      "url": "/documentation/Swift/SIMDStorage"
    },
    "doc://com.apple.documentation/documentation/Swift/Sequence": {
      "abstract": [
        {
          "text": "A type that provides sequential, iterated access to its elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sequence"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence",
      "kind": "symbol",
      "role": "symbol",
      "title": "Sequence",
      "type": "topic",
      "url": "/documentation/Swift/Sequence"
    },
    "doc://com.apple.documentation/documentation/Swift/Sequence/suffix(_:)": {
      "abstract": [
        {
          "text": "Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "suffix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "maxLength"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> ["
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "]"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence/suffix(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "suffix(_:)",
      "type": "topic",
      "url": "/documentation/Swift/Sequence/suffix(_:)"
    },
    "doc://com.apple.documentation/documentation/Swift/Set": {
      "abstract": [
        {
          "text": "An unordered collection of unique elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Set"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SH",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Set",
      "kind": "symbol",
      "role": "symbol",
      "title": "Set",
      "type": "topic",
      "url": "/documentation/Swift/Set"
    },
    "doc://com.apple.documentation/documentation/Swift/Set/union(_:)": {
      "abstract": [
        {
          "text": "Returns a new set with the elements of both this set and the given sequence.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "union"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "other"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sh",
          "text": "Set"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST",
          "text": "Sequence"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Set/union(_:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "union(_:)",
      "type": "topic",
      "url": "/documentation/Swift/Set/union(_:)"
    },
    "doc://com.apple.documentation/documentation/Swift/String": {
      "abstract": [
        {
          "text": "A Unicode string value that is a collection of characters.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/String",
      "kind": "symbol",
      "role": "symbol",
      "title": "String",
      "type": "topic",
      "url": "/documentation/Swift/String"
    },
    "doc://com.apple.documentation/documentation/Swift/String/UTF16View": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of UTF-16 code units.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF16View"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/String/UTF16View",
      "kind": "symbol",
      "role": "symbol",
      "title": "String.UTF16View",
      "type": "topic",
      "url": "/documentation/Swift/String/UTF16View"
    },
    "doc://com.apple.documentation/documentation/Swift/String/UTF8View": {
      "abstract": [
        {
          "text": "A view of a string’s contents as a collection of UTF-8 code units.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UTF8View"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/String/UTF8View",
      "kind": "symbol",
      "role": "symbol",
      "title": "String.UTF8View",
      "type": "topic",
      "url": "/documentation/Swift/String/UTF8View"
    },
    "doc://com.apple.documentation/documentation/Swift/String/init(decoding:as:)": {
      "abstract": [
        {
          "text": "Creates a string from the given Unicode code units in the specified encoding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Encoding"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "decoding"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "codeUnits"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "as"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "sourceEncoding"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Encoding"
        },
        {
          "kind": "text",
          "text": ".Type) "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "C"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl",
          "text": "Collection"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Encoding"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "text": "_UnicodeEncoding"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "C"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "text": "Encoding"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s16_UnicodeEncodingP8CodeUnitQa",
          "text": "CodeUnit"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/String/init(decoding:as:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(decoding:as:)",
      "type": "topic",
      "url": "/documentation/Swift/String/init(decoding:as:)"
    },
    "doc://com.apple.documentation/documentation/Swift/String/utf8": {
      "abstract": [
        {
          "text": "A UTF-8 encoding of `self`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "utf8"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS8UTF8ViewV",
          "text": "UTF8View"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "set"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/String/utf8",
      "kind": "symbol",
      "role": "symbol",
      "title": "utf8",
      "type": "topic",
      "url": "/documentation/Swift/String/utf8"
    },
    "doc://com.apple.documentation/documentation/Swift/UnsafeBufferPointer": {
      "abstract": [
        {
          "text": "A nonowning collection interface to a buffer of elements stored contiguously in memory.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnsafeBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " : ~Copyable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/UnsafeBufferPointer",
      "kind": "symbol",
      "role": "symbol",
      "title": "UnsafeBufferPointer",
      "type": "topic",
      "url": "/documentation/Swift/UnsafeBufferPointer"
    },
    "doc://com.apple.documentation/documentation/Swift/WritableKeyPath": {
      "abstract": [
        {
          "text": "A key path that supports reading from and writing to the resulting value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "WritableKeyPath"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Root"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/WritableKeyPath",
      "kind": "symbol",
      "role": "symbol",
      "title": "WritableKeyPath",
      "type": "topic",
      "url": "/documentation/Swift/WritableKeyPath"
    },
    "doc://com.apple.documentation/documentation/Swift/initialization-with-literals": {
      "abstract": [
        {
          "text": "Allow values of your type to be expressed using different kinds of literals.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/initialization-with-literals",
      "kind": "article",
      "role": "article",
      "title": "Initialization with Literals",
      "type": "topic",
      "url": "/documentation/Swift/initialization-with-literals"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIAccessibility": {
      "abstract": [
        {
          "text": "A namespace for accessibility symbols for UIKit apps.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UIAccessibility"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIAccessibility",
      "kind": "symbol",
      "role": "symbol",
      "title": "UIAccessibility",
      "type": "topic",
      "url": "/documentation/UIKit/UIAccessibility"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIView": {
      "abstract": [
        {
          "text": "An object that manages the content for a rectangular area on the screen.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@"
        },
        {
          "kind": "attribute",
          "preciseIdentifier": "s:ScM",
          "text": "MainActor"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UIView"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIView",
      "kind": "symbol",
      "role": "symbol",
      "title": "UIView",
      "type": "topic",
      "url": "/documentation/UIKit/UIView"
    },
    "doc://com.apple.documentation/documentation/corefoundation/1542133-cfstringgetcstringptr": {
      "abstract": [
        {
          "text": "Quickly obtains a pointer to a C-string buffer containing the characters of a string in a given encoding.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "CFStringGetCStringPtr"
        },
        {
          "kind": "text",
          "text": "(CFString!, CFStringEncoding) -> UnsafePointer<CChar>!"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/corefoundation/1542133-cfstringgetcstringptr",
      "kind": "symbol",
      "role": "symbol",
      "title": "CFStringGetCStringPtr(_:_:)",
      "type": "topic",
      "url": "/documentation/corefoundation/1542133-cfstringgetcstringptr"
    },
    "doc://com.apple.documentation/documentation/foundation/nskeyedunarchiver": {
      "abstract": [
        {
          "text": "A decoder that restores data from an archive referenced by keys.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "NSKeyedUnarchiver"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/nskeyedunarchiver",
      "kind": "symbol",
      "role": "symbol",
      "title": "NSKeyedUnarchiver",
      "type": "topic",
      "url": "/documentation/foundation/nskeyedunarchiver"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobject": {
      "abstract": [
        {
          "text": "The root class of most Objective-C class hierarchies, from which subclasses inherit a basic interface to the runtime system and the ability to behave as Objective-C objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "NSObject"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject",
      "kind": "symbol",
      "role": "symbol",
      "title": "NSObject",
      "type": "topic",
      "url": "/documentation/objectivec/nsobject"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobject/1418615-hashvalue": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "var "
        },
        {
          "kind": "identifier",
          "text": "hashValue"
        },
        {
          "kind": "text",
          "text": ": Int"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1418615-hashvalue",
      "kind": "symbol",
      "role": "symbol",
      "title": "hashValue",
      "type": "topic",
      "url": "/documentation/objectivec/nsobject/1418615-hashvalue"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobject/1571958-alloc": {
      "abstract": [
        {
          "text": "Returns a new instance of the receiving class.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1571958-alloc",
      "kind": "symbol",
      "role": "symbol",
      "title": "alloc",
      "type": "topic",
      "url": "/documentation/objectivec/nsobject/1571958-alloc"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418795-isequal": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the receiver and a given object are equal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "isEqual"
        },
        {
          "kind": "text",
          "text": "(Any?) -> Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418795-isequal",
      "kind": "symbol",
      "role": "symbol",
      "title": "isEqual(_:)",
      "type": "topic",
      "url": "/documentation/objectivec/nsobjectprotocol/1418795-isequal"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash": {
      "abstract": [
        {
          "text": "Returns an integer that can be used as a table address in a hash table structure.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "var "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": ": Int"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash",
      "kind": "symbol",
      "role": "symbol",
      "title": "hash",
      "type": "topic",
      "url": "/documentation/objectivec/nsobjectprotocol/1418859-hash"
    },
    "doc://com.apple.documentation/documentation/simd/float2": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "float2"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5SIMD2V",
          "text": "SIMD2"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/simd/float2",
      "kind": "symbol",
      "role": "symbol",
      "title": "float2",
      "type": "topic",
      "url": "/documentation/simd/float2"
    },
    "doc://com.apple.documentation/documentation/simd/float3": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "deprecated": true,
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "float3"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5SIMD3V",
          "text": "SIMD3"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sf",
          "text": "Float"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/simd/float3",
      "kind": "symbol",
      "role": "symbol",
      "title": "float3",
      "type": "topic",
      "url": "/documentation/simd/float3"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://bugs.swift.org/browse/SR-419": {
      "identifier": "https://bugs.swift.org/browse/SR-419",
      "title": "SR-419",
      "titleInlineContent": [
        {
          "text": "SR-419",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-419"
    },
    "https://bugs.swift.org/browse/SR-4248": {
      "identifier": "https://bugs.swift.org/browse/SR-4248",
      "title": "SR-4248",
      "titleInlineContent": [
        {
          "text": "SR-4248",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-4248"
    },
    "https://bugs.swift.org/browse/SR-5581": {
      "identifier": "https://bugs.swift.org/browse/SR-5581",
      "title": "SR-5581",
      "titleInlineContent": [
        {
          "text": "SR-5581",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-5581"
    },
    "https://bugs.swift.org/browse/SR-5719": {
      "identifier": "https://bugs.swift.org/browse/SR-5719",
      "title": "SR-5719",
      "titleInlineContent": [
        {
          "text": "SR-5719",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-5719"
    },
    "https://bugs.swift.org/browse/SR-631": {
      "identifier": "https://bugs.swift.org/browse/SR-631",
      "title": "SR-631",
      "titleInlineContent": [
        {
          "text": "SR-631",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-631"
    },
    "https://bugs.swift.org/browse/SR-695": {
      "identifier": "https://bugs.swift.org/browse/SR-695",
      "title": "SR-695",
      "titleInlineContent": [
        {
          "text": "SR-695",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-695"
    },
    "https://bugs.swift.org/browse/SR-7139": {
      "identifier": "https://bugs.swift.org/browse/SR-7139",
      "title": "SR-7139",
      "titleInlineContent": [
        {
          "text": "SR-7139",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-7139"
    },
    "https://bugs.swift.org/browse/SR-7251": {
      "identifier": "https://bugs.swift.org/browse/SR-7251",
      "title": "SR-7251",
      "titleInlineContent": [
        {
          "text": "SR-7251",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-7251"
    },
    "https://bugs.swift.org/browse/SR-8109": {
      "identifier": "https://bugs.swift.org/browse/SR-8109",
      "title": "SR-0192",
      "titleInlineContent": [
        {
          "text": "SR-0192",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-8109"
    },
    "https://bugs.swift.org/browse/SR-8697": {
      "identifier": "https://bugs.swift.org/browse/SR-8697",
      "title": "SR-8697",
      "titleInlineContent": [
        {
          "text": "SR-8697",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-8697"
    },
    "https://developer.apple.com/download/more/": {
      "identifier": "https://developer.apple.com/download/more/",
      "title": "More Downloads for Apple Developers",
      "titleInlineContent": [
        {
          "text": "More Downloads for Apple Developers",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/download/more/"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md",
      "title": "SE-0192",
      "titleInlineContent": [
        {
          "text": "SE-0192",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md",
      "title": "SE-0200",
      "titleInlineContent": [
        {
          "text": "SE-0200",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0213-literal-init-via-coercion.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0213-literal-init-via-coercion.md",
      "title": "SE-0213",
      "titleInlineContent": [
        {
          "text": "SE-0213",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0213-literal-init-via-coercion.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0214-DictionaryLiteral.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0214-DictionaryLiteral.md",
      "title": "SE-0214",
      "titleInlineContent": [
        {
          "text": "SE-0214",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0214-DictionaryLiteral.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md",
      "title": "SE-0216",
      "titleInlineContent": [
        {
          "text": "SE-0216",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0219-package-manager-dependency-mirroring.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0219-package-manager-dependency-mirroring.md",
      "title": "SE-0219",
      "titleInlineContent": [
        {
          "text": "SE-0219",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0219-package-manager-dependency-mirroring.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0227-identity-keypath.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0227-identity-keypath.md",
      "title": "SE-0227",
      "titleInlineContent": [
        {
          "text": "SE-0227",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0227-identity-keypath.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md",
      "title": "SE-0228",
      "titleInlineContent": [
        {
          "text": "SE-0228",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0229-simd.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0229-simd.md",
      "title": "SE-0229",
      "titleInlineContent": [
        {
          "text": "SE-0229",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0229-simd.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md",
      "title": "SE-0230",
      "titleInlineContent": [
        {
          "text": "SE-0230",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md",
      "title": "SE-0235",
      "titleInlineContent": [
        {
          "text": "SE-0235",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0236-package-manager-platform-deployment-settings.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0236-package-manager-platform-deployment-settings.md",
      "title": "SE-0236",
      "titleInlineContent": [
        {
          "text": "SE-0236",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0236-package-manager-platform-deployment-settings.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0238-package-manager-build-settings.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0238-package-manager-build-settings.md",
      "title": "SE-0238",
      "titleInlineContent": [
        {
          "text": "SE-0238",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0238-package-manager-build-settings.md"
    },
    "https://help.apple.com/app-store-connect/": {
      "identifier": "https://help.apple.com/app-store-connect/",
      "title": "App Store Connect Help",
      "titleInlineContent": [
        {
          "text": "App Store Connect Help",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://help.apple.com/app-store-connect/"
    },
    "https://help.apple.com/app-store-connect/#/dev3b56ce97c": {
      "identifier": "https://help.apple.com/app-store-connect/#/dev3b56ce97c",
      "title": "View builds and file sizes",
      "titleInlineContent": [
        {
          "text": "View builds and file sizes",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://help.apple.com/app-store-connect/#/dev3b56ce97c"
    },
    "https://help.apple.com/xcode/mac/current/": {
      "identifier": "https://help.apple.com/xcode/mac/current/",
      "title": "Xcode Help",
      "titleInlineContent": [
        {
          "text": "Xcode Help",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://help.apple.com/xcode/mac/current/"
    },
    "https://help.apple.com/xcode/mac/current/#/devbbdc5ce4f": {
      "identifier": "https://help.apple.com/xcode/mac/current/#/devbbdc5ce4f",
      "title": "What is app thinning?",
      "titleInlineContent": [
        {
          "text": "What is app thinning?",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://help.apple.com/xcode/mac/current/#/devbbdc5ce4f"
    },
    "https://swift.org": {
      "identifier": "https://swift.org",
      "title": "swift.org",
      "titleInlineContent": [
        {
          "text": "swift.org",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://swift.org"
    },
    "https://swift.org/blog/swift-5-exclusivity/": {
      "identifier": "https://swift.org/blog/swift-5-exclusivity/",
      "title": "Swift 5 Exclusivity Enforcement",
      "titleInlineContent": [
        {
          "text": "Swift 5 Exclusivity Enforcement",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://swift.org/blog/swift-5-exclusivity/"
    },
    "https://swift.org/getting-started/#using-the-package-manager": {
      "identifier": "https://swift.org/getting-started/#using-the-package-manager",
      "title": "Using the Package Manager",
      "titleInlineContent": [
        {
          "text": "Using the Package Manager",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://swift.org/getting-started/#using-the-package-manager"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1objectivec~1nsobjectprotocol~11418795-isequal/title",
          "value": "isEqual:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIView/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@interface"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "UIView"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(cs)UIResponder",
              "text": "UIResponder"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1corefoundation~11542133-cfstringgetcstringptr/title",
          "value": "CFStringGetCStringPtr"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1AppKit~1NSView/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "@interface"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "NSView"
            },
            {
              "kind": "text",
              "text": " : "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(cs)NSResponder",
              "text": "NSResponder"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
