{
  "abstract": [
    {
      "text": "Update your code to use new language features and test your apps against changes.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes",
        "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/xcode-10-release-notes"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/swift-4_2-release-notes-for-xcode-10"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "role": "article",
    "roleHeading": "Article",
    "title": "Swift 4.2 Release Notes for Xcode 10"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Read these notes when you’re writing Swift apps in Xcode 10.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Swift-Compiler",
          "level": 3,
          "text": "Swift Compiler",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The behavior of casts from optional types to generic types has changed in some",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "circumstances in Swift 4.2. For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "struct ConditionalCast<T> {",
                    "    func cast(value: Any?) -> T? {",
                    "        return value as? T",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "If value is ",
                      "type": "text"
                    },
                    {
                      "code": "nil",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and the type ",
                      "type": "text"
                    },
                    {
                      "code": "T",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is an optional type at runtime, the return value",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "will now be ",
                      "type": "text"
                    },
                    {
                      "code": ".some(nil)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " rather than ",
                      "type": "text"
                    },
                    {
                      "code": "nil",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". This behavior is consistent with the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "casting behavior when concrete types are used rather than generic types. (40916953)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The C ",
                      "type": "text"
                    },
                    {
                      "code": "long double",
                      "type": "codeVoice"
                    },
                    {
                      "text": " type is now imported as ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Float80",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "on i386 and x86_64 for macOS and Linux. The ",
                      "type": "text"
                    },
                    {
                      "code": "tgmath",
                      "type": "codeVoice"
                    },
                    {
                      "text": " functions in the Darwin and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "glibc modules now support ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Float80",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " as well as",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Float",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Double",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". Several tgmath functions have been",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "made generic over ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/BinaryFloatingPoint",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/FloatingPoint",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " so that they’re automatically",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "available to any conforming type. (SR-2046) (27196587)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "C macros containing casts are no longer imported to Swift if the type in the cast",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "is unavailable or deprecated, or produces some other diagnostic when referenced.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "These macros were already only imported under very limited circumstances with very",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "simple values, so this is change unlikely to affect your code. (36528212)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "To help prevent inconsistent hashing for Cocoa objects, overriding the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1418615-hashvalue",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " on",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property now produces a compiler",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "warning, and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/3026318-hash",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ")",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "is now marked as nonoverridable. To customize hashing in",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " subclasses, you need to",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "override the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "property, not ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1418615-hashvalue",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "The example below shows a sample implementation for an ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "subclass with a custom definition for hashing. Note that hashing and equality go",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "hand in hand: if you override ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "you also need to override ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418795-isequal",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and vice versa (42780635):",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "class Person: NSObject {",
                    "    let name: String",
                    "",
                    "    init(name: String) {",
                    "        self.name = name",
                    "        super.init()",
                    "    }",
                    "",
                    "    override func isEqual(_ other: Any?) -> Bool {",
                    "        guard let other = other as? Person else { return false }",
                    "        return other.name == self.name",
                    "    }",
                    "",
                    "    override var hash: Int {",
                    "        var hasher = Hasher()",
                    "        hasher.combine(name)",
                    "        return hasher.finalize()",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Swift 4.1 warnings about overlapping accesses are now errors in Swift 4 mode. These",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "new errors most commonly arise when a generic mutating method that modifies a variable",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "is passed a non-escaping closure that reads from the same variable. Code that",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "previously compiled with a warning will need to be updated. For more information,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "see ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://forums.swift.org/t/upgrading-exclusive-access-warning-to-be-an-error-in-swift-4-2/",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". (34669400)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Swift compiler defaults to a new compilation strategy that can greatly speed",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "up debug builds. This strategy allows each compilation job to process a batch of",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "files instead of just a single file.Projects that had sped up debug builds by opting",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "into building with Whole Module Optimization in Debug mode (at ",
                      "type": "text"
                    },
                    {
                      "code": "-Onone",
                      "type": "codeVoice"
                    },
                    {
                      "text": ") should try",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the new compilation style. To do so, choose the Incremental option for the Compilation",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Mode build setting and ensure that your project is not using older whole-module settings",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "for Debug builds such as ",
                      "type": "text"
                    },
                    {
                      "code": "SWIFT_WHOLE_MODULE_OPTIMIZATION=YES",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "SWIFT_OPTIMIZATION_LEVEL=-Owholemodule",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "The new compilation strategy should be transparent in terms of the build products.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "However, in case it causes a problem, you can revert to the previous single file",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "strategy with a custom Build Setting ",
                      "type": "text"
                    },
                    {
                      "code": "SWIFT_ENABLE_BATCH_MODE=NO",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (39253613)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Known-Issues",
          "level": 3,
          "text": "Known Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "If you indirectly modify a property using a nonmutating setter that’s defined in",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "a protocol or extension on a class instance, the Swift compiler might miscompile",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "it by releasing the instance after the getter is invoked. This might cause the program",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to crash or have unpredictable behavior at runtime. (45274900)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "protocol SomeProtocol { }",
                    "class SomeClass: SomeProtocol { }",
                    "",
                    "extension SomeProtocol {",
                    "    var someNonmutatingProperty: CGPoint {",
                    "        nonmutating set { _ = self }",
                    "        get { return .zero }",
                    "    }",
                    "}",
                    "",
                    "// Might be miscompiled, deallocating SomeClass() too early.",
                    "SomeClass().someNonmutatingProperty.x = 42"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Break the operation up into multiple statements so that the get and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "set operations occur in different statements:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let someObject = SomeClass()",
                    "// First get the nonmutating property value.",
                    "var temp = someObject.someNonmutatingProperty",
                    "temp.x = 42",
                    "// Then modify it.",
                    "someObject.someNonmutatingProperty = temp"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Passing a let property of a generic class that has function type as an argument",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to another function or method may cause a compiler crash. (41056468)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Assign the property to a local variable, and pass the local",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "variable as an argument instead.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "class A<B> {",
                    "    let function: (B) -> B",
                    "}",
                    "",
                    "func takeFunction(_: (Int) -> Int) {}",
                    "",
                    "func passFunction(from a: A<Int>) {",
                    "    // Reference to a.function as an argument here may crash",
                    "    // the compiler.",
                    "    takeFunction(a.function)",
                    "",
                    "    // Workaround: assign to a local variable, and pass the",
                    "    // local variable instead.",
                    "    let function = a.function",
                    "    takeFunction(function)",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The compiler may crash or miscompile when forming an array of heterogeneous class",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "objects as an ",
                      "type": "text"
                    },
                    {
                      "code": "AnyObject",
                      "type": "codeVoice"
                    },
                    {
                      "text": " array (42666956):",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "func f(_: [AnyObject])",
                    "f([NSObject.self, NSString.self]) // May crash or miscompile."
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Individually assign the class objects to variables of type AnyObject,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "then form an array of those variables:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let myNSObject: AnyObject = NSObject.self",
                    "let myNSString: AnyObject = NSString.self",
                    "",
                    "f([myNSObject, myNSString])"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Swift compiler may crash when trying to assign a super method reference to",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "a variable of optional function type (43360405):",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "class X: NSObject {",
                    "    var f: ((Any?) -> Bool)?",
                    "    func setF() {",
                    "        f = super.isEqual(to:) // May crash the compiler.",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Assign the closure to a non-optional variable first, then assign",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the non-optional variable to the optional.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "class X: NSObject {",
                    "    var f: ((Any?) -> Bool)?",
                    "",
                    "    func setF() {",
                    "        let f2: (Any?) -> Bool = super.isEqual(to:)",
                    "        // Work around compiler crash.",
                    "        f = f2",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Compilation might fail without displaying the errors responsible for the failure.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "For example, you might see the message “Command CompileSwiftSources failed with a",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "nonzero exit code” without an accompanying failure reason. (43033749)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Disable batch mode by adding a user-defined",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://help.apple.com/xcode/mac/current/#/dev382dac089",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "named ",
                      "type": "text"
                    },
                    {
                      "code": "SWIFT_ENABLE_BATCH_MODE",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and set it to ",
                      "type": "text"
                    },
                    {
                      "code": "NO",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Invoking a mutating method that returns ",
                      "type": "text"
                    },
                    {
                      "code": "Self",
                      "type": "codeVoice"
                    },
                    {
                      "text": " on a value of protocol type may",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "cause the compiler to crash (43507711):",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "protocol Example {",
                    "    mutating func test() -> Self",
                    "}",
                    "",
                    "func foo(x: inout Example) {",
                    "    _ = x.test() // May crash the compiler.",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " If possible, make the method non-mutating, or have the method return",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "Void",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or the protocol type instead of ",
                      "type": "text"
                    },
                    {
                      "code": "Self",
                      "type": "codeVoice"
                    },
                    {
                      "text": ":",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "protocol Example {",
                    "    mutating func test() -> Example // Instead of Self.",
                    "}",
                    "",
                    "func foo(x: inout Example) {",
                    "    _ = x.test()",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "If that isn’t possible, add a wrapper method in a protocol extension that invokes",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the ",
                      "type": "text"
                    },
                    {
                      "code": "Self",
                      "type": "codeVoice"
                    },
                    {
                      "text": "-returning method and returns the protocol type:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "extension Example {",
                    "    mutating func testWorkaround() -> Example {",
                    "        return test()",
                    "    }",
                    "}",
                    "",
                    "func foo(x: inout Example) {",
                    "    _ = x.testWorkaround() // Invoke testWorkaround instead of test to avoid compiler crash.",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Resolved-Issues",
          "level": 4,
          "text": "Resolved Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "An Objective-C method that takes a block argument annotated with ",
                      "type": "text"
                    },
                    {
                      "code": "__attribute__((noescape))",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "invoked by Swift, no longer raises an incorrect “closure argument passed as ",
                      "type": "text"
                    },
                    {
                      "code": "@noescape",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to Objective-C has escaped” runtime error. (40857699)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Swift REPL shipped in the Command Line Tools package now successfully imports",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Objective-C frameworks or Swift frameworks that depend on Objective-C frameworks. (40537961)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Generic conversions to ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/AnyHashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " at runtime",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "is improved. For example, creating a dictionary using the ",
                      "type": "text"
                    },
                    {
                      "code": "init(uniqueKeysWithValues:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "initializer is more stable because the keys you pass are implicitly converted to",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "AnyHashable using the improved conversion behavior. (40583597)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "When switching over an ",
                      "type": "text"
                    },
                    {
                      "code": "@objc",
                      "type": "codeVoice"
                    },
                    {
                      "text": " enumeration, if the value is not one of the recognized",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "cases and the switch does not have a default case, the program will trap at run time. (20420436)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Swift REPL now successfully imports frameworks. (40458863)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Assigning between properties of a value of protocol type no longer raises in-out",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "exclusivity errors in some circumstances. (39524104)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The runtime stability of availability conditions (",
                      "type": "text"
                    },
                    {
                      "code": "if #available",
                      "type": "codeVoice"
                    },
                    {
                      "text": ") is improved.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(41849700)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "A conditional conformance no longer implies conformances to any inherited protocols,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "unlike unconditional ones. This is because the optimal conditional requirements are",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "likely to be different between the two protocols if the inherited protocol can use",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "less restrictive requirements (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-6569",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ").",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "protocol Base {}",
                    "protocol Sub: Base {}",
                    "struct Generic<Param> {}",
                    "",
                    "extension Generic: Base where Param: Base {}",
                    "extension Generic: Sub where Param: Sub {}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "The first extension has to exist, because the second one does not imply a conformance",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "of ",
                      "type": "text"
                    },
                    {
                      "code": "Generic",
                      "type": "codeVoice"
                    },
                    {
                      "text": " to ",
                      "type": "text"
                    },
                    {
                      "code": "Base",
                      "type": "codeVoice"
                    },
                    {
                      "text": " (if it did, it would imply it with the same conditional requirements",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "as the ",
                      "type": "text"
                    },
                    {
                      "code": "Sub",
                      "type": "codeVoice"
                    },
                    {
                      "text": " conformance, that is, ",
                      "type": "text"
                    },
                    {
                      "code": "Param: Sub",
                      "type": "codeVoice"
                    },
                    {
                      "text": "). This particularly affects hierarchies",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "like ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "code": ": ",
                      "type": "codeVoice"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/BidirectionalCollection",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "code": ": ",
                      "type": "codeVoice"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Collection",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and helps achieve precision in the bounds of types conforming to them. (36499373)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Properties in the header generated by the Swift compiler are now correctly annotated",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "with OS availability information. (37090774)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The compiler now correctly handles when a nested type in a ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type has the same name as a property of the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type (SR-6569). (37570349)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "When a property satisfies a requirement in an ",
                      "type": "text"
                    },
                    {
                      "code": "@objc",
                      "type": "codeVoice"
                    },
                    {
                      "text": " protocol, the selectors for",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "its getter and setter are in all circumstances now inferred from the protocol requirement. (37363245)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The compiler now correctly emits code that references the type metadata for a private",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "or internal type that should not be accessible, e.g., because it’s from another module",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "or (in non-WMO mode) source file. The ",
                      "type": "text"
                    },
                    {
                      "code": "-emit-public-type-metadata-accessors",
                      "type": "codeVoice"
                    },
                    {
                      "text": " compiler",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "flag that was used as a workaround will no longer be available. (39763787)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "An improved error message is displayed when you pass an optional value where a",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "nonoptional value is required by context. The error message now presents a clear",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "choice between different strategies for fixing the problem, describes what each strategy",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "means, and provides Fix-it dialogs to repair your code. (42081852)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "error: value of optional type 'X?' must be unwrapped to a value",
                    "of type 'X'",
                    "f(x)",
                    "  ^",
                    "note: coalesce using '??' to provide a default when the optional value",
                    "contains 'nil'",
                    "  f(x)",
                    "    ^",
                    "     ?? default value",
                    "note: force-unwrap using '!' to abort execution if the optional value",
                    "contains 'nil'",
                    "  f(x)",
                    "    ^",
                    "     !"
                  ],
                  "syntax": "text",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "When accessing a member of an optional value, the Fix-it dialog includes optional",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "chaining as a potential solution:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "error: value of optional type 'X?' must be unwrapped to refer to",
                    "member 'f' of wrapped base type 'X'",
                    "  let _: Int = x.f()",
                    "               ^",
                    "note: chain the optional using '?' to access member 'f'",
                    "only for non-'nil' base values",
                    "  let _: Int = x.f()",
                    "               ^",
                    "                ?",
                    "note: force-unwrap using '!' to abort execution if the optional",
                    "value contains 'nil'",
                    "  let _: Int = x.f()",
                    "               ^",
                    "                !"
                  ],
                  "syntax": "text",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/os/os_signpost(_:dso:log:name:signpostID:)-2oz8u",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/os/2320718-os_log",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " functions have been updated",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to not have a labeled ",
                      "type": "text"
                    },
                    {
                      "code": "type",
                      "type": "codeVoice"
                    },
                    {
                      "text": " parameter. (40528229)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIEdgeInsets/zero",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property on",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIEdgeInsets",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " can now be used. (40735990)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "When a Swift method is exposed to Objective-C with a custom selector beginning",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "with “new”, “copy”, or “mutableCopy”, it will correctly return an owned (+1) value",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "rather than an autoreleased (+0) one when called from Objective-C, as expected by",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Objective-C ARC. (SR-6065](https://bugs.swift.org/browse/SR-6065) (34834291)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/foundation/bundle",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " initializer",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/foundation/bundle/1417717-init",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " now returns the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "correct bundle when used on a class that inherits from a generic class. (40367300)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/type(of:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " function now provides the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "expected result when object is being observed using key-value observing. (37319860)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Swift-Language",
          "level": 3,
          "text": "Swift Language",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Custom compile-time warnings or error messages can be emitted using the ",
                      "type": "text"
                    },
                    {
                      "code": "#warning(_:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and ",
                      "type": "text"
                    },
                    {
                      "code": "#error(_:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " directives",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "). (16015824)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "#warning(\"This code is incomplete.\")",
                    "",
                    "#if BUILD_CONFIG && OTHER_BUILD_CONFIG",
                    "      #error(\"BUILD_CONFIG and OTHER_BUILD_CONFIG can't both be set\")",
                    "#endif"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Public classes may now have internal required initializers. The rule for required",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "initializers is that they must be available everywhere the class can be subclassed,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "but previously required initializers on public classes were forced to be public themselves.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "This limitation was a holdover from before the introduction of the ",
                      "type": "text"
                    },
                    {
                      "code": "open",
                      "type": "codeVoice"
                    },
                    {
                      "text": "-",
                      "type": "text"
                    },
                    {
                      "code": "public",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "distinction in Swift 3. (22845087)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "As part of fully implementing ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "ImplicitlyUnwrappedOptional<T>",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is now an unavailable typealias of",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Optional",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "code": "<T>",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Declarations annotated with",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "‘",
                      "type": "text"
                    },
                    {
                      "code": "!",
                      "type": "codeVoice"
                    },
                    {
                      "text": "’ have the type ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Optional",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "code": "<T>",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". If an",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "expression involving one of these values will not compile successfully with the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Optional",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "code": "<T>",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", it is implicitly unwrapped,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "producing a value of type ",
                      "type": "text"
                    },
                    {
                      "code": "T",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". In some cases this will cause code that previously",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "compiled to require updating. For more information, see ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://swift.org/blog/iuo/",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". (33272674)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The new ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CaseIterable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " protocol describes types",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "which have a static ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CaseIterable/allCases-swift.type.property",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "property that’s used to describe all of the cases of the type. Swift synthesizes",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CaseIterable/allCases-swift.type.property",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "for enumerations that have no associated values. (SE-0194) (17102392).",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "enum Suit: CaseIterable {",
                    "    case spade",
                    "    case heart",
                    "    case diamond",
                    "    case club",
                    "}",
                    "",
                    "print(Suit.allCases)",
                    "// prints [Suit.heart, Suit.club, Suit.diamond, Suit.spade]"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Various function-like declarations can now be marked as ",
                      "type": "text"
                    },
                    {
                      "code": "@inlinable",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", making their",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "bodies available for optimizations from other modules. Inlinable function bodies",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "must only reference public declarations, unless the referenced declaration is marked",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "as ",
                      "type": "text"
                    },
                    {
                      "code": "@usableFromInline",
                      "type": "codeVoice"
                    },
                    {
                      "text": " (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "). (40566899)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Note that the presence of the attribute itself does not force inlining",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "or any other optimization to be performed, nor does it have any effect on optimizations",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "performed within a single module.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Resolved-Issues",
          "level": 4,
          "text": "Resolved Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Protocol conformances are now able to be synthesized in extensions in the same",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "file as the type definition, allowing automatic synthesis of conditional conformances",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". For instance, if there is a generic",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "wrapper type that can only be ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " when",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "its wrapped type is also ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", the ",
                      "type": "text"
                    },
                    {
                      "code": "==",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "method can be automatically constructed by the compiler:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "struct Generic<Param> {",
                    "    var property: Param",
                    "}",
                    "",
                    "extension Generic: Equatable where Param: Equatable {}",
                    "// Automatically synthesized inside the extension:",
                    "// static func ==(lhs: Generic, rhs: Generic) -> Bool {",
                    "//     return lhs.property == rhs.property",
                    "// }"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Code that wants to be as precise as possible should generally not conditionally",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "conform to ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " directly, but rather",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "its two constituent protocols ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Encodable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Decodable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", or else one can only (for",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "instance) decode a ",
                      "type": "text"
                    },
                    {
                      "code": "Generic<Param>",
                      "type": "codeVoice"
                    },
                    {
                      "text": " if ",
                      "type": "text"
                    },
                    {
                      "code": "Param",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Encodable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in addition to ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Decodable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", even though",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Encodable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " is likely not required:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "// Unnecessarily restrictive:",
                    "extension Generic: Codable where Param: Codable {}",
                    "",
                    "// More precise:",
                    "extension Generic: Encodable where Param: Encodable {}",
                    "extension Generic: Decodable where Param: Decodable {}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Finally, due to ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Decodable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " having an initializer",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "requirement, it’s not possible to conform to ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Decodable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in an extension to a class that isn’t ",
                      "type": "text"
                    },
                    {
                      "code": "final",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Such a class needs to have any initializers",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "from protocols be ",
                      "type": "text"
                    },
                    {
                      "code": "required",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", which means they need to be in the class definition.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-6803",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (39199726)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Runtime query of conditional conformances is now implemented. Therefore, a dynamic",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "cast such as ",
                      "type": "text"
                    },
                    {
                      "code": "value as? P",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", where the dynamic type of value conditionally conforms",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to ",
                      "type": "text"
                    },
                    {
                      "code": "P",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", will succeed when the conditional requirements are met. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (40349058)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "protocol P {}",
                    "",
                    "struct DoesntConform {}",
                    "struct Conforms: P {}",
                    "",
                    "struct Generic<Param> {}",
                    "extension Generic: P where Param: P {}",
                    "",
                    "print(Generic<DoesntConform>() as? P) // nil",
                    "print(Generic<Conforms>() as? P)",
                    "// Optional(main.Generic<main.Conforms>())"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Swift-Migrator",
          "level": 3,
          "text": "Swift Migrator",
          "type": "heading"
        },
        {
          "anchor": "Resolved-Issues",
          "level": 4,
          "text": "Resolved Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Swift 4.2 migrator correctly updates member variable references to global variable",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "references. (41658300)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Swift-Package-Manager",
          "level": 3,
          "text": "Swift Package Manager",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "generate-xcodeproj",
                      "type": "codeVoice"
                    },
                    {
                      "text": " command has a new ",
                      "type": "text"
                    },
                    {
                      "code": "--watch",
                      "type": "codeVoice"
                    },
                    {
                      "text": " option to watch the file system",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and automatically regenerate the Xcode project if needed. (32390792)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "code": "swiftLanguageVersions",
                      "type": "codeVoice"
                    },
                    {
                      "text": " property in the PackageDescription manifest API for",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "tools version 4.2 is changed from an array of integers to an array of ",
                      "type": "text"
                    },
                    {
                      "code": "SwiftVersion",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "enumeration cases. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0209-package-manager-swift-lang-version-update.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (38721967)",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "// swift-tools-version:4.2",
                    "import PackageDescription",
                    "",
                    "let package = Package(",
                    "    // ...",
                    "    swiftLanguageVersions: [.v3, .v4]",
                    ")"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The package manager now supports declaring a dependency on a package using its",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "path on disk instead of the Git URL. This requires updating the package’s tools version",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to 4.2. (39418745)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The scheme generation logic is improved and generates schemes as follows: One scheme",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "contains all regular and test targets of the root package; One scheme per executable",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "target containing the test targets whose dependencies intersect with the dependencies",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "of the exectuable target. (30955712).",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The PackageDescription API in tools version 4.2 supports a new type of target called",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "a “system library target”, which moves the current system-module packages feature",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "from package to target level. (39418939)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Swift targets are now compiled using batch mode. (39262812)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The package manager emits deprecation notices for manifests that use the version",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "3 API in a package dependency graph. (41792011)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Known-Issues",
          "level": 4,
          "text": "Known Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The package manager might crash if a package graph contains shared dependencies",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "with versioned and revision based requirements. Consider the following example package",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "graph:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "Root package:",
                    "    PackageA@branch",
                    "PackageA:",
                    "    PackageB@branch",
                    "    PackageC@branch",
                    "PackageB:",
                    "    PackageC@1.0.0..<2.0.0"
                  ],
                  "syntax": "text",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "According to the package manager’s dependency resolution rules, this should resolve",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to: PackageA @ branch, PackageB @ branch and PackageC @ branch. However, since the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "shared dependency PackageC is referenced with a ",
                      "type": "text"
                    },
                    {
                      "code": "1.0.0..<2.0.0",
                      "type": "codeVoice"
                    },
                    {
                      "text": " requirement, it may",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "result in a crash. (43107896)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "inlineContent": [
                        {
                          "text": "Workaround:",
                          "type": "text"
                        }
                      ],
                      "type": "strong"
                    },
                    {
                      "text": " Use either versioned or revisioned based requirement for the shared",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "package dependencies.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Swift-Standard-Library",
          "level": 3,
          "text": "Swift Standard Library",
          "type": "heading"
        },
        {
          "anchor": "New-Features",
          "level": 4,
          "text": "New Features",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Range",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " is now conditionally a",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/RandomAccessCollection",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "when its ",
                      "type": "text"
                    },
                    {
                      "code": "Bound",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is ",
                      "type": "text"
                    },
                    {
                      "code": "Strideable",
                      "type": "codeVoice"
                    },
                    {
                      "text": " with a ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/SignedInteger",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "stride. This means that you can now use use ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Range",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "as a collection when these criteria are met. (40564272)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CountableRange",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "is now a constrained generic type alias for a ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Range",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "rather than an independent type. This means that you can still use",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CountableRange",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " in the same ways as before:",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "extend it, take it as an argument to a function, or declare a variable of that",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "type. But you can also now use ranges and countable ranges interchangeably:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "let countableRange: CountableRange<Int> = 0..<10",
                    "var range: Range = countableRange",
                    "",
                    "func f<T: SignedInteger>(_ countableRange: CountableRange<T>) { }",
                    "f(range)"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/ClosedRange",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CountableClosedRange",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "have the same behavior as ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Range",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CountableRange",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "respectively.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The standard library types ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Optional",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Array",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/ArraySlice",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/ContiguousArray",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Dictionary",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ",",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "DictionaryLiteral",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Range",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/ClosedRange",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " now conform to the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " protocol when their element or",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "bound types (as the case may be) conform to ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/AnyHashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "This makes synthesized ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " implementations",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "available for types that include stored properties of these types. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md",
                      "isActive": true,
                      "overridingTitle": "SE-0143",
                      "overridingTitleInlineContent": [
                        {
                          "text": "SE-0143",
                          "type": "text"
                        }
                      ],
                      "type": "reference"
                    },
                    {
                      "text": ", 40567748)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The standard library now uses a high-quality, randomly seeded, universal hash function,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "represented by the new ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hasher",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " struct. Random",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "seeding varies the result of ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hashValue",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "on each execution of a program, improving the reliability of the standard library’s",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "hashed collections, ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Set",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Dictionary",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". In particular, random seeding",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "enables better protection against (accidental or deliberate) hash-flooding attacks.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "As a consequence of random seeding, the elements in sets and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "dictionaries may have a different order on each execution. This may expose some bugs",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "in your existing code that accidentally relies on repeatable ordering.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Additionally, the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " protocol now",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "includes an extra function requirement, ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hash(into:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "The new requirement is designed to be much easier to implement than the old",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "hashValue property, and it generally provides better hashing. To implement",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hash(into:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", feed the exact same",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "components of your type that you compare in the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "protocol’s ",
                      "type": "text"
                    },
                    {
                      "code": "==",
                      "type": "codeVoice"
                    },
                    {
                      "text": " implementation to the supplied ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hasher",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ":",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "struct Foo: Hashable {",
                    "    var a: String?",
                    "    var b: [Int]",
                    "    var c: [String: Int]",
                    "",
                    "    static func ==(lhs: Foo, rhs: Foo) -> Bool {",
                    "        return lhs.a == rhs.a && lhs.b == rhs.b && lhs.c == rhs.c",
                    "    }",
                    "",
                    "    func hash(into hasher: inout Hasher) {",
                    "        hasher.combine(a)",
                    "        hasher.combine(b)",
                    "        hasher.combine(c)",
                    "    }",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Automatic synthesis for Hashable (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ")",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "has been updated to generate hash(into:) implementations. For example, the ",
                      "type": "text"
                    },
                    {
                      "code": "==",
                      "type": "codeVoice"
                    },
                    {
                      "text": " and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hash(into:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " implementations above",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "are equivalent to the ones synthesized by the compiler, and can be removed without",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "changing the meaning of the code.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Synthesis has also been extended to support deriving ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hashValue",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "from ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hash(into:)",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", and vice versa.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Therefore, code that only implements ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hashValue",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "continues to work in Swift 4.2. This new compiler functionality works for all types",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "that can implement ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", including classes.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "Note that these changes don’t affect Foundation’s hashing interface. Classes that",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "subclass ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " should override the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " property,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "like before.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "In certain controlled environments, such as while running particular tests, it may",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "be helpful to selectively disable hash seed randomization, so that hash values and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "the order of elements in set and dictionary values remain consistent across executions.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "You can disable hash seed randomization by defining the environment variable ",
                      "type": "text"
                    },
                    {
                      "code": "SWIFT_DETERMINISTIC_HASHING",
                      "type": "codeVoice"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "with the value of 1. The Swift runtime looks at this variable during process startup",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and, if it’s defined, replaces the random seed with a constant value. (",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ") (35052153)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The standard library now has a random generator API. The Swift standard library",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "now supports generating and using random numbers. Swift collections now support ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/MutableCollection/shuffle()",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence/shuffled()",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " operations",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "as well as choosing a ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Collection/randomElement()",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "Numeric types can now generate a uniform value in a range, for example:",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "code": "Int.random(in: 1...10)",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "Double.random(in: 0..<100)",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", and",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Bool",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " provides a random ",
                      "type": "text"
                    },
                    {
                      "code": "true",
                      "type": "codeVoice"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "code": "false",
                      "type": "codeVoice"
                    },
                    {
                      "text": " method:",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Bool/random()",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/RandomNumberGenerator",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " protocol has been introduced",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "as a source of randomness to drive these methods, with a default implementation for",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "each platform. This implementation wraps ",
                      "type": "text"
                    },
                    {
                      "code": "arc4random_buf(_:_:)",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". (40564129)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "Random.default",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is renamed ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/SystemRandomNumberGenerator",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "to avoid misuse and to conform to naming guidelines. For more information, see the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "amendment in ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ". (42298827)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Resolved-Issues",
          "level": 4,
          "text": "Resolved Issues",
          "type": "heading"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The behavior of the ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CustomStringConvertible/description",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/CustomDebugStringConvertible/debugDescription",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "properties for floating-point numbers use a new algorithm that is both more accurate",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and significantly faster than the previous code. In particular, it’s now guaranteed",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "that ",
                      "type": "text"
                    },
                    {
                      "code": "Double(String(d)) == d",
                      "type": "codeVoice"
                    },
                    {
                      "text": " for every ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Double",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "value ",
                      "type": "text"
                    },
                    {
                      "code": "d",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Previously these unconditionally printed a fixed number of decimal digits",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(15 and 17 for ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.documentation/documentation/Swift/Double",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ", respectively). They",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "now print exactly as many digits as are needed for the resulting string to convert",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "back to the original source value, and no more",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "(",
                      "type": "text"
                    },
                    {
                      "identifier": "https://bugs.swift.org/browse/SR-106",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": "). (40565639)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes": {
      "abstract": [
        {
          "text": "Learn about changes to Xcode.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes",
      "kind": "article",
      "role": "collection",
      "title": "Xcode Release Notes",
      "type": "topic",
      "url": "/documentation/xcode-release-notes"
    },
    "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/build-system-release-notes-for-xcode-10": {
      "abstract": [
        {
          "text": "Update your apps to use new features, and test your apps against changes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/build-system-release-notes-for-xcode-10",
      "kind": "article",
      "role": "article",
      "title": "Build System Release Notes for Xcode 10",
      "type": "topic",
      "url": "/documentation/xcode-release-notes/build-system-release-notes-for-xcode-10"
    },
    "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/interface-builder-release-notes-for-xcode-10": {
      "abstract": [
        {
          "text": "Update your apps to use new features, and test your apps against changes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/interface-builder-release-notes-for-xcode-10",
      "kind": "article",
      "role": "article",
      "title": "Interface Builder Release Notes for Xcode 10",
      "type": "topic",
      "url": "/documentation/xcode-release-notes/interface-builder-release-notes-for-xcode-10"
    },
    "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/source-editor-release-notes-for-xcode-10": {
      "abstract": [
        {
          "text": "Update your programming workflow to use new features, and test your workflow against",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "changes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/source-editor-release-notes-for-xcode-10",
      "kind": "article",
      "role": "article",
      "title": "Source Editor Release Notes for Xcode 10",
      "type": "topic",
      "url": "/documentation/xcode-release-notes/source-editor-release-notes-for-xcode-10"
    },
    "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/xcode-10-release-notes": {
      "abstract": [
        {
          "text": "Update your apps to use new features, and test your apps against API changes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/xcode-10-release-notes",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Xcode 10 Release Notes",
      "type": "topic",
      "url": "/documentation/xcode-release-notes/xcode-10-release-notes"
    },
    "doc://com.apple.documentation/documentation/Swift/AnyHashable": {
      "abstract": [
        {
          "text": "A type-erased hashable value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AnyHashable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/AnyHashable",
      "kind": "symbol",
      "role": "symbol",
      "title": "AnyHashable",
      "type": "topic",
      "url": "/documentation/Swift/AnyHashable"
    },
    "doc://com.apple.documentation/documentation/Swift/Array": {
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Array",
      "kind": "symbol",
      "role": "symbol",
      "title": "Array",
      "type": "topic",
      "url": "/documentation/Swift/Array"
    },
    "doc://com.apple.documentation/documentation/Swift/ArraySlice": {
      "abstract": [
        {
          "text": "A slice of an `Array`, `ContiguousArray`, or `ArraySlice` instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/ArraySlice",
      "kind": "symbol",
      "role": "symbol",
      "title": "ArraySlice",
      "type": "topic",
      "url": "/documentation/Swift/ArraySlice"
    },
    "doc://com.apple.documentation/documentation/Swift/BidirectionalCollection": {
      "abstract": [
        {
          "text": "A collection that supports backward as well as forward traversal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BidirectionalCollection"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SK7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl",
          "text": "Collection"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl7IndicesQa",
          "text": "Indices"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SK",
          "text": "BidirectionalCollection"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SK",
          "text": "BidirectionalCollection"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/BidirectionalCollection",
      "kind": "symbol",
      "role": "symbol",
      "title": "BidirectionalCollection",
      "type": "topic",
      "url": "/documentation/Swift/BidirectionalCollection"
    },
    "doc://com.apple.documentation/documentation/Swift/BinaryFloatingPoint": {
      "abstract": [
        {
          "text": "A radix-2 (binary) floating-point type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BinaryFloatingPoint"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s25ExpressibleByFloatLiteralP",
          "text": "ExpressibleByFloatLiteral"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SF",
          "text": "FloatingPoint"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/BinaryFloatingPoint",
      "kind": "symbol",
      "role": "symbol",
      "title": "BinaryFloatingPoint",
      "type": "topic",
      "url": "/documentation/Swift/BinaryFloatingPoint"
    },
    "doc://com.apple.documentation/documentation/Swift/Bool": {
      "abstract": [
        {
          "text": "A value type whose instances are either `true` or `false`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Bool",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/Swift/Bool"
    },
    "doc://com.apple.documentation/documentation/Swift/Bool/random()": {
      "abstract": [
        {
          "text": "Returns a random Boolean value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "random"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Bool/random()",
      "kind": "symbol",
      "role": "symbol",
      "title": "random()",
      "type": "topic",
      "url": "/documentation/Swift/Bool/random()"
    },
    "doc://com.apple.documentation/documentation/Swift/CaseIterable": {
      "abstract": [
        {
          "text": "A type that provides a collection of all of its values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CaseIterable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/CaseIterable",
      "kind": "symbol",
      "role": "symbol",
      "title": "CaseIterable",
      "type": "topic",
      "url": "/documentation/Swift/CaseIterable"
    },
    "doc://com.apple.documentation/documentation/Swift/CaseIterable/allCases-swift.type.property": {
      "abstract": [
        {
          "text": "A collection of all values of this type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "allCases"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s12CaseIterableP8AllCasesQa",
          "text": "AllCases"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/CaseIterable/allCases-swift.type.property",
      "kind": "symbol",
      "role": "symbol",
      "title": "allCases",
      "type": "topic",
      "url": "/documentation/Swift/CaseIterable/allCases-swift.type.property"
    },
    "doc://com.apple.documentation/documentation/Swift/ClosedRange": {
      "abstract": [
        {
          "text": "An interval from a lower bound up to, and including, an upper bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SL",
          "text": "Comparable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/ClosedRange",
      "kind": "symbol",
      "role": "symbol",
      "title": "ClosedRange",
      "type": "topic",
      "url": "/documentation/Swift/ClosedRange"
    },
    "doc://com.apple.documentation/documentation/Swift/Codable": {
      "abstract": [
        {
          "text": "A type that can convert itself into and out of an external representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Codable"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Se",
          "text": "Decodable"
        },
        {
          "kind": "text",
          "text": " & "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SE",
          "text": "Encodable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Codable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Codable",
      "type": "topic",
      "url": "/documentation/Swift/Codable"
    },
    "doc://com.apple.documentation/documentation/Swift/Collection": {
      "abstract": [
        {
          "text": "A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Collection"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST",
          "text": "Sequence"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Collection",
      "kind": "symbol",
      "role": "symbol",
      "title": "Collection",
      "type": "topic",
      "url": "/documentation/Swift/Collection"
    },
    "doc://com.apple.documentation/documentation/Swift/Collection/randomElement()": {
      "abstract": [
        {
          "text": "Returns a random element of the collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "randomElement"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Collection/randomElement()",
      "kind": "symbol",
      "role": "symbol",
      "title": "randomElement()",
      "type": "topic",
      "url": "/documentation/Swift/Collection/randomElement()"
    },
    "doc://com.apple.documentation/documentation/Swift/ContiguousArray": {
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ContiguousArray"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/ContiguousArray",
      "kind": "symbol",
      "role": "symbol",
      "title": "ContiguousArray",
      "type": "topic",
      "url": "/documentation/Swift/ContiguousArray"
    },
    "doc://com.apple.documentation/documentation/Swift/CountableClosedRange": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CountableClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "> = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SN",
          "text": "ClosedRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sx",
          "text": "Strideable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sx6StrideQa",
          "text": "Stride"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SZ",
          "text": "SignedInteger"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/CountableClosedRange",
      "kind": "symbol",
      "role": "symbol",
      "title": "CountableClosedRange",
      "type": "topic",
      "url": "/documentation/Swift/CountableClosedRange"
    },
    "doc://com.apple.documentation/documentation/Swift/CountableRange": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CountableRange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "> = "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sx",
          "text": "Strideable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sx6StrideQa",
          "text": "Stride"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SZ",
          "text": "SignedInteger"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/CountableRange",
      "kind": "symbol",
      "role": "symbol",
      "title": "CountableRange",
      "type": "topic",
      "url": "/documentation/Swift/CountableRange"
    },
    "doc://com.apple.documentation/documentation/Swift/CustomDebugStringConvertible/debugDescription": {
      "abstract": [
        {
          "text": "A textual representation of this instance, suitable for debugging.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "debugDescription"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/CustomDebugStringConvertible/debugDescription",
      "kind": "symbol",
      "role": "symbol",
      "title": "debugDescription",
      "type": "topic",
      "url": "/documentation/Swift/CustomDebugStringConvertible/debugDescription"
    },
    "doc://com.apple.documentation/documentation/Swift/CustomStringConvertible/description": {
      "abstract": [
        {
          "text": "A textual representation of this instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "description"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SS",
          "text": "String"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/CustomStringConvertible/description",
      "kind": "symbol",
      "role": "symbol",
      "title": "description",
      "type": "topic",
      "url": "/documentation/Swift/CustomStringConvertible/description"
    },
    "doc://com.apple.documentation/documentation/Swift/Decodable": {
      "abstract": [
        {
          "text": "A type that can decode itself from an external representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Decodable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Decodable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Decodable",
      "type": "topic",
      "url": "/documentation/Swift/Decodable"
    },
    "doc://com.apple.documentation/documentation/Swift/Dictionary": {
      "abstract": [
        {
          "text": "A collection whose elements are key-value pairs.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Dictionary"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Key"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Value"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Key"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SH",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Dictionary",
      "kind": "symbol",
      "role": "symbol",
      "title": "Dictionary",
      "type": "topic",
      "url": "/documentation/Swift/Dictionary"
    },
    "doc://com.apple.documentation/documentation/Swift/Double": {
      "abstract": [
        {
          "text": "A double-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Double",
      "kind": "symbol",
      "role": "symbol",
      "title": "Double",
      "type": "topic",
      "url": "/documentation/Swift/Double"
    },
    "doc://com.apple.documentation/documentation/Swift/Encodable": {
      "abstract": [
        {
          "text": "A type that can encode itself to an external representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Encodable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Encodable",
      "type": "topic",
      "url": "/documentation/Swift/Encodable"
    },
    "doc://com.apple.documentation/documentation/Swift/Equatable": {
      "abstract": [
        {
          "text": "A type that can be compared for value equality.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Equatable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "type": "topic",
      "url": "/documentation/Swift/Equatable"
    },
    "doc://com.apple.documentation/documentation/Swift/Float": {
      "abstract": [
        {
          "text": "A single-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Float",
      "kind": "symbol",
      "role": "symbol",
      "title": "Float",
      "type": "topic",
      "url": "/documentation/Swift/Float"
    },
    "doc://com.apple.documentation/documentation/Swift/Float80": {
      "abstract": [
        {
          "text": "An extended-precision, floating-point value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Float80"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Float80",
      "kind": "symbol",
      "role": "symbol",
      "title": "Float80",
      "type": "topic",
      "url": "/documentation/Swift/Float80"
    },
    "doc://com.apple.documentation/documentation/Swift/FloatingPoint": {
      "abstract": [
        {
          "text": "A floating-point numeric type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FloatingPoint"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SH",
          "text": "Hashable"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s13SignedNumericP",
          "text": "SignedNumeric"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sx",
          "text": "Strideable"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sj9MagnitudeQa",
          "text": "Magnitude"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/FloatingPoint",
      "kind": "symbol",
      "role": "symbol",
      "title": "FloatingPoint",
      "type": "topic",
      "url": "/documentation/Swift/FloatingPoint"
    },
    "doc://com.apple.documentation/documentation/Swift/Hashable": {
      "abstract": [
        {
          "text": "A type that can be hashed into a `Hasher` to produce an integer hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SQ",
          "text": "Equatable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Hashable",
      "type": "topic",
      "url": "/documentation/Swift/Hashable"
    },
    "doc://com.apple.documentation/documentation/Swift/Hashable/hash(into:)": {
      "abstract": [
        {
          "text": "Hashes the essential components of this value by feeding them into the given hasher.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "into"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "hasher"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s6HasherV",
          "text": "Hasher"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hash(into:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "hash(into:)",
      "type": "topic",
      "url": "/documentation/Swift/Hashable/hash(into:)"
    },
    "doc://com.apple.documentation/documentation/Swift/Hashable/hashValue": {
      "abstract": [
        {
          "text": "The hash value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hashValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": " { "
        },
        {
          "kind": "keyword",
          "text": "get"
        },
        {
          "kind": "text",
          "text": " }"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Hashable/hashValue",
      "kind": "symbol",
      "role": "symbol",
      "title": "hashValue",
      "type": "topic",
      "url": "/documentation/Swift/Hashable/hashValue"
    },
    "doc://com.apple.documentation/documentation/Swift/Hasher": {
      "abstract": [
        {
          "text": "The universal hash function used by `Set` and `Dictionary`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Hasher"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Hasher",
      "kind": "symbol",
      "role": "symbol",
      "title": "Hasher",
      "type": "topic",
      "url": "/documentation/Swift/Hasher"
    },
    "doc://com.apple.documentation/documentation/Swift/MutableCollection/shuffle()": {
      "abstract": [
        {
          "text": "Shuffles the collection in place.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "mutating"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "shuffle"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/MutableCollection/shuffle()",
      "kind": "symbol",
      "role": "symbol",
      "title": "shuffle()",
      "type": "topic",
      "url": "/documentation/Swift/MutableCollection/shuffle()"
    },
    "doc://com.apple.documentation/documentation/Swift/Optional": {
      "abstract": [
        {
          "text": "A type that represents either a wrapped value or the absence of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Optional"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Wrapped"
        },
        {
          "kind": "text",
          "text": " : ~Copyable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Optional",
      "kind": "symbol",
      "role": "symbol",
      "title": "Optional",
      "type": "topic",
      "url": "/documentation/Swift/Optional"
    },
    "doc://com.apple.documentation/documentation/Swift/RandomAccessCollection": {
      "abstract": [
        {
          "text": "A collection that supports efficient random-access index traversal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RandomAccessCollection"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sk7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SK",
          "text": "BidirectionalCollection"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl7IndicesQa",
          "text": "Indices"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sk",
          "text": "RandomAccessCollection"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sk",
          "text": "RandomAccessCollection"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/RandomAccessCollection",
      "kind": "symbol",
      "role": "symbol",
      "title": "RandomAccessCollection",
      "type": "topic",
      "url": "/documentation/Swift/RandomAccessCollection"
    },
    "doc://com.apple.documentation/documentation/Swift/RandomNumberGenerator": {
      "abstract": [
        {
          "text": "A type that provides uniformly distributed random data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "RandomNumberGenerator"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/RandomNumberGenerator",
      "kind": "symbol",
      "role": "symbol",
      "title": "RandomNumberGenerator",
      "type": "topic",
      "url": "/documentation/Swift/RandomNumberGenerator"
    },
    "doc://com.apple.documentation/documentation/Swift/Range": {
      "abstract": [
        {
          "text": "A half-open interval from a lower bound up to, but not including, an upper bound.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Bound"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SL",
          "text": "Comparable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Range",
      "kind": "symbol",
      "role": "symbol",
      "title": "Range",
      "type": "topic",
      "url": "/documentation/Swift/Range"
    },
    "doc://com.apple.documentation/documentation/Swift/Sequence/shuffled()": {
      "abstract": [
        {
          "text": "Returns the elements of the sequence, shuffled.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "shuffled"
        },
        {
          "kind": "text",
          "text": "() -> ["
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "]"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Sequence/shuffled()",
      "kind": "symbol",
      "role": "symbol",
      "title": "shuffled()",
      "type": "topic",
      "url": "/documentation/Swift/Sequence/shuffled()"
    },
    "doc://com.apple.documentation/documentation/Swift/Set": {
      "abstract": [
        {
          "text": "An unordered collection of unique elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Set"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SH",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/Set",
      "kind": "symbol",
      "role": "symbol",
      "title": "Set",
      "type": "topic",
      "url": "/documentation/Swift/Set"
    },
    "doc://com.apple.documentation/documentation/Swift/SignedInteger": {
      "abstract": [
        {
          "text": "An integer type that can represent both positive and negative values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SignedInteger"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sz",
          "text": "BinaryInteger"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s13SignedNumericP",
          "text": "SignedNumeric"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/SignedInteger",
      "kind": "symbol",
      "role": "symbol",
      "title": "SignedInteger",
      "type": "topic",
      "url": "/documentation/Swift/SignedInteger"
    },
    "doc://com.apple.documentation/documentation/Swift/SystemRandomNumberGenerator": {
      "abstract": [
        {
          "text": "The system’s default source of random data.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SystemRandomNumberGenerator"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/SystemRandomNumberGenerator",
      "kind": "symbol",
      "role": "symbol",
      "title": "SystemRandomNumberGenerator",
      "type": "topic",
      "url": "/documentation/Swift/SystemRandomNumberGenerator"
    },
    "doc://com.apple.documentation/documentation/Swift/type(of:)": {
      "abstract": [
        {
          "text": "Returns the dynamic type of a value.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "type"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Metatype"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "value"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Metatype"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/Swift/type(of:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "type(of:)",
      "type": "topic",
      "url": "/documentation/Swift/type(of:)"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIEdgeInsets": {
      "abstract": [
        {
          "text": "The inset distances for views.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UIEdgeInsets"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIEdgeInsets",
      "kind": "symbol",
      "role": "symbol",
      "title": "UIEdgeInsets",
      "type": "topic",
      "url": "/documentation/UIKit/UIEdgeInsets"
    },
    "doc://com.apple.documentation/documentation/UIKit/UIEdgeInsets/zero": {
      "abstract": [
        {
          "text": "An edge insets struct whose top, left, bottom, and right fields are all set to `0`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "let"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "zero"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@UIEdgeInsets",
          "text": "UIEdgeInsets"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/UIKit/UIEdgeInsets/zero",
      "kind": "symbol",
      "role": "symbol",
      "title": "zero",
      "type": "topic",
      "url": "/documentation/UIKit/UIEdgeInsets/zero"
    },
    "doc://com.apple.documentation/documentation/foundation/bundle": {
      "abstract": [
        {
          "text": "A representation of the code and resources stored in a bundle directory on disk. ",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "Bundle"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/bundle",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bundle",
      "type": "topic",
      "url": "/documentation/foundation/bundle"
    },
    "doc://com.apple.documentation/documentation/foundation/bundle/1417717-init": {
      "abstract": [
        {
          "text": "Returns the `NSBundle` object with which the specified class is associated.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "for"
        },
        {
          "kind": "text",
          "text": ": AnyClass)"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/foundation/bundle/1417717-init",
      "kind": "symbol",
      "role": "symbol",
      "title": "init(for:)",
      "type": "topic",
      "url": "/documentation/foundation/bundle/1417717-init"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobject": {
      "abstract": [
        {
          "text": "The root class of most Objective-C class hierarchies, from which subclasses inherit a basic interface to the runtime system and the ability to behave as Objective-C objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "class "
        },
        {
          "kind": "identifier",
          "text": "NSObject"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject",
      "kind": "symbol",
      "role": "symbol",
      "title": "NSObject",
      "type": "topic",
      "url": "/documentation/objectivec/nsobject"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobject/1418615-hashvalue": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "var "
        },
        {
          "kind": "identifier",
          "text": "hashValue"
        },
        {
          "kind": "text",
          "text": ": Int"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/1418615-hashvalue",
      "kind": "symbol",
      "role": "symbol",
      "title": "hashValue",
      "type": "topic",
      "url": "/documentation/objectivec/nsobject/1418615-hashvalue"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobject/3026318-hash": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "into"
        },
        {
          "kind": "text",
          "text": ": inout Hasher)"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobject/3026318-hash",
      "kind": "symbol",
      "role": "symbol",
      "title": "hash(into:)",
      "type": "topic",
      "url": "/documentation/objectivec/nsobject/3026318-hash"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418795-isequal": {
      "abstract": [
        {
          "text": "Returns a Boolean value that indicates whether the receiver and a given object are equal.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "isEqual"
        },
        {
          "kind": "text",
          "text": "(Any?) -> Bool"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418795-isequal",
      "kind": "symbol",
      "role": "symbol",
      "title": "isEqual(_:)",
      "type": "topic",
      "url": "/documentation/objectivec/nsobjectprotocol/1418795-isequal"
    },
    "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash": {
      "abstract": [
        {
          "text": "Returns an integer that can be used as a table address in a hash table structure.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "var "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": ": Int"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/objectivec/nsobjectprotocol/1418859-hash",
      "kind": "symbol",
      "role": "symbol",
      "title": "hash",
      "type": "topic",
      "url": "/documentation/objectivec/nsobjectprotocol/1418859-hash"
    },
    "doc://com.apple.documentation/documentation/os/2320718-os_log": {
      "abstract": [
        {
          "text": "Sends a message to the logging system, optionally specifying a custom log object, log level, and any message format arguments.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "os_log"
        },
        {
          "kind": "text",
          "text": "(StaticString, "
        },
        {
          "kind": "identifier",
          "text": "dso"
        },
        {
          "kind": "text",
          "text": ": UnsafeRawPointer?, "
        },
        {
          "kind": "identifier",
          "text": "log"
        },
        {
          "kind": "text",
          "text": ": OSLog, "
        },
        {
          "kind": "identifier",
          "text": "type"
        },
        {
          "kind": "text",
          "text": ": OSLogType, any CVarArg...)"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/os/2320718-os_log",
      "kind": "symbol",
      "role": "symbol",
      "title": "os_log(_:dso:log:type:_:)",
      "type": "topic",
      "url": "/documentation/os/2320718-os_log"
    },
    "doc://com.apple.documentation/documentation/os/os_signpost(_:dso:log:name:signpostID:)-2oz8u": {
      "abstract": [
        {
          "text": "Logs a point of interest in your code as a time interval or as an event for debugging performance in Instruments.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "os_signpost"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "_"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "internalParam",
          "text": "type"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@EA@os_signpost_type_t",
          "text": "OSSignpostType"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "dso"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SV",
          "text": "UnsafeRawPointer"
        },
        {
          "kind": "text",
          "text": " = "
        },
        {
          "kind": "keyword",
          "text": "#dsohandle"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "log"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(cs)OS_os_log",
          "text": "OSLog"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "name"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s12StaticStringV",
          "text": "StaticString"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "signpostID"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:2os12OSSignpostIDV",
          "text": "OSSignpostID"
        },
        {
          "kind": "text",
          "text": " = .exclusive)"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/os/os_signpost(_:dso:log:name:signpostID:)-2oz8u",
      "kind": "symbol",
      "role": "symbol",
      "title": "os_signpost(_:dso:log:name:signpostID:)",
      "type": "topic",
      "url": "/documentation/os/os_signpost(_:dso:log:name:signpostID:)-2oz8u"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://bugs.swift.org/browse/SR-106": {
      "identifier": "https://bugs.swift.org/browse/SR-106",
      "title": "SR-106",
      "titleInlineContent": [
        {
          "text": "SR-106",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-106"
    },
    "https://bugs.swift.org/browse/SR-6569": {
      "identifier": "https://bugs.swift.org/browse/SR-6569",
      "title": "SR-6569",
      "titleInlineContent": [
        {
          "text": "SR-6569",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-6569"
    },
    "https://bugs.swift.org/browse/SR-6803": {
      "identifier": "https://bugs.swift.org/browse/SR-6803",
      "title": "SR-6803",
      "titleInlineContent": [
        {
          "text": "SR-6803",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://bugs.swift.org/browse/SR-6803"
    },
    "https://forums.swift.org/t/upgrading-exclusive-access-warning-to-be-an-error-in-swift-4-2/": {
      "identifier": "https://forums.swift.org/t/upgrading-exclusive-access-warning-to-be-an-error-in-swift-4-2/",
      "title": "Upgrading exclusive access warning to be an error in Swift 4.2",
      "titleInlineContent": [
        {
          "text": "Upgrading exclusive access warning to be an error in Swift 4.2",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://forums.swift.org/t/upgrading-exclusive-access-warning-to-be-an-error-in-swift-4-2/"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md",
      "title": "SE-0054",
      "titleInlineContent": [
        {
          "text": "SE-0054",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md",
      "title": "SE-0143",
      "titleInlineContent": [
        {
          "text": "SE-0143",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md",
      "title": "SE-0185",
      "titleInlineContent": [
        {
          "text": "SE-0185",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md",
      "title": "SE-0193",
      "titleInlineContent": [
        {
          "text": "SE-0193",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md",
      "title": "SE-0196",
      "titleInlineContent": [
        {
          "text": "SE-0196",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md",
      "title": "SE-202",
      "titleInlineContent": [
        {
          "text": "SE-202",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md",
      "title": "SE-0206",
      "titleInlineContent": [
        {
          "text": "SE-0206",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md"
    },
    "https://github.com/apple/swift-evolution/blob/master/proposals/0209-package-manager-swift-lang-version-update.md": {
      "identifier": "https://github.com/apple/swift-evolution/blob/master/proposals/0209-package-manager-swift-lang-version-update.md",
      "title": "SE-0209",
      "titleInlineContent": [
        {
          "text": "SE-0209",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/apple/swift-evolution/blob/master/proposals/0209-package-manager-swift-lang-version-update.md"
    },
    "https://help.apple.com/xcode/mac/current/#/dev382dac089": {
      "identifier": "https://help.apple.com/xcode/mac/current/#/dev382dac089",
      "title": "build setting",
      "titleInlineContent": [
        {
          "text": "build setting",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://help.apple.com/xcode/mac/current/#/dev382dac089"
    },
    "https://swift.org/blog/iuo/": {
      "identifier": "https://swift.org/blog/iuo/",
      "title": "Reimplementation of Implicitly Unwrapped Optionals",
      "titleInlineContent": [
        {
          "text": "Reimplementation of Implicitly Unwrapped Optionals",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://swift.org/blog/iuo/"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Release-Notes",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/build-system-release-notes-for-xcode-10",
        "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/interface-builder-release-notes-for-xcode-10",
        "doc://com.apple.Xcode-Release-Notes/documentation/Xcode-Release-Notes/source-editor-release-notes-for-xcode-10"
      ],
      "title": "Release Notes"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1objectivec~1nsobjectprotocol~11418795-isequal/title",
          "value": "isEqual:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIEdgeInsets~1zero/title",
          "value": "UIEdgeInsetsZero"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIEdgeInsets~1zero/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "extern"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "const"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@S@UIEdgeInsets",
              "text": "UIEdgeInsets"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "UIEdgeInsetsZero"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1UIKit~1UIEdgeInsets/fragments",
          "value": [
            {
              "kind": "keyword",
              "text": "typedef"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "struct"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "UIEdgeInsets"
            },
            {
              "kind": "text",
              "text": " { ... } "
            },
            {
              "kind": "identifier",
              "text": "UIEdgeInsets"
            },
            {
              "kind": "text",
              "text": ";"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1foundation~1bundle~11417717-init/title",
          "value": "bundleForClass:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1foundation~1bundle/title",
          "value": "NSBundle"
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
