{
  "abstract": [
    {
      "text": "Make responsive apps that update the presentation when underlying data changes.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Swift/documentation/Observation"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "externalID": "Observation",
    "modules": [
      {
        "name": "Observation"
      }
    ],
    "platforms": [
      {
        "beta": false,
        "introducedAt": "17.0",
        "name": "iOS"
      },
      {
        "beta": false,
        "introducedAt": "17.0",
        "name": "iPadOS"
      },
      {
        "beta": false,
        "introducedAt": "17.0",
        "name": "Mac Catalyst"
      },
      {
        "beta": false,
        "introducedAt": "14.0",
        "name": "macOS"
      },
      {
        "beta": false,
        "introducedAt": "17.0",
        "name": "tvOS"
      },
      {
        "beta": false,
        "introducedAt": "1.0",
        "name": "visionOS"
      },
      {
        "beta": false,
        "introducedAt": "10.0",
        "name": "watchOS"
      }
    ],
    "role": "collection",
    "roleHeading": "Framework",
    "symbolKind": "module",
    "title": "Observation"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Observation provides a robust, type-safe, and performant implementation of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "observer design pattern in Swift. This pattern allows an observable object to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "maintain a list of observers and notify them of specific or general state",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "changes. This has the advantages of not directly coupling objects together and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "allowing implicit distribution of updates across potential multiple observers.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The Observation frameworks provides the following capabilities:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Marking a type as observable",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Tracking changes within an instance of an observable type",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Observing and utilizing those changes elsewhere, such as in an app’s user",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "interface",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "To declare a type as observable, attach the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Observation/Observable()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " macro",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to the type declaration. This macro declares and implements conformance to the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Observation/Observable",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " protocol to the type at compile time.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "@Observable",
            "class Car {",
            "    var name: String = \"\"",
            "    var needsRepairs: Bool = false",
            "    ",
            "    init(name: String, needsRepairs: Bool = false) {",
            "        self.name = name",
            "        self.needsRepairs = needsRepairs",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "To track changes, use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Swift/documentation/Observation/withObservationTracking(_:onChange:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " function.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For example, in the following code, the function calls the ",
              "type": "text"
            },
            {
              "code": "onChange",
              "type": "codeVoice"
            },
            {
              "text": " closure",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "when a car’s name changes. However, it doesn’t call the closure when a car’s",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "needsRepair",
              "type": "codeVoice"
            },
            {
              "text": " flag changes. That’s because the function only tracks properties",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "read in its ",
              "type": "text"
            },
            {
              "code": "apply",
              "type": "codeVoice"
            },
            {
              "text": " closure, and the closure doesn’t read the ",
              "type": "text"
            },
            {
              "code": "needsRepair",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "property.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "func render() {",
            "    withObservationTracking {",
            "        for car in cars {",
            "            print(car.name)",
            "        }",
            "    } onChange: {",
            "        print(\"Schedule renderer.\")",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.Swift/documentation/Observation": {
      "abstract": [
        {
          "text": "Make responsive apps that update the presentation when underlying data changes.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation",
      "kind": "symbol",
      "role": "collection",
      "title": "Observation",
      "type": "topic",
      "url": "/documentation/observation"
    },
    "doc://com.apple.Swift/documentation/Observation/Observable": {
      "abstract": [
        {
          "text": "A type that emits notifications to observers when underlying data changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Observable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/Observable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Observable"
        }
      ],
      "role": "symbol",
      "title": "Observable",
      "type": "topic",
      "url": "/documentation/observation/observable"
    },
    "doc://com.apple.Swift/documentation/Observation/Observable()": {
      "abstract": [
        {
          "text": "Defines and implements conformance of the Observable protocol.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Observable"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/Observable()",
      "kind": "symbol",
      "role": "symbol",
      "title": "Observable()",
      "type": "topic",
      "url": "/documentation/observation/observable()"
    },
    "doc://com.apple.Swift/documentation/Observation/ObservationIgnored()": {
      "abstract": [
        {
          "text": "Disables observation tracking of a property.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservationIgnored"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/ObservationIgnored()",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObservationIgnored()",
      "type": "topic",
      "url": "/documentation/observation/observationignored()"
    },
    "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar": {
      "abstract": [
        {
          "text": "Provides storage for tracking and access to data changes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservationRegistrar"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ObservationRegistrar"
        }
      ],
      "role": "symbol",
      "title": "ObservationRegistrar",
      "type": "topic",
      "url": "/documentation/observation/observationregistrar"
    },
    "doc://com.apple.Swift/documentation/Observation/ObservationTracked()": {
      "abstract": [
        {
          "text": "Synthesizes a property for accessors.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ObservationTracked"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/ObservationTracked()",
      "kind": "symbol",
      "role": "symbol",
      "title": "ObservationTracked()",
      "type": "topic",
      "url": "/documentation/observation/observationtracked()"
    },
    "doc://com.apple.Swift/documentation/Observation/withObservationTracking(_:onChange:)": {
      "abstract": [
        {
          "text": "Tracks access to properties.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withObservationTracking"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">(() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "onChange"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "attribute",
          "text": "@autoclosure "
        },
        {
          "kind": "text",
          "text": "() -> () -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida",
          "text": "Void"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Observation/withObservationTracking(_:onChange:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withObservationTracking(_:onChange:)",
      "type": "topic",
      "url": "/documentation/observation/withobservationtracking(_:onchange:)"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/Managing-model-data-in-your-app": {
      "abstract": [
        {
          "text": "Create connections between your app’s data model and views.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Managing-model-data-in-your-app",
      "kind": "article",
      "role": "sampleCode",
      "title": "Managing model data in your app",
      "type": "topic",
      "url": "/documentation/SwiftUI/Managing-model-data-in-your-app"
    },
    "doc://com.apple.documentation/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro": {
      "abstract": [
        {
          "text": "Update your existing app to leverage the benefits of Observation in Swift.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro",
      "kind": "article",
      "role": "sampleCode",
      "title": "Migrating from the Observable Object protocol to the Observable macro",
      "type": "topic",
      "url": "/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "topicSections": [
    {
      "anchor": "Observable-conformance",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Observation/Observable()",
        "doc://com.apple.Swift/documentation/Observation/Observable"
      ],
      "title": "Observable conformance"
    },
    {
      "anchor": "Change-tracking",
      "identifiers": [
        "doc://com.apple.Swift/documentation/Observation/withObservationTracking(_:onChange:)",
        "doc://com.apple.Swift/documentation/Observation/ObservationRegistrar"
      ],
      "title": "Change tracking"
    },
    {
      "anchor": "Observation-in-SwiftUI",
      "identifiers": [
        "doc://com.apple.documentation/documentation/SwiftUI/Managing-model-data-in-your-app",
        "doc://com.apple.documentation/documentation/SwiftUI/Migrating-from-the-observable-object-protocol-to-the-observable-macro"
      ],
      "title": "Observation in SwiftUI"
    },
    {
      "anchor": "Macros",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Swift/documentation/Observation/ObservationIgnored()",
        "doc://com.apple.Swift/documentation/Observation/ObservationTracked()"
      ],
      "title": "Macros"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/observation"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
