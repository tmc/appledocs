{
  "abstract": [
    {
      "text": "Create ARMv6 assembly language instructions that adhere to the application binary",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "interface (ABI) that iOS supports.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Xcode/documentation/Xcode",
        "doc://com.apple.Xcode/documentation/Xcode/application-binary-interfaces"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Xcode/documentation/Xcode/writing-armv6-code-for-ios"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "role": "article",
    "roleHeading": "Article",
    "title": "Writing ARMv6 code for iOS"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The ARMv6 specification defines the calling conventions for passing arguments and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "return values between two functions. You pass arguments on the runtime stack or in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "registers, and the called function returns results registers or in memory. For the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "most part, the ARMv6 specification adopts the same conventions as those defined in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the Procedure Call Standard for the ARM Architecture (release 1.07). However, the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "ARMv6 specification deviates in the following ways:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The stack is 4-byte aligned at the point of function calls.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Data types larger than 4 bytes are 4-byte aligned.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Register R7 serves as the frame pointer.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Register R9 is a volatile scratch register.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Apple defines its own procedural programming interfaces for passing arguments",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "to functions. Object-oriented languages may use different rules for their own method",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "calls. For example, the conventions for C++ virtual functions are typically different",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "than the conventions for C functions.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "The Procedure Call Standard for the ARM Architecture (AAPCS) is available at ",
              "type": "text"
            },
            {
              "identifier": "https://developer.arm.com",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Preserve-specific-registers-in-ARMv6",
          "level": 3,
          "text": "Preserve specific registers in ARMv6",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The following table lists the ARM architecture registers and their volatility in",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "procedure calls:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "Type",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Name",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Preserved",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Notes",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "General-purpose register",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R0-R3",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "No",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "General-purpose registers available for use within a routine and between function calls. Pass arguments and results using these registers.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R4-R6",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Yes",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R7",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Yes",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The frame pointer. This register usually points to the previously saved stack frame and saved-link register.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R8",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Yes",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R9",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "No",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "A volatile scratch register in iOS 3 and later.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R10-R11",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Yes",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R12",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "No",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The intra-procedure (IP) scratch register. The linker uses this register, and it is volatile across all function calls. However, you can use it as a scratch register between function calls.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R13",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Special",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The stack pointer (SP).",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R14",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Special",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The link register (LR). This register stores the return address of a function call.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "R15",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Special",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The program counter (PC).",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "Program status register",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "CPSR",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Special",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The program status register. Function calls don’t preserve the condition bits (27-31) and GE bits (16-19). The E bit must remain zero (to indicate little-endian mode) when calling or returning from a function. Set the T bit only from a branch routine. Don’t modify any other bits.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "VFP registers",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "D0-D7",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "No",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Also known as S0-S15. These registers are inaccessible from Thumb mode on ARMv6.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "D8-D15",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "yes",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Also known as S16-S31. These registers are inaccessible from Thumb mode on ARMv6.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "VFP status register",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "FPSCR",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Special",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The VFP status register. Function calls don’t preserve the condition code bits (28-31) and saturation bits (0-4). Modify the exception control bits (8-12), rounding mode bits (22-23), and flush-to-zero bit (24) only from routines that affect the app state, either directly or using framework API functions. The short vector length (16-18) and stride (20-21) bits must be zero on function entry and exit. Don’t modify any other bits.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "inlineContent": [
            {
              "text": "Consider the following additional behaviors with regard to register usage:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The AAPCS document defines R7 as a general-purpose, nonvolatile register, but iOS",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "uses it as a frame pointer. Failure to use R7 as a frame pointer prevents debugging",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "and performance tools from generating valid backtraces.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Some ARM environments refer to R11 with the mnemonic FP. In iOS, R11 is a general-purpose,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "nonvolatile register. To avoid confusion, iOS doesn’t use the term FP.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Don’t access the VFP registers from Thumb mode in ARMv6. To access the VFP registers,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "run your code in ARM mode. In iOS, you can switch between ARM and Thumb mode only",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "at function boundaries.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Handle-data-types-and-data-alignment-properly",
          "level": 3,
          "text": "Handle data types and data alignment properly",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The following table lists the ANSI C scalar data types, their sizes, and their natural",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "alignments in the ARMv6 environment. The natural alignment represents the default",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "alignment for values of that type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "Data type",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Size (in bytes)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Natural alignment (in bytes)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "BOOL",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", ",
                      "type": "text"
                    },
                    {
                      "code": "bool",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "unsigned char",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "char",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", ",
                      "type": "text"
                    },
                    {
                      "code": "signed char",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "1",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "unsigned short",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "2",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "2",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "signed short",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "2",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "2",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "unsigned int",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "signed int",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "unsigned long",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "signed long",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "unsigned long long",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "8",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "8",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "signed long long",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "8",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "8",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "float",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "double",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "8",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "code": "long double",
                      "type": "codeVoice"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "8",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "pointer",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "4",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "inlineContent": [
            {
              "text": "The ARMv6 environment uses little-endian byte ordering to store numeric and pointer",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "data types. With this scheme, the least-significant byte is first, followed by the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "most-significant byte.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "As standalone arguments, scalar data types use their natural alignment. When part",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of a composite data type (array, structure, or union), the system chooses the member",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "with the largest alignment value and uses that value for the overall type alignment.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "An array assumes the same alignment as its elements. The overall size of a composite",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "data type is a multiple of its alignment value, which might require extra padding",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to accomplish.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Configure-stack-frames-using-correct-conventions",
          "level": 3,
          "text": "Configure stack frames using correct conventions",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "In iOS, all subroutine call and return sequences must work in both the ARM and Thumb",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "states. Specifically, you must use the appropriate ",
              "type": "text"
            },
            {
              "code": "BLX",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "BX",
              "type": "codeVoice"
            },
            {
              "text": " instructions, and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "not the ",
              "type": "text"
            },
            {
              "code": "MOV",
              "type": "codeVoice"
            },
            {
              "text": " instruction, for all calls to function pointers. The main difference",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "between the ARM and Thumb instruction sets is how you set up the stacks and parameter",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "lists.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The stack environment in ARMv6 has the following characteristics:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It’s 4-byte aligned.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It grows downward.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It contains local variables and function parameters.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "In the ARMv6 environment, the stack frame size is not fixed and the stack pointer",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(SP) points to the bottom of the stack. Stack frames contain the following areas:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "parameter area",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " stores the arguments, or space for the arguments, that the",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "caller passes to the called function. This area resides in the caller’s stack frame.",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "The type of argument, and the availability of registers, defines whether the argument",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "resides on the stack or in registers.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "saved link register",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " contains the address of the caller’s next instruction.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "saved frame pointer",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " (optional) contains the base address of the caller’s",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "stack frame.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "saved registers area",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " contains the values of registers that the callee must",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "restore before it returns. For more information, see ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.Xcode/documentation/Xcode/writing-armv6-code-for-ios#Preserve-specific-registers-in-ARMv6",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The ",
                      "type": "text"
                    },
                    {
                      "inlineContent": [
                        {
                          "text": "local storage area",
                          "type": "text"
                        }
                      ],
                      "type": "emphasis"
                    },
                    {
                      "text": " contains each subroutine’s local variables.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "identifier": "writing-armv6-code-for-ios-1",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Create-the-prolog-and-epilog-for-a-function",
          "level": 3,
          "text": "Create the prolog and epilog for a function",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When a function calls a subroutine, the subroutine must allocate its own stack frame.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "It accomplishes this task using a prolog, which is a section of code the compiler",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "places before the body of the function. The compiler places an epilog at the end",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of the subroutine to restore the process to its prior state.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The prolog performs the following tasks:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It pushes the value of the link register (LR) onto the stack.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It pushes the value of the frame pointer (R7) onto the stack.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It sets the frame pointer (R7) to the value of the stack pointer (SP). (This step",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "gives the debugger a way to find previous stack frames.)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It pushes appropriate register values onto the stack to preserve them. For more",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "information, see ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.Xcode/documentation/Xcode/writing-armv6-code-for-ios#Preserve-specific-registers-in-ARMv6",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It allocates space for local storage in the stack frame.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "orderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The epilog performs the following tasks:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It deallocates the local storage in the stack.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It restores any preserved registers.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It pops the saved frame pointer value and puts it back into R7.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "It moves the saved link register (LR) value into the program counter (PC).",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "orderedList"
        },
        {
          "inlineContent": [
            {
              "text": "You don’t need to include any parts of the prolog or epilog that don’t apply to your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "code. For example, if a function doesn’t use high registers (R8, R10, R11) or nonvolatile",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "VFP registers, you don’t need to save them. Leaf functions don’t need to use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "stack at all, except to save nonvolatile registers.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following example shows a prolog in ARM mode. This prolog saves the contents",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "of the VFP registers and allocates an additional 36 bytes of local storage.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "stmfd    sp!, {r4-r7, lr}     // Save LR, R7, R4-R6.",
            "add      r7, sp, #12          // Adjust R7 to point to saved R7.",
            "stmfd    sp!, {r8, r10, r11}  // Save remaining GPRs (R8, R10, R11)",
            "fstmfdd  sp!, {d8-d15}        // Save VFP registers D8-D15,",
            "                              //  also known as S16-S31 or Q4-Q7.",
            "sub      sp, sp, #36          // Allocate space for local storage"
          ],
          "syntax": "other",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The following example shows the corresponding epilog in ARM mode. The epilog deallocates",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the local storage and restores the registers that the prolog saved.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "add      sp, sp, #36         // Deallocate local storage.",
            "fldmfdd  sp!, {d8-d15}       // Restore VFP registers.",
            "ldmdd    sp!, {r8, r10, r11} // Restore R8-R11.",
            "ldmdd    sp!, {r4-r7, pc}    // Restore R4-R6, saved R7,",
            "                             //  and return to saved LR."
          ],
          "syntax": "other",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The following example shows a prolog in Thumb mode. This prolog doesn’t save VFP",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "registers because Thumb-1 cannot access those registers.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "push   {r4-r7, lr}     // Save Lr, R7, R4-R6.",
            "mov    r6, r11         // Move high registers to low registers, so",
            "mov    r5, r10         //  they can be saved. (Skip this part if",
            "mov    r4, r8          //  the routine doesn’t use R8, R10, or R11.)",
            "push   {r4-r6)         // Save R8, R10, R11 (now in R4-R6).",
            "add    r7, sp, #24     // Adjust R7 to point to saved R7.",
            "sub    sp, #36         // Allocate space for local storage."
          ],
          "syntax": "other",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The following example shows the corresponding epilog in Thumb mode. This example",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "restores the registers the prolog saved.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "add    sp, #36         // Deallocate space for local storage",
            "pop    {r4-r6}         // Pop R8, R10, R11",
            "mov    r8, r4          // Restore high registers.",
            "mov    r10, r5",
            "mov    r11, r6",
            "pop    {r4-r7, pc)     // Restore R4-R6, saved R7, and",
            "                       //  return to saved LR.",
            ""
          ],
          "syntax": "other",
          "type": "codeListing"
        },
        {
          "anchor": "Pass-arguments-to-functions-and-handle-return-values",
          "level": 3,
          "text": "Pass arguments to functions and handle return values",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The compiler generally adheres to the argument passing rules in the AAPCS document,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "but the following items are worth noting:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Typically, you place the first four scalar arguments into the core registers (R0,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "R1, R2, and R3), and place any remaining arguments on the stack. For exceptions,",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "see the AAPCS document at ",
                      "type": "text"
                    },
                    {
                      "identifier": "https://developer.arm.com",
                      "isActive": true,
                      "overridingTitle": "https://developer.arm.com",
                      "overridingTitleInlineContent": [
                        {
                          "text": "https://developer.arm.com",
                          "type": "text"
                        }
                      ],
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Use 4-byte alignment for data types larger than 4 bytes in size.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Use the Base Standard variant of the procedure call standard for floating-point",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "arguments. In this variant, you pass floating-point and vector arguments in general-purpose",
                      "type": "text"
                    },
                    {
                      "text": " ",
                      "type": "text"
                    },
                    {
                      "text": "registers (GPRs) instead of in VFP registers.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The compiler generally returns results according to the standard rules. Specifically,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "it returns most values in R0 unless the size of the return value warrants a different",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "approach.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For complete details about argument-passing and return result behaviors, see the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "AAPCS document at ",
              "type": "text"
            },
            {
              "identifier": "https://developer.arm.com",
              "isActive": true,
              "overridingTitle": "https://developer.arm.com",
              "overridingTitleInlineContent": [
                {
                  "text": "https://developer.arm.com",
                  "type": "text"
                }
              ],
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Xcode-PageImage-card.png": {
      "alt": "The Xcode logo on a blue gradient background.",
      "identifier": "Xcode-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/cc63eacd8f7f660388b46204d1d9bbcb/Xcode-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/62dba87d5f60ec96eb48882c9dff86d8/Xcode-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Xcode/documentation/Xcode": {
      "abstract": [
        {
          "text": "Build, test, and submit your app with Apple’s integrated development environment.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode",
      "images": [
        {
          "identifier": "Xcode-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "collection",
      "title": "Xcode",
      "type": "topic",
      "url": "/documentation/xcode"
    },
    "doc://com.apple.Xcode/documentation/Xcode/application-binary-interfaces": {
      "abstract": [
        {
          "text": "Write assembly instructions that adhere to the application binary interfaces of Apple platforms.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/application-binary-interfaces",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Application binary interfaces",
      "type": "topic",
      "url": "/documentation/xcode/application-binary-interfaces"
    },
    "doc://com.apple.Xcode/documentation/Xcode/writing-armv6-code-for-ios#Preserve-specific-registers-in-ARMv6": {
      "abstract": [],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/writing-armv6-code-for-ios#Preserve-specific-registers-in-ARMv6",
      "kind": "section",
      "title": "Preserve specific registers in ARMv6",
      "type": "topic",
      "url": "/documentation/xcode/writing-armv6-code-for-ios#Preserve-specific-registers-in-ARMv6"
    },
    "doc://com.apple.Xcode/documentation/Xcode/writing-armv7-code-for-ios": {
      "abstract": [
        {
          "text": "Create ARMv7 assembly language instructions that adhere to the application binary",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "interface (ABI) that iOS supports.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/writing-armv7-code-for-ios",
      "kind": "article",
      "role": "article",
      "title": "Writing ARMv7 code for iOS",
      "type": "topic",
      "url": "/documentation/xcode/writing-armv7-code-for-ios"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://developer.arm.com": {
      "identifier": "https://developer.arm.com",
      "title": "https://developer.arm.com",
      "titleInlineContent": [
        {
          "text": "https://developer.arm.com",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.arm.com"
    },
    "writing-armv6-code-for-ios-1": {
      "alt": "An illustration of the ARM stack, before and after a function call.",
      "identifier": "writing-armv6-code-for-ios-1",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/a357a5ca6ad94caa17f06172dc98d9fd/writing-armv6-code-for-ios-1@2x.png"
        }
      ]
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "iOS-interfaces",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Xcode/documentation/Xcode/writing-armv7-code-for-ios"
      ],
      "title": "iOS interfaces"
    }
  ]
}
