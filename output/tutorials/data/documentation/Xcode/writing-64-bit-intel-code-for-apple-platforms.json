{
  "abstract": [
    {
      "text": "Create 64-bit Intel assembly language instructions that adhere to the application binary interface (ABI) that Apple platforms support.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Xcode/documentation/Xcode",
        "doc://com.apple.Xcode/documentation/Xcode/application-binary-interfaces"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Xcode/documentation/Xcode/writing-64-bit-intel-code-for-apple-platforms"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "role": "article",
    "roleHeading": "Article",
    "title": "Writing 64-bit Intel code for Apple Platforms"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Prior to the introduction of Apple silicon, Macs used the Intel 64-bit architecture, often called x86-64, x86_64, AMD64, or x64. The macOS platform Application Binary Interface (ABI) for this architecture defines rules for how to call functions, manage the stack, and perform other operations. If your code includes assembly instructions, you must adhere to these rules in order for your code to interface correctly with code generated by the compilers in Xcode. Similarly, if you write a compiler, the machine instructions you generate must adhere to these rules. If you don’t adhere to them, your code may behave unexpectedly or even crash, and code that seems to work on one operating system may stop working on the next release.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Apple no longer supports any platforms on 32-bit Intel as of macOS Catalina.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "Apple platforms typically follow the data representation and procedure call rules in the standard ",
              "type": "text"
            },
            {
              "identifier": "https://gitlab.com/x86-psABIs/x86-64-ABI",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", using the LP64 programming model. However, when those rules are in conflict with the longstanding behavior of the Apple LLVM compiler (Clang) on Apple platforms, then the ABI typically diverges from the standard Processor Specific Application Binary Interface (psABI) and instead follows longstanding behavior. Several such divergences are below. If you discover a divergence not described here, please ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/bug-reporting/",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Adhere-to-CPU-feature-availability",
          "level": 3,
          "text": "Adhere to CPU feature availability",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The Intel 64-bit architecture has been extended many times, adding new registers and instructions to the Instruction Set Architecture (ISA). You can leverage ISA extensions to make your code run more efficiently. Different ISA extensions are available on different Macs based on the processor used in that Mac. As a general rule, if your code uses an ISA extension on a processor that doesn’t support it, the processor crashes.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "It is strongly recommended that you write apps that have installation requirements which are not more complex than a specific minimum operating system release. This includes requiring a specific set of processor extensions in order for the app to work. Some releases of macOS guarantee the presence of specific ISA extensions because they only support Macs that provide those extensions. If you want to use an ISA extension, but it’s not guaranteed to be present on your app’s minimum macOS deployment target, test for it dynamically using the CPUID instruction and be prepared to fall back to a different implementation if it’s not available.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This table summarizes the ISA extensions guaranteed by different macOS releases:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "header": "row",
          "rows": [
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "macOS release",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Oldest supported processor",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "Available CPU features",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "All releases",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "https://en.wikipedia.org/wiki/Merom_(microprocessor)",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The x86-64 baseline, plus CMPXCHG16B, LAHF-SAHF, SSE3, SSSE3",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent": [
                    {
                      "text": "Sierra (10.12)",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "identifier": "https://en.wikipedia.org/wiki/Penryn_(microprocessor)",
                      "isActive": true,
                      "type": "reference"
                    }
                  ],
                  "type": "paragraph"
                }
              ],
              [
                {
                  "inlineContent": [
                    {
                      "text": "The above, plus SSE4.1",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            ]
          ],
          "type": "table"
        },
        {
          "inlineContent": [
            {
              "text": "More recent 64-bit Intel Macs included a large number of additional ISA extensions, but the presence of those extensions is not guaranteed by any release of macOS, and you need to test dynamically for them.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Rosetta support for 64-bit Intel processors includes all of the ISA extensions above plus the POPCNT and SSE4.2 ISA extensions.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Adhere-to-CPU-registers-intended-purposes",
          "level": 3,
          "text": "Adhere to CPU registers’ intended purposes",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Register usage for ordinary functions follows the standard psABI.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Calls to the initialization functions for C++ ",
              "type": "text"
            },
            {
              "code": "thread_local",
              "type": "codeVoice"
            },
            {
              "text": " variables (typically starting with ",
              "type": "text"
            },
            {
              "code": "_ZTH",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "_ZTW",
              "type": "codeVoice"
            },
            {
              "text": ") treat ",
              "type": "text"
            },
            {
              "code": "rcx",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "rdx",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "rsi",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "r8",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "r9",
              "type": "codeVoice"
            },
            {
              "text": ", ",
              "type": "text"
            },
            {
              "code": "r10",
              "type": "codeVoice"
            },
            {
              "text": ", and ",
              "type": "text"
            },
            {
              "code": "r11",
              "type": "codeVoice"
            },
            {
              "text": " as callee-saved registers in addition to those specified by the standard psABI.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The Swift calling convention uses several registers that don’t have special meaning in the standard psABI, depending on the signature of the Swift function and whether it is synchronous or asynchronous.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Synchronous functions fall into three areas:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "The first indirect return address is passed in ",
                        "type": "text"
                      },
                      {
                        "code": "rax",
                        "type": "codeVoice"
                      },
                      {
                        "text": ". Additional indirect return addresses are passed as normal arguments that precede all other arguments, for example, the second is in ",
                        "type": "text"
                      },
                      {
                        "code": "rdi",
                        "type": "codeVoice"
                      },
                      {
                        "text": ", the third is in ",
                        "type": "text"
                      },
                      {
                        "code": "rsi",
                        "type": "codeVoice"
                      },
                      {
                        "text": ", and so on.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "text": "Returns a value indirectly",
                    "type": "text"
                  }
                ]
              }
            },
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "Examples are closures and class methods. Functions receive this context in ",
                        "type": "text"
                      },
                      {
                        "code": "r13",
                        "type": "codeVoice"
                      },
                      {
                        "text": ". ",
                        "type": "text"
                      },
                      {
                        "code": "r13",
                        "type": "codeVoice"
                      },
                      {
                        "text": " is preserved by such calls; after the call, it must hold the same value that the caller passed in.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "text": "Context parameter that fits in a single integer register",
                    "type": "text"
                  }
                ]
              }
            },
            {
              "definition": {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "text": "These functions use ",
                        "type": "text"
                      },
                      {
                        "code": "r12",
                        "type": "codeVoice"
                      },
                      {
                        "text": " for this purpose. The caller must set ",
                        "type": "text"
                      },
                      {
                        "code": "r12",
                        "type": "codeVoice"
                      },
                      {
                        "text": " to zero prior to the call; if ",
                        "type": "text"
                      },
                      {
                        "code": "r12",
                        "type": "codeVoice"
                      },
                      {
                        "text": " is non-zero after return, the function is throwing an error, and the value in ",
                        "type": "text"
                      },
                      {
                        "code": "r12",
                        "type": "codeVoice"
                      },
                      {
                        "text": " is that error. ",
                        "type": "text"
                      },
                      {
                        "code": "r12",
                        "type": "codeVoice"
                      },
                      {
                        "text": " is no longer a callee-saved register for such calls.",
                        "type": "text"
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              "term": {
                "inlineContent": [
                  {
                    "text": "Throws ",
                    "type": "text"
                  },
                  {
                    "code": "Error",
                    "type": "codeVoice"
                  }
                ]
              }
            }
          ],
          "type": "termList"
        },
        {
          "inlineContent": [
            {
              "text": "Asynchronous Swift functions receive the address of their async frame in ",
              "type": "text"
            },
            {
              "code": "r14",
              "type": "codeVoice"
            },
            {
              "text": ". ",
              "type": "text"
            },
            {
              "code": "r14",
              "type": "codeVoice"
            },
            {
              "text": " is no longer a callee-saved register for such calls.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Handle-data-types-and-data-alignment-properly",
          "level": 3,
          "text": "Handle data types and data alignment properly",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Data type representations largely follow the standard psABI. However, the Apple LLVM compiler supports several types not covered in the psABI; the rules for these types are described here.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The Apple LLVM compiler allows vectors with arbitrary element counts. The storage size (in bytes) of a vector type is always rounded up to the nearest power of two. The alignment is equal to the storage size, except that it’s capped by the maximum native vector size, as determined by the current target CPU features: 64 bytes if AVX-512 is enabled, otherwise 32 bytes if AVX is enabled, otherwise 16 bytes. Note that this means that the ABI for large vector types depends on the target CPU features, and code may not interoperate between files compiled with different CPU features; this is inherited from the standard psABI.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "__strong",
                      "type": "codeVoice"
                    },
                    {
                      "text": "- and ",
                      "type": "text"
                    },
                    {
                      "code": "__weak",
                      "type": "codeVoice"
                    },
                    {
                      "text": "-qualified pointer types in Objective-C ARC have the same layout as the underlying reference type in non-ARC Objective-C.  However, structures that contain ",
                      "type": "text"
                    },
                    {
                      "code": "__strong",
                      "type": "codeVoice"
                    },
                    {
                      "text": "- and ",
                      "type": "text"
                    },
                    {
                      "code": "__weak",
                      "type": "codeVoice"
                    },
                    {
                      "text": "-qualified fields have non-trivial ownership, and when the caller passes them as arguments, the callee is responsible for destroying the fields. Furthermore, you must pass and return indirectly structures that contain ",
                      "type": "text"
                    },
                    {
                      "code": "__weak",
                      "type": "codeVoice"
                    },
                    {
                      "text": "-qualified fields, just like a non-trivially-copyable C++ class type.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Pass-arguments-to-functions-correctly",
          "level": 3,
          "text": "Pass arguments to functions correctly",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When passing arguments and returning results to functions, Apple platforms diverge from the standard psABI in the following ways:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Integer arguments that are smaller than ",
                      "type": "text"
                    },
                    {
                      "code": "int",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are required to be promoted to ",
                      "type": "text"
                    },
                    {
                      "code": "int",
                      "type": "codeVoice"
                    },
                    {
                      "text": " by the caller, and the callee may assume that this has been done. (This includes enumerations whose underlying type is smaller than ",
                      "type": "text"
                    },
                    {
                      "code": "int",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".) For example, if the caller passes a ",
                      "type": "text"
                    },
                    {
                      "code": "signed short",
                      "type": "codeVoice"
                    },
                    {
                      "text": " argument in a register, the low 32 bits of the register at the moment of call must represent a value between -32,768 and 32,767 (inclusive). Similar, if the caller passes an ",
                      "type": "text"
                    },
                    {
                      "code": "unsigned char",
                      "type": "codeVoice"
                    },
                    {
                      "text": " argument in a register, the low 32 bits of the register at the moment of call must represent a value between 0 and 255 (inclusive). This rule also applies to return values and arguments passed on the stack.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The classification algorithm considers vectors smaller than 8 bytes to have ",
                      "type": "text"
                    },
                    {
                      "code": "INTEGER",
                      "type": "codeVoice"
                    },
                    {
                      "text": " class. 8-byte vectors of ",
                      "type": "text"
                    },
                    {
                      "code": "double",
                      "type": "codeVoice"
                    },
                    {
                      "text": " are classified as ",
                      "type": "text"
                    },
                    {
                      "code": "MEMORY",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". 8-byte vectors of 64-bit integer element type are classified as ",
                      "type": "text"
                    },
                    {
                      "code": "INTEGER",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Other 8-byte vectors are classified as ",
                      "type": "text"
                    },
                    {
                      "code": "SSE",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "For vectors larger than 8 bytes, the classification algorithm uses the rules from the standard psABI, including the rule that vectors larger than the maximum native vector size are classified as ",
                      "type": "text"
                    },
                    {
                      "code": "MEMORY",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". Just as with data layout, this means the calling convention for vector types larger than 16 bytes depends on the current target CPU features, and code may not interoperate between files compiled with different CPU features.",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "The classification algorithm does not perform step (b) of the post-merger cleanup. Instead, after classification is otherwise complete (not during recursive classification), ",
                      "type": "text"
                    },
                    {
                      "code": "X87UP",
                      "type": "codeVoice"
                    },
                    {
                      "text": " is converted to ",
                      "type": "text"
                    },
                    {
                      "code": "SSE",
                      "type": "codeVoice"
                    },
                    {
                      "text": " when it does not follow ",
                      "type": "text"
                    },
                    {
                      "code": "X87",
                      "type": "codeVoice"
                    },
                    {
                      "text": ". For example:",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                },
                {
                  "code": [
                    "typedef union { long double d; void *p; } odd_union;",
                    "void f(odd_union u);"
                  ],
                  "syntax": null,
                  "type": "codeListing"
                },
                {
                  "inlineContent": [
                    {
                      "text": "The caller passes the first eight bytes of ",
                      "type": "text"
                    },
                    {
                      "code": "u",
                      "type": "codeVoice"
                    },
                    {
                      "text": " in ",
                      "type": "text"
                    },
                    {
                      "code": "rdi",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", and passes the second eight bytes (the exponent bits of ",
                      "type": "text"
                    },
                    {
                      "code": "u.d",
                      "type": "codeVoice"
                    },
                    {
                      "text": ") in the low bits of ",
                      "type": "text"
                    },
                    {
                      "code": "xmm0",
                      "type": "codeVoice"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "inlineContent": [
            {
              "text": "The psABI rules only apply to C, C++, and Objective-C calls.  The Swift calling convention substantially differs from the psABI in ways that exceed the scope of this document to explain, beyond the register usage differences noted above.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Xcode-PageImage-card.png": {
      "alt": "The Xcode logo on a blue gradient background.",
      "identifier": "Xcode-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/cc63eacd8f7f660388b46204d1d9bbcb/Xcode-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/62dba87d5f60ec96eb48882c9dff86d8/Xcode-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Xcode/documentation/Xcode": {
      "abstract": [
        {
          "text": "Build, test, and submit your app with Apple’s integrated development environment.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode",
      "images": [
        {
          "identifier": "Xcode-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "collection",
      "title": "Xcode",
      "type": "topic",
      "url": "/documentation/xcode"
    },
    "doc://com.apple.Xcode/documentation/Xcode/application-binary-interfaces": {
      "abstract": [
        {
          "text": "Write assembly instructions that adhere to the application binary interfaces of Apple platforms.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/application-binary-interfaces",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Application binary interfaces",
      "type": "topic",
      "url": "/documentation/xcode/application-binary-interfaces"
    },
    "doc://com.apple.Xcode/documentation/Xcode/writing-arm64-code-for-apple-platforms": {
      "abstract": [
        {
          "text": "Create 64-bit ARM assembly language instructions that adhere to the application binary",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "interface (ABI) that Apple platforms support.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/writing-arm64-code-for-apple-platforms",
      "kind": "article",
      "role": "article",
      "title": "Writing ARM64 code for Apple platforms",
      "type": "topic",
      "url": "/documentation/xcode/writing-arm64-code-for-apple-platforms"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "https://developer.apple.com/bug-reporting/": {
      "identifier": "https://developer.apple.com/bug-reporting/",
      "title": "report it to Apple",
      "titleInlineContent": [
        {
          "text": "report it to Apple",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/bug-reporting/"
    },
    "https://en.wikipedia.org/wiki/Merom_(microprocessor)": {
      "identifier": "https://en.wikipedia.org/wiki/Merom_(microprocessor)",
      "title": "Merom",
      "titleInlineContent": [
        {
          "text": "Merom",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://en.wikipedia.org/wiki/Merom_(microprocessor)"
    },
    "https://en.wikipedia.org/wiki/Penryn_(microprocessor)": {
      "identifier": "https://en.wikipedia.org/wiki/Penryn_(microprocessor)",
      "title": "Penryn",
      "titleInlineContent": [
        {
          "text": "Penryn",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://en.wikipedia.org/wiki/Penryn_(microprocessor)"
    },
    "https://gitlab.com/x86-psABIs/x86-64-ABI": {
      "identifier": "https://gitlab.com/x86-psABIs/x86-64-ABI",
      "title": "System V psABI for AMD64",
      "titleInlineContent": [
        {
          "text": "System V psABI for AMD64",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://gitlab.com/x86-psABIs/x86-64-ABI"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "64-bit-interfaces",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Xcode/documentation/Xcode/writing-arm64-code-for-apple-platforms"
      ],
      "title": "64-bit interfaces"
    }
  ]
}
