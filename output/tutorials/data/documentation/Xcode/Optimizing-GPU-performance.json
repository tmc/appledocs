{
  "abstract": [
    {
      "text": "Find and address performance bottlenecks using the Metal debugger.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Xcode/documentation/Xcode",
        "doc://com.apple.Xcode/documentation/Xcode/debugging",
        "doc://com.apple.Xcode/documentation/Xcode/Metal-debugger"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.Xcode/documentation/Xcode/Optimizing-GPU-performance"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "role": "article",
    "roleHeading": "Article",
    "title": "Optimizing GPU performance"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Apple GPUs run vertex, fragment, and compute tasks in parallel whenever possible.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The Metal debugger offers ways to inspect the passes running with overlap, which you can use to find bottlenecking tasks in GPU-bound workloads.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In addition, the profiler measures performance statistics by sampling your shaders to reveal hot spots.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you notice any performance issues while running your app, you can use the Metal debugger to find and investigate bottlenecks.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "First, configure your build to include shader source code (see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Xcode/documentation/Xcode/Building-your-project-with-embedded-shader-sources",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ").",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Then, take a frame capture of your app when you notice the visual artifact that you want to debug (see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Xcode/documentation/Xcode/Capturing-a-Metal-workload-in-Xcode",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ").",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Gather-performance-data",
          "level": 3,
          "text": "Gather performance data",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you enable the Profile after Replay option, the Metal debugger automatically begins gathering performance data after replaying the workload.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Alternatively, you can click the Profile button on the Summary viewer to gather performance data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "gputools-metal-debugger-essentials-performance-gather-performance-data.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The performance state of the GPU is important when profiling because it affects how fast the system executes the workload.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Factors that affect the performance state include thermals and system settings.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "By default, the Metal debugger profiles the workload with the same GPU performance state at capture time, so the performance is typically similar to what you observe on the device.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "However, you can induce a specific GPU performance state as you make a profile in the Metal debugger by clicking the GPU Profiler button in the debug bar.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information on GPU performance state, see ",
              "type": "text"
            },
            {
              "identifier": "https://developer.apple.com/videos/play/wwdc2021/10157/?time=476",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "gputools-metal-debugger-essentials-performance-profiler-button.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can switch between different GPU Execution Modes, including Concurrent and Serial, by clicking the GPU Profiler button in the debug bar.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "By default, the Metal debugger profiles the workload in Concurrent mode.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "This allows the GPU to overlap the vertex, fragment, and compute tasks so they can finish as quickly as possible.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In Serial mode, the Metal debugger forces each pass to run only after the previous pass finishes,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "which adds precision to the data report for each pass without overlap, but it doesnâ€™t represent runtime performance.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Find-performance-bottlenecks-with-the-Performance-timeline",
          "level": 3,
          "text": "Find performance bottlenecks with the Performance timeline",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The Performance timeline in the Metal debugger can help you find expensive tasks and performance bottlenecks in the captured workload.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Open the Performance timeline by clicking the Performance button in the Debug navigator.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "gputools-metal-debugger-essentials-performance-gpu-timeline.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The Timeline navigator on the left side of the window lists all profiled passes, pipeline states, and GPU Commands with their shader profiler cost.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The top section has the Vertex, Fragment, and Compute GPU tracks, which display the beginning time and duration of individual passes running with overlap.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Below the GPU tracks are the aggregated shader tracks that combine the individual shaders.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You can view the timeline of individual shaders in a waterfall-like fashion by expanding the aggregated shader tracks.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The bottom section has a separate Counters timeline, which includes GPU counters such as Occupancy, Limiter, and Bandwidth.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The counters can help you diagnose performance bottlenecks.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You can focus on counter subsets by switching between different counter tabs.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For more information, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-a-visual-timeline",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Get-detailed-performance-metrics-for-passes-and-draws",
          "level": 3,
          "text": "Get detailed performance metrics for passes and draws",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You can view performance counter statistics from your appâ€™s passes or commands in the GPU trace.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Open the Performance counters by clicking the Counters tab above the Performance timeline.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "gputools-metal-debugger-essentials-performance-counters-table.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The Metal debugger derives the shader profiler time by tracing the shader instructions when running the workload with overlap.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In a shader-bound workload, sorting the table by shader profiler time can point you to the overall most expensive pass or draw.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In addition, the Metal debugger measures the detailed counters from each pass or command in isolation.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You can also choose different sets of counters in the top bar for a more focused view.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "For more information, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-counter-statistics",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Group-commands-by-pipeline-states-in-the-Debug-navigator",
          "level": 3,
          "text": "Group commands by pipeline states in the Debug navigator",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "For a different perspective in viewing the Metal commands, click the Outline popup menu in the Debug navigator and select Group by Pipeline State to view a list of pipeline states.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "gputools-metal-debugger-essentials-performance-debug-navigator-pso.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "With profiling data, the Debug navigator displays the percentage of samples from shaders of each pipeline state when running the workload with overlap.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In a shader-bound workload, this sorted list of pipeline states is helpful in identifying the most expensive pipeline state.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Expanding a pipeline state allows you to find a list of commands that use that state.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can also quickly view the shader source code and per-line profiling statistics by selecting a shader from a pipeline state in the list.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information on the Debug navigator, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-your-Metal-workload",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Optimize-shaders-with-per-line-shader-profiling-statistics",
          "level": 3,
          "text": "Optimize shaders with per-line shader profiling statistics",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "After opening a shader, you can find the time breakdown for the shader in the pipeline state.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "gputools-metal-debugger-essentials-performance-shader-profiler.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The left sidebar allows you to inspect the shader source files and profiling call tree.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "With the call tree, you can find performance hot spots by the weights of each frame.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In the gutter of the shader source code, you can find weights next to the lines of code.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "The pie chart to the right of each weight contains performance statistics to help you improve the shader code.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, when you observe an expensive line of code with a high percentage for memory sample, it may be taking time to read texture data.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "To reduce the shader time, if itâ€™s less expensive to compute the value than reading it from a texture, you can modify the code to calculate it in the shader.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "After making changes to the shader source code, click the Reload Shaders button in the debug bar to refresh the profiling statistics.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "You can verify whether the changes help with the overall performance by observing the new total GPU time and the tracks in the Performance timeline.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "Changes to your shader source code exist only within the Metal debugger.",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Your original shader source code doesnâ€™t change.",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Make sure that you copy your changes to your original shader source code.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "For more information on interpreting the per-line shader profiling statistics, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Xcode/documentation/Xcode/Inspecting-shaders",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Inspect-shader-performance-with-the-shader-cost-graph",
          "level": 3,
          "text": "Inspect shader performance with the shader cost graph",
          "type": "heading"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The shader cost graph feature is available for iOS devices with A17 Pro or later, and Mac computers with M3 or later.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "You can quickly find and triage expensive pipeline states and shaders by using the shader cost graph. Select a pipeline state in the Timeline navigator, and then click the Shaders tab.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "gputools-metal-debugger-shader-cost-graph-overview.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "You can inspect the percentage cost of the shader function calls with the flame graph in the top section, and select function calls to jump directly to the source code.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-shader-cost-graph-a17-m3",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Understand-SIMD-group-execution-with-the-performance-heat-maps",
          "level": 3,
          "text": "Understand SIMD group execution with the performance heat maps",
          "type": "heading"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The performance heat maps feature is available for iOS devices with A17 Pro or later, and Mac computers with M3 or later.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "You can quickly find and inspect the execution of your shader source code with the performance heat maps. Select an encoder, a pipeline state, or a GPU command in the Timeline navigator, and then click the Heat Maps tab.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "identifier": "gputools-metal-debugger-heatmap-overview.png",
              "type": "image"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The top section shows various heat maps graphing statistical information about GPU threads, such as the cost, the divergence, and the number of instructions.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The bottom section shows the shader execution history of GPU threads on a timeline, including function call stacks and thread states.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-performance-heatmaps-a17-m3",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "Xcode-PageImage-card.png": {
      "alt": "The Xcode logo on a blue gradient background.",
      "identifier": "Xcode-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/cc63eacd8f7f660388b46204d1d9bbcb/Xcode-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/62dba87d5f60ec96eb48882c9dff86d8/Xcode-PageImage-card~dark@2x.png"
        }
      ]
    },
    "doc://com.apple.Xcode/documentation/Xcode": {
      "abstract": [
        {
          "text": "Build, test, and submit your app with Appleâ€™s integrated development environment.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode",
      "images": [
        {
          "identifier": "Xcode-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "article",
      "role": "collection",
      "title": "Xcode",
      "type": "topic",
      "url": "/documentation/xcode"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-a-visual-timeline": {
      "abstract": [
        {
          "text": "Locate performance issues using the Performance timeline.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-a-visual-timeline",
      "kind": "article",
      "role": "article",
      "title": "Analyzing Apple GPU performance using a visual timeline",
      "type": "topic",
      "url": "/documentation/xcode/analyzing-apple-gpu-performance-using-a-visual-timeline"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-counter-statistics": {
      "abstract": [
        {
          "text": "Optimize performance by examining counters for individual passes and commands.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-counter-statistics",
      "kind": "article",
      "role": "article",
      "title": "Analyzing Apple GPU performance using counter statistics",
      "type": "topic",
      "url": "/documentation/xcode/analyzing-apple-gpu-performance-using-counter-statistics"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-performance-heatmaps-a17-m3": {
      "abstract": [
        {
          "text": "Gain insights to SIMD group performance by inspecting source code execution.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-performance-heatmaps-a17-m3",
      "kind": "article",
      "role": "article",
      "title": "Analyzing Apple GPU performance with performance heat maps",
      "type": "topic",
      "url": "/documentation/xcode/analyzing-apple-gpu-performance-using-performance-heatmaps-a17-m3"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-shader-cost-graph-a17-m3": {
      "abstract": [
        {
          "text": "Discover potential shader performance issues by examining pipeline states.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-Apple-GPU-performance-using-shader-cost-graph-a17-m3",
      "kind": "article",
      "role": "article",
      "title": "Analyzing Apple GPU performance using the shader cost graph",
      "type": "topic",
      "url": "/documentation/xcode/analyzing-apple-gpu-performance-using-shader-cost-graph-a17-m3"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Analyzing-your-Metal-workload": {
      "abstract": [
        {
          "text": "Investigate your appâ€™s workload, dependencies, performance, and memory impact using the Metal debugger.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Analyzing-your-Metal-workload",
      "kind": "article",
      "role": "article",
      "title": "Analyzing your Metal workload",
      "type": "topic",
      "url": "/documentation/xcode/analyzing-your-metal-workload"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Building-your-project-with-embedded-shader-sources": {
      "abstract": [
        {
          "text": "Prepare to debug your projectâ€™s shaders by including source code in the build.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Building-your-project-with-embedded-shader-sources",
      "kind": "article",
      "role": "article",
      "title": "Building your project with embedded shader sources",
      "type": "topic",
      "url": "/documentation/xcode/building-your-project-with-embedded-shader-sources"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Capturing-a-Metal-workload-in-Xcode": {
      "abstract": [
        {
          "text": "Analyze your appâ€™s performance by configuring your project to use the Metal debugger.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Capturing-a-Metal-workload-in-Xcode",
      "kind": "article",
      "role": "article",
      "title": "Capturing a Metal workload in Xcode",
      "type": "topic",
      "url": "/documentation/xcode/capturing-a-metal-workload-in-xcode"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Capturing-a-Metal-workload-programmatically": {
      "abstract": [
        {
          "text": "Analyze your appâ€™s performance by invoking Metalâ€™s frame capture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Capturing-a-Metal-workload-programmatically",
      "kind": "article",
      "role": "article",
      "title": "Capturing a Metal workload programmatically",
      "type": "topic",
      "url": "/documentation/xcode/capturing-a-metal-workload-programmatically"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Inspecting-shaders": {
      "abstract": [
        {
          "text": "Improve your appâ€™s shader performance by examining and editing your shaders.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Inspecting-shaders",
      "kind": "article",
      "role": "article",
      "title": "Inspecting shaders",
      "type": "topic",
      "url": "/documentation/xcode/inspecting-shaders"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Investigating-visual-artifacts": {
      "abstract": [
        {
          "text": "Discover, diagnose, and fix visual artifacts in your app with the Metal debugger.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Investigating-visual-artifacts",
      "kind": "article",
      "role": "article",
      "title": "Investigating visual artifacts",
      "type": "topic",
      "url": "/documentation/xcode/investigating-visual-artifacts"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Metal-debugger": {
      "abstract": [
        {
          "text": "Debug and profile your Metal workload with a GPU trace.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Metal-debugger",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal debugger",
      "type": "topic",
      "url": "/documentation/xcode/metal-debugger"
    },
    "doc://com.apple.Xcode/documentation/Xcode/Replaying-a-GPU-trace-file": {
      "abstract": [
        {
          "text": "Debug and profile your appâ€™s performance using a GPU trace file in the Metal debugger.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/Replaying-a-GPU-trace-file",
      "kind": "article",
      "role": "article",
      "title": "Replaying a GPU trace file",
      "type": "topic",
      "url": "/documentation/xcode/replaying-a-gpu-trace-file"
    },
    "doc://com.apple.Xcode/documentation/Xcode/debugging": {
      "abstract": [
        {
          "text": "Identify and address issues in your app using the Xcode debugger, Xcode Organizer, Metal debugger, and Instruments.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Xcode/documentation/Xcode/debugging",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Debugging",
      "type": "topic",
      "url": "/documentation/xcode/debugging"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "gputools-metal-debugger-essentials-performance-counters-table.png": {
      "alt": "A screenshot of the Metal debuggerâ€™s Performance counters listing all the encoders and their counters.",
      "identifier": "gputools-metal-debugger-essentials-performance-counters-table.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/93855ade2af1aa1840eceb74cc057e8b/gputools-metal-debugger-essentials-performance-counters-table.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/bdb06bf0fe824b56c609b2d7b532e46c/gputools-metal-debugger-essentials-performance-counters-table@2x.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/0a6c3fd2f2b2fc3dd41534469401611e/gputools-metal-debugger-essentials-performance-counters-table~dark.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/a2b732f28a7f4c229b186e8459d401eb/gputools-metal-debugger-essentials-performance-counters-table~dark@2x.png"
        }
      ]
    },
    "gputools-metal-debugger-essentials-performance-debug-navigator-pso.png": {
      "alt": "An Xcode screenshot of the Debug navigator showing all the pipeline states in the captured workload sorted from the most to the least expensive.",
      "identifier": "gputools-metal-debugger-essentials-performance-debug-navigator-pso.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/80afecc7ff0bb0bfca6f0d96d5bc54c1/gputools-metal-debugger-essentials-performance-debug-navigator-pso.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/2a8b3c201556151b6cd66de6fbd90c05/gputools-metal-debugger-essentials-performance-debug-navigator-pso@2x.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/dcf21e8df28cf5722eea73d32140eaee/gputools-metal-debugger-essentials-performance-debug-navigator-pso~dark.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/366df32195aac0999efa54eb5dbf1d9e/gputools-metal-debugger-essentials-performance-debug-navigator-pso~dark@2x.png"
        }
      ]
    },
    "gputools-metal-debugger-essentials-performance-gather-performance-data.png": {
      "alt": "A screenshot of the Metal debugger showing the Summary viewer. The Profile button and the button to induce GPU performance state are highlighted.",
      "identifier": "gputools-metal-debugger-essentials-performance-gather-performance-data.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/af0755aa040f4b26a9081e7d92f4f308/gputools-metal-debugger-essentials-performance-gather-performance-data.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/7f8e55dc5d42f11bdbe1ec06c2bcccc4/gputools-metal-debugger-essentials-performance-gather-performance-data@2x.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/26aa543d13b223b7cac1cb2253387cae/gputools-metal-debugger-essentials-performance-gather-performance-data~dark.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/f75bfdce5794120c4efc9e0acebf87fe/gputools-metal-debugger-essentials-performance-gather-performance-data~dark@2x.png"
        }
      ]
    },
    "gputools-metal-debugger-essentials-performance-gpu-timeline.png": {
      "alt": "A screenshot of the Metal debuggerâ€™s Performance timeline showing the Vertex, Fragment, Compute, and Counters tracks.",
      "identifier": "gputools-metal-debugger-essentials-performance-gpu-timeline.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/e51ff7232b814c4eb9b78253e672f34a/gputools-metal-debugger-essentials-performance-gpu-timeline.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/4749aeae32b4700f7c85608bf13790ad/gputools-metal-debugger-essentials-performance-gpu-timeline@2x.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/44e131ada66e62d2493ca1e6e0d1b75f/gputools-metal-debugger-essentials-performance-gpu-timeline~dark.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/1ebdbf40189b28df2fe2ba8755954c55/gputools-metal-debugger-essentials-performance-gpu-timeline~dark@2x.png"
        }
      ]
    },
    "gputools-metal-debugger-essentials-performance-profiler-button.png": {
      "alt": "A screenshot of the Metal debuggerâ€™s Performance timeline that highlights the GPU Profiler popover, which has two menus for Performance State and GPU Execution Mode. The menus show Medium and Concurrent, respectively.",
      "identifier": "gputools-metal-debugger-essentials-performance-profiler-button.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/ddccfdddb78b59e7b5f9faf0929416ed/gputools-metal-debugger-essentials-performance-profiler-button.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/249c1791541c003bcfa85c9826060d89/gputools-metal-debugger-essentials-performance-profiler-button@2x.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/e2c75fb8ecb7c9b6d0d042cc17c8b35e/gputools-metal-debugger-essentials-performance-profiler-button~dark.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/db37562c1345f0155dd5949a1d3286a7/gputools-metal-debugger-essentials-performance-profiler-button~dark@2x.png"
        }
      ]
    },
    "gputools-metal-debugger-essentials-performance-shader-profiler.png": {
      "alt": "An Xcode screenshot of the Shader editor showing a call tree in the Debug navigator, and per-line shader profiling data next to the source code.",
      "identifier": "gputools-metal-debugger-essentials-performance-shader-profiler.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/50d9a0e5d531991c5338742c3dafb61e/gputools-metal-debugger-essentials-performance-shader-profiler.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/e08be55f5ba1584bcd41d73e1431f5c8/gputools-metal-debugger-essentials-performance-shader-profiler@2x.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/3eb91bcfdd272a73309f3d05fea7d311/gputools-metal-debugger-essentials-performance-shader-profiler~dark.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/8c0cdbc47f96e67277b6c16b7ce49d17/gputools-metal-debugger-essentials-performance-shader-profiler~dark@2x.png"
        }
      ]
    },
    "gputools-metal-debugger-heatmap-overview.png": {
      "alt": "A screenshot of the Metal debuggerâ€™s performance heat maps.",
      "identifier": "gputools-metal-debugger-heatmap-overview.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/f66e2bed1fded39ea3257c7e78e75c52/gputools-metal-debugger-heatmap-overview.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/83ba0059fb79ce77761701f6f266e3d2/gputools-metal-debugger-heatmap-overview@2x.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/bb651ee94815045be84b370a35a5518a/gputools-metal-debugger-heatmap-overview~dark.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/05d0f0f8ef2d224ffa0ff7579d52a920/gputools-metal-debugger-heatmap-overview~dark@2x.png"
        }
      ]
    },
    "gputools-metal-debugger-shader-cost-graph-overview.png": {
      "alt": "A screenshot of the Metal debuggerâ€™s shader cost graph.",
      "identifier": "gputools-metal-debugger-shader-cost-graph-overview.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "1x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/8a38c4db90fea66cfa9452e218358408/gputools-metal-debugger-shader-cost-graph-overview.png"
        },
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/44d89222dbe4d7c63b48c979985b4d67/gputools-metal-debugger-shader-cost-graph-overview@2x.png"
        },
        {
          "traits": [
            "1x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/12f8791f871d19548cd1863904c99222/gputools-metal-debugger-shader-cost-graph-overview~dark.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/27eb07a0b5e85f41078da1dee0204885/gputools-metal-debugger-shader-cost-graph-overview~dark@2x.png"
        }
      ]
    },
    "https://developer.apple.com/videos/play/wwdc2021/10157/?time=476": {
      "identifier": "https://developer.apple.com/videos/play/wwdc2021/10157/?time=476",
      "title": "Discover Metal debugging, profiling, and asset creation tools",
      "titleInlineContent": [
        {
          "text": "Discover Metal debugging, profiling, and asset creation tools",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10157/?time=476"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Essentials",
      "generated": true,
      "identifiers": [
        "doc://com.apple.Xcode/documentation/Xcode/Capturing-a-Metal-workload-in-Xcode",
        "doc://com.apple.Xcode/documentation/Xcode/Capturing-a-Metal-workload-programmatically",
        "doc://com.apple.Xcode/documentation/Xcode/Replaying-a-GPU-trace-file",
        "doc://com.apple.Xcode/documentation/Xcode/Investigating-visual-artifacts"
      ],
      "title": "Essentials"
    }
  ]
}
