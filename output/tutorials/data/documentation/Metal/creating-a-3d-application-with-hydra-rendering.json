{
  "abstract": [
    {
      "text": "Build a 3D application that integrates with Hydra and USD.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.metal/documentation/Metal",
        "doc://com.apple.metal/documentation/Metal/metal-sample-code-library"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.metal/documentation/Metal/creating-a-3d-application-with-hydra-rendering"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Metal"
      }
    ],
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "title": "Creating a 3D application with Hydra rendering"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "This sample code project is associated with WWDC22 session 10141: ",
                  "type": "text"
                },
                {
                  "identifier": "https://developer.apple.com/wwdc22/10141/",
                  "isActive": true,
                  "type": "reference"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Configure-the-sample-code-project",
          "level": 3,
          "text": "Configure the sample code project",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "This sample requires Xcode 14 or later and macOS 13 or later. To build the project, you first need to ",
              "type": "text"
            },
            {
              "identifier": "https://github.com/PixarAnimationStudios/USD/blob/release/README.md#getting-and-building-the-code",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " from Pixar’s GitHub repository, and then use CMake to generate an Xcode project with references to both the compiled USD libraries and the header files in the USD source code. If you don’t already have CMake installed, ",
              "type": "text"
            },
            {
              "identifier": "https://cmake.org/download/",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to your Applications folder.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "CMake is both a GUI and command-line app. To use the command-line tool, open a Terminal window and add the ",
              "type": "text"
            },
            {
              "code": "/Contents/bin",
              "type": "codeVoice"
            },
            {
              "text": " folder from the ",
              "type": "text"
            },
            {
              "code": "CMake.app",
              "type": "codeVoice"
            },
            {
              "text": " application bundle to your ",
              "type": "text"
            },
            {
              "code": "PATH",
              "type": "codeVoice"
            },
            {
              "text": " environment variable, like this:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "path+=('/Applications/CMake.app/Contents/bin/')",
            "export PATH"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The previous command assumes you use the default ",
                  "type": "text"
                },
                {
                  "code": "zsh",
                  "type": "codeVoice"
                },
                {
                  "text": " shell and adds ",
                  "type": "text"
                },
                {
                  "code": "cmake",
                  "type": "codeVoice"
                },
                {
                  "text": " to your path for only the current terminal session. To add ",
                  "type": "text"
                },
                {
                  "code": "cmake",
                  "type": "codeVoice"
                },
                {
                  "text": " to your path permanently, or if you’re using another shell like ",
                  "type": "text"
                },
                {
                  "code": "bash",
                  "type": "codeVoice"
                },
                {
                  "text": ", add ",
                  "type": "text"
                },
                {
                  "code": "/Applications/CMake.app/Contents/bin/",
                  "type": "codeVoice"
                },
                {
                  "text": " to the ",
                  "type": "text"
                },
                {
                  "code": "$PATH",
                  "type": "codeVoice"
                },
                {
                  "text": " declaration in your ",
                  "type": "text"
                },
                {
                  "code": ".zshrc",
                  "type": "codeVoice"
                },
                {
                  "text": " file or in the configuration file your shell uses.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "inlineContent": [
            {
              "text": "Clone the USD repo, using the following command:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "git clone https://github.com/PixarAnimationStudios/USD"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Next, build USD using the following command: ",
              "type": "text"
            },
            {
              "code": "python3 <path to usd source>/build_scripts/build_usd.py --generator Xcode --no-python <path to install the built USD>",
              "type": "codeVoice"
            },
            {
              "text": ". For example, if you’ve cloned the USD source code into ",
              "type": "text"
            },
            {
              "code": "~/dev/USD",
              "type": "codeVoice"
            },
            {
              "text": ", the build command might look like this:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "python3 ~/dev/USD/build_scripts/build_usd.py --generator Xcode --no-python ./USDInstall"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Configure the ",
              "type": "text"
            },
            {
              "code": "USD_Path",
              "type": "codeVoice"
            },
            {
              "text": " environment variable: ",
              "type": "text"
            },
            {
              "code": "export USD_PATH=<path to usd install>",
              "type": "codeVoice"
            },
            {
              "text": ". For example, if you’ve installed USD at ",
              "type": "text"
            },
            {
              "code": "~/dev/USDInstall",
              "type": "codeVoice"
            },
            {
              "text": ", use this command:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            " export USD_PATH=~/dev/USDInstall"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Run the following CMake command to generate an Xcode project: ",
              "type": "text"
            },
            {
              "code": "cmake -S <path to project source folder> -B <path to directory where it creates the Xcode project>",
              "type": "codeVoice"
            },
            {
              "text": ". If the sample code is at ",
              "type": "text"
            },
            {
              "code": "~/dev/",
              "type": "codeVoice"
            },
            {
              "text": ", the command might look like this:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "cmake -S ~/dev/CreatingA3DApplicationWithHydraRendering/ -B ~/dev/CreatingA3DApplicationWithHydraRendering/"
          ],
          "syntax": null,
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, open the generated Xcode project, and change the scheme to ",
              "type": "text"
            },
            {
              "code": "hydraplayer",
              "type": "codeVoice"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "You’re responsible for abiding by the terms of the license(s) associated with the code from the USD repo.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Important",
          "style": "important",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.metal/documentation/Metal": {
      "abstract": [
        {
          "text": "Render advanced 3D graphics and compute data in parallel with graphics processors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal",
      "type": "topic",
      "url": "/documentation/metal"
    },
    "doc://com.apple.metal/documentation/Metal/achieving-smooth-frame-rates-with-metal-s-display-link": {
      "abstract": [
        {
          "text": "Pace rendering with minimal input latency while providing essential information to the operating system for power-efficient rendering, thermal mitigation, and the scheduling of sustainable workloads.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/achieving-smooth-frame-rates-with-metal-s-display-link",
      "kind": "article",
      "role": "sampleCode",
      "title": "Achieving smooth frame rates with Metal’s display link",
      "type": "topic",
      "url": "/documentation/metal/achieving-smooth-frame-rates-with-metal-s-display-link"
    },
    "doc://com.apple.metal/documentation/Metal/adjusting-the-level-of-detail-using-metal-mesh-shaders": {
      "abstract": [
        {
          "text": "Choose and render meshes with several levels of detail using object and mesh shaders.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/adjusting-the-level-of-detail-using-metal-mesh-shaders",
      "kind": "article",
      "role": "sampleCode",
      "title": "Adjusting the level of detail using Metal mesh shaders",
      "type": "topic",
      "url": "/documentation/metal/adjusting-the-level-of-detail-using-metal-mesh-shaders"
    },
    "doc://com.apple.metal/documentation/Metal/calculating-primitive-visibility-using-depth-testing": {
      "abstract": [
        {
          "text": "Determine which pixels are visible in a scene by using a depth texture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/calculating-primitive-visibility-using-depth-testing",
      "kind": "article",
      "role": "sampleCode",
      "title": "Calculating Primitive Visibility Using Depth Testing",
      "type": "topic",
      "url": "/documentation/metal/calculating-primitive-visibility-using-depth-testing"
    },
    "doc://com.apple.metal/documentation/Metal/creating-a-custom-metal-view": {
      "abstract": [
        {
          "text": "Implement a lightweight view for Metal rendering that’s customized to your app’s needs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/creating-a-custom-metal-view",
      "kind": "article",
      "role": "sampleCode",
      "title": "Creating a Custom Metal View",
      "type": "topic",
      "url": "/documentation/metal/creating-a-custom-metal-view"
    },
    "doc://com.apple.metal/documentation/Metal/culling-occluded-geometry-using-the-visibility-result-buffer": {
      "abstract": [
        {
          "text": "Draw a scene without rendering hidden geometry by checking whether each object in the scene is visible.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/culling-occluded-geometry-using-the-visibility-result-buffer",
      "kind": "article",
      "role": "sampleCode",
      "title": "Culling occluded geometry using the visibility result buffer",
      "type": "topic",
      "url": "/documentation/metal/culling-occluded-geometry-using-the-visibility-result-buffer"
    },
    "doc://com.apple.metal/documentation/Metal/customizing-render-pass-setup": {
      "abstract": [
        {
          "text": "Render into an offscreen texture by creating a custom render pass.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/customizing-render-pass-setup",
      "kind": "article",
      "role": "sampleCode",
      "title": "Customizing Render Pass Setup",
      "type": "topic",
      "url": "/documentation/metal/customizing-render-pass-setup"
    },
    "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-cpu": {
      "abstract": [
        {
          "text": "Reduce CPU overhead and simplify your command execution by reusing commands.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-cpu",
      "kind": "article",
      "role": "sampleCode",
      "title": "Encoding Indirect Command Buffers on the CPU",
      "type": "topic",
      "url": "/documentation/metal/encoding-indirect-command-buffers-on-the-cpu"
    },
    "doc://com.apple.metal/documentation/Metal/implementing-order-independent-transparency-with-image-blocks": {
      "abstract": [
        {
          "text": "Draw overlapping, transparent surfaces in any order by using tile shaders and image blocks.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/implementing-order-independent-transparency-with-image-blocks",
      "kind": "article",
      "role": "sampleCode",
      "title": "Implementing Order-Independent Transparency with Image Blocks",
      "type": "topic",
      "url": "/documentation/metal/implementing-order-independent-transparency-with-image-blocks"
    },
    "doc://com.apple.metal/documentation/Metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa": {
      "abstract": [
        {
          "text": "Use Metal’s MSAA to enhance the rendering of edges with custom resolve options and immediate and tile-based resolve paths.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa",
      "kind": "article",
      "role": "sampleCode",
      "title": "Improving edge-rendering quality with multisample antialiasing (MSAA)",
      "type": "topic",
      "url": "/documentation/metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa"
    },
    "doc://com.apple.metal/documentation/Metal/loading-textures-and-models-using-metal-fast-resource-loading": {
      "abstract": [
        {
          "text": "Stream texture and buffer data directly from disk into Metal resources using fast resource loading.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/loading-textures-and-models-using-metal-fast-resource-loading",
      "kind": "article",
      "role": "sampleCode",
      "title": "Loading textures and models using Metal fast resource loading",
      "type": "topic",
      "url": "/documentation/metal/loading-textures-and-models-using-metal-fast-resource-loading"
    },
    "doc://com.apple.metal/documentation/Metal/metal-sample-code-library": {
      "abstract": [
        {
          "text": "Explore the complete set of Metal samples.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-sample-code-library",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Sample Code Library",
      "type": "topic",
      "url": "/documentation/metal/metal-sample-code-library"
    },
    "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-graphics-rendering": {
      "abstract": [
        {
          "text": "Switch dynamically between multiple GPUs to efficiently render to a display.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-graphics-rendering",
      "kind": "article",
      "role": "sampleCode",
      "title": "Selecting Device Objects for Graphics Rendering",
      "type": "topic",
      "url": "/documentation/metal/selecting-device-objects-for-graphics-rendering"
    },
    "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives": {
      "abstract": [
        {
          "text": "Render a simple 2D triangle.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using a Render Pipeline to Render Primitives",
      "type": "topic",
      "url": "/documentation/metal/using-a-render-pipeline-to-render-primitives"
    },
    "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents": {
      "abstract": [
        {
          "text": "Create a MetalKit view and a render pass to draw the view’s contents.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using Metal to Draw a View’s Contents",
      "type": "topic",
      "url": "/documentation/metal/using-metal-to-draw-a-view's-contents"
    },
    "fc450e9ee3a6/CreatingA3DApplicationWithHydraRendering.zip": {
      "checksum": "fc450e9ee3a64dc39d104ac5bd5e2355eda821e5acea73ed9dae69f455b589a8de67665f3d016fb4de0860ae884c87a16ac92a38639e4ba1d0437953ccf0808a",
      "identifier": "fc450e9ee3a6/CreatingA3DApplicationWithHydraRendering.zip",
      "type": "download",
      "url": "https://docs-assets.developer.apple.com/published/fc450e9ee3a6/CreatingA3DApplicationWithHydraRendering.zip"
    },
    "https://cmake.org/download/": {
      "identifier": "https://cmake.org/download/",
      "title": "download the latest version of CMake",
      "titleInlineContent": [
        {
          "text": "download the latest version of CMake",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://cmake.org/download/"
    },
    "https://developer.apple.com/wwdc22/10141/": {
      "identifier": "https://developer.apple.com/wwdc22/10141/",
      "title": "Explore USD tools and rendering",
      "titleInlineContent": [
        {
          "text": "Explore USD tools and rendering",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://developer.apple.com/wwdc22/10141/"
    },
    "https://github.com/PixarAnimationStudios/USD/blob/release/README.md#getting-and-building-the-code": {
      "identifier": "https://github.com/PixarAnimationStudios/USD/blob/release/README.md#getting-and-building-the-code",
      "title": "get and build the USD source code",
      "titleInlineContent": [
        {
          "text": "get and build the USD source code",
          "type": "text"
        }
      ],
      "type": "link",
      "url": "https://github.com/PixarAnimationStudios/USD/blob/release/README.md#getting-and-building-the-code"
    }
  },
  "sampleCodeDownload": {
    "action": {
      "identifier": "fc450e9ee3a6/CreatingA3DApplicationWithHydraRendering.zip",
      "isActive": true,
      "overridingTitle": "Download",
      "type": "reference"
    },
    "kind": "sampleDownload"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Render-Workflows",
      "generated": true,
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
        "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
        "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-graphics-rendering",
        "doc://com.apple.metal/documentation/Metal/customizing-render-pass-setup",
        "doc://com.apple.metal/documentation/Metal/creating-a-custom-metal-view",
        "doc://com.apple.metal/documentation/Metal/calculating-primitive-visibility-using-depth-testing",
        "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-cpu",
        "doc://com.apple.metal/documentation/Metal/implementing-order-independent-transparency-with-image-blocks",
        "doc://com.apple.metal/documentation/Metal/loading-textures-and-models-using-metal-fast-resource-loading",
        "doc://com.apple.metal/documentation/Metal/adjusting-the-level-of-detail-using-metal-mesh-shaders",
        "doc://com.apple.metal/documentation/Metal/culling-occluded-geometry-using-the-visibility-result-buffer",
        "doc://com.apple.metal/documentation/Metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa",
        "doc://com.apple.metal/documentation/Metal/achieving-smooth-frame-rates-with-metal-s-display-link"
      ],
      "title": "Render Workflows"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Render-Workflows",
              "generated": true,
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
                "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
                "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-graphics-rendering",
                "doc://com.apple.metal/documentation/Metal/customizing-render-pass-setup",
                "doc://com.apple.metal/documentation/Metal/creating-a-custom-metal-view",
                "doc://com.apple.metal/documentation/Metal/calculating-primitive-visibility-using-depth-testing",
                "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-cpu",
                "doc://com.apple.metal/documentation/Metal/implementing-order-independent-transparency-with-image-blocks",
                "doc://com.apple.metal/documentation/Metal/loading-textures-and-models-using-metal-fast-resource-loading",
                "doc://com.apple.metal/documentation/Metal/adjusting-the-level-of-detail-using-metal-mesh-shaders",
                "doc://com.apple.metal/documentation/Metal/culling-occluded-geometry-using-the-visibility-result-buffer",
                "doc://com.apple.metal/documentation/Metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa",
                "doc://com.apple.metal/documentation/Metal/achieving-smooth-frame-rates-with-metal-s-display-link"
              ],
              "title": "Render Workflows"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/metal/creating-a-3d-application-with-hydra-rendering"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/metal/creating-a-3d-application-with-hydra-rendering"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
