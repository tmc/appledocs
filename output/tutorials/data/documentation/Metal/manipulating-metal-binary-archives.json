{
  "abstract": [
    {
      "text": "Split precompiled binaries into individual slices, and combine them back together for targeted distribution.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.metal/documentation/Metal",
        "doc://com.apple.metal/documentation/Metal/shader-libraries",
        "doc://com.apple.metal/documentation/Metal/metal-binary-archives"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.metal/documentation/Metal/manipulating-metal-binary-archives"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Metal"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Manipulating Metal Binary Archives"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When distributing Metal binary archives, itâ€™s useful to maintain individual slices for each GPU and only include binaries relevant for an individual targeted device. This allows for you to maintain the performance of a precompiled Metal binary while reducing it to a minimal size. Using this strategy in a build system allows you to distribute slim binaries over the air from a larger precompiled binary, or to ship a larger set of precompiled binaries for a platform that supports multiple GPUs.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The code examples in this article use the following files:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "shaders.metallib,",
                      "type": "codeVoice"
                    },
                    {
                      "text": "a Metal library you compile from Xcode or the ",
                      "type": "text"
                    },
                    {
                      "code": "metal",
                      "type": "codeVoice"
                    },
                    {
                      "text": " command-line tool. To learn how to compile from the command-line, see ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.metal/documentation/Metal/building-a-shader-library-by-precompiling-source-files",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "code": "shaders.mtlp-json",
                      "type": "codeVoice"
                    },
                    {
                      "text": ", a Metal translator configuration script for use with the ",
                      "type": "text"
                    },
                    {
                      "code": "shaders.metallib",
                      "type": "codeVoice"
                    },
                    {
                      "text": " library. To learn about creating configuration scripts, see ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.metal/documentation/Metal/creating-binary-archives-from-device-built-pipeline-state-objects",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": " or ",
                      "type": "text"
                    },
                    {
                      "identifier": "doc://com.apple.metal/documentation/Metal/compiling-binary-archives-from-a-custom-configuration-script",
                      "isActive": true,
                      "type": "reference"
                    },
                    {
                      "text": ".",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        },
        {
          "anchor": "Extract-Slices-from-an-Existing-Binary-Archive",
          "level": 3,
          "text": "Extract Slices from an Existing Binary Archive",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Unless the configuration script or command-line options specify otherwise, the Metal translator builds for all supported GPU architectures, including those your app may not even target. For example, building a complete binary archive for the shaders in ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ", and then inspecting it, shows both a large number of binary slices and a significant size increase.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "% xcrun -sdk macosx metal-tt shaders.metallib shaders.mtlp-json -o shaders.binary.metallib",
            "% xcrun metal-lipo -archs render.binary.metallib",
            "applegpu_g15g applegpu_g13g applegpu_g14g applegpu_g15s applegpu_g14s applegpu_g14d applegpu_g13s applegpu_g13d amdgpu_gfx803 amdgpu_gfx802 amdgpu_gfx900 amdgpu_gfx904 amdgpu_gfx906 amdgpu_gfx1010_nsgc amdgpu_gfx1010 amdgpu_gfx1011 amdgpu_gfx1012 amdgpu_gfx1030 amdgpu_gfx1032 intelgpu_icl_1x6x8r7 intelgpu_icl_1x8x8r7 intelgpu_kbl_gt2r0 intelgpu_kbl_gt2r2 intelgpu_kbl_gt2r4 intelgpu_kbl_gt3r1 intelgpu_kbl_gt3r6",
            "% du -h render.binary.metallib",
            "696K    render.binary.metallib",
            "% du -h render.metallib",
            "8.0K    render.metallib",
            ""
          ],
          "syntax": "shell",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "Use the ",
              "type": "text"
            },
            {
              "code": "metal-lipo",
              "type": "codeVoice"
            },
            {
              "text": " command-line tool for inspection and manipulation of Metal libraries, similar to the ",
              "type": "text"
            },
            {
              "code": "lipo",
              "type": "codeVoice"
            },
            {
              "text": " tool for LLVM-compiled libraries. The ",
              "type": "text"
            },
            {
              "code": "metal-lipo",
              "type": "codeVoice"
            },
            {
              "text": " command-line tool uses the parameter ",
              "type": "text"
            },
            {
              "code": "-thin",
              "type": "codeVoice"
            },
            {
              "text": " to extract one specific GPU binary slice by architecture name. You can also extract every slice from the archive in Terminal by using the ",
              "type": "text"
            },
            {
              "code": "tr",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "xargs",
              "type": "codeVoice"
            },
            {
              "text": " commands.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "% mkdir -p shaders/macos",
            "% xcrun metal-lipo -archs render.binary.metallib | tr ' ' '\\n' | xargs -n 1 -I{} xcrun metal-lipo -thin {} -output shaders/macos/{}.binary.metallib render.binary.metallib",
            "% ls shaders/macos",
            "amdgpu_gfx1010.binary.metallib       amdgpu_gfx802.binary.metallib        applegpu_g15s.binary.metallib        applegpu_g14s.binary.metallib        intelgpu_kbl_gt3r1.binary.metallib",
            "amdgpu_gfx1010_nsgc.binary.metallib  amdgpu_gfx803.binary.metallib        applegpu_g13d.binary.metallib        intelgpu_icl_1x6x8r7.binary.metallib intelgpu_kbl_gt3r6.binary.metallib",
            "amdgpu_gfx1011.binary.metallib       amdgpu_gfx900.binary.metallib        applegpu_g13g.binary.metallib        intelgpu_icl_1x8x8r7.binary.metallib",
            "amdgpu_gfx1012.binary.metallib       amdgpu_gfx904.binary.metallib        applegpu_g13s.binary.metallib        intelgpu_kbl_gt2r0.binary.metallib",
            "amdgpu_gfx1030.binary.metallib       amdgpu_gfx906.binary.metallib        applegpu_g14d.binary.metallib        intelgpu_kbl_gt2r2.binary.metallib",
            "amdgpu_gfx1032.binary.metallib       applegpu_g15g.binary.metallib        applegpu_g14g.binary.metallib        intelgpu_kbl_gt2r4.binary.metallib"
          ],
          "syntax": "shell",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "Using ",
                  "type": "text"
                },
                {
                  "code": "metal-lipo -thin",
                  "type": "codeVoice"
                },
                {
                  "text": " doesnâ€™t remove the architectures from the original binary archive.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Combine-Individual-Slices-into-a-New-Binary-Archive",
          "level": 3,
          "text": "Combine Individual Slices into a New Binary Archive",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The ",
              "type": "text"
            },
            {
              "code": "metal-lipo",
              "type": "codeVoice"
            },
            {
              "text": " command-line tool also has a ",
              "type": "text"
            },
            {
              "code": "-create",
              "type": "codeVoice"
            },
            {
              "text": " flag that performs the opposite of thinning. It combines binary archives to create a Metal library that contains each individual binary slice. Using this approach, you can create three new binary archives from a full set of binary archives: one for Intel-based Mac computers, one for AMD GPUs in an expansion slot, and one for Apple silicon.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "% mkdir -p shaders/macos/lib",
            "% xcrun -sdk macosx metal-lipo $(ls shaders/macos/applegpu*) -create -output shaders/macos/lib/applegpu.binary.metallib",
            "% xcrun -sdk macosx metal-lipo $(ls shaders/macos/intelgpu*) -create -output shaders/macos/lib/intelgpu.binary.metallib",
            "% xcrun -sdk macosx metal-lipo $(ls shaders/macos/amdgpu*) -create -output shaders/macos/lib/amdgpu.binary.metallib",
            "% du -h shaders/macos/lib/*",
            "180K    shaders/macos/lib/amdgpu.binary.metallib",
            "124K    shaders/macos/lib/applegpu.binary.metallib",
            "396K    shaders/macos/lib/intelgpu.binary.metallib"
          ],
          "syntax": "shell",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "The ",
                  "type": "text"
                },
                {
                  "code": "metal-lipo",
                  "type": "codeVoice"
                },
                {
                  "text": " command-line tool only works for combining binaries that are part of the same pipelines. To combine multiple binaries for different pipelines into a single library, use the ",
                  "type": "text"
                },
                {
                  "code": "metal-pack",
                  "type": "codeVoice"
                },
                {
                  "text": " command-line tool. For information on ",
                  "type": "text"
                },
                {
                  "code": "metal-pack",
                  "type": "codeVoice"
                },
                {
                  "text": ", run the command ",
                  "type": "text"
                },
                {
                  "code": "man metal-pack",
                  "type": "codeVoice"
                },
                {
                  "text": " in Terminal.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Tip",
          "style": "tip",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.metal/documentation/Metal": {
      "abstract": [
        {
          "text": "Render advanced 3D graphics and compute data in parallel with graphics processors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal",
      "type": "topic",
      "url": "/documentation/metal"
    },
    "doc://com.apple.metal/documentation/Metal/building-a-shader-library-by-precompiling-source-files": {
      "abstract": [
        {
          "text": "Create a shader library that you can add to an Xcode project with the Metal compiler tools in a command-line environment.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/building-a-shader-library-by-precompiling-source-files",
      "kind": "article",
      "role": "article",
      "title": "Building a Shader Library by Precompiling Source Files",
      "type": "topic",
      "url": "/documentation/metal/building-a-shader-library-by-precompiling-source-files"
    },
    "doc://com.apple.metal/documentation/Metal/compiling-binary-archives-from-a-custom-configuration-script": {
      "abstract": [
        {
          "text": "Define how the Metal translator builds binary archives without precompiled binaries as a starting source.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/compiling-binary-archives-from-a-custom-configuration-script",
      "kind": "article",
      "role": "article",
      "title": "Compiling Binary Archives from a Custom Configuration Script",
      "type": "topic",
      "url": "/documentation/metal/compiling-binary-archives-from-a-custom-configuration-script"
    },
    "doc://com.apple.metal/documentation/Metal/creating-binary-archives-from-device-built-pipeline-state-objects": {
      "abstract": [
        {
          "text": "Write your Metal pipeline states to a binary archive at app runtime, and build binaries for any supported GPU.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/creating-binary-archives-from-device-built-pipeline-state-objects",
      "kind": "article",
      "role": "article",
      "title": "Creating Binary Archives from Device-Built Pipeline State Objects",
      "type": "topic",
      "url": "/documentation/metal/creating-binary-archives-from-device-built-pipeline-state-objects"
    },
    "doc://com.apple.metal/documentation/Metal/metal-binary-archives": {
      "abstract": [
        {
          "text": "Distribute precompiled GPU-specific binaries as part of your app to avoid runtime compilation of Metal shaders.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/metal-binary-archives",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Metal Binary Archives",
      "type": "topic",
      "url": "/documentation/metal/metal-binary-archives"
    },
    "doc://com.apple.metal/documentation/Metal/shader-libraries": {
      "abstract": [
        {
          "text": "Manage and load your appâ€™s Metal shaders.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/shader-libraries",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Shader Libraries",
      "type": "topic",
      "url": "/documentation/metal/shader-libraries"
    },
    "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives": {
      "abstract": [
        {
          "text": "Render a simple 2D triangle.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using a Render Pipeline to Render Primitives",
      "type": "topic",
      "url": "/documentation/metal/using-a-render-pipeline-to-render-primitives"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Working-with-Metal-Binary-Archives",
      "generated": true,
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/creating-binary-archives-from-device-built-pipeline-state-objects",
        "doc://com.apple.metal/documentation/Metal/compiling-binary-archives-from-a-custom-configuration-script"
      ],
      "title": "Working with Metal Binary Archives"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Working-with-Metal-Binary-Archives",
              "generated": true,
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/creating-binary-archives-from-device-built-pipeline-state-objects",
                "doc://com.apple.metal/documentation/Metal/compiling-binary-archives-from-a-custom-configuration-script"
              ],
              "title": "Working with Metal Binary Archives"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/metal/manipulating-metal-binary-archives"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/metal/manipulating-metal-binary-archives"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
