{
  "abstract": [
    {
      "text": "Explore the complete set of Metal samples.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.metal/documentation/Metal"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.metal/documentation/Metal/metal-sample-code-library"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Metal"
      }
    ],
    "role": "collectionGroup",
    "title": "Metal Sample Code Library"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Browse the topics below to find samples relevant to a concept you want to learn more about, starting with the basic computation and render workflows. The samples in the lighting and multiple technique sections demonstrate how to take advantage of the unique GPU architecture of Apple silicon.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.metal/documentation/Metal": {
      "abstract": [
        {
          "text": "Render advanced 3D graphics and compute data in parallel with graphics processors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal",
      "type": "topic",
      "url": "/documentation/metal"
    },
    "doc://com.apple.metal/documentation/Metal/accelerating-ray-tracing-and-motion-blur-using-metal": {
      "abstract": [
        {
          "text": "Generate ray-traced images with motion blur using GPU-based parallel processing.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/accelerating-ray-tracing-and-motion-blur-using-metal",
      "kind": "article",
      "role": "sampleCode",
      "title": "Accelerating ray tracing and motion blur using Metal",
      "type": "topic",
      "url": "/documentation/metal/accelerating-ray-tracing-and-motion-blur-using-metal"
    },
    "doc://com.apple.metal/documentation/Metal/accelerating-ray-tracing-using-metal": {
      "abstract": [
        {
          "text": "Implement ray-traced rendering using GPU-based parallel processing.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/accelerating-ray-tracing-using-metal",
      "kind": "article",
      "role": "sampleCode",
      "title": "Accelerating ray tracing using Metal",
      "type": "topic",
      "url": "/documentation/metal/accelerating-ray-tracing-using-metal"
    },
    "doc://com.apple.metal/documentation/Metal/achieving-smooth-frame-rates-with-metal-s-display-link": {
      "abstract": [
        {
          "text": "Pace rendering with minimal input latency while providing essential information to the operating system for power-efficient rendering, thermal mitigation, and the scheduling of sustainable workloads.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/achieving-smooth-frame-rates-with-metal-s-display-link",
      "kind": "article",
      "role": "sampleCode",
      "title": "Achieving smooth frame rates with Metal’s display link",
      "type": "topic",
      "url": "/documentation/metal/achieving-smooth-frame-rates-with-metal-s-display-link"
    },
    "doc://com.apple.metal/documentation/Metal/adjusting-the-level-of-detail-using-metal-mesh-shaders": {
      "abstract": [
        {
          "text": "Choose and render meshes with several levels of detail using object and mesh shaders.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/adjusting-the-level-of-detail-using-metal-mesh-shaders",
      "kind": "article",
      "role": "sampleCode",
      "title": "Adjusting the level of detail using Metal mesh shaders",
      "type": "topic",
      "url": "/documentation/metal/adjusting-the-level-of-detail-using-metal-mesh-shaders"
    },
    "doc://com.apple.metal/documentation/Metal/calculating-primitive-visibility-using-depth-testing": {
      "abstract": [
        {
          "text": "Determine which pixels are visible in a scene by using a depth texture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/calculating-primitive-visibility-using-depth-testing",
      "kind": "article",
      "role": "sampleCode",
      "title": "Calculating Primitive Visibility Using Depth Testing",
      "type": "topic",
      "url": "/documentation/metal/calculating-primitive-visibility-using-depth-testing"
    },
    "doc://com.apple.metal/documentation/Metal/control-the-ray-tracing-process-using-intersection-queries": {
      "abstract": [
        {
          "text": "Explicitly enumerate a ray’s intersections with acceleration structures by creating an intersection query object.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/control-the-ray-tracing-process-using-intersection-queries",
      "kind": "article",
      "role": "sampleCode",
      "title": "Control the Ray Tracing Process Using Intersection Queries",
      "type": "topic",
      "url": "/documentation/metal/control-the-ray-tracing-process-using-intersection-queries"
    },
    "doc://com.apple.metal/documentation/Metal/creating-a-3d-application-with-hydra-rendering": {
      "abstract": [
        {
          "text": "Build a 3D application that integrates with Hydra and USD.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/creating-a-3d-application-with-hydra-rendering",
      "kind": "article",
      "role": "sampleCode",
      "title": "Creating a 3D application with Hydra rendering",
      "type": "topic",
      "url": "/documentation/metal/creating-a-3d-application-with-hydra-rendering"
    },
    "doc://com.apple.metal/documentation/Metal/creating-a-custom-metal-view": {
      "abstract": [
        {
          "text": "Implement a lightweight view for Metal rendering that’s customized to your app’s needs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/creating-a-custom-metal-view",
      "kind": "article",
      "role": "sampleCode",
      "title": "Creating a Custom Metal View",
      "type": "topic",
      "url": "/documentation/metal/creating-a-custom-metal-view"
    },
    "doc://com.apple.metal/documentation/Metal/creating-a-metal-dynamic-library": {
      "abstract": [
        {
          "text": "Compile a library of shaders and write it to a file as a dynamically linked library.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/creating-a-metal-dynamic-library",
      "kind": "article",
      "role": "sampleCode",
      "title": "Creating a Metal Dynamic Library",
      "type": "topic",
      "url": "/documentation/metal/creating-a-metal-dynamic-library"
    },
    "doc://com.apple.metal/documentation/Metal/creating-and-sampling-textures": {
      "abstract": [
        {
          "text": "Load image data into a texture and apply it to a quadrangle.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/creating-and-sampling-textures",
      "kind": "article",
      "role": "sampleCode",
      "title": "Creating and Sampling Textures",
      "type": "topic",
      "url": "/documentation/metal/creating-and-sampling-textures"
    },
    "doc://com.apple.metal/documentation/Metal/culling-occluded-geometry-using-the-visibility-result-buffer": {
      "abstract": [
        {
          "text": "Draw a scene without rendering hidden geometry by checking whether each object in the scene is visible.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/culling-occluded-geometry-using-the-visibility-result-buffer",
      "kind": "article",
      "role": "sampleCode",
      "title": "Culling occluded geometry using the visibility result buffer",
      "type": "topic",
      "url": "/documentation/metal/culling-occluded-geometry-using-the-visibility-result-buffer"
    },
    "doc://com.apple.metal/documentation/Metal/customizing-a-pytorch-operation": {
      "abstract": [
        {
          "text": "Implement a custom operation in PyTorch that uses Metal kernels to improve performance.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/customizing-a-pytorch-operation",
      "kind": "article",
      "role": "sampleCode",
      "title": "Customizing a PyTorch operation",
      "type": "topic",
      "url": "/documentation/metal/customizing-a-pytorch-operation"
    },
    "doc://com.apple.metal/documentation/Metal/customizing-a-tensorflow-operation": {
      "abstract": [
        {
          "text": "Implement a custom operation that uses Metal kernels to accelerate neural-network training performance.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/customizing-a-tensorflow-operation",
      "kind": "article",
      "role": "sampleCode",
      "title": "Customizing a TensorFlow operation",
      "type": "topic",
      "url": "/documentation/metal/customizing-a-tensorflow-operation"
    },
    "doc://com.apple.metal/documentation/Metal/customizing-render-pass-setup": {
      "abstract": [
        {
          "text": "Render into an offscreen texture by creating a custom render pass.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/customizing-render-pass-setup",
      "kind": "article",
      "role": "sampleCode",
      "title": "Customizing Render Pass Setup",
      "type": "topic",
      "url": "/documentation/metal/customizing-render-pass-setup"
    },
    "doc://com.apple.metal/documentation/Metal/encoding-argument-buffers-on-the-gpu": {
      "abstract": [
        {
          "text": "Use a compute pass to encode an argument buffer and access its arguments in a subsequent render pass.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/encoding-argument-buffers-on-the-gpu",
      "kind": "article",
      "role": "sampleCode",
      "title": "Encoding Argument Buffers on the GPU",
      "type": "topic",
      "url": "/documentation/metal/encoding-argument-buffers-on-the-gpu"
    },
    "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-cpu": {
      "abstract": [
        {
          "text": "Reduce CPU overhead and simplify your command execution by reusing commands.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-cpu",
      "kind": "article",
      "role": "sampleCode",
      "title": "Encoding Indirect Command Buffers on the CPU",
      "type": "topic",
      "url": "/documentation/metal/encoding-indirect-command-buffers-on-the-cpu"
    },
    "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-gpu": {
      "abstract": [
        {
          "text": "Maximize CPU to GPU parallelization by generating render commands on the GPU.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-gpu",
      "kind": "article",
      "role": "sampleCode",
      "title": "Encoding Indirect Command Buffers on the GPU",
      "type": "topic",
      "url": "/documentation/metal/encoding-indirect-command-buffers-on-the-gpu"
    },
    "doc://com.apple.metal/documentation/Metal/implementing-a-multistage-image-filter-using-heaps-and-events": {
      "abstract": [
        {
          "text": "Use events to synchronize access to resources allocated on a heap.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/implementing-a-multistage-image-filter-using-heaps-and-events",
      "kind": "article",
      "role": "sampleCode",
      "title": "Implementing a Multistage Image Filter Using Heaps and Events",
      "type": "topic",
      "url": "/documentation/metal/implementing-a-multistage-image-filter-using-heaps-and-events"
    },
    "doc://com.apple.metal/documentation/Metal/implementing-a-multistage-image-filter-using-heaps-and-fences": {
      "abstract": [
        {
          "text": "Use fences to synchronize access to resources allocated on a heap.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/implementing-a-multistage-image-filter-using-heaps-and-fences",
      "kind": "article",
      "role": "sampleCode",
      "title": "Implementing a Multistage Image Filter Using Heaps and Fences",
      "type": "topic",
      "url": "/documentation/metal/implementing-a-multistage-image-filter-using-heaps-and-fences"
    },
    "doc://com.apple.metal/documentation/Metal/implementing-order-independent-transparency-with-image-blocks": {
      "abstract": [
        {
          "text": "Draw overlapping, transparent surfaces in any order by using tile shaders and image blocks.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/implementing-order-independent-transparency-with-image-blocks",
      "kind": "article",
      "role": "sampleCode",
      "title": "Implementing Order-Independent Transparency with Image Blocks",
      "type": "topic",
      "url": "/documentation/metal/implementing-order-independent-transparency-with-image-blocks"
    },
    "doc://com.apple.metal/documentation/Metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa": {
      "abstract": [
        {
          "text": "Use Metal’s MSAA to enhance the rendering of edges with custom resolve options and immediate and tile-based resolve paths.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa",
      "kind": "article",
      "role": "sampleCode",
      "title": "Improving edge-rendering quality with multisample antialiasing (MSAA)",
      "type": "topic",
      "url": "/documentation/metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa"
    },
    "doc://com.apple.metal/documentation/Metal/loading-textures-and-models-using-metal-fast-resource-loading": {
      "abstract": [
        {
          "text": "Stream texture and buffer data directly from disk into Metal resources using fast resource loading.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/loading-textures-and-models-using-metal-fast-resource-loading",
      "kind": "article",
      "role": "sampleCode",
      "title": "Loading textures and models using Metal fast resource loading",
      "type": "topic",
      "url": "/documentation/metal/loading-textures-and-models-using-metal-fast-resource-loading"
    },
    "doc://com.apple.metal/documentation/Metal/managing-groups-of-resources-with-argument-buffers": {
      "abstract": [
        {
          "text": "Create argument buffers to organize related resources.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/managing-groups-of-resources-with-argument-buffers",
      "kind": "article",
      "role": "sampleCode",
      "title": "Managing groups of resources with argument buffers",
      "type": "topic",
      "url": "/documentation/metal/managing-groups-of-resources-with-argument-buffers"
    },
    "doc://com.apple.metal/documentation/Metal/migrating-opengl-code-to-metal": {
      "abstract": [
        {
          "text": "Replace your app’s deprecated OpenGL code with Metal.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/migrating-opengl-code-to-metal",
      "kind": "article",
      "role": "sampleCode",
      "title": "Migrating OpenGL Code to Metal",
      "type": "topic",
      "url": "/documentation/metal/migrating-opengl-code-to-metal"
    },
    "doc://com.apple.metal/documentation/Metal/mixing-metal-and-opengl-rendering-in-a-view": {
      "abstract": [
        {
          "text": "Draw with Metal and OpenGL in the same view using an interoperable texture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/mixing-metal-and-opengl-rendering-in-a-view",
      "kind": "article",
      "role": "sampleCode",
      "title": "Mixing Metal and OpenGL Rendering in a View",
      "type": "topic",
      "url": "/documentation/metal/mixing-metal-and-opengl-rendering-in-a-view"
    },
    "doc://com.apple.metal/documentation/Metal/modern-rendering-with-metal": {
      "abstract": [
        {
          "text": "Use advanced Metal features such as indirect command buffers, sparse textures, and variable rate rasterization to implement complex rendering techniques.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/modern-rendering-with-metal",
      "kind": "article",
      "role": "sampleCode",
      "title": "Modern Rendering with Metal",
      "type": "topic",
      "url": "/documentation/metal/modern-rendering-with-metal"
    },
    "doc://com.apple.metal/documentation/Metal/performing-calculations-on-a-gpu": {
      "abstract": [
        {
          "text": "Use Metal to find GPUs and perform calculations on them.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/performing-calculations-on-a-gpu",
      "kind": "article",
      "role": "sampleCode",
      "title": "Performing Calculations on a GPU",
      "type": "topic",
      "url": "/documentation/metal/performing-calculations-on-a-gpu"
    },
    "doc://com.apple.metal/documentation/Metal/processing-a-texture-in-a-compute-function": {
      "abstract": [
        {
          "text": "Perform parallel calculations on structured data by placing the data in textures.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/processing-a-texture-in-a-compute-function",
      "kind": "article",
      "role": "sampleCode",
      "title": "Processing a Texture in a Compute Function",
      "type": "topic",
      "url": "/documentation/metal/processing-a-texture-in-a-compute-function"
    },
    "doc://com.apple.metal/documentation/Metal/processing-hdr-images-with-metal": {
      "abstract": [
        {
          "text": "Implement a post-processing pipeline using the latest features on Apple GPUs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/processing-hdr-images-with-metal",
      "kind": "article",
      "role": "sampleCode",
      "title": "Processing HDR Images with Metal",
      "type": "topic",
      "url": "/documentation/metal/processing-hdr-images-with-metal"
    },
    "doc://com.apple.metal/documentation/Metal/reading-pixel-data-from-a-drawable-texture": {
      "abstract": [
        {
          "text": "Access texture data from the CPU by copying it to a buffer.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/reading-pixel-data-from-a-drawable-texture",
      "kind": "article",
      "role": "sampleCode",
      "title": "Reading Pixel Data from a Drawable Texture",
      "type": "topic",
      "url": "/documentation/metal/reading-pixel-data-from-a-drawable-texture"
    },
    "doc://com.apple.metal/documentation/Metal/rendering-a-curve-primitive-in-a-ray-tracing-scene": {
      "abstract": [
        {
          "text": "Implement ray traced rendering using GPU-based parallel processing.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/rendering-a-curve-primitive-in-a-ray-tracing-scene",
      "kind": "article",
      "role": "sampleCode",
      "title": "Rendering a curve primitive in a ray tracing scene",
      "type": "topic",
      "url": "/documentation/metal/rendering-a-curve-primitive-in-a-ray-tracing-scene"
    },
    "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-c++": {
      "abstract": [
        {
          "text": "Avoid expensive lighting calculations by implementing a deferred lighting renderer optimized for immediate mode and tile-based deferred renderer GPUs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-c++",
      "kind": "article",
      "role": "sampleCode",
      "title": "Rendering a Scene with Deferred Lighting in C++",
      "type": "topic",
      "url": "/documentation/metal/rendering-a-scene-with-deferred-lighting-in-c++"
    },
    "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-objective-c": {
      "abstract": [
        {
          "text": "Avoid expensive lighting calculations by implementing a deferred lighting renderer optimized for immediate mode and tile-based deferred renderer GPUs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-objective-c",
      "kind": "article",
      "role": "sampleCode",
      "title": "Rendering a Scene with Deferred Lighting in Objective-C",
      "type": "topic",
      "url": "/documentation/metal/rendering-a-scene-with-deferred-lighting-in-objective-c"
    },
    "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-swift": {
      "abstract": [
        {
          "text": "Avoid expensive lighting calculations by implementing a deferred lighting renderer optimized for immediate mode and tile-based deferred renderer GPUs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-swift",
      "kind": "article",
      "role": "sampleCode",
      "title": "Rendering a Scene with Deferred Lighting in Swift",
      "type": "topic",
      "url": "/documentation/metal/rendering-a-scene-with-deferred-lighting-in-swift"
    },
    "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-forward-plus-lighting-using-tile-shaders": {
      "abstract": [
        {
          "text": "Implement a forward plus renderer using the latest features on Apple GPUs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-forward-plus-lighting-using-tile-shaders",
      "kind": "article",
      "role": "sampleCode",
      "title": "Rendering a Scene with Forward Plus Lighting Using Tile Shaders",
      "type": "topic",
      "url": "/documentation/metal/rendering-a-scene-with-forward-plus-lighting-using-tile-shaders"
    },
    "doc://com.apple.metal/documentation/Metal/rendering-reflections-in-real-time-using-ray-tracing": {
      "abstract": [
        {
          "text": "Implement realistic real-time lighting by dynamically generating reflection maps",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "by encoding a ray-tracing compute pass.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/rendering-reflections-in-real-time-using-ray-tracing",
      "kind": "article",
      "role": "sampleCode",
      "title": "Rendering reflections in real time using ray tracing",
      "type": "topic",
      "url": "/documentation/metal/rendering-reflections-in-real-time-using-ray-tracing"
    },
    "doc://com.apple.metal/documentation/Metal/rendering-reflections-with-fewer-render-passes": {
      "abstract": [
        {
          "text": "Use layer selection to reduce the number of render passes needed to generate an environment map.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/rendering-reflections-with-fewer-render-passes",
      "kind": "article",
      "role": "sampleCode",
      "title": "Rendering Reflections with Fewer Render Passes",
      "type": "topic",
      "url": "/documentation/metal/rendering-reflections-with-fewer-render-passes"
    },
    "doc://com.apple.metal/documentation/Metal/rendering-terrain-dynamically-with-argument-buffers": {
      "abstract": [
        {
          "text": "Use argument buffers to render terrain in real time with a GPU-driven pipeline.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/rendering-terrain-dynamically-with-argument-buffers",
      "kind": "article",
      "role": "sampleCode",
      "title": "Rendering Terrain Dynamically with Argument Buffers",
      "type": "topic",
      "url": "/documentation/metal/rendering-terrain-dynamically-with-argument-buffers"
    },
    "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-compute-processing": {
      "abstract": [
        {
          "text": "Switch dynamically between multiple GPUs to efficiently execute a compute-intensive simulation.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-compute-processing",
      "kind": "article",
      "role": "sampleCode",
      "title": "Selecting Device Objects for Compute Processing",
      "type": "topic",
      "url": "/documentation/metal/selecting-device-objects-for-compute-processing"
    },
    "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-graphics-rendering": {
      "abstract": [
        {
          "text": "Switch dynamically between multiple GPUs to efficiently render to a display.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-graphics-rendering",
      "kind": "article",
      "role": "sampleCode",
      "title": "Selecting Device Objects for Graphics Rendering",
      "type": "topic",
      "url": "/documentation/metal/selecting-device-objects-for-graphics-rendering"
    },
    "doc://com.apple.metal/documentation/Metal/streaming-large-images-with-metal-sparse-textures": {
      "abstract": [
        {
          "text": "Limit texture memory usage for large textures by loading or unloading image detail on the basis of MIP and tile region.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/streaming-large-images-with-metal-sparse-textures",
      "kind": "article",
      "role": "sampleCode",
      "title": "Streaming large images with Metal sparse textures",
      "type": "topic",
      "url": "/documentation/metal/streaming-large-images-with-metal-sparse-textures"
    },
    "doc://com.apple.metal/documentation/Metal/synchronizing-cpu-and-gpu-work": {
      "abstract": [
        {
          "text": "Avoid stalls between CPU and GPU work by using multiple instances of a resource.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/synchronizing-cpu-and-gpu-work",
      "kind": "article",
      "role": "sampleCode",
      "title": "Synchronizing CPU and GPU Work",
      "type": "topic",
      "url": "/documentation/metal/synchronizing-cpu-and-gpu-work"
    },
    "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives": {
      "abstract": [
        {
          "text": "Render a simple 2D triangle.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using a Render Pipeline to Render Primitives",
      "type": "topic",
      "url": "/documentation/metal/using-a-render-pipeline-to-render-primitives"
    },
    "doc://com.apple.metal/documentation/Metal/using-argument-buffers-with-resource-heaps": {
      "abstract": [
        {
          "text": "Reduce CPU overhead by using arrays inside argument buffers and combining them with resource heaps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-argument-buffers-with-resource-heaps",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using Argument Buffers with Resource Heaps",
      "type": "topic",
      "url": "/documentation/metal/using-argument-buffers-with-resource-heaps"
    },
    "doc://com.apple.metal/documentation/Metal/using-function-specialization-to-build-pipeline-variants": {
      "abstract": [
        {
          "text": "Create pipelines for different levels of detail from a common shader source.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-function-specialization-to-build-pipeline-variants",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using Function Specialization to Build Pipeline Variants",
      "type": "topic",
      "url": "/documentation/metal/using-function-specialization-to-build-pipeline-variants"
    },
    "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents": {
      "abstract": [
        {
          "text": "Create a MetalKit view and a render pass to draw the view’s contents.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
      "kind": "article",
      "role": "sampleCode",
      "title": "Using Metal to Draw a View’s Contents",
      "type": "topic",
      "url": "/documentation/metal/using-metal-to-draw-a-view's-contents"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "topicSections": [
    {
      "anchor": "Compute-Workflows",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/performing-calculations-on-a-gpu",
        "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-compute-processing",
        "doc://com.apple.metal/documentation/Metal/customizing-a-tensorflow-operation",
        "doc://com.apple.metal/documentation/Metal/customizing-a-pytorch-operation"
      ],
      "title": "Compute Workflows"
    },
    {
      "anchor": "Render-Workflows",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
        "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
        "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-graphics-rendering",
        "doc://com.apple.metal/documentation/Metal/customizing-render-pass-setup",
        "doc://com.apple.metal/documentation/Metal/creating-a-custom-metal-view",
        "doc://com.apple.metal/documentation/Metal/calculating-primitive-visibility-using-depth-testing",
        "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-cpu",
        "doc://com.apple.metal/documentation/Metal/implementing-order-independent-transparency-with-image-blocks",
        "doc://com.apple.metal/documentation/Metal/loading-textures-and-models-using-metal-fast-resource-loading",
        "doc://com.apple.metal/documentation/Metal/adjusting-the-level-of-detail-using-metal-mesh-shaders",
        "doc://com.apple.metal/documentation/Metal/creating-a-3d-application-with-hydra-rendering",
        "doc://com.apple.metal/documentation/Metal/culling-occluded-geometry-using-the-visibility-result-buffer",
        "doc://com.apple.metal/documentation/Metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa",
        "doc://com.apple.metal/documentation/Metal/achieving-smooth-frame-rates-with-metal-s-display-link"
      ],
      "title": "Render Workflows"
    },
    {
      "anchor": "Textures",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/processing-a-texture-in-a-compute-function",
        "doc://com.apple.metal/documentation/Metal/reading-pixel-data-from-a-drawable-texture",
        "doc://com.apple.metal/documentation/Metal/creating-and-sampling-textures",
        "doc://com.apple.metal/documentation/Metal/streaming-large-images-with-metal-sparse-textures"
      ],
      "title": "Textures"
    },
    {
      "anchor": "Argument-Buffers",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/managing-groups-of-resources-with-argument-buffers",
        "doc://com.apple.metal/documentation/Metal/using-argument-buffers-with-resource-heaps",
        "doc://com.apple.metal/documentation/Metal/encoding-argument-buffers-on-the-gpu",
        "doc://com.apple.metal/documentation/Metal/rendering-terrain-dynamically-with-argument-buffers"
      ],
      "title": "Argument Buffers"
    },
    {
      "anchor": "Shaders",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/creating-a-metal-dynamic-library",
        "doc://com.apple.metal/documentation/Metal/using-function-specialization-to-build-pipeline-variants"
      ],
      "title": "Shaders"
    },
    {
      "anchor": "Synchronization",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/synchronizing-cpu-and-gpu-work",
        "doc://com.apple.metal/documentation/Metal/implementing-a-multistage-image-filter-using-heaps-and-events",
        "doc://com.apple.metal/documentation/Metal/implementing-a-multistage-image-filter-using-heaps-and-fences"
      ],
      "title": "Synchronization"
    },
    {
      "anchor": "Lighting-Techniques",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-forward-plus-lighting-using-tile-shaders",
        "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-objective-c",
        "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-swift",
        "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-c++",
        "doc://com.apple.metal/documentation/Metal/rendering-reflections-with-fewer-render-passes"
      ],
      "title": "Lighting Techniques"
    },
    {
      "anchor": "Multiple-Techniques",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/modern-rendering-with-metal",
        "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-gpu"
      ],
      "title": "Multiple Techniques"
    },
    {
      "anchor": "Ray-Tracing",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/rendering-reflections-in-real-time-using-ray-tracing",
        "doc://com.apple.metal/documentation/Metal/accelerating-ray-tracing-using-metal",
        "doc://com.apple.metal/documentation/Metal/control-the-ray-tracing-process-using-intersection-queries",
        "doc://com.apple.metal/documentation/Metal/accelerating-ray-tracing-and-motion-blur-using-metal",
        "doc://com.apple.metal/documentation/Metal/rendering-a-curve-primitive-in-a-ray-tracing-scene"
      ],
      "title": "Ray Tracing"
    },
    {
      "anchor": "HDR",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/processing-hdr-images-with-metal"
      ],
      "title": "HDR"
    },
    {
      "anchor": "OpenGL",
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/migrating-opengl-code-to-metal",
        "doc://com.apple.metal/documentation/Metal/mixing-metal-and-opengl-rendering-in-a-view"
      ],
      "title": "OpenGL"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "replace",
          "path": "/topicSections",
          "value": [
            {
              "anchor": "Compute-Workflows",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/performing-calculations-on-a-gpu",
                "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-compute-processing",
                "doc://com.apple.metal/documentation/Metal/customizing-a-tensorflow-operation",
                "doc://com.apple.metal/documentation/Metal/customizing-a-pytorch-operation"
              ],
              "title": "Compute Workflows"
            },
            {
              "anchor": "Render-Workflows",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/using-metal-to-draw-a-view's-contents",
                "doc://com.apple.metal/documentation/Metal/using-a-render-pipeline-to-render-primitives",
                "doc://com.apple.metal/documentation/Metal/selecting-device-objects-for-graphics-rendering",
                "doc://com.apple.metal/documentation/Metal/customizing-render-pass-setup",
                "doc://com.apple.metal/documentation/Metal/creating-a-custom-metal-view",
                "doc://com.apple.metal/documentation/Metal/calculating-primitive-visibility-using-depth-testing",
                "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-cpu",
                "doc://com.apple.metal/documentation/Metal/implementing-order-independent-transparency-with-image-blocks",
                "doc://com.apple.metal/documentation/Metal/loading-textures-and-models-using-metal-fast-resource-loading",
                "doc://com.apple.metal/documentation/Metal/adjusting-the-level-of-detail-using-metal-mesh-shaders",
                "doc://com.apple.metal/documentation/Metal/creating-a-3d-application-with-hydra-rendering",
                "doc://com.apple.metal/documentation/Metal/culling-occluded-geometry-using-the-visibility-result-buffer",
                "doc://com.apple.metal/documentation/Metal/improving-edge-rendering-quality-with-multisample-antialiasing-msaa",
                "doc://com.apple.metal/documentation/Metal/achieving-smooth-frame-rates-with-metal-s-display-link"
              ],
              "title": "Render Workflows"
            },
            {
              "anchor": "Textures",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/processing-a-texture-in-a-compute-function",
                "doc://com.apple.metal/documentation/Metal/reading-pixel-data-from-a-drawable-texture",
                "doc://com.apple.metal/documentation/Metal/creating-and-sampling-textures",
                "doc://com.apple.metal/documentation/Metal/streaming-large-images-with-metal-sparse-textures"
              ],
              "title": "Textures"
            },
            {
              "anchor": "Argument-Buffers",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/managing-groups-of-resources-with-argument-buffers",
                "doc://com.apple.metal/documentation/Metal/using-argument-buffers-with-resource-heaps",
                "doc://com.apple.metal/documentation/Metal/encoding-argument-buffers-on-the-gpu",
                "doc://com.apple.metal/documentation/Metal/rendering-terrain-dynamically-with-argument-buffers"
              ],
              "title": "Argument Buffers"
            },
            {
              "anchor": "Shaders",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/creating-a-metal-dynamic-library",
                "doc://com.apple.metal/documentation/Metal/using-function-specialization-to-build-pipeline-variants"
              ],
              "title": "Shaders"
            },
            {
              "anchor": "Synchronization",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/synchronizing-cpu-and-gpu-work",
                "doc://com.apple.metal/documentation/Metal/implementing-a-multistage-image-filter-using-heaps-and-events",
                "doc://com.apple.metal/documentation/Metal/implementing-a-multistage-image-filter-using-heaps-and-fences"
              ],
              "title": "Synchronization"
            },
            {
              "anchor": "Lighting-Techniques",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-forward-plus-lighting-using-tile-shaders",
                "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-objective-c",
                "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-swift",
                "doc://com.apple.metal/documentation/Metal/rendering-a-scene-with-deferred-lighting-in-c++",
                "doc://com.apple.metal/documentation/Metal/rendering-reflections-with-fewer-render-passes"
              ],
              "title": "Lighting Techniques"
            },
            {
              "anchor": "Multiple-Techniques",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/modern-rendering-with-metal",
                "doc://com.apple.metal/documentation/Metal/encoding-indirect-command-buffers-on-the-gpu"
              ],
              "title": "Multiple Techniques"
            },
            {
              "anchor": "Ray-Tracing",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/rendering-reflections-in-real-time-using-ray-tracing",
                "doc://com.apple.metal/documentation/Metal/accelerating-ray-tracing-using-metal",
                "doc://com.apple.metal/documentation/Metal/control-the-ray-tracing-process-using-intersection-queries",
                "doc://com.apple.metal/documentation/Metal/accelerating-ray-tracing-and-motion-blur-using-metal",
                "doc://com.apple.metal/documentation/Metal/rendering-a-curve-primitive-in-a-ray-tracing-scene"
              ],
              "title": "Ray Tracing"
            },
            {
              "anchor": "HDR",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/processing-hdr-images-with-metal"
              ],
              "title": "HDR"
            },
            {
              "anchor": "OpenGL",
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/migrating-opengl-code-to-metal",
                "doc://com.apple.metal/documentation/Metal/mixing-metal-and-opengl-rendering-in-a-view"
              ],
              "title": "OpenGL"
            }
          ]
        },
        {
          "op": "add",
          "path": "/seeAlsoSections",
          "value": null
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/metal/metal-sample-code-library"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/metal/metal-sample-code-library"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
