{
  "abstract": [
    {
      "text": "Create your mipmaps either when you author content or at runtime.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.metal/documentation/Metal",
        "doc://com.apple.metal/documentation/Metal/textures"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.metal/documentation/Metal/generating-mipmap-data"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Metal"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Generating Mipmap Data"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "You create mipmaps for texture sampling by applying a filter to the original image. Different filter algorithms vary in processing time and output quality. You need to determine the right tradeoff for your content by considering file size, quality, and runtime performance.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "These are the options for creating mipmaps:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "inlineContent": [
                {
                  "text": "Have the device object generate them for you at runtime.",
                  "type": "text"
                }
              ],
              "type": "strong"
            },
            {
              "text": " This approach is the simplest way to create mipmaps for color images. After initializing mipmap ",
              "type": "text"
            },
            {
              "code": "0",
              "type": "codeVoice"
            },
            {
              "text": " with data, create a blit command encoder and encode a command to generate the other mipmaps using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/generateMipmaps(for:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "if let encoder = commandBuffer.makeBlitCommandEncoder() {",
                    "    encoder.generateMipmaps(for: texture)",
                    "    encoder.endEncoding()",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "id <MTLBlitCommandEncoder> encoder = [commandBuffer blitCommandEncoder];",
                    "[encoder generateMipmapsForTexture: myTexture];",
                    "[encoder endEncoding];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "As with any other GPU commands, the GPU creates the mipmaps asynchronously, at some point after the command buffer is committed to a command queue. The filtering that the device object uses to generate the mipmaps is implementation-dependent and may vary from one GPU to another.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "inlineContent": [
                {
                  "text": "Generate high-quality mipmaps from your source texture.",
                  "type": "text"
                }
              ],
              "type": "strong"
            },
            {
              "text": " Many tools are capable of generating high-quality mipmaps from your source texture. In this case, you store all of the mipmaps in your source data and load them at runtime. This approach lets you use higher-quality filters and tools to build your mipmaps, but increases the size of your files and thus the distribution size of your app.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "inlineContent": [
                {
                  "text": "Use custom filters or Metal Performance Shaders to generate better mipmaps.",
                  "type": "text"
                }
              ],
              "type": "strong"
            },
            {
              "text": " You can also create your own tools, using custom filters or Metal Performance Shaders to generate better mipmaps. Depending on exactly what solution you use for your own tools, you might either create your mipmap data at runtime or as an offline process that runs when you create your content.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.metal/documentation/Metal": {
      "abstract": [
        {
          "text": "Render advanced 3D graphics and compute data in parallel with graphics processors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal",
      "type": "topic",
      "url": "/documentation/metal"
    },
    "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/generateMipmaps(for:)": {
      "abstract": [
        {
          "text": "Encodes a command that generates mipmaps for a texture from the base mipmap level up to the highest mipmap level.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "generateMipmaps"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "for"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/generateMipmaps(for:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "generateMipmapsForTexture:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "generateMipmaps(for:)",
      "type": "topic",
      "url": "/documentation/metal/mtlblitcommandencoder/generatemipmaps(for:)"
    },
    "doc://com.apple.metal/documentation/Metal/adding-mipmap-filtering-to-samplers": {
      "abstract": [
        {
          "text": "Specify how the GPU samples mipmaps in your textures.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/adding-mipmap-filtering-to-samplers",
      "kind": "article",
      "role": "article",
      "title": "Adding Mipmap Filtering to Samplers",
      "type": "topic",
      "url": "/documentation/metal/adding-mipmap-filtering-to-samplers"
    },
    "doc://com.apple.metal/documentation/Metal/copying-data-into-or-out-of-mipmaps": {
      "abstract": [
        {
          "text": "Specify which mipmaps that the data transfer affects.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/copying-data-into-or-out-of-mipmaps",
      "kind": "article",
      "role": "article",
      "title": "Copying Data into or out of Mipmaps",
      "type": "topic",
      "url": "/documentation/metal/copying-data-into-or-out-of-mipmaps"
    },
    "doc://com.apple.metal/documentation/Metal/creating-a-mipmapped-texture": {
      "abstract": [
        {
          "text": "Decide whether a texture that youâ€™re creating needs mipmaps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/creating-a-mipmapped-texture",
      "kind": "article",
      "role": "article",
      "title": "Creating a Mipmapped Texture",
      "type": "topic",
      "url": "/documentation/metal/creating-a-mipmapped-texture"
    },
    "doc://com.apple.metal/documentation/Metal/dynamically-adjusting-texture-level-of-detail": {
      "abstract": [
        {
          "text": "Defer generating or loading larger mipmaps until that level of detail is needed.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/dynamically-adjusting-texture-level-of-detail",
      "kind": "article",
      "role": "article",
      "title": "Dynamically Adjusting Texture Level of Detail",
      "type": "topic",
      "url": "/documentation/metal/dynamically-adjusting-texture-level-of-detail"
    },
    "doc://com.apple.metal/documentation/Metal/improving-texture-sampling-quality-and-performance-with-mipmaps": {
      "abstract": [
        {
          "text": "Avoid texture-rendering artifacts and reduce the GPUâ€™s workload by creating smaller versions of a texture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/improving-texture-sampling-quality-and-performance-with-mipmaps",
      "kind": "article",
      "role": "article",
      "title": "Improving Texture Sampling Quality and Performance with Mipmaps",
      "type": "topic",
      "url": "/documentation/metal/improving-texture-sampling-quality-and-performance-with-mipmaps"
    },
    "doc://com.apple.metal/documentation/Metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries": {
      "abstract": [
        {
          "text": "Determine in advance which mipmap levels the GPU requires to sample a texture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries",
      "kind": "article",
      "role": "article",
      "title": "Predicting Which Mips the GPU Samples with Level-of-Detail Queries",
      "type": "topic",
      "url": "/documentation/metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries"
    },
    "doc://com.apple.metal/documentation/Metal/restricting-access-to-specific-mipmaps": {
      "abstract": [
        {
          "text": "Set the range of mipmap levels that a sampler can access.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/restricting-access-to-specific-mipmaps",
      "kind": "article",
      "role": "article",
      "title": "Restricting Access to Specific Mipmaps",
      "type": "topic",
      "url": "/documentation/metal/restricting-access-to-specific-mipmaps"
    },
    "doc://com.apple.metal/documentation/Metal/textures": {
      "abstract": [
        {
          "text": "Create and manage typed data your app uses to exchange information with its shader functions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/textures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Textures",
      "type": "topic",
      "url": "/documentation/metal/textures"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Texture-Mipmapping",
      "generated": true,
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/improving-texture-sampling-quality-and-performance-with-mipmaps",
        "doc://com.apple.metal/documentation/Metal/creating-a-mipmapped-texture",
        "doc://com.apple.metal/documentation/Metal/copying-data-into-or-out-of-mipmaps",
        "doc://com.apple.metal/documentation/Metal/adding-mipmap-filtering-to-samplers",
        "doc://com.apple.metal/documentation/Metal/restricting-access-to-specific-mipmaps",
        "doc://com.apple.metal/documentation/Metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries",
        "doc://com.apple.metal/documentation/Metal/dynamically-adjusting-texture-level-of-detail"
      ],
      "title": "Texture Mipmapping"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Texture-Mipmapping",
              "generated": true,
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/improving-texture-sampling-quality-and-performance-with-mipmaps",
                "doc://com.apple.metal/documentation/Metal/creating-a-mipmapped-texture",
                "doc://com.apple.metal/documentation/Metal/copying-data-into-or-out-of-mipmaps",
                "doc://com.apple.metal/documentation/Metal/adding-mipmap-filtering-to-samplers",
                "doc://com.apple.metal/documentation/Metal/restricting-access-to-specific-mipmaps",
                "doc://com.apple.metal/documentation/Metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries",
                "doc://com.apple.metal/documentation/Metal/dynamically-adjusting-texture-level-of-detail"
              ],
              "title": "Texture Mipmapping"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1generateMipmaps(for:)/title",
          "value": "generateMipmapsForTexture:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1generateMipmaps(for:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "generateMipmapsForTexture:"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/metal/generating-mipmap-data"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/metal/generating-mipmap-data"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
