{
  "abstract": [
    {
      "text": "Specify which mipmaps that the data transfer affects.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.metal/documentation/Metal",
        "doc://com.apple.metal/documentation/Metal/textures"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.metal/documentation/Metal/copying-data-into-or-out-of-mipmaps"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Metal"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Copying Data into or out of Mipmaps"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you copy data between resources, and the source or destination is a texture, specify which mipmaps that the data transfer affects.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Copy-Data-from-System-Memory-to-a-Mipmap",
          "level": 3,
          "text": "Copy Data from System Memory to a Mipmap",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you copy data from system memory into a texture, using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLTexture/replace(region:mipmapLevel:withBytes:bytesPerRow:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " or similar method, state which mipmap is the destination of that copy.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a 3D region, where image is a CGContext object.",
                    "let image = <#CGContext#>",
                    "let region: MTLRegion = MTLRegionMake3D(0, 0, 0, image.width, image.height, 1)",
                    "",
                    "// Replace the region in the texture.",
                    "texture.replace(region: region, mipmapLevel: 0, withBytes: image.data!, bytesPerRow: image.bytesPerRow)"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "MTLRegion region = {",
                    "    { 0, 0, 0 },                   // MTLOrigin",
                    "    {image.width, image.height, 1} // MTLSize",
                    "};",
                    "",
                    "[texture replaceRegion:region",
                    "           mipmapLevel:0",
                    "             withBytes:image.data.bytes",
                    "           bytesPerRow:bytesPerRow];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Call this routine once for each mipmap you want to fill, changing the region to match the size of the mipmap level youâ€™re writing to.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Copy-Mipmap-Data-Between-Metal-Resources",
          "level": 3,
          "text": "Copy Mipmap Data Between Metal Resources",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "If you already have data in Metal resources, use a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to copy data to and from different mipmaps in a texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To copy all matching data between two textures, encode a command using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:to:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ": method. The two textures must have the same pixel format and type. Metal copies all matching mipmap sizes to the destination texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "To copy a selection of mipmaps from one texture to another, use the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:to:destinationSlice:destinationLevel:sliceCount:levelCount:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method. Specify the first source mipmap level and first destination mipmap level, both of which must have the same dimensions. Also specify the number of mipmap levels you want to copy.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For example, the following code assumes that the destination texture is twice as large in both dimensions as the source texture. Mipmap ",
              "type": "text"
            },
            {
              "code": "1",
              "type": "codeVoice"
            },
            {
              "text": " in the destination matches the size of the source mipmap ",
              "type": "text"
            },
            {
              "code": "0",
              "type": "codeVoice"
            },
            {
              "text": ", so the code passes ",
              "type": "text"
            },
            {
              "code": "0",
              "type": "codeVoice"
            },
            {
              "text": " as the source level and ",
              "type": "text"
            },
            {
              "code": "1",
              "type": "codeVoice"
            },
            {
              "text": " as the destination level. It also passes ",
              "type": "text"
            },
            {
              "code": "5",
              "type": "codeVoice"
            },
            {
              "text": " as the level count to copy ",
              "type": "text"
            },
            {
              "code": "5",
              "type": "codeVoice"
            },
            {
              "text": " mipmaps.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Copy mipmap data between MTLTexture objects.",
                    "let source = <#MTLTexture#>, destination = <#MTLTexture#>",
                    "            ",
                    "encoder.copy(from: source, sourceSlice: 0, sourceLevel: 0, to: destination, destinationSlice: 0,",
                    "             destinationLevel: 1, sliceCount: 1, levelCount: 5)"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "[encoder copyFromTexture: source",
                    "    sourceSlice: 0",
                    "    sourceLevel: 0",
                    "    toTexture: destination",
                    "    destinationSlice: 0",
                    "    destinationLevel: 1",
                    "    sliceCount: 1",
                    "    levelCount: 5];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "If you need to copy data between buffers and textures, encode a separate blit command for each mipmap level to copy. See ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " for other methods that copy data to and from textures.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.metal/documentation/Metal": {
      "abstract": [
        {
          "text": "Render advanced 3D graphics and compute data in parallel with graphics processors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal",
      "type": "topic",
      "url": "/documentation/metal"
    },
    "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder": {
      "abstract": [
        {
          "text": "An interface you can use to encode GPU commands that copy and modify the underlying memory of various Metal resources.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MTLBlitCommandEncoder"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MTLBlitCommandEncoder"
        }
      ],
      "role": "symbol",
      "title": "MTLBlitCommandEncoder",
      "type": "topic",
      "url": "/documentation/metal/mtlblitcommandencoder"
    },
    "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:to:destinationSlice:destinationLevel:sliceCount:levelCount:)": {
      "abstract": [
        {
          "text": "Encodes a command that copies slices of a texture to another textureâ€™s slices.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "copy"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceSlice"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceLevel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationSlice"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationLevel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sliceCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "levelCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:to:destinationSlice:destinationLevel:sliceCount:levelCount:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "copy(from:sourceSlice:sourceLevel:to:destinationSlice:destinationLevel:sliceCount:levelCount:)",
      "type": "topic",
      "url": "/documentation/metal/mtlblitcommandencoder/copy(from:sourceslice:sourcelevel:to:destinationslice:destinationlevel:slicecount:levelcount:)"
    },
    "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:to:)": {
      "abstract": [
        {
          "text": "Encodes a command that copies data from one texture to another.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "copy"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:to:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "copyFromTexture:toTexture:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "copy(from:to:)",
      "type": "topic",
      "url": "/documentation/metal/mtlblitcommandencoder/copy(from:to:)"
    },
    "doc://com.apple.metal/documentation/Metal/MTLTexture/replace(region:mipmapLevel:withBytes:bytesPerRow:)": {
      "abstract": [
        {
          "text": "Copies a block of pixels into a section of texture slice 0.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "replace"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "region"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLRegion",
          "text": "MTLRegion"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "mipmapLevel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "withBytes"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SV",
          "text": "UnsafeRawPointer"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "bytesPerRow"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLTexture/replace(region:mipmapLevel:withBytes:bytesPerRow:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "replaceRegion:mipmapLevel:withBytes:bytesPerRow:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "replace(region:mipmapLevel:withBytes:bytesPerRow:)",
      "type": "topic",
      "url": "/documentation/metal/mtltexture/replace(region:mipmaplevel:withbytes:bytesperrow:)"
    },
    "doc://com.apple.metal/documentation/Metal/adding-mipmap-filtering-to-samplers": {
      "abstract": [
        {
          "text": "Specify how the GPU samples mipmaps in your textures.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/adding-mipmap-filtering-to-samplers",
      "kind": "article",
      "role": "article",
      "title": "Adding Mipmap Filtering to Samplers",
      "type": "topic",
      "url": "/documentation/metal/adding-mipmap-filtering-to-samplers"
    },
    "doc://com.apple.metal/documentation/Metal/creating-a-mipmapped-texture": {
      "abstract": [
        {
          "text": "Decide whether a texture that youâ€™re creating needs mipmaps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/creating-a-mipmapped-texture",
      "kind": "article",
      "role": "article",
      "title": "Creating a Mipmapped Texture",
      "type": "topic",
      "url": "/documentation/metal/creating-a-mipmapped-texture"
    },
    "doc://com.apple.metal/documentation/Metal/dynamically-adjusting-texture-level-of-detail": {
      "abstract": [
        {
          "text": "Defer generating or loading larger mipmaps until that level of detail is needed.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/dynamically-adjusting-texture-level-of-detail",
      "kind": "article",
      "role": "article",
      "title": "Dynamically Adjusting Texture Level of Detail",
      "type": "topic",
      "url": "/documentation/metal/dynamically-adjusting-texture-level-of-detail"
    },
    "doc://com.apple.metal/documentation/Metal/generating-mipmap-data": {
      "abstract": [
        {
          "text": "Create your mipmaps either when you author content or at runtime.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/generating-mipmap-data",
      "kind": "article",
      "role": "article",
      "title": "Generating Mipmap Data",
      "type": "topic",
      "url": "/documentation/metal/generating-mipmap-data"
    },
    "doc://com.apple.metal/documentation/Metal/improving-texture-sampling-quality-and-performance-with-mipmaps": {
      "abstract": [
        {
          "text": "Avoid texture-rendering artifacts and reduce the GPUâ€™s workload by creating smaller versions of a texture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/improving-texture-sampling-quality-and-performance-with-mipmaps",
      "kind": "article",
      "role": "article",
      "title": "Improving Texture Sampling Quality and Performance with Mipmaps",
      "type": "topic",
      "url": "/documentation/metal/improving-texture-sampling-quality-and-performance-with-mipmaps"
    },
    "doc://com.apple.metal/documentation/Metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries": {
      "abstract": [
        {
          "text": "Determine in advance which mipmap levels the GPU requires to sample a texture.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries",
      "kind": "article",
      "role": "article",
      "title": "Predicting Which Mips the GPU Samples with Level-of-Detail Queries",
      "type": "topic",
      "url": "/documentation/metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries"
    },
    "doc://com.apple.metal/documentation/Metal/restricting-access-to-specific-mipmaps": {
      "abstract": [
        {
          "text": "Set the range of mipmap levels that a sampler can access.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/restricting-access-to-specific-mipmaps",
      "kind": "article",
      "role": "article",
      "title": "Restricting Access to Specific Mipmaps",
      "type": "topic",
      "url": "/documentation/metal/restricting-access-to-specific-mipmaps"
    },
    "doc://com.apple.metal/documentation/Metal/textures": {
      "abstract": [
        {
          "text": "Create and manage typed data your app uses to exchange information with its shader functions.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/textures",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Textures",
      "type": "topic",
      "url": "/documentation/metal/textures"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Texture-Mipmapping",
      "generated": true,
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/improving-texture-sampling-quality-and-performance-with-mipmaps",
        "doc://com.apple.metal/documentation/Metal/creating-a-mipmapped-texture",
        "doc://com.apple.metal/documentation/Metal/generating-mipmap-data",
        "doc://com.apple.metal/documentation/Metal/adding-mipmap-filtering-to-samplers",
        "doc://com.apple.metal/documentation/Metal/restricting-access-to-specific-mipmaps",
        "doc://com.apple.metal/documentation/Metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries",
        "doc://com.apple.metal/documentation/Metal/dynamically-adjusting-texture-level-of-detail"
      ],
      "title": "Texture Mipmapping"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Texture-Mipmapping",
              "generated": true,
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/improving-texture-sampling-quality-and-performance-with-mipmaps",
                "doc://com.apple.metal/documentation/Metal/creating-a-mipmapped-texture",
                "doc://com.apple.metal/documentation/Metal/generating-mipmap-data",
                "doc://com.apple.metal/documentation/Metal/adding-mipmap-filtering-to-samplers",
                "doc://com.apple.metal/documentation/Metal/restricting-access-to-specific-mipmaps",
                "doc://com.apple.metal/documentation/Metal/predicting-which-mips-the-gpu-samples-with-level-of-detail-queries",
                "doc://com.apple.metal/documentation/Metal/dynamically-adjusting-texture-level-of-detail"
              ],
              "title": "Texture Mipmapping"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:to:)/title",
          "value": "copyFromTexture:toTexture:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:to:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "copyFromTexture:toTexture:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLTexture~1replace(region:mipmapLevel:withBytes:bytesPerRow:)/title",
          "value": "replaceRegion:mipmapLevel:withBytes:bytesPerRow:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLTexture~1replace(region:mipmapLevel:withBytes:bytesPerRow:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "replaceRegion:mipmapLevel:withBytes:bytesPerRow:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder/title",
          "value": "MTLBlitCommandEncoder"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "MTLBlitCommandEncoder"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder/navigatorTitle",
          "value": [
            {
              "kind": "identifier",
              "text": "MTLBlitCommandEncoder"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceSlice:sourceLevel:to:destinationSlice:destinationLevel:sliceCount:levelCount:)/title",
          "value": "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceSlice:sourceLevel:to:destinationSlice:destinationLevel:sliceCount:levelCount:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/metal/copying-data-into-or-out-of-mipmaps"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/metal/copying-data-into-or-out-of-mipmaps"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
