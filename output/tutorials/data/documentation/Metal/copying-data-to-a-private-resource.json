{
  "abstract": [
    {
      "text": "Use a blit command encoder to copy buffer or texture data to a private resource.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.metal/documentation/Metal",
        "doc://com.apple.metal/documentation/Metal/resource-fundamentals"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.metal/documentation/Metal/copying-data-to-a-private-resource"
  },
  "kind": "article",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "modules": [
      {
        "name": "Metal"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Copying Data to a Private Resource"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Resources with an ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLStorageMode/private",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " storage mode are accessible only to the GPU. Private resources perform better than shared resources, and you don’t have to explicitly synchronize them the way you do for managed resources.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "However, because private resources aren’t accessible to the CPU, you can’t populate them with it. To write data from the CPU to a private resource, you must first write the data to a shared or managed resource. You can then copy the data from that resource to the private resource.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For more information about resource storage modes, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/setting-resource-storage-modes",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Copying-Data-from-a-Shared-Buffer-to-a-Private-Buffer",
          "level": 3,
          "text": "Copying Data from a Shared Buffer to a Private Buffer",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "First, create a shared buffer and populate its contents using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLDevice/makeBuffer(bytes:length:options:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create and populate a source buffer.",
                    "let bufferData = <#UnsafeRawPointer#>, bufferLength = <#Int#>",
                    "let bufferOptions = MTLResourceOptions.storageModeShared",
                    "if let sourceBuffer = device.makeBuffer(bytes: bufferData, length: bufferLength, options: bufferOptions) {",
                    "    ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create and populate a source buffer.",
                    "id <MTLBuffer> _sourceBuffer;",
                    "_sourceBuffer = [_device newBufferWithBytes:bufferData",
                    "                                     length:bufferLength",
                    "                                    options:MTLResourceStorageModeShared];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Next, create a private buffer that’s large enough to store your buffer data using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLDevice/makeBuffer(length:options:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a private buffer.",
                    "if let privateBuffer = device.makeBuffer(length: bufferLength, options: .storageModePrivate) {",
                    "    ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create a private buffer.",
                    "id <MTLBuffer> _privateBuffer;",
                    "_privateBuffer = [_device newBufferWithLength:bufferLength",
                    "                                      options:MTLResourceStorageModePrivate];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, encode and commit a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceOffset:to:destinationOffset:size:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " command. Set the shared buffer as the ",
              "type": "text"
            },
            {
              "code": "sourceBuffer",
              "type": "codeVoice"
            },
            {
              "text": " parameter. Set the private buffer as the ",
              "type": "text"
            },
            {
              "code": "destinationBuffer",
              "type": "codeVoice"
            },
            {
              "text": " parameter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a command buffer for GPU work.",
                    "guard let commandBuffer = commandQueue.makeCommandBuffer() else { return }",
                    "",
                    "// Create a blit command encoder.",
                    "guard let blitCommandEncoder = commandBuffer.makeBlitCommandEncoder() else { return }",
                    "",
                    "// Copy data from the source buffer to the private buffer.",
                    "let sourceBuffer = <#MTLBuffer#>, privateBuffer = <#MTLBuffer#>, bufferLength = <#Int#>",
                    "blitCommandEncoder.copy(from: sourceBuffer, sourceOffset: 0, to: privateBuffer, destinationOffset: 0, size: bufferLength)",
                    "blitCommandEncoder.endEncoding()",
                    "",
                    "// Add a completion handler and commit the command buffer.",
                    "let commandBufferHandler = <#MTLCommandBufferHandler#>",
                    "commandBuffer.addCompletedHandler(commandBufferHandler)",
                    "commandBuffer.commit()"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create a command buffer for GPU work.",
                    "id <MTLCommandBuffer> commandBuffer = [_commandQueue commandBuffer];",
                    "",
                    "// Encode a blit pass to copy data from the source buffer to the private buffer.",
                    "id <MTLBlitCommandEncoder> blitCommandEncoder = [commandBuffer blitCommandEncoder];",
                    "[blitCommandEncoder copyFromBuffer:_sourceBuffer",
                    "                      sourceOffset:0",
                    "                          toBuffer:_privateBuffer",
                    "                 destinationOffset:0 size:bufferLength];",
                    "[blitCommandEncoder endEncoding];",
                    "",
                    "// Add a completion handler and commit the command buffer.",
                    "[commandBuffer addCompletedHandler:^(id<MTLCommandBuffer> cb) {",
                    "    // Populate private buffer.",
                    "}];",
                    "[commandBuffer commit];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "In macOS, Metal doesn’t reformat buffer contents or layout to improve GPU access. There’s no difference in GPU performance between managed or private buffers, so there’s no performance benefit in copying data from a managed buffer to a private buffer.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Note",
          "style": "note",
          "type": "aside"
        },
        {
          "anchor": "Copying-Data-from-a-Shared-Buffer-to-a-Private-Texture",
          "level": 3,
          "text": "Copying Data from a Shared Buffer to a Private Texture",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this implementation to copy texture data from the CPU to a private texture in one operation, without having to synchronize a managed texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "First, create a shared buffer and populate its contents with your texture data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create and populate a source buffer with texture data.",
                    "let textureData = <#UnsafeRawPointer#>, textureSize = <#MTLSize#>",
                    "let textureLength = pixelSize * textureSize.width * textureSize.height",
                    "let textureOptions = MTLResourceOptions.storageModeShared",
                    "if let sourceBuffer = device.makeBuffer(bytes: textureData, length: textureLength, options: textureOptions) {",
                    "    ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create and populate a source buffer with texture data.",
                    "id <MTLBuffer> _sourceBuffer;",
                    "_sourceBuffer = [_device newBufferWithBytes:textureData",
                    "                                     length:pixelSize*textureSize.width*textureSize.height",
                    "                                    options:MTLResourceStorageModeShared];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Next, create a private texture with a suitable configuration for the texture data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a texture descriptor.",
                    "let textureDescriptor = MTLTextureDescriptor.texture2DDescriptor(pixelFormat: .bgra8Unorm,",
                    "                                                                 width: textureSize.width,",
                    "                                                                 height: textureSize.height,",
                    "                                                                 mipmapped: true)",
                    "",
                    "// Set the texture descriptor's storage mode to private.",
                    "textureDescriptor.storageMode = MTLStorageMode.private",
                    "",
                    "// Create a private texture from the descriptor.",
                    "let privateTexture = device.makeTexture(descriptor: textureDescriptor)"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create a texture descriptor.",
                    "MTLTextureDescriptor *textureDescriptor = [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatRGBA8Unorm",
                    "                                                                                             width:textureSize.width",
                    "                                                                                            height:textureSize.height",
                    "                                                                                         mipmapped:NO];",
                    "",
                    "// Set the texture descriptor's storage mode to private.",
                    "textureDescriptor.storageMode = MTLStorageModePrivate;",
                    "",
                    "// Create a private texture.",
                    "id <MTLTexture> _privateTexture;",
                    "_privateTexture = [_device newTextureWithDescriptor:textureDescriptor];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, encode and commit a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " command. Set the shared buffer as the ",
              "type": "text"
            },
            {
              "code": "sourceBuffer",
              "type": "codeVoice"
            },
            {
              "text": " parameter. Set the private texture as the ",
              "type": "text"
            },
            {
              "code": "destinationTexture",
              "type": "codeVoice"
            },
            {
              "text": " parameter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a command buffer for GPU work.",
                    "guard let commandBuffer = commandQueue.makeCommandBuffer() else { return }",
                    "",
                    "// Create a blit command encoder.",
                    "guard let blitCommandEncoder = commandBuffer.makeBlitCommandEncoder() else { return }",
                    "",
                    "// Copy data from the source buffer to the private texture.",
                    "sourceBuffer = <#MTLBuffer#>, textureSize = <#MTLSize#>, privateTexture = <#MTLTexture#>, textureOrigin = <#MTLOrigin#>",
                    "let bytesPerRow = pixelSize * textureSize.width",
                    "let bytesPerImage = pixelSize * textureSize.width * textureSize.height",
                    "blitCommandEncoder.copy(from: sourceBuffer, sourceOffset: 0, sourceBytesPerRow: bytesPerRow,",
                    "                        sourceBytesPerImage: bytesPerImage, sourceSize: textureSize, to: privateTexture,",
                    "                        destinationSlice: 0, destinationLevel: 0, destinationOrigin: textureOrigin)",
                    "blitCommandEncoder.endEncoding()",
                    "",
                    "// Add a completion handler and commit the command buffer.",
                    "let commandBufferHandler = <#MTLCommandBufferHandler#>",
                    "commandBuffer.addCompletedHandler(commandBufferHandler)",
                    "commandBuffer.commit()"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create a command buffer for GPU work.",
                    "id <MTLCommandBuffer> commandBuffer = [_commandQueue commandBuffer];",
                    "",
                    "// Encode a blit pass to copy data from the source buffer to the private texture.",
                    "id <MTLBlitCommandEncoder> blitCommandEncoder = [commandBuffer blitCommandEncoder];",
                    "[blitCommandEncoder copyFromBuffer:_sourceBuffer",
                    "                      sourceOffset:0",
                    "                 sourceBytesPerRow:pixelSize*textureSize.width",
                    "               sourceBytesPerImage:pixelSize*textureSize.width*textureSize.height",
                    "                        sourceSize:textureSize",
                    "                         toTexture:_privateTexture",
                    "                  destinationSlice:0",
                    "                  destinationLevel:0",
                    "                 destinationOrigin:textureOrigin];",
                    "[blitCommandEncoder endEncoding];",
                    "",
                    "// Add a completion handler and commit the command buffer.",
                    "[commandBuffer addCompletedHandler:^(id<MTLCommandBuffer> cb) {",
                    "    // Private texture is populated.",
                    "}];",
                    "[commandBuffer commit];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "anchor": "Copying-Data-from-a-Shared-or-Managed-Texture-to-a-Private-Texture",
          "level": 3,
          "text": "Copying Data from a Shared or Managed Texture to a Private Texture",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "First, create a shared texture or for Mac apps, a managed texture. For more information about creating buffers and textures with specific storage modes, see ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/setting-resource-storage-modes",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "Then populate the contents of the source texture using the ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLTexture/replace(region:mipmapLevel:withBytes:bytesPerRow:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " method.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create and populate a source texture.",
                    "let sourceTexture = device.makeTexture(descriptor: textureDescriptor)",
                    "let region = MTLRegionMake2D(textureOrigin.x, textureOrigin.y, textureSize.width, textureSize.height)",
                    "let textureData = <#UnsafeRawPointer#>",
                    "let bytesPerRow = pixelSize * textureSize.width",
                    "sourceTexture.replace(region: region, mipmapLevel: 0, withBytes: textureData, bytesPerRow: bytesPerRow)"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create and populate a source texture.",
                    "id <MTLTexture> _sourceTexture;",
                    "_sourceTexture = [_device newTextureWithDescriptor:textureDescriptor];",
                    "[_sourceTexture replaceRegion:MTLRegionMake2D(textureOrigin.x, textureOrigin.y, textureSize.width, textureSize.height)",
                    "                  mipmapLevel:0",
                    "                    withBytes:textureData",
                    "                  bytesPerRow:pixelSize*textureSize.width];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Next, create a private texture with a suitable configuration for your texture data. If appropriate, reuse the texture descriptor that you configured for the shared or managed texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Set the texture descriptor's storage mode to private.",
                    "textureDescriptor.storageMode = MTLStorageMode.private",
                    "",
                    "// Create a private texture from the descriptor.",
                    "let privateTexture = device.makeTexture(descriptor: textureDescriptor)"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Set the texture descriptor's storage mode to `MTLStorageModePrivate`.",
                    "textureDescriptor.storageMode = MTLStorageModePrivate;",
                    "",
                    "// Create a private texture.",
                    "id <MTLTexture> _privateTexture;",
                    "_privateTexture = [_device newTextureWithDescriptor:textureDescriptor];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, encode and commit a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " command. Set the shared or managed texture as the ",
              "type": "text"
            },
            {
              "code": "sourceTexture",
              "type": "codeVoice"
            },
            {
              "text": " parameter. Set the private texture as the ",
              "type": "text"
            },
            {
              "code": "destinationTexture",
              "type": "codeVoice"
            },
            {
              "text": " parameter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a command buffer for GPU work.",
                    "guard let commandBuffer = commandQueue.makeCommandBuffer() else { return }",
                    "",
                    "// Create a blit command encoder.",
                    "guard let blitCommandEncoder = commandBuffer.makeBlitCommandEncoder() else { return }",
                    "",
                    "// Copy data from the source texture to the private texture.",
                    "blitCommandEncoder.copy(from: sourceTexture, sourceSlice: 0, sourceLevel: 0, sourceOrigin: textureOrigin,",
                    "                        sourceSize: textureSize, to: privateTexture, destinationSlice: 0, destinationLevel: 0,",
                    "                        destinationOrigin: textureOrigin)",
                    "blitCommandEncoder.endEncoding()",
                    "",
                    "// Add a completion handler and commit the command buffer.",
                    "let commandBufferHandler = <#MTLCommandBufferHandler#>",
                    "commandBuffer.addCompletedHandler(commandBufferHandler)",
                    "commandBuffer.commit()"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create a command buffer for GPU work.",
                    "id <MTLCommandBuffer> commandBuffer = [_commandQueue commandBuffer];",
                    "",
                    "// Encode a blit pass to copy data from the source texture to the private texture.",
                    "id <MTLBlitCommandEncoder> blitCommandEncoder = [commandBuffer blitCommandEncoder];",
                    "[blitCommandEncoder copyFromTexture:_sourceTexture",
                    "                        sourceSlice:0",
                    "                        sourceLevel:0",
                    "                       sourceOrigin:textureOrigin",
                    "                         sourceSize:textureSize",
                    "                          toTexture:_privateTexture",
                    "                   destinationSlice:0",
                    "                   destinationLevel:0",
                    "                  destinationOrigin:textureOrigin];",
                    "[blitCommandEncoder endEncoding];",
                    "",
                    "// Add a completion handler and commit the command buffer.",
                    "[commandBuffer addCompletedHandler:^(id<MTLCommandBuffer> cb) {",
                    "    // Private texture is populated.",
                    "}];",
                    "[commandBuffer commit];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Copying data from a managed texture to a private texture involves two copy operations. For the first operation, Metal synchronizes the managed texture and copies the texture data from CPU-accessible memory to GPU-accessible memory. For the second operation, Metal copies the texture data from the managed texture to the private texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Copying-Data-from-a-Private-Texture-to-a-Shared-Buffer",
          "level": 3,
          "text": "Copying Data from a Private Texture to a Shared Buffer",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Use this implementation to copy texture data from the GPU to a shared buffer, without having to synchronize a managed texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "First, create a private texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a texture descriptor.",
                    "let textureDescriptor = MTLTextureDescriptor.texture2DDescriptor(pixelFormat: .bgra8Unorm,",
                    "                                                                 width: textureSize.width,",
                    "                                                                 height: textureSize.height,",
                    "                                                                 mipmapped: false)",
                    "",
                    "// Set the texture descriptor's storage mode to private.",
                    "textureDescriptor.storageMode = MTLStorageMode.private",
                    "",
                    "// Create a private texture from the descriptor.",
                    "let sourceTexture = device.makeTexture(descriptor: textureDescriptor)"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create a texture descriptor.",
                    "MTLTextureDescriptor *textureDescriptor = [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatRGBA8Unorm",
                    "                                                                                             width:textureSize.width",
                    "                                                                                            height:textureSize.height",
                    "                                                                                         mipmapped:NO];",
                    "",
                    "// Set the texture descriptor's storage mode to `MTLStorageModePrivate`.",
                    "textureDescriptor.storageMode = MTLStorageModePrivate;",
                    "",
                    "// Create a private texture.",
                    "id <MTLTexture> _sourceTexture;",
                    "_sourceTexture = [_device newTextureWithDescriptor:textureDescriptor];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Next, create a shared buffer that’s large enough to store your texture data.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a shared buffer.",
                    "let textureLength = pixelSize * textureSize.width * textureSize.height",
                    "let textureOptions = MTLResourceOptions.storageModeShared",
                    "if let sourceBuffer = device.makeBuffer(length: textureLength, options: textureOptions) {",
                    "    ...",
                    "}"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create a shared buffer.",
                    "id <MTLBuffer> _sharedBuffer;",
                    "_sharedBuffer = [_device newBufferWithLength: pixelSize*textureSize.width*textureSize.height",
                    "                                     options: MTLResourceStorageModeShared];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Next, encode a compute, render, or blit pass to populate the contents of your private texture.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a command buffer for GPU work.",
                    "guard let commandBuffer = commandQueue.makeCommandBuffer() else { return }",
                    "",
                    "// Encode a compute, render, or blit pass to populate the source texture's contents.",
                    "..."
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Create a command buffer for GPU work.",
                    "id <MTLCommandBuffer> commandBuffer = [_commandQueue commandBuffer];",
                    "",
                    "/* Encode a compute, render, or blit pass to populate the source texture's contents. */",
                    "/* ... */"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        },
        {
          "inlineContent": [
            {
              "text": "Finally, encode and commit a ",
              "type": "text"
            },
            {
              "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:)",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " command. Set the private texture as the ",
              "type": "text"
            },
            {
              "code": "sourceTexture",
              "type": "codeVoice"
            },
            {
              "text": " parameter. Set the shared buffer as the ",
              "type": "text"
            },
            {
              "code": "destinationBuffer",
              "type": "codeVoice"
            },
            {
              "text": " parameter.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "tabs": [
            {
              "content": [
                {
                  "code": [
                    "// Create a blit command encoder.",
                    "guard let blitCommandEncoder = commandBuffer.makeBlitCommandEncoder() else { return }",
                    "",
                    "// Encode a blit pass to copy data from the source texture to the shared buffer.",
                    "let bytesPerRow = pixelSize * textureSize.width",
                    "let bytesPerImage = pixelSize * textureSize.width * textureSize.height",
                    "let privateBuffer = <#MTLBuffer#>, bufferLength = <#Int#>",
                    "blitCommandEncoder.copy(from: sourceTexture, sourceSlice: 0, sourceLevel: 0,",
                    "                        sourceOrigin: textureOrigin, sourceSize: textureSize, to: sharedBuffer,",
                    "                        destinationOffset: 0, destinationBytesPerRow: bytesPerRow,",
                    "                        destinationBytesPerImage: bytesPerImage)",
                    "blitCommandEncoder.endEncoding()",
                    "",
                    "// Add a completion handler and commit the command buffer.",
                    "let commandBufferHandler = <#MTLCommandBufferHandler#>",
                    "commandBuffer.addCompletedHandler(commandBufferHandler)",
                    "commandBuffer.commit()"
                  ],
                  "syntax": "swift",
                  "type": "codeListing"
                }
              ],
              "title": "Swift"
            },
            {
              "content": [
                {
                  "code": [
                    "// Encode a blit pass to copy data from the source texture to the shared buffer.",
                    "id <MTLBlitCommandEncoder> blitCommandEncoder = [commandBuffer blitCommandEncoder];",
                    "[blitCommandEncoder copyFromTexture:_sourceTexture",
                    "                        sourceSlice:0",
                    "                        sourceLevel:0",
                    "                       sourceOrigin:textureOrigin",
                    "                         sourceSize:textureSize",
                    "                           toBuffer:_sharedBuffer",
                    "                  destinationOffset:0",
                    "             destinationBytesPerRow:pixelSize*textureSize.width",
                    "           destinationBytesPerImage:pixelSize*textureSize.width*textureSize.height];",
                    "[blitCommandEncoder endEncoding];",
                    "",
                    "// Add a completion handler and commit the command buffer.",
                    "[commandBuffer addCompletedHandler:^(id<MTLCommandBuffer> cb) {",
                    "    // Shared buffer is populated.",
                    "}];",
                    "[commandBuffer commit];"
                  ],
                  "syntax": "objective-c",
                  "type": "codeListing"
                }
              ],
              "title": "Objective-C"
            }
          ],
          "type": "tabNavigator"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.apple.metal/documentation/Metal": {
      "abstract": [
        {
          "text": "Render advanced 3D graphics and compute data in parallel with graphics processors.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal",
      "kind": "symbol",
      "role": "collection",
      "title": "Metal",
      "type": "topic",
      "url": "/documentation/metal"
    },
    "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)": {
      "abstract": [
        {
          "text": "Encodes a command to copy image data from a source buffer into a destination texture.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "copy"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLBuffer",
          "text": "MTLBuffer"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceOffset"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceBytesPerRow"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceBytesPerImage"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceSize"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLSize",
          "text": "MTLSize"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationSlice"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationLevel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationOrigin"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLOrigin",
          "text": "MTLOrigin"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "copy(from:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)",
      "type": "topic",
      "url": "/documentation/metal/mtlblitcommandencoder/copy(from:sourceoffset:sourcebytesperrow:sourcebytesperimage:sourcesize:to:destinationslice:destinationlevel:destinationorigin:)"
    },
    "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceOffset:to:destinationOffset:size:)": {
      "abstract": [
        {
          "text": "Encodes a command that copies data from one buffer into another.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "copy"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLBuffer",
          "text": "MTLBuffer"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceOffset"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLBuffer",
          "text": "MTLBuffer"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationOffset"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "size"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceOffset:to:destinationOffset:size:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "copy(from:sourceOffset:to:destinationOffset:size:)",
      "type": "topic",
      "url": "/documentation/metal/mtlblitcommandencoder/copy(from:sourceoffset:to:destinationoffset:size:)"
    },
    "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:)": {
      "abstract": [
        {
          "text": "Encodes a command that copies image data from a texture slice to a buffer.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "copy"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceSlice"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceLevel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceOrigin"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLOrigin",
          "text": "MTLOrigin"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceSize"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLSize",
          "text": "MTLSize"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLBuffer",
          "text": "MTLBuffer"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationOffset"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationBytesPerRow"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationBytesPerImage"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:)",
      "type": "topic",
      "url": "/documentation/metal/mtlblitcommandencoder/copy(from:sourceslice:sourcelevel:sourceorigin:sourcesize:to:destinationoffset:destinationbytesperrow:destinationbytesperimage:)"
    },
    "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)": {
      "abstract": [
        {
          "text": "Encodes a command that copies image data from a texture’s slice into another slice.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "copy"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceSlice"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceLevel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceOrigin"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLOrigin",
          "text": "MTLOrigin"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "sourceSize"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLSize",
          "text": "MTLSize"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLTexture",
          "text": "MTLTexture"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationSlice"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationLevel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "destinationOrigin"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLOrigin",
          "text": "MTLOrigin"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLBlitCommandEncoder/copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)",
      "type": "topic",
      "url": "/documentation/metal/mtlblitcommandencoder/copy(from:sourceslice:sourcelevel:sourceorigin:sourcesize:to:destinationslice:destinationlevel:destinationorigin:)"
    },
    "doc://com.apple.metal/documentation/Metal/MTLDevice/makeBuffer(bytes:length:options:)": {
      "abstract": [
        {
          "text": "Allocates a new buffer of a given length and initializes its contents by copying existing data into it.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "makeBuffer"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "bytes"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SV",
          "text": "UnsafeRawPointer"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "length"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@MTLResourceOptions",
          "text": "MTLResourceOptions"
        },
        {
          "kind": "text",
          "text": ") -> (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLBuffer",
          "text": "MTLBuffer"
        },
        {
          "kind": "text",
          "text": ")?"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLDevice/makeBuffer(bytes:length:options:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "newBufferWithBytes:length:options:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "makeBuffer(bytes:length:options:)",
      "type": "topic",
      "url": "/documentation/metal/mtldevice/makebuffer(bytes:length:options:)"
    },
    "doc://com.apple.metal/documentation/Metal/MTLDevice/makeBuffer(length:options:)": {
      "abstract": [
        {
          "text": "Creates a buffer the method clears with zero values.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "makeBuffer"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "length"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "options"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@E@MTLResourceOptions",
          "text": "MTLResourceOptions"
        },
        {
          "kind": "text",
          "text": ") -> (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:objc(pl)MTLBuffer",
          "text": "MTLBuffer"
        },
        {
          "kind": "text",
          "text": ")?"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLDevice/makeBuffer(length:options:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "newBufferWithLength:options:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "makeBuffer(length:options:)",
      "type": "topic",
      "url": "/documentation/metal/mtldevice/makebuffer(length:options:)"
    },
    "doc://com.apple.metal/documentation/Metal/MTLStorageMode/private": {
      "abstract": [
        {
          "text": "The resource is only available to the GPU.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "case"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "`private`"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLStorageMode/private",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MTLStorageModePrivate"
        }
      ],
      "role": "symbol",
      "title": "MTLStorageMode.private",
      "type": "topic",
      "url": "/documentation/metal/mtlstoragemode/private"
    },
    "doc://com.apple.metal/documentation/Metal/MTLTexture/replace(region:mipmapLevel:withBytes:bytesPerRow:)": {
      "abstract": [
        {
          "text": "Copies a block of pixels into a section of texture slice 0.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "replace"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "region"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@SA@MTLRegion",
          "text": "MTLRegion"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "mipmapLevel"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "withBytes"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:SV",
          "text": "UnsafeRawPointer"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "bytesPerRow"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/MTLTexture/replace(region:mipmapLevel:withBytes:bytesPerRow:)",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "replaceRegion:mipmapLevel:withBytes:bytesPerRow:"
        }
      ],
      "required": true,
      "role": "symbol",
      "title": "replace(region:mipmapLevel:withBytes:bytesPerRow:)",
      "type": "topic",
      "url": "/documentation/metal/mtltexture/replace(region:mipmaplevel:withbytes:bytesperrow:)"
    },
    "doc://com.apple.metal/documentation/Metal/choosing-a-resource-storage-mode-for-apple-gpus": {
      "abstract": [
        {
          "text": "Select an appropriate storage mode for your textures and buffers on Apple GPUs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/choosing-a-resource-storage-mode-for-apple-gpus",
      "kind": "article",
      "role": "article",
      "title": "Choosing a Resource Storage Mode for Apple GPUs",
      "type": "topic",
      "url": "/documentation/metal/choosing-a-resource-storage-mode-for-apple-gpus"
    },
    "doc://com.apple.metal/documentation/Metal/choosing-a-resource-storage-mode-for-intel-and-amd-gpus": {
      "abstract": [
        {
          "text": "Select an appropriate storage mode for your textures and buffers on AMD and Intel GPUs.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/choosing-a-resource-storage-mode-for-intel-and-amd-gpus",
      "kind": "article",
      "role": "article",
      "title": "Choosing a Resource Storage Mode for Intel and AMD GPUs",
      "type": "topic",
      "url": "/documentation/metal/choosing-a-resource-storage-mode-for-intel-and-amd-gpus"
    },
    "doc://com.apple.metal/documentation/Metal/reducing-the-memory-footprint-of-metal-apps": {
      "abstract": [
        {
          "text": "Learn best practices for using memory efficiently in iOS and tvOS.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/reducing-the-memory-footprint-of-metal-apps",
      "kind": "article",
      "role": "article",
      "title": "Reducing the Memory Footprint of Metal Apps",
      "type": "topic",
      "url": "/documentation/metal/reducing-the-memory-footprint-of-metal-apps"
    },
    "doc://com.apple.metal/documentation/Metal/resource-fundamentals": {
      "abstract": [
        {
          "text": "Learn the common attributes of all Metal memory resources, including buffers and textures, and how to manage the underlying memory.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/resource-fundamentals",
      "kind": "article",
      "role": "collectionGroup",
      "title": "Resource Fundamentals",
      "type": "topic",
      "url": "/documentation/metal/resource-fundamentals"
    },
    "doc://com.apple.metal/documentation/Metal/setting-resource-storage-modes": {
      "abstract": [
        {
          "text": "Set a storage mode that defines the memory location and access permissions of a resource.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/setting-resource-storage-modes",
      "kind": "article",
      "role": "article",
      "title": "Setting Resource Storage Modes",
      "type": "topic",
      "url": "/documentation/metal/setting-resource-storage-modes"
    },
    "doc://com.apple.metal/documentation/Metal/synchronizing-a-managed-resource-in-macos": {
      "abstract": [
        {
          "text": "Manually synchronize memory for a Metal resource in apps.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/synchronizing-a-managed-resource-in-macos",
      "kind": "article",
      "role": "article",
      "title": "Synchronizing a Managed Resource in macOS",
      "type": "topic",
      "url": "/documentation/metal/synchronizing-a-managed-resource-in-macos"
    },
    "doc://com.apple.metal/documentation/Metal/transferring-data-between-connected-gpus": {
      "abstract": [
        {
          "text": "Use high-speed connections between GPUs to transfer data quickly.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.metal/documentation/Metal/transferring-data-between-connected-gpus",
      "kind": "article",
      "role": "article",
      "title": "Transferring Data Between Connected GPUs",
      "type": "topic",
      "url": "/documentation/metal/transferring-data-between-connected-gpus"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Resource-Management",
      "generated": true,
      "identifiers": [
        "doc://com.apple.metal/documentation/Metal/setting-resource-storage-modes",
        "doc://com.apple.metal/documentation/Metal/choosing-a-resource-storage-mode-for-apple-gpus",
        "doc://com.apple.metal/documentation/Metal/choosing-a-resource-storage-mode-for-intel-and-amd-gpus",
        "doc://com.apple.metal/documentation/Metal/synchronizing-a-managed-resource-in-macos",
        "doc://com.apple.metal/documentation/Metal/transferring-data-between-connected-gpus",
        "doc://com.apple.metal/documentation/Metal/reducing-the-memory-footprint-of-metal-apps"
      ],
      "title": "Resource Management"
    }
  ],
  "variantOverrides": [
    {
      "patch": [
        {
          "op": "replace",
          "path": "/identifier/interfaceLanguage",
          "value": "occ"
        },
        {
          "op": "add",
          "path": "/topicSections",
          "value": null
        },
        {
          "op": "replace",
          "path": "/seeAlsoSections",
          "value": [
            {
              "anchor": "Resource-Management",
              "generated": true,
              "identifiers": [
                "doc://com.apple.metal/documentation/Metal/setting-resource-storage-modes",
                "doc://com.apple.metal/documentation/Metal/choosing-a-resource-storage-mode-for-apple-gpus",
                "doc://com.apple.metal/documentation/Metal/choosing-a-resource-storage-mode-for-intel-and-amd-gpus",
                "doc://com.apple.metal/documentation/Metal/synchronizing-a-managed-resource-in-macos",
                "doc://com.apple.metal/documentation/Metal/transferring-data-between-connected-gpus",
                "doc://com.apple.metal/documentation/Metal/reducing-the-memory-footprint-of-metal-apps"
              ],
              "title": "Resource Management"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceOffset:to:destinationOffset:size:)/title",
          "value": "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceOffset:to:destinationOffset:size:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLTexture~1replace(region:mipmapLevel:withBytes:bytesPerRow:)/title",
          "value": "replaceRegion:mipmapLevel:withBytes:bytesPerRow:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLTexture~1replace(region:mipmapLevel:withBytes:bytesPerRow:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "replaceRegion:mipmapLevel:withBytes:bytesPerRow:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLStorageMode~1private/title",
          "value": "MTLStorageModePrivate"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLStorageMode~1private/fragments",
          "value": [
            {
              "kind": "identifier",
              "text": "MTLStorageModePrivate"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:)/title",
          "value": "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)/title",
          "value": "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceSlice:sourceLevel:sourceOrigin:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLDevice~1makeBuffer(bytes:length:options:)/title",
          "value": "newBufferWithBytes:length:options:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLDevice~1makeBuffer(bytes:length:options:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "newBufferWithBytes:length:options:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLDevice~1makeBuffer(length:options:)/title",
          "value": "newBufferWithLength:options:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLDevice~1makeBuffer(length:options:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "newBufferWithLength:options:"
            }
          ]
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)/title",
          "value": "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:"
        },
        {
          "op": "replace",
          "path": "/references/doc:~1~1com.apple.metal~1documentation~1Metal~1MTLBlitCommandEncoder~1copy(from:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:to:destinationSlice:destinationLevel:destinationOrigin:)/fragments",
          "value": [
            {
              "kind": "text",
              "text": "- "
            },
            {
              "kind": "identifier",
              "text": "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:"
            }
          ]
        }
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/metal/copying-data-to-a-private-resource"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    },
    {
      "paths": [
        "/documentation/metal/copying-data-to-a-private-resource"
      ],
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ]
    }
  ]
}
