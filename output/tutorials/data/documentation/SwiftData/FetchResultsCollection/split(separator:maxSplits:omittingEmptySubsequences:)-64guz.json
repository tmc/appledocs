{
  "abstract": [
    {
      "text": "Returns the longest possible subsequences of the sequence, in order,",
      "type": "text"
    },
    {
      "text": " ",
      "type": "text"
    },
    {
      "text": "around elements equal to the given element.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.SwiftData/documentation/SwiftData",
        "doc://com.apple.SwiftData/documentation/SwiftData/FetchResultsCollection"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://com.apple.SwiftData/documentation/SwiftData/FetchResultsCollection/split(separator:maxSplits:omittingEmptySubsequences:)-64guz"
  },
  "kind": "symbol",
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html"
  },
  "metadata": {
    "conformance": {
      "availabilityPrefix": [
        {
          "text": "Available when",
          "type": "text"
        }
      ],
      "conformancePrefix": [
        {
          "text": "Conforms when",
          "type": "text"
        }
      ],
      "constraints": [
        {
          "code": "Element",
          "type": "codeVoice"
        },
        {
          "text": " conforms to ",
          "type": "text"
        },
        {
          "code": "Equatable",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ]
    },
    "extendedModule": "Swift",
    "externalID": "s:STsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSays10ArraySliceVyABGGAB_SiSbtF::SYNTHESIZED::s:9SwiftData22FetchResultsCollectionV",
    "fragments": [
      {
        "kind": "keyword",
        "text": "func"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "split"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "externalParam",
        "text": "separator"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "text": "Self"
      },
      {
        "kind": "text",
        "text": "."
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:ST7ElementQa",
        "text": "Element"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "maxSplits"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Si",
        "text": "Int"
      },
      {
        "kind": "text",
        "text": ", "
      },
      {
        "kind": "externalParam",
        "text": "omittingEmptySubsequences"
      },
      {
        "kind": "text",
        "text": ": "
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:Sb",
        "text": "Bool"
      },
      {
        "kind": "text",
        "text": ") -> ["
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:s10ArraySliceV",
        "text": "ArraySlice"
      },
      {
        "kind": "text",
        "text": "<"
      },
      {
        "kind": "typeIdentifier",
        "text": "Self"
      },
      {
        "kind": "text",
        "text": "."
      },
      {
        "kind": "typeIdentifier",
        "preciseIdentifier": "s:ST7ElementQa",
        "text": "Element"
      },
      {
        "kind": "text",
        "text": ">]"
      }
    ],
    "modules": [
      {
        "name": "SwiftData",
        "relatedModules": [
          "Swift"
        ]
      }
    ],
    "platforms": [
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "17.0",
        "name": "iOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "17.0",
        "name": "iPadOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "17.0",
        "name": "Mac Catalyst",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "14.0",
        "name": "macOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "17.0",
        "name": "tvOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "1.0",
        "name": "visionOS",
        "unavailable": false
      },
      {
        "beta": false,
        "deprecated": false,
        "introducedAt": "10.0",
        "name": "watchOS",
        "unavailable": false
      }
    ],
    "role": "symbol",
    "roleHeading": "Instance Method",
    "symbolKind": "method",
    "title": "split(separator:maxSplits:omittingEmptySubsequences:)"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "Mac Catalyst",
            "macOS",
            "tvOS",
            "visionOS",
            "watchOS"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "split"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "separator"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "typeIdentifier",
              "text": "Self"
            },
            {
              "kind": "text",
              "text": "."
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ST7ElementQa",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ST7ElementQa",
              "text": "Element"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "maxSplits"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Si",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Si",
              "text": "Int"
            },
            {
              "kind": "text",
              "text": " = Int.max, "
            },
            {
              "kind": "externalParam",
              "text": "omittingEmptySubsequences"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:Sb",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": " = true) -> ["
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:s10ArraySliceV",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s10ArraySliceV",
              "text": "ArraySlice"
            },
            {
              "kind": "text",
              "text": "<"
            },
            {
              "kind": "typeIdentifier",
              "text": "Self"
            },
            {
              "kind": "text",
              "text": "."
            },
            {
              "identifier": "doc://com.externally.resolved.symbol/s:ST7ElementQa",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:ST7ElementQa",
              "text": "Element"
            },
            {
              "kind": "text",
              "text": ">]"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "parameters",
      "parameters": [
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The element that should be split upon.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "separator"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "The maximum number of times to split the sequence, or one",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "less than the number of subsequences to return. If ",
                  "type": "text"
                },
                {
                  "code": "maxSplits + 1",
                  "type": "codeVoice"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "subsequences are returned, the last one is a suffix of the original",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "sequence containing the remaining elements. ",
                  "type": "text"
                },
                {
                  "code": "maxSplits",
                  "type": "codeVoice"
                },
                {
                  "text": " must be",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "greater than or equal to zero. The default value is ",
                  "type": "text"
                },
                {
                  "code": "Int.max",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "maxSplits"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "If ",
                  "type": "text"
                },
                {
                  "code": "false",
                  "type": "codeVoice"
                },
                {
                  "text": ", an empty subsequence is",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "returned in the result for each consecutive pair of ",
                  "type": "text"
                },
                {
                  "code": "separator",
                  "type": "codeVoice"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "elements in the sequence and for each instance of ",
                  "type": "text"
                },
                {
                  "code": "separator",
                  "type": "codeVoice"
                },
                {
                  "text": " at the",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "start or end of the sequence. If ",
                  "type": "text"
                },
                {
                  "code": "true",
                  "type": "codeVoice"
                },
                {
                  "text": ", only nonempty subsequences",
                  "type": "text"
                },
                {
                  "text": " ",
                  "type": "text"
                },
                {
                  "text": "are returned. The default value is ",
                  "type": "text"
                },
                {
                  "code": "true",
                  "type": "codeVoice"
                },
                {
                  "text": ".",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "omittingEmptySubsequences"
        }
      ]
    },
    {
      "content": [
        {
          "anchor": "return-value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "An array of subsequences, split from this sequence’s elements.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    },
    {
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "The resulting array consists of at most ",
              "type": "text"
            },
            {
              "code": "maxSplits + 1",
              "type": "codeVoice"
            },
            {
              "text": " subsequences.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Elements that are used to split the sequence are not returned as part of",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "any subsequence.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "The following examples show the effects of the ",
              "type": "text"
            },
            {
              "code": "maxSplits",
              "type": "codeVoice"
            },
            {
              "text": " and",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "omittingEmptySubsequences",
              "type": "codeVoice"
            },
            {
              "text": " parameters when splitting a string at each",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "space character (” “). The first use of ",
              "type": "text"
            },
            {
              "code": "split",
              "type": "codeVoice"
            },
            {
              "text": " returns each word that",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "was originally separated by one or more spaces.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "let line = \"BLANCHE:   I don't want realism. I want magic!\"",
            "print(line.split(separator: \" \")",
            "          .map(String.init))",
            "// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The second example passes ",
              "type": "text"
            },
            {
              "code": "1",
              "type": "codeVoice"
            },
            {
              "text": " for the ",
              "type": "text"
            },
            {
              "code": "maxSplits",
              "type": "codeVoice"
            },
            {
              "text": " parameter, so the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "original string is split just once, into two new strings.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "print(line.split(separator: \" \", maxSplits: 1)",
            "          .map(String.init))",
            "// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "The final example passes ",
              "type": "text"
            },
            {
              "code": "false",
              "type": "codeVoice"
            },
            {
              "text": " for the ",
              "type": "text"
            },
            {
              "code": "omittingEmptySubsequences",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "parameter, so the returned array contains empty strings where spaces",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "were repeated.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "print(line.split(separator: \" \", omittingEmptySubsequences: false)",
            "          .map(String.init))",
            "// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "text": "O(",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "text": "n",
                      "type": "text"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": "), where ",
                  "type": "text"
                },
                {
                  "inlineContent": [
                    {
                      "text": "n",
                      "type": "text"
                    }
                  ],
                  "type": "emphasis"
                },
                {
                  "text": " is the length of the sequence.",
                  "type": "text"
                }
              ],
              "type": "paragraph"
            }
          ],
          "name": "Complexity",
          "style": "note",
          "type": "aside"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://com.apple.SwiftData/documentation/SwiftData": {
      "abstract": [
        {
          "text": "Write your model code declaratively to add managed persistence and efficient",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "model fetching.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.SwiftData/documentation/SwiftData",
      "images": [
        {
          "identifier": "swiftData-PageImage-card.png",
          "type": "card"
        }
      ],
      "kind": "symbol",
      "role": "collection",
      "title": "SwiftData",
      "type": "topic",
      "url": "/documentation/swiftdata"
    },
    "doc://com.apple.SwiftData/documentation/SwiftData/FetchResultsCollection": {
      "abstract": [
        {
          "text": "A collection that efficiently provides the results of a completed fetch.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FetchResultsCollection"
        }
      ],
      "identifier": "doc://com.apple.SwiftData/documentation/SwiftData/FetchResultsCollection",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FetchResultsCollection"
        }
      ],
      "role": "symbol",
      "title": "FetchResultsCollection",
      "type": "topic",
      "url": "/documentation/swiftdata/fetchresultscollection"
    },
    "doc://com.apple.SwiftData/documentation/SwiftData/FetchResultsCollection/split(separator:maxSplits:omittingEmptySubsequences:)-64guz": {
      "abstract": [
        {
          "text": "Returns the longest possible subsequences of the sequence, in order,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "around elements equal to the given element.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "split"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "separator"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "maxSplits"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "omittingEmptySubsequences"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> ["
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s10ArraySliceV",
          "text": "ArraySlice"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">]"
        }
      ],
      "identifier": "doc://com.apple.SwiftData/documentation/SwiftData/FetchResultsCollection/split(separator:maxSplits:omittingEmptySubsequences:)-64guz",
      "kind": "symbol",
      "role": "symbol",
      "title": "split(separator:maxSplits:omittingEmptySubsequences:)",
      "type": "topic",
      "url": "/documentation/swiftdata/fetchresultscollection/split(separator:maxsplits:omittingemptysubsequences:)-64guz"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "abstract": [
        {
          "text": "",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "type": "topic",
      "url": "/documentation/technologies"
    },
    "doc://com.externally.resolved.symbol/s:ST7ElementQa": {
      "abstract": [
        {
          "text": "A type representing the sequence’s elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "associatedtype"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": " == "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST8IteratorQa",
          "text": "Iterator"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:St7ElementQa",
          "text": "Element"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:ST7ElementQa",
      "kind": "symbol",
      "role": "symbol",
      "title": "Element",
      "type": "topic",
      "url": "/documentation/Swift/Sequence/Element"
    },
    "doc://com.externally.resolved.symbol/s:Sb": {
      "abstract": [
        {
          "text": "A value type whose instances are either `true` or `false`.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Bool"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Sb",
      "kind": "symbol",
      "role": "symbol",
      "title": "Bool",
      "type": "topic",
      "url": "/documentation/Swift/Bool"
    },
    "doc://com.externally.resolved.symbol/s:Si": {
      "abstract": [
        {
          "text": "A signed integer value type.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:Si",
      "kind": "symbol",
      "role": "symbol",
      "title": "Int",
      "type": "topic",
      "url": "/documentation/Swift/Int"
    },
    "doc://com.externally.resolved.symbol/s:s10ArraySliceV": {
      "abstract": [
        {
          "text": "A slice of an `Array`, `ContiguousArray`, or `ArraySlice` instance.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "attribute",
          "text": "@frozen"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:s10ArraySliceV",
      "kind": "symbol",
      "role": "symbol",
      "title": "ArraySlice",
      "type": "topic",
      "url": "/documentation/Swift/ArraySlice"
    },
    "swiftData-PageImage-card.png": {
      "alt": "A gray and white Swift logo on a swirly blue background.",
      "identifier": "swiftData-PageImage-card.png",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x",
            "light"
          ],
          "url": "https://docs-assets.developer.apple.com/published/8f347b5f4b93bb57bf95423987e9a6c9/swiftData-PageImage-card@2x.png"
        },
        {
          "traits": [
            "2x",
            "dark"
          ],
          "url": "https://docs-assets.developer.apple.com/published/f0a5e8a43bc94c93e07c48dc59f884ed/swiftData-PageImage-card~dark@2x.png"
        }
      ]
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "paths": [
        "/documentation/swiftdata/fetchresultscollection/split(separator:maxsplits:omittingemptysubsequences:)-64guz"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
