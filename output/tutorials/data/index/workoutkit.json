{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/workoutkit/customizing-workouts-with-workoutkit",
            "title": "Customizing workouts with WorkoutKit",
            "type": "sampleCode"
          },
          {
            "title": "Common workouts",
            "type": "groupMarker"
          },
          {
            "title": "Custom interval workouts",
            "type": "groupMarker"
          },
          {
            "title": "Workout plans and schedules",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/workoutkit",
        "title": "WorkoutKit",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/workoutkit/customizing-workouts-with-workoutkit",
            "title": "Customizing workouts with WorkoutKit",
            "type": "sampleCode"
          },
          {
            "title": "Common workouts",
            "type": "groupMarker"
          },
          {
            "title": "Custom interval workouts",
            "type": "groupMarker"
          },
          {
            "title": "Workout plans and schedules",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/workoutkit",
        "title": "WorkoutKit",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/workoutkit/customizing-workouts-with-workoutkit",
            "title": "Customizing workouts with WorkoutKit",
            "type": "sampleCode"
          },
          {
            "title": "Common workouts",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating single goal workouts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/init(activity:location:swimminglocation:goal:)",
                "title": "init(activity: HKWorkoutActivityType, location: HKWorkoutSessionLocationType, swimmingLocation: HKWorkoutSwimmingLocationType, goal: WorkoutGoal)",
                "type": "init"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/supportsactivity(_:)",
                "title": "static func supportsActivity(HKWorkoutActivityType) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/supportsgoal(_:activity:location:)",
                "title": "static func supportsGoal(WorkoutGoal, activity: HKWorkoutActivityType, location: HKWorkoutSessionLocationType) -> Bool",
                "type": "method"
              },
              {
                "title": "Accessing workout data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/activity",
                "title": "var activity: HKWorkoutActivityType",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/location",
                "title": "var location: HKWorkoutSessionLocationType",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/swimminglocation",
                "title": "var swimmingLocation: HKWorkoutSwimmingLocationType",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/goal",
                "title": "var goal: WorkoutGoal",
                "type": "property"
              },
              {
                "title": "Comparing workouts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/singlegoalworkout/==(_:_:)",
                "title": "static func == (SingleGoalWorkout, SingleGoalWorkout) -> Bool",
                "type": "op"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/singlegoalworkout/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/singlegoalworkout/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/singlegoalworkout",
            "title": "SingleGoalWorkout",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a new pacer workout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/init(activity:location:distance:time:)",
                "title": "init(activity: HKWorkoutActivityType, location: HKWorkoutSessionLocationType, distance: Measurement<UnitLength>, time: Measurement<UnitDuration>)",
                "type": "init"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/supportsactivity(_:)",
                "title": "static func supportsActivity(HKWorkoutActivityType) -> Bool",
                "type": "method"
              },
              {
                "title": "Accessing workout data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/activity",
                "title": "var activity: HKWorkoutActivityType",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/location",
                "title": "var location: HKWorkoutSessionLocationType",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/distance",
                "title": "var distance: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/time",
                "title": "var time: Measurement<UnitDuration>",
                "type": "property"
              },
              {
                "title": "Comparing workouts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/pacerworkout/==(_:_:)",
                "title": "static func == (PacerWorkout, PacerWorkout) -> Bool",
                "type": "op"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/pacerworkout/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/pacerworkout/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/pacerworkout",
            "title": "PacerWorkout",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating new multisport workouts.",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/swimbikerunworkout/init(activities:displayname:)",
                "title": "init(activities: [SwimBikeRunWorkout.Activity], displayName: String?)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Setting valid activities",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/swimbikerunworkout/activity/cycling(_:)",
                    "title": "case cycling(HKWorkoutSessionLocationType)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/swimbikerunworkout/activity/running(_:)",
                    "title": "case running(HKWorkoutSessionLocationType)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/swimbikerunworkout/activity/swimming(_:)",
                    "title": "case swimming(HKWorkoutSwimmingLocationType)",
                    "type": "case"
                  },
                  {
                    "title": "Comparing activities",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/swimbikerunworkout/activity/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/swimbikerunworkout/activity/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/swimbikerunworkout/activity/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/swimbikerunworkout/activity/==(_:_:)",
                    "title": "static func == (SwimBikeRunWorkout.Activity, SwimBikeRunWorkout.Activity) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/swimbikerunworkout/activity/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/swimbikerunworkout/activity/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/swimbikerunworkout/activity",
                "title": "SwimBikeRunWorkout.Activity",
                "type": "enum"
              },
              {
                "path": "/documentation/workoutkit/swimbikerunworkout/supportsactivityordering(_:)",
                "title": "static func supportsActivityOrdering([SwimBikeRunWorkout.Activity]) -> Bool",
                "type": "method"
              },
              {
                "title": "Accessing workout data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/swimbikerunworkout/activities",
                "title": "var activities: [SwimBikeRunWorkout.Activity]",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/swimbikerunworkout/displayname",
                "title": "var displayName: String?",
                "type": "property"
              },
              {
                "title": "Comparing workouts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/swimbikerunworkout/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/swimbikerunworkout/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/swimbikerunworkout/==(_:_:)",
                "title": "static func == (SwimBikeRunWorkout, SwimBikeRunWorkout) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/swimbikerunworkout/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/swimbikerunworkout/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/swimbikerunworkout/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/swimbikerunworkout",
            "title": "SwimBikeRunWorkout",
            "type": "struct"
          },
          {
            "title": "Custom interval workouts",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating custom workouts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/customworkout/init(activity:location:displayname:warmup:blocks:cooldown:)",
                "title": "init(activity: HKWorkoutActivityType, location: HKWorkoutSessionLocationType, displayName: String?, warmup: WorkoutStep?, blocks: [IntervalBlock], cooldown: WorkoutStep?)",
                "type": "init"
              },
              {
                "path": "/documentation/workoutkit/customworkout/supportsactivity(_:)",
                "title": "static func supportsActivity(HKWorkoutActivityType) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/customworkout/supportsalert(_:activity:location:)",
                "title": "static func supportsAlert(WorkoutAlert, activity: HKWorkoutActivityType, location: HKWorkoutSessionLocationType) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/customworkout/supportsgoal(_:activity:location:)",
                "title": "static func supportsGoal(WorkoutGoal, activity: HKWorkoutActivityType, location: HKWorkoutSessionLocationType) -> Bool",
                "type": "method"
              },
              {
                "title": "Accessing workout data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/customworkout/displayname",
                "title": "var displayName: String?",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/customworkout/activity",
                "title": "var activity: HKWorkoutActivityType",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/customworkout/location",
                "title": "var location: HKWorkoutSessionLocationType",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/customworkout/warmup",
                "title": "var warmup: WorkoutStep?",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/customworkout/blocks",
                "title": "var blocks: [IntervalBlock]",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/customworkout/cooldown",
                "title": "var cooldown: WorkoutStep?",
                "type": "property"
              },
              {
                "title": "Comparing workouts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/customworkout/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/customworkout/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/customworkout/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/customworkout/==(_:_:)",
                "title": "static func == (CustomWorkout, CustomWorkout) -> Bool",
                "type": "op"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/customworkout/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/customworkout/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/customworkout",
            "title": "CustomWorkout",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating new workout steps",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/init(goal:alert:)",
                "title": "init(goal: WorkoutGoal, alert: (WorkoutAlert)?)",
                "type": "init"
              },
              {
                "title": "Accessing step data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/alert",
                "title": "var alert: (WorkoutAlert)?",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/goal",
                "title": "var goal: WorkoutGoal",
                "type": "property"
              },
              {
                "title": "Comparing workout steps",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/==(_:_:)",
                "title": "static func == (WorkoutStep, WorkoutStep) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/init(goal:alert:displayname:)",
                "title": "init(goal: WorkoutGoal, alert: (any WorkoutAlert)?, displayName: String?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutstep/displayname",
                "title": "var displayName: String?",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutstep/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/workoutstep/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/workoutstep",
            "title": "WorkoutStep",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating an interval block",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/intervalblock/init(steps:iterations:)",
                "title": "init(steps: [IntervalStep], iterations: Int)",
                "type": "init"
              },
              {
                "title": "Accessing interval block properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/intervalblock/steps",
                "title": "var steps: [IntervalStep]",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/intervalblock/iterations",
                "title": "var iterations: Int",
                "type": "property"
              },
              {
                "title": "Hashing interval blocks",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/intervalblock/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/intervalblock/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/intervalblock/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/intervalblock/==(_:_:)",
                "title": "static func == (IntervalBlock, IntervalBlock) -> Bool",
                "type": "op"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/intervalblock/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/intervalblock/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/intervalblock",
            "title": "IntervalBlock",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating interval steps",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/intervalstep/init(_:goal:alert:)",
                "title": "init(IntervalStep.Purpose, goal: WorkoutGoal, alert: (WorkoutAlert)?)",
                "type": "init"
              },
              {
                "path": "/documentation/workoutkit/intervalstep/init(_:step:)",
                "title": "init(IntervalStep.Purpose, step: WorkoutStep)",
                "type": "init"
              },
              {
                "title": "Accessing step data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/intervalstep/purpose-swift.property",
                "title": "var purpose: IntervalStep.Purpose",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/intervalstep/step",
                "title": "var step: WorkoutStep",
                "type": "property"
              },
              {
                "title": "Comparing interval steps",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/intervalstep/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/intervalstep/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/intervalstep/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/intervalstep/==(_:_:)",
                "title": "static func == (IntervalStep, IntervalStep) -> Bool",
                "type": "op"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Determining the purpose",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum/recovery",
                    "title": "case recovery",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum/work",
                    "title": "case work",
                    "type": "case"
                  },
                  {
                    "title": "Comparing purposes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum/==(_:_:)",
                    "title": "static func == (IntervalStep.Purpose, IntervalStep.Purpose) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/intervalstep/purpose-swift.enum",
                "title": "IntervalStep.Purpose",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/intervalstep/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/intervalstep/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/intervalstep",
            "title": "IntervalStep",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Determining workout goals",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/open",
                "title": "case open",
                "type": "case"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/distance(_:_:)",
                "title": "case distance(Double, UnitLength)",
                "type": "case"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/energy(_:_:)",
                "title": "case energy(Double, UnitEnergy)",
                "type": "case"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/time(_:_:)",
                "title": "case time(Double, UnitDuration)",
                "type": "case"
              },
              {
                "title": "Comparing workout goals",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/==(_:_:)",
                "title": "static func == (WorkoutGoal, WorkoutGoal) -> Bool",
                "type": "op"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutgoal/poolswimdistancewithtime(_:_:)",
                "title": "case poolSwimDistanceWithTime(Measurement<UnitLength>, Measurement<UnitDuration>)",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutgoal/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/workoutgoal/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/workoutgoal",
            "title": "WorkoutGoal",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Determining support",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/supports(activity:location:)",
                "title": "func supports(activity: HKWorkoutActivityType, location: HKWorkoutSessionLocationType) -> Bool",
                "type": "method"
              },
              {
                "title": "Setting the alert metric",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/metric",
                "title": "var metric: WorkoutAlertMetric",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Determining the metric’s type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutalertmetric/average",
                    "title": "case average",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutalertmetric/current",
                    "title": "case current",
                    "type": "case"
                  },
                  {
                    "title": "Accessing the metric’s value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutalertmetric/countperminute",
                    "title": "static var countPerMinute: UnitFrequency",
                    "type": "property"
                  },
                  {
                    "title": "Comparing metrics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutalertmetric/==(_:_:)",
                    "title": "static func == (WorkoutAlertMetric, WorkoutAlertMetric) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutalertmetric/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutalertmetric/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutalertmetric/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/workoutalertmetric/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/workoutalertmetric/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/workoutalertmetric",
                "title": "WorkoutAlertMetric",
                "type": "enum"
              },
              {
                "title": "Creating cadence alerts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/cadence(_:unit:)-y8da",
                "title": "static func cadence(ClosedRange<Double>, unit: UnitFrequency) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating new cadence range alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/cadence(_:unit:)",
                    "title": "static func cadence(ClosedRange<Double>, unit: UnitFrequency) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/init(target:)",
                    "title": "init(target: ClosedRange<Measurement<UnitFrequency>>)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the alert data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/target",
                    "title": "var target: ClosedRange<Measurement<UnitFrequency>>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/targetquantitylowerbound",
                    "title": "var targetQuantityLowerBound: HKQuantity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/targetquantityupperbound",
                    "title": "var targetQuantityUpperBound: HKQuantity",
                    "type": "property"
                  },
                  {
                    "title": "Comparing alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencerangealert/==(_:_:)",
                    "title": "static func == (CadenceRangeAlert, CadenceRangeAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/cadencerangealert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/cadencerangealert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/cadencerangealert/cadence(_:unit:)",
                        "title": "static func cadence(ClosedRange<Double>, unit: UnitFrequency) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/cadencerangealert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/cadencerangealert",
                "title": "CadenceRangeAlert",
                "type": "struct"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/cadence(_:unit:)-3fnpg",
                "title": "static func cadence(Double, unit: UnitFrequency) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating new cadence threshold alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/cadence(_:unit:)",
                    "title": "static func cadence(Double, unit: UnitFrequency) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/init(target:)",
                    "title": "init(target: Measurement<UnitFrequency>)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the alert data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/target",
                    "title": "var target: Measurement<UnitFrequency>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/targetquantity",
                    "title": "var targetQuantity: HKQuantity",
                    "type": "property"
                  },
                  {
                    "title": "Comparing cadence threshold alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/cadencethresholdalert/==(_:_:)",
                    "title": "static func == (CadenceThresholdAlert, CadenceThresholdAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/cadencethresholdalert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/cadencethresholdalert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/cadencethresholdalert/cadence(_:unit:)",
                        "title": "static func cadence(Double, unit: UnitFrequency) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/cadencethresholdalert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/cadencethresholdalert",
                "title": "CadenceThresholdAlert",
                "type": "struct"
              },
              {
                "title": "Creating heart rate alerts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/heartrate(_:unit:)",
                "title": "static func heartRate(ClosedRange<Double>, unit: UnitFrequency) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating new heart rate alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/heartrate(_:unit:)",
                    "title": "static func heartRate(ClosedRange<Double>, unit: UnitFrequency) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/init(target:)",
                    "title": "init(target: ClosedRange<Measurement<UnitFrequency>>)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the alert data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/target",
                    "title": "var target: ClosedRange<Measurement<UnitFrequency>>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/targetquantitylowerbound",
                    "title": "var targetQuantityLowerBound: HKQuantity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/targetquantityupperbound",
                    "title": "var targetQuantityUpperBound: HKQuantity",
                    "type": "property"
                  },
                  {
                    "title": "Comparing heart rate range alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/heartraterangealert/==(_:_:)",
                    "title": "static func == (HeartRateRangeAlert, HeartRateRangeAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/heartraterangealert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/heartraterangealert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/heartraterangealert/heartrate(_:unit:)",
                        "title": "static func heartRate(ClosedRange<Double>, unit: UnitFrequency) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/heartraterangealert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/heartraterangealert",
                "title": "HeartRateRangeAlert",
                "type": "struct"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/heartrate(zone:)",
                "title": "static func heartRate(zone: Int) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating new heart rate zone alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/heartratezonealert/heartrate(zone:)",
                    "title": "static func heartRate(zone: Int) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/heartratezonealert/init(zone:)",
                    "title": "init(zone: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the alert data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/heartratezonealert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/heartratezonealert/zone",
                    "title": "var zone: Int",
                    "type": "property"
                  },
                  {
                    "title": "Comparing heart rate zone alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/heartratezonealert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/heartratezonealert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/heartratezonealert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/heartratezonealert/==(_:_:)",
                    "title": "static func == (HeartRateZoneAlert, HeartRateZoneAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/heartratezonealert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/heartratezonealert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/heartratezonealert/heartrate(zone:)",
                        "title": "static func heartRate(zone: Int) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/heartratezonealert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/heartratezonealert",
                "title": "HeartRateZoneAlert",
                "type": "struct"
              },
              {
                "title": "Creating power alerts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/power(_:unit:)-57ekz",
                "title": "static func power(ClosedRange<Double>, unit: UnitPower) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating new power range alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/power(_:unit:)",
                    "title": "static func power(ClosedRange<Double>, unit: UnitPower) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/init(target:)",
                    "title": "init(target: ClosedRange<Measurement<UnitPower>>)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the alert value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/target",
                    "title": "var target: ClosedRange<Measurement<UnitPower>>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/targetquantitylowerbound",
                    "title": "var targetQuantityLowerBound: HKQuantity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/targetquantityupperbound",
                    "title": "var targetQuantityUpperBound: HKQuantity",
                    "type": "property"
                  },
                  {
                    "title": "Comparing alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/==(_:_:)",
                    "title": "static func == (PowerRangeAlert, PowerRangeAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerrangealert/init(target:metric:)",
                    "title": "init(target: ClosedRange<Measurement<UnitPower>>, metric: WorkoutAlertMetric)",
                    "type": "init"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/powerrangealert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/powerrangealert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/powerrangealert/power(_:unit:)",
                        "title": "static func power(ClosedRange<Double>, unit: UnitPower) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/powerrangealert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/powerrangealert",
                "title": "PowerRangeAlert",
                "type": "struct"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/power(_:unit:)-289mz",
                "title": "static func power(Double, unit: UnitPower) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating power threshold alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/power(_:unit:)",
                    "title": "static func power(Double, unit: UnitPower) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/init(target:)",
                    "title": "init(target: Measurement<UnitPower>)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing alert data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/target",
                    "title": "var target: Measurement<UnitPower>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/targetquantity",
                    "title": "var targetQuantity: HKQuantity",
                    "type": "property"
                  },
                  {
                    "title": "Comparing alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/==(_:_:)",
                    "title": "static func == (PowerThresholdAlert, PowerThresholdAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerthresholdalert/init(target:metric:)",
                    "title": "init(target: Measurement<UnitPower>, metric: WorkoutAlertMetric)",
                    "type": "init"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/powerthresholdalert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/powerthresholdalert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/powerthresholdalert/power(_:unit:)",
                        "title": "static func power(Double, unit: UnitPower) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/powerthresholdalert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/powerthresholdalert",
                "title": "PowerThresholdAlert",
                "type": "struct"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/power(zone:)",
                "title": "static func power(zone: Int) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating power zone alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerzonealert/power(zone:)",
                    "title": "static func power(zone: Int) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/powerzonealert/init(zone:)",
                    "title": "init(zone: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing alert data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerzonealert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerzonealert/zone",
                    "title": "var zone: Int",
                    "type": "property"
                  },
                  {
                    "title": "Comparing alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/powerzonealert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/powerzonealert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/powerzonealert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/powerzonealert/==(_:_:)",
                    "title": "static func == (PowerZoneAlert, PowerZoneAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/powerzonealert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/powerzonealert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/powerzonealert/power(zone:)",
                        "title": "static func power(zone: Int) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/powerzonealert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/powerzonealert",
                "title": "PowerZoneAlert",
                "type": "struct"
              },
              {
                "title": "Creating speed alerts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/speed(_:unit:metric:)-1o2j",
                "title": "static func speed(ClosedRange<Double>, unit: UnitSpeed, metric: WorkoutAlertMetric) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating speed range alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/speed(_:unit:metric:)",
                    "title": "static func speed(ClosedRange<Double>, unit: UnitSpeed, metric: WorkoutAlertMetric) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/init(target:metric:)",
                    "title": "init(target: ClosedRange<Measurement<UnitSpeed>>, metric: WorkoutAlertMetric)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing alert data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/target",
                    "title": "var target: ClosedRange<Measurement<UnitSpeed>>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/targetquantitylowerbound",
                    "title": "var targetQuantityLowerBound: HKQuantity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/targetquantityupperbound",
                    "title": "var targetQuantityUpperBound: HKQuantity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "title": "Comparing alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/speedrangealert/==(_:_:)",
                    "title": "static func == (SpeedRangeAlert, SpeedRangeAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/speedrangealert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/speedrangealert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/speedrangealert/speed(_:unit:metric:)",
                        "title": "static func speed(ClosedRange<Double>, unit: UnitSpeed, metric: WorkoutAlertMetric) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/speedrangealert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/speedrangealert",
                "title": "SpeedRangeAlert",
                "type": "struct"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/speed(_:unit:metric:)-4zald",
                "title": "static func speed(Double, unit: UnitSpeed, metric: WorkoutAlertMetric) -> Self",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating speed threshold alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/speed(_:unit:metric:)",
                    "title": "static func speed(Double, unit: UnitSpeed, metric: WorkoutAlertMetric) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/init(target:metric:)",
                    "title": "init(target: Measurement<UnitSpeed>, metric: WorkoutAlertMetric)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing alert data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/target",
                    "title": "var target: Measurement<UnitSpeed>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/targetquantity",
                    "title": "var targetQuantity: HKQuantity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/metric",
                    "title": "var metric: WorkoutAlertMetric",
                    "type": "property"
                  },
                  {
                    "title": "Comparing alerts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/speedthresholdalert/==(_:_:)",
                    "title": "static func == (SpeedThresholdAlert, SpeedThresholdAlert) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/speedthresholdalert/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/speedthresholdalert/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/speedthresholdalert/speed(_:unit:metric:)",
                        "title": "static func speed(Double, unit: UnitSpeed, metric: WorkoutAlertMetric) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/speedthresholdalert/workoutalert-implementations",
                    "title": "WorkoutAlert Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/speedthresholdalert",
                "title": "SpeedThresholdAlert",
                "type": "struct"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/power(_:unit:metric:)-2847m",
                "title": "static func power(Double, unit: UnitPower, metric: WorkoutAlertMetric) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/workoutalert/power(_:unit:metric:)-5c94p",
                "title": "static func power(ClosedRange<Double>, unit: UnitPower, metric: WorkoutAlertMetric) -> Self",
                "type": "method"
              }
            ],
            "path": "/documentation/workoutkit/workoutalert",
            "title": "WorkoutAlert",
            "type": "protocol"
          },
          {
            "title": "Workout plans and schedules",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a workout plan",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/init(_:id:)",
                "title": "init(WorkoutPlan.Workout, id: UUID)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Setting the workout",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/custom(_:)",
                    "title": "case custom(CustomWorkout)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/goal(_:)",
                    "title": "case goal(SingleGoalWorkout)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/pacer(_:)",
                    "title": "case pacer(PacerWorkout)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/swimbikerun(_:)",
                    "title": "case swimBikeRun(SwimBikeRunWorkout)",
                    "type": "case"
                  },
                  {
                    "title": "Accessing workout data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/activity",
                    "title": "var activity: HKWorkoutActivityType",
                    "type": "property"
                  },
                  {
                    "title": "Comparing workout plans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/==(_:_:)",
                    "title": "static func == (WorkoutPlan.Workout, WorkoutPlan.Workout) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/workoutplan/workout-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/workoutplan/workout-swift.enum",
                "title": "WorkoutPlan.Workout",
                "type": "enum"
              },
              {
                "title": "Accessing workout plan data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/id-swift.property",
                "title": "var id: UUID",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/id-swift.typealias",
                "title": "WorkoutPlan.ID",
                "type": "typealias"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/workout-swift.property",
                "title": "var workout: WorkoutPlan.Workout",
                "type": "property"
              },
              {
                "title": "Opening the workout plan",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/openinworkoutapp()",
                "title": "func openInWorkoutApp() async throws",
                "type": "method"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/init(from:)",
                "title": "init(from: Data) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/datarepresentation",
                "title": "var dataRepresentation: Data",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Operator Functions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/workoutplan/==(_:_:)",
                "title": "static func == (WorkoutPlan, WorkoutPlan) -> Bool",
                "type": "op"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutplan/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/workoutplan/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/workoutplan",
            "title": "WorkoutPlan",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating scheduled workout plans",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/scheduledworkoutplan/init(_:date:)",
                "title": "init(WorkoutPlan, date: DateComponents)",
                "type": "init"
              },
              {
                "title": "Accessing plan data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/scheduledworkoutplan/plan",
                "title": "var plan: WorkoutPlan",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/scheduledworkoutplan/date",
                "title": "var date: DateComponents",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/scheduledworkoutplan/complete",
                "title": "var complete: Bool",
                "type": "property"
              },
              {
                "title": "Comparing plans",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/scheduledworkoutplan/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/scheduledworkoutplan/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/scheduledworkoutplan/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/scheduledworkoutplan/==(_:_:)",
                "title": "static func == (ScheduledWorkoutPlan, ScheduledWorkoutPlan) -> Bool",
                "type": "op"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/scheduledworkoutplan/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/scheduledworkoutplan/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/scheduledworkoutplan",
            "title": "ScheduledWorkoutPlan",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Accessing the scheduler",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/shared",
                "title": "static let shared: WorkoutScheduler",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/issupported",
                "title": "static var isSupported: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/requestauthorization()",
                "title": "func requestAuthorization() async -> WorkoutScheduler.AuthorizationState",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.property",
                "title": "var authorizationState: WorkoutScheduler.AuthorizationState",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Determining the authorization status",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/authorized",
                    "title": "case authorized",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/denied",
                    "title": "case denied",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/notdetermined",
                    "title": "case notDetermined",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/restricted",
                    "title": "case restricted",
                    "type": "case"
                  },
                  {
                    "title": "Working with the raw value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/init(rawvalue:)",
                    "title": "init?(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/rawvalue-swift.typealias",
                    "title": "WorkoutScheduler.AuthorizationState.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Comparing authorization statuses",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/rawvalue-swift.property",
                    "title": "var rawValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/workoutkit/workoutscheduler/authorizationstate-swift.enum",
                "title": "WorkoutScheduler.AuthorizationState",
                "type": "enum"
              },
              {
                "title": "Scheduling workouts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/schedule(_:at:)",
                "title": "func schedule(WorkoutPlan, at: DateComponents) async",
                "type": "method"
              },
              {
                "title": "Managing scheduled workouts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/scheduledworkouts",
                "title": "var scheduledWorkouts: [ScheduledWorkoutPlan]",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/maxallowedscheduledworkoutcount",
                "title": "static let maxAllowedScheduledWorkoutCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/markcomplete(_:at:)",
                "title": "func markComplete(WorkoutPlan, at: DateComponents) async",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/remove(_:at:)",
                "title": "func remove(WorkoutPlan, at: DateComponents) async",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/workoutscheduler/removeallworkouts()",
                "title": "func removeAllWorkouts() async",
                "type": "method"
              }
            ],
            "path": "/documentation/workoutkit/workoutscheduler",
            "title": "WorkoutScheduler",
            "type": "class"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting the error type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/stateerror/watchnotpaired",
                "title": "case watchNotPaired",
                "type": "case"
              },
              {
                "path": "/documentation/workoutkit/stateerror/workoutapplicationnotinstalled",
                "title": "case workoutApplicationNotInstalled",
                "type": "case"
              },
              {
                "title": "Getting the error description",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/stateerror/localizeddescription",
                "title": "var localizedDescription: String",
                "type": "property"
              },
              {
                "title": "Comparing state errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/workoutkit/stateerror/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/workoutkit/stateerror/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/workoutkit/stateerror/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/workoutkit/stateerror/==(_:_:)",
                "title": "static func == (StateError, StateError) -> Bool",
                "type": "op"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/stateerror/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/workoutkit/stateerror/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/workoutkit/stateerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/workoutkit/stateerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/workoutkit/stateerror",
            "title": "StateError",
            "type": "enum"
          }
        ],
        "path": "/documentation/workoutkit",
        "title": "WorkoutKit",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
