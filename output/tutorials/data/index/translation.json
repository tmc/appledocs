{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/translation/translating-text-within-your-app",
            "title": "Translating text within your app",
            "type": "sampleCode"
          },
          {
            "title": "Availability",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/translation",
        "title": "Translation",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/translation/translating-text-within-your-app",
            "title": "Translating text within your app",
            "type": "sampleCode"
          },
          {
            "title": "Availability",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/translation",
        "title": "Translation",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/translation/translating-text-within-your-app",
            "title": "Translating text within your app",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/view/translationpresentation(ispresented:text:attachmentanchor:arrowedge:replacementaction:)",
            "title": "func translationPresentation(isPresented: Binding<Bool>, text: String, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, replacementAction: ((String) -> Void)?) -> some View",
            "type": "method"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/view/translationtask(_:action:)",
            "title": "func translationTask(TranslationSession.Configuration?, action: (TranslationSession) async -> Void) -> some View",
            "type": "method"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/view/translationtask(source:target:action:)",
            "title": "func translationTask(source: Locale.Language?, target: Locale.Language?, action: (TranslationSession) async -> Void) -> some View",
            "type": "method"
          },
          {
            "children": [
              {
                "title": "Translating text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/translationsession/translate(_:)",
                "title": "func translate(String) async throws -> TranslationSession.Response",
                "type": "method"
              },
              {
                "path": "/documentation/translation/translationsession/translate(batch:)",
                "title": "func translate(batch: [TranslationSession.Request]) -> TranslationSession.BatchResponse",
                "type": "method"
              },
              {
                "path": "/documentation/translation/translationsession/translations(from:)",
                "title": "func translations(from: [TranslationSession.Request]) async throws -> [TranslationSession.Response]",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/request/init(sourcetext:clientidentifier:)",
                    "title": "init(sourceText: String, clientIdentifier: String?)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/request/clientidentifier",
                    "title": "var clientIdentifier: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/translation/translationsession/request/sourcetext",
                    "title": "var sourceText: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/translation/translationsession/request",
                "title": "TranslationSession.Request",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/response/init(sourcelanguage:targetlanguage:sourcetext:targettext:clientidentifier:)",
                    "title": "init(sourceLanguage: Locale.Language, targetLanguage: Locale.Language, sourceText: String, targetText: String, clientIdentifier: String?)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/response/clientidentifier",
                    "title": "let clientIdentifier: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/translation/translationsession/response/sourcelanguage",
                    "title": "let sourceLanguage: Locale.Language",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/translation/translationsession/response/sourcetext",
                    "title": "let sourceText: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/translation/translationsession/response/targetlanguage",
                    "title": "let targetLanguage: Locale.Language",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/translation/translationsession/response/targettext",
                    "title": "let targetText: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/translation/translationsession/response",
                "title": "TranslationSession.Response",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/asynciterator/next()",
                        "title": "func next() async throws -> TranslationSession.BatchResponse.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/asynciterator/element",
                        "title": "TranslationSession.BatchResponse.AsyncIterator.Element",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/translation/translationsession/batchresponse/asynciterator/next()-9hb3e",
                            "title": "func next() async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/translation/translationsession/batchresponse/asynciterator/next(isolation:)",
                            "title": "func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/translation/translationsession/batchresponse/asynciterator/asynciteratorprotocol-implementations",
                        "title": "AsyncIteratorProtocol Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/translation/translationsession/batchresponse/asynciterator",
                    "title": "TranslationSession.BatchResponse.AsyncIterator",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/batchresponse/makeasynciterator()",
                    "title": "func makeAsyncIterator() -> TranslationSession.BatchResponse.AsyncIterator",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/batchresponse/element",
                    "title": "TranslationSession.BatchResponse.Element",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/compactmap(_:)-2i2e8",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/compactmap(_:)-4oyuo",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/contains(where:)",
                        "title": "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/drop(while:)",
                        "title": "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/filter(_:)",
                        "title": "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/first(where:)",
                        "title": "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/flatmap(_:)-2x8mn",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/flatmap(_:)-88j6y",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/flatmap(_:)-8huzh",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/flatmap(_:)-9joap",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/map(_:)-3vovz",
                        "title": "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/map(_:)-7c2do",
                        "title": "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/prefix(_:)",
                        "title": "func prefix(Int) -> AsyncPrefixSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/translation/translationsession/batchresponse/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/translation/translationsession/batchresponse/asyncsequence-implementations",
                    "title": "AsyncSequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/translation/translationsession/batchresponse",
                "title": "TranslationSession.BatchResponse",
                "type": "struct"
              },
              {
                "title": "Preparing for translation",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/configuration/==(_:_:)",
                    "title": "static func == (TranslationSession.Configuration, TranslationSession.Configuration) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/configuration/init(source:target:)",
                    "title": "init(source: Locale.Language?, target: Locale.Language?)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/configuration/source",
                    "title": "var source: Locale.Language?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/translation/translationsession/configuration/target",
                    "title": "var target: Locale.Language?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/translation/translationsession/configuration/version",
                    "title": "var version: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationsession/configuration/invalidate()",
                    "title": "func invalidate()",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/translation/translationsession/configuration/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/translation/translationsession/configuration/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/translation/translationsession/configuration",
                "title": "TranslationSession.Configuration",
                "type": "struct"
              },
              {
                "path": "/documentation/translation/translationsession/preparetranslation()",
                "title": "func prepareTranslation() async throws",
                "type": "method"
              },
              {
                "title": "Getting configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/translationsession/sourcelanguage",
                "title": "let sourceLanguage: Locale.Language?",
                "type": "property"
              },
              {
                "path": "/documentation/translation/translationsession/targetlanguage",
                "title": "let targetLanguage: Locale.Language?",
                "type": "property"
              }
            ],
            "path": "/documentation/translation/translationsession",
            "title": "TranslationSession",
            "type": "class"
          },
          {
            "title": "Availability",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a language availability",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/languageavailability/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Getting supported languages",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/languageavailability/supportedlanguages",
                "title": "var supportedLanguages: [Locale.Language]",
                "type": "property"
              },
              {
                "title": "Checking availability",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/languageavailability/status(from:to:)",
                "title": "func status(from: Locale.Language, to: Locale.Language?) async -> LanguageAvailability.Status",
                "type": "method"
              },
              {
                "path": "/documentation/translation/languageavailability/status(for:to:)",
                "title": "func status(for: String, to: Locale.Language?) async throws -> LanguageAvailability.Status",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/languageavailability/status/==(_:_:)",
                    "title": "static func == (LanguageAvailability.Status, LanguageAvailability.Status) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/languageavailability/status/installed",
                    "title": "case installed",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/translation/languageavailability/status/supported",
                    "title": "case supported",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/translation/languageavailability/status/unsupported",
                    "title": "case unsupported",
                    "type": "case"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/languageavailability/status/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/languageavailability/status/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/translation/languageavailability/status/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/translation/languageavailability/status/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/translation/languageavailability/status",
                "title": "LanguageAvailability.Status",
                "type": "enum"
              }
            ],
            "path": "/documentation/translation/languageavailability",
            "title": "LanguageAvailability",
            "type": "class"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Handling general errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/translationerror/nothingtotranslate",
                "title": "static let nothingToTranslate: TranslationError",
                "type": "property"
              },
              {
                "path": "/documentation/translation/translationerror/unabletoidentifylanguage",
                "title": "static let unableToIdentifyLanguage: TranslationError",
                "type": "property"
              },
              {
                "path": "/documentation/translation/translationerror/internalerror",
                "title": "static let internalError: TranslationError",
                "type": "property"
              },
              {
                "title": "Handling unsupported errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/translationerror/unsupportedsourcelanguage",
                "title": "static let unsupportedSourceLanguage: TranslationError",
                "type": "property"
              },
              {
                "path": "/documentation/translation/translationerror/unsupportedtargetlanguage",
                "title": "static let unsupportedTargetLanguage: TranslationError",
                "type": "property"
              },
              {
                "path": "/documentation/translation/translationerror/unsupportedlanguagepairing",
                "title": "static let unsupportedLanguagePairing: TranslationError",
                "type": "property"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/translationerror/~=(_:_:)",
                "title": "static func ~= (TranslationError, any Error) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/translation/translationerror/errordescription",
                "title": "var errorDescription: String?",
                "type": "property"
              },
              {
                "path": "/documentation/translation/translationerror/failurereason",
                "title": "var failureReason: String?",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/translation/translationerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/translation/translationerror/helpanchor",
                    "title": "var helpAnchor: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/translation/translationerror/recoverysuggestion",
                    "title": "var recoverySuggestion: String?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/translation/translationerror/localizederror-implementations",
                "title": "LocalizedError Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/translation/translationerror",
            "title": "TranslationError",
            "type": "struct"
          }
        ],
        "path": "/documentation/translation",
        "title": "Translation",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
