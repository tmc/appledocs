{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/secureelementcredential/accessing-and-using-secure-element-credentials",
            "title": "Accessing and using secure element credentials",
            "type": "article"
          },
          {
            "title": "Entitlements",
            "type": "groupMarker"
          },
          {
            "title": "Credentials",
            "type": "groupMarker"
          },
          {
            "title": "Transactions",
            "type": "groupMarker"
          },
          {
            "title": "UIKit scene delegate",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/secureelementcredential",
        "title": "SecureElementCredential",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/secureelementcredential/accessing-and-using-secure-element-credentials",
            "title": "Accessing and using secure element credentials",
            "type": "article"
          },
          {
            "title": "Entitlements",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/bundleresources/entitlements/com.apple.developer.secure-element-credential",
            "title": "com.apple.developer.secure-element-credential",
            "type": "typealias"
          },
          {
            "external": true,
            "path": "/documentation/bundleresources/entitlements/com.apple.developer.secure-element-credential.default-contactless-app",
            "title": "com.apple.developer.secure-element-credential.default-contactless-app",
            "type": "typealias"
          },
          {
            "title": "Credentials",
            "type": "groupMarker"
          },
          {
            "title": "Transactions",
            "type": "groupMarker"
          },
          {
            "title": "UIKit scene delegate",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/secureelementcredential",
        "title": "SecureElementCredential",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/secureelementcredential/accessing-and-using-secure-element-credentials",
            "title": "Accessing and using secure element credentials",
            "type": "article"
          },
          {
            "title": "Entitlements",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/bundleresources/entitlements/com.apple.developer.secure-element-credential",
            "title": "com.apple.developer.secure-element-credential",
            "type": "typealias"
          },
          {
            "external": true,
            "path": "/documentation/bundleresources/entitlements/com.apple.developer.secure-element-credential.default-contactless-app",
            "title": "com.apple.developer.secure-element-credential.default-contactless-app",
            "type": "typealias"
          },
          {
            "title": "Credentials",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Verifying eligibility",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/iseligible",
                "title": "static var isEligible: Bool",
                "type": "property"
              },
              {
                "title": "Managing the credential session life cycle",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/startsession()",
                "title": "static func startSession() async throws -> CredentialSession",
                "type": "method"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/invalidate()",
                "title": "func invalidate() async throws",
                "type": "method"
              },
              {
                "title": "Accessing the session state",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/state-swift.property",
                "title": "var state: CredentialSession.State",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Card session states",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/state-swift.enum/management",
                    "title": "case management",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/state-swift.enum/wired(credential:)",
                    "title": "case wired(credential: CredentialSession.Credential)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/state-swift.enum/cardemulation(credential:)",
                    "title": "case cardEmulation(credential: CredentialSession.Credential)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Identifying a credential",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/identifier",
                        "title": "let identifier: UUID",
                        "type": "property"
                      },
                      {
                        "title": "Getting a display name",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/name",
                        "title": "let name: String",
                        "type": "property"
                      },
                      {
                        "title": "Inspecting credential state",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.property",
                        "title": "let state: CredentialSession.Credential.State",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Credential states",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installationpending",
                            "title": "case installationPending",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installed(instances:)",
                            "title": "case installed(instances: [CredentialSession.Credential.InstanceInfo])",
                            "type": "case"
                          },
                          {
                            "children": [
                              {
                                "title": "Inspecting instance identifiers",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/instanceaid",
                                "title": "let instanceAID: Data",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/packageaid",
                                "title": "let packageAID: Data",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/moduleaid",
                                "title": "let moduleAID: Data",
                                "type": "property"
                              },
                              {
                                "title": "Creating a secure channel",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainaid",
                                "title": "let securityDomainAID: Data",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainkeyinfo",
                                "title": "let securityDomainKeyInfo: Data",
                                "type": "property"
                              },
                              {
                                "title": "Inspecting applet instance state",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/lifecyclestate",
                                "title": "let lifeCycleState: Data",
                                "type": "property"
                              },
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/==(_:_:)",
                                "title": "static func == (CredentialSession.Credential.InstanceInfo, CredentialSession.Credential.InstanceInfo) -> Bool",
                                "type": "op"
                              },
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomaincounter",
                                "title": "var securityDomainCounter: Int",
                                "type": "property"
                              },
                              {
                                "title": "Default Implementations",
                                "type": "groupMarker"
                              },
                              {
                                "children": [
                                  {
                                    "title": "Operators",
                                    "type": "groupMarker"
                                  },
                                  {
                                    "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/!=(_:_:)",
                                    "title": "static func != (Self, Self) -> Bool",
                                    "type": "op"
                                  }
                                ],
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/equatable-implementations",
                                "title": "Equatable Implementations",
                                "type": "collection"
                              }
                            ],
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo",
                            "title": "CredentialSession.Credential.InstanceInfo",
                            "type": "struct"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installationfailed",
                            "title": "case installationFailed",
                            "type": "case"
                          },
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/==(_:_:)",
                            "title": "static func == (CredentialSession.Credential.State, CredentialSession.Credential.State) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum",
                        "title": "CredentialSession.Credential.State",
                        "type": "enum"
                      },
                      {
                        "title": "Hashing",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Comparing credentials",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/==(_:_:)",
                        "title": "static func == (CredentialSession.Credential, CredentialSession.Credential) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Structures",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Inspecting instance identifiers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/instanceaid",
                            "title": "let instanceAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/packageaid",
                            "title": "let packageAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/moduleaid",
                            "title": "let moduleAID: Data",
                            "type": "property"
                          },
                          {
                            "title": "Creating a secure channel",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainaid",
                            "title": "let securityDomainAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainkeyinfo",
                            "title": "let securityDomainKeyInfo: Data",
                            "type": "property"
                          },
                          {
                            "title": "Inspecting applet instance state",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/lifecyclestate",
                            "title": "let lifeCycleState: Data",
                            "type": "property"
                          },
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/==(_:_:)",
                            "title": "static func == (CredentialSession.Credential.InstanceInfo, CredentialSession.Credential.InstanceInfo) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomaincounter",
                            "title": "var securityDomainCounter: Int",
                            "type": "property"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo",
                        "title": "CredentialSession.Credential.InstanceInfo",
                        "type": "struct"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/credential",
                    "title": "CredentialSession.Credential",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/state-swift.enum/invalid",
                    "title": "case invalid",
                    "type": "case"
                  },
                  {
                    "title": "Comparing states",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/state-swift.enum/==(_:_:)",
                    "title": "static func == (CredentialSession.State, CredentialSession.State) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/state-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/state-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/state-swift.enum",
                "title": "CredentialSession.State",
                "type": "enum"
              },
              {
                "title": "Accessing credentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/listcredentials()",
                "title": "func listCredentials() async throws -> [CredentialSession.Credential]",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Identifying a credential",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/credential/identifier",
                    "title": "let identifier: UUID",
                    "type": "property"
                  },
                  {
                    "title": "Getting a display name",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/credential/name",
                    "title": "let name: String",
                    "type": "property"
                  },
                  {
                    "title": "Inspecting credential state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.property",
                    "title": "let state: CredentialSession.Credential.State",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Credential states",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installationpending",
                        "title": "case installationPending",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installed(instances:)",
                        "title": "case installed(instances: [CredentialSession.Credential.InstanceInfo])",
                        "type": "case"
                      },
                      {
                        "children": [
                          {
                            "title": "Inspecting instance identifiers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/instanceaid",
                            "title": "let instanceAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/packageaid",
                            "title": "let packageAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/moduleaid",
                            "title": "let moduleAID: Data",
                            "type": "property"
                          },
                          {
                            "title": "Creating a secure channel",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainaid",
                            "title": "let securityDomainAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainkeyinfo",
                            "title": "let securityDomainKeyInfo: Data",
                            "type": "property"
                          },
                          {
                            "title": "Inspecting applet instance state",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/lifecyclestate",
                            "title": "let lifeCycleState: Data",
                            "type": "property"
                          },
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/==(_:_:)",
                            "title": "static func == (CredentialSession.Credential.InstanceInfo, CredentialSession.Credential.InstanceInfo) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomaincounter",
                            "title": "var securityDomainCounter: Int",
                            "type": "property"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo",
                        "title": "CredentialSession.Credential.InstanceInfo",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installationfailed",
                        "title": "case installationFailed",
                        "type": "case"
                      },
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/==(_:_:)",
                        "title": "static func == (CredentialSession.Credential.State, CredentialSession.Credential.State) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum",
                    "title": "CredentialSession.Credential.State",
                    "type": "enum"
                  },
                  {
                    "title": "Hashing",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/credential/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Comparing credentials",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/credential/==(_:_:)",
                    "title": "static func == (CredentialSession.Credential, CredentialSession.Credential) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Inspecting instance identifiers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/instanceaid",
                        "title": "let instanceAID: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/packageaid",
                        "title": "let packageAID: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/moduleaid",
                        "title": "let moduleAID: Data",
                        "type": "property"
                      },
                      {
                        "title": "Creating a secure channel",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainaid",
                        "title": "let securityDomainAID: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainkeyinfo",
                        "title": "let securityDomainKeyInfo: Data",
                        "type": "property"
                      },
                      {
                        "title": "Inspecting applet instance state",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/lifecyclestate",
                        "title": "let lifeCycleState: Data",
                        "type": "property"
                      },
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/==(_:_:)",
                        "title": "static func == (CredentialSession.Credential.InstanceInfo, CredentialSession.Credential.InstanceInfo) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomaincounter",
                        "title": "var securityDomainCounter: Int",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo",
                    "title": "CredentialSession.Credential.InstanceInfo",
                    "type": "struct"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/credential/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/credential",
                "title": "CredentialSession.Credential",
                "type": "struct"
              },
              {
                "title": "Acquiring exclusive foreground privileges",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/acquirepresentmentassertion()",
                "title": "func acquirePresentmentAssertion() async throws -> CredentialSession.PresentmentIntentAssertion",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Inspecting assertion state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.property",
                    "title": "var state: CredentialSession.PresentmentIntentAssertion.State",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Assertion states",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.enum/active",
                        "title": "case active",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.enum/invalid",
                        "title": "case invalid",
                        "type": "case"
                      },
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.enum/==(_:_:)",
                        "title": "static func == (CredentialSession.PresentmentIntentAssertion.State, CredentialSession.PresentmentIntentAssertion.State) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.enum/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.enum/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.enum/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.enum/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/state-swift.enum",
                    "title": "CredentialSession.PresentmentIntentAssertion.State",
                    "type": "enum"
                  },
                  {
                    "title": "Relinquishing presentment intent",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion/relinquish()",
                    "title": "func relinquish() async throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/presentmentintentassertion",
                "title": "CredentialSession.PresentmentIntentAssertion",
                "type": "class"
              },
              {
                "title": "Handling session events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/eventstream",
                "title": "var eventStream: AsyncStream<CredentialSession.Event>",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Credential events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/event/credentialfinishedinstalling(credential:)",
                    "title": "case credentialFinishedInstalling(credential: CredentialSession.Credential)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Identifying a credential",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/identifier",
                        "title": "let identifier: UUID",
                        "type": "property"
                      },
                      {
                        "title": "Getting a display name",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/name",
                        "title": "let name: String",
                        "type": "property"
                      },
                      {
                        "title": "Inspecting credential state",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.property",
                        "title": "let state: CredentialSession.Credential.State",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Credential states",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installationpending",
                            "title": "case installationPending",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installed(instances:)",
                            "title": "case installed(instances: [CredentialSession.Credential.InstanceInfo])",
                            "type": "case"
                          },
                          {
                            "children": [
                              {
                                "title": "Inspecting instance identifiers",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/instanceaid",
                                "title": "let instanceAID: Data",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/packageaid",
                                "title": "let packageAID: Data",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/moduleaid",
                                "title": "let moduleAID: Data",
                                "type": "property"
                              },
                              {
                                "title": "Creating a secure channel",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainaid",
                                "title": "let securityDomainAID: Data",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainkeyinfo",
                                "title": "let securityDomainKeyInfo: Data",
                                "type": "property"
                              },
                              {
                                "title": "Inspecting applet instance state",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/lifecyclestate",
                                "title": "let lifeCycleState: Data",
                                "type": "property"
                              },
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/==(_:_:)",
                                "title": "static func == (CredentialSession.Credential.InstanceInfo, CredentialSession.Credential.InstanceInfo) -> Bool",
                                "type": "op"
                              },
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomaincounter",
                                "title": "var securityDomainCounter: Int",
                                "type": "property"
                              },
                              {
                                "title": "Default Implementations",
                                "type": "groupMarker"
                              },
                              {
                                "children": [
                                  {
                                    "title": "Operators",
                                    "type": "groupMarker"
                                  },
                                  {
                                    "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/!=(_:_:)",
                                    "title": "static func != (Self, Self) -> Bool",
                                    "type": "op"
                                  }
                                ],
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/equatable-implementations",
                                "title": "Equatable Implementations",
                                "type": "collection"
                              }
                            ],
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo",
                            "title": "CredentialSession.Credential.InstanceInfo",
                            "type": "struct"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/installationfailed",
                            "title": "case installationFailed",
                            "type": "case"
                          },
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/==(_:_:)",
                            "title": "static func == (CredentialSession.Credential.State, CredentialSession.Credential.State) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/state-swift.enum",
                        "title": "CredentialSession.Credential.State",
                        "type": "enum"
                      },
                      {
                        "title": "Hashing",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Comparing credentials",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/credential/==(_:_:)",
                        "title": "static func == (CredentialSession.Credential, CredentialSession.Credential) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Structures",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Inspecting instance identifiers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/instanceaid",
                            "title": "let instanceAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/packageaid",
                            "title": "let packageAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/moduleaid",
                            "title": "let moduleAID: Data",
                            "type": "property"
                          },
                          {
                            "title": "Creating a secure channel",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainaid",
                            "title": "let securityDomainAID: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomainkeyinfo",
                            "title": "let securityDomainKeyInfo: Data",
                            "type": "property"
                          },
                          {
                            "title": "Inspecting applet instance state",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/lifecyclestate",
                            "title": "let lifeCycleState: Data",
                            "type": "property"
                          },
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/==(_:_:)",
                            "title": "static func == (CredentialSession.Credential.InstanceInfo, CredentialSession.Credential.InstanceInfo) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/securitydomaincounter",
                            "title": "var securityDomainCounter: Int",
                            "type": "property"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/instanceinfo",
                        "title": "CredentialSession.Credential.InstanceInfo",
                        "type": "struct"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/credential/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/credential/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/credential",
                    "title": "CredentialSession.Credential",
                    "type": "struct"
                  },
                  {
                    "title": "Card emulation events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/event/connectivityevent(_:)",
                    "title": "case connectivityEvent(CredentialSession.ConnectivityEvent)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Identifying the target instance",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/connectivityevent/instanceapplicationidentifier",
                        "title": "let instanceApplicationIdentifier: Data",
                        "type": "property"
                      },
                      {
                        "title": "Inspecting event data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/connectivityevent/data",
                        "title": "let data: Data",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/connectivityevent",
                    "title": "CredentialSession.ConnectivityEvent",
                    "type": "struct"
                  },
                  {
                    "title": "NFC field events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/event/fieldstatechanged(info:)",
                    "title": "case fieldStateChanged(info: CredentialSession.NFCFieldInformation)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Field states",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/fieldabsent",
                        "title": "case fieldAbsent",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/fieldpresent",
                        "title": "case fieldPresent",
                        "type": "case"
                      },
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/==(_:_:)",
                        "title": "static func == (CredentialSession.NFCFieldInformation, CredentialSession.NFCFieldInformation) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation",
                    "title": "CredentialSession.NFCFieldInformation",
                    "type": "enum"
                  },
                  {
                    "title": "Invalidation events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/event/sessioninvalidated(reason:)",
                    "title": "case sessionInvalidated(reason: CredentialSession.ErrorCode)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Authorization and permission error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/usernotauthorized",
                        "title": "case userNotAuthorized",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/accessdenied",
                        "title": "case accessDenied",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/clientnotinforeground",
                        "title": "case clientNotInForeground",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/usercanceledauthorization",
                        "title": "case userCanceledAuthorization",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/userauthorizationtimedout",
                        "title": "case userAuthorizationTimedOut",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/featureunavailable",
                        "title": "case featureUnavailable",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/ineligible",
                        "title": "case ineligible",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/conditionsnotsatisfied",
                        "title": "case conditionsNotSatisfied",
                        "type": "case"
                      },
                      {
                        "title": "Credential error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/invalidcredentialstate",
                        "title": "case invalidCredentialState",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/credentialdoesnotexist",
                        "title": "case credentialDoesNotExist",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/instancedoesnotexist",
                        "title": "case instanceDoesNotExist",
                        "type": "case"
                      },
                      {
                        "title": "Session error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/invalidsessionstate",
                        "title": "case invalidSessionState",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/sessioninvalidated",
                        "title": "case sessionInvalidated",
                        "type": "case"
                      },
                      {
                        "title": "Command error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/commandnotsupported",
                        "title": "case commandNotSupported",
                        "type": "case"
                      },
                      {
                        "title": "Network-related error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/network",
                        "title": "case network",
                        "type": "case"
                      },
                      {
                        "title": "Presentment intent assertion error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/presentmentintentassertiontimeout",
                        "title": "case presentmentIntentAssertionTimeout",
                        "type": "case"
                      },
                      {
                        "title": "UIKit error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/invalidview",
                        "title": "case invalidView",
                        "type": "case"
                      },
                      {
                        "title": "Hardware error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/insufficientspace",
                        "title": "case insufficientSpace",
                        "type": "case"
                      },
                      {
                        "title": "Temporary error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/resourceunavailable",
                        "title": "case resourceUnavailable",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/acquiredresourcerelinquished",
                        "title": "case acquiredResourceRelinquished",
                        "type": "case"
                      },
                      {
                        "title": "Miscellaneous error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/invalidinput",
                        "title": "case invalidInput",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/internalerror",
                        "title": "case internalError",
                        "type": "case"
                      },
                      {
                        "title": "Inspecting error causes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/failurereason",
                        "title": "var failureReason: String?",
                        "type": "property"
                      },
                      {
                        "title": "Hashing",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Comparing error codes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/==(_:_:)",
                        "title": "static func == (CredentialSession.ErrorCode, CredentialSession.ErrorCode) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/errorcode/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/errorcode/localizeddescription",
                            "title": "var localizedDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/error-implementations",
                        "title": "Error Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/errorcode/errordescription",
                            "title": "var errorDescription: String?",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/errorcode/helpanchor",
                            "title": "var helpAnchor: String?",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/secureelementcredential/credentialsession/errorcode/recoverysuggestion",
                            "title": "var recoverySuggestion: String?",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/localizederror-implementations",
                        "title": "LocalizedError Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode",
                    "title": "CredentialSession.ErrorCode",
                    "type": "enum"
                  },
                  {
                    "title": "Timeout events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/event/cardemulationtimeout",
                    "title": "case cardEmulationTimeout",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/event/presentmentintentassertiontimeout",
                    "title": "case presentmentIntentAssertionTimeout",
                    "type": "case"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/event",
                "title": "CredentialSession.Event",
                "type": "enum"
              },
              {
                "title": "Managing a credential",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/provisioncredential(configurationuuid:name:)",
                "title": "func provisionCredential(configurationUUID: UUID, name: String) async throws -> CredentialSession.Credential",
                "type": "method"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/deletecredential(_:)",
                "title": "func deleteCredential(CredentialSession.Credential) async throws",
                "type": "method"
              },
              {
                "title": "Performing wired mode actions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/performwiredtransaction(using:over:instanceaid:)",
                "title": "func performWiredTransaction(using: CredentialSession.Credential, over: UIScene, instanceAID: Data) async throws",
                "type": "method"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/enterwiredmode(using:)",
                "title": "func enterWiredMode(using: CredentialSession.Credential) async throws",
                "type": "method"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/transceive(_:)",
                "title": "func transceive(Data) async throws -> Data",
                "type": "method"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/endwiredmode()",
                "title": "func endWiredMode() async throws",
                "type": "method"
              },
              {
                "title": "Performing card emulation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/performcardemulationtransactionwithcurrentcredential(over:options:)",
                "title": "func performCardEmulationTransactionWithCurrentCredential(over: UIScene, options: CredentialSession.CardEmulationOptions) async throws",
                "type": "method"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/performtransaction(using:over:options:)",
                "title": "func performTransaction(using: CredentialSession.Credential, over: UIScene, options: CredentialSession.CardEmulationOptions) async throws",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating an options instance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/cardemulationoptions/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/cardemulationoptions",
                "title": "CredentialSession.CardEmulationOptions",
                "type": "struct"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/endcardemulation()",
                "title": "func endCardEmulation() async throws",
                "type": "method"
              },
              {
                "title": "Using SwiftUI",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/configuration()",
                "title": "func configuration() async throws -> CredentialTransaction.Configuration",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Invalidating a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialtransaction/configuration/invalidate()",
                    "title": "func invalidate() async throws",
                    "type": "method"
                  },
                  {
                    "title": "Comparing configurations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialtransaction/configuration/==(_:_:)",
                    "title": "static func == (CredentialTransaction.Configuration, CredentialTransaction.Configuration) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialtransaction/configuration/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialtransaction/configuration/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialtransaction/configuration",
                "title": "CredentialTransaction.Configuration",
                "type": "class"
              },
              {
                "title": "Handling errors",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Authorization and permission error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/usernotauthorized",
                    "title": "case userNotAuthorized",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/accessdenied",
                    "title": "case accessDenied",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/clientnotinforeground",
                    "title": "case clientNotInForeground",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/usercanceledauthorization",
                    "title": "case userCanceledAuthorization",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/userauthorizationtimedout",
                    "title": "case userAuthorizationTimedOut",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/featureunavailable",
                    "title": "case featureUnavailable",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/ineligible",
                    "title": "case ineligible",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/conditionsnotsatisfied",
                    "title": "case conditionsNotSatisfied",
                    "type": "case"
                  },
                  {
                    "title": "Credential error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/invalidcredentialstate",
                    "title": "case invalidCredentialState",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/credentialdoesnotexist",
                    "title": "case credentialDoesNotExist",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/instancedoesnotexist",
                    "title": "case instanceDoesNotExist",
                    "type": "case"
                  },
                  {
                    "title": "Session error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/invalidsessionstate",
                    "title": "case invalidSessionState",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/sessioninvalidated",
                    "title": "case sessionInvalidated",
                    "type": "case"
                  },
                  {
                    "title": "Command error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/commandnotsupported",
                    "title": "case commandNotSupported",
                    "type": "case"
                  },
                  {
                    "title": "Network-related error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/network",
                    "title": "case network",
                    "type": "case"
                  },
                  {
                    "title": "Presentment intent assertion error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/presentmentintentassertiontimeout",
                    "title": "case presentmentIntentAssertionTimeout",
                    "type": "case"
                  },
                  {
                    "title": "UIKit error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/invalidview",
                    "title": "case invalidView",
                    "type": "case"
                  },
                  {
                    "title": "Hardware error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/insufficientspace",
                    "title": "case insufficientSpace",
                    "type": "case"
                  },
                  {
                    "title": "Temporary error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/resourceunavailable",
                    "title": "case resourceUnavailable",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/acquiredresourcerelinquished",
                    "title": "case acquiredResourceRelinquished",
                    "type": "case"
                  },
                  {
                    "title": "Miscellaneous error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/invalidinput",
                    "title": "case invalidInput",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/internalerror",
                    "title": "case internalError",
                    "type": "case"
                  },
                  {
                    "title": "Inspecting error causes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/failurereason",
                    "title": "var failureReason: String?",
                    "type": "property"
                  },
                  {
                    "title": "Hashing",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Comparing error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/==(_:_:)",
                    "title": "static func == (CredentialSession.ErrorCode, CredentialSession.ErrorCode) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/localizeddescription",
                        "title": "var localizedDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/error-implementations",
                    "title": "Error Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/errordescription",
                        "title": "var errorDescription: String?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/helpanchor",
                        "title": "var helpAnchor: String?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/errorcode/recoverysuggestion",
                        "title": "var recoverySuggestion: String?",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/errorcode/localizederror-implementations",
                    "title": "LocalizedError Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/errorcode",
                "title": "CredentialSession.ErrorCode",
                "type": "enum"
              },
              {
                "title": "Working with actors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/unownedexecutor",
                "title": "var unownedExecutor: UnownedSerialExecutor",
                "type": "property"
              },
              {
                "title": "Comparing sessions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/==(_:_:)",
                "title": "static func == (CredentialSession, CredentialSession) -> Bool",
                "type": "op"
              },
              {
                "title": "Infrequently-used functionality",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsession/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Identifying the target instance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/connectivityevent/instanceapplicationidentifier",
                    "title": "let instanceApplicationIdentifier: Data",
                    "type": "property"
                  },
                  {
                    "title": "Inspecting event data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/connectivityevent/data",
                    "title": "let data: Data",
                    "type": "property"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/connectivityevent",
                "title": "CredentialSession.ConnectivityEvent",
                "type": "struct"
              },
              {
                "beta": true,
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/secureelementcredential/credentialsession/secureelementinfo-swift.struct/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/secureelementcredential/credentialsession/secureelementinfo-swift.struct/hardwarereleaseversioninfo",
                    "title": "let hardwareReleaseVersionInfo: String",
                    "type": "property"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/secureelementcredential/credentialsession/secureelementinfo-swift.struct/secureelementplatformsigningcertificate",
                    "title": "let secureElementPlatformSigningCertificate: Data",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/secureelementcredential/credentialsession/secureelementinfo-swift.struct/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/secureelementinfo-swift.struct",
                "title": "CredentialSession.SecureElementInfo",
                "type": "struct"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/secureelementcredential/credentialsession/secureelementinfo-swift.property",
                "title": "var secureElementInfo: CredentialSession.SecureElementInfo",
                "type": "property"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Field states",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/fieldabsent",
                    "title": "case fieldAbsent",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/fieldpresent",
                    "title": "case fieldPresent",
                    "type": "case"
                  },
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/==(_:_:)",
                    "title": "static func == (CredentialSession.NFCFieldInformation, CredentialSession.NFCFieldInformation) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/nfcfieldinformation",
                "title": "CredentialSession.NFCFieldInformation",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/assertisolated(_:file:line:)",
                    "title": "func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/assumeisolated(_:file:line:)",
                    "title": "func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/preconditionisolated(_:file:line:)",
                    "title": "func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/actor-implementations",
                "title": "Actor Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsession/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsession/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/secureelementcredential/credentialsession",
            "title": "CredentialSession",
            "type": "class"
          },
          {
            "title": "Transactions",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Configuring transactions",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Invalidating a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialtransaction/configuration/invalidate()",
                    "title": "func invalidate() async throws",
                    "type": "method"
                  },
                  {
                    "title": "Comparing configurations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialtransaction/configuration/==(_:_:)",
                    "title": "static func == (CredentialTransaction.Configuration, CredentialTransaction.Configuration) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialtransaction/configuration/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialtransaction/configuration/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialtransaction/configuration",
                "title": "CredentialTransaction.Configuration",
                "type": "class"
              },
              {
                "title": "Performing transactions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialtransaction/performtransaction(using:options:)",
                "title": "func performTransaction(using: Credential, options: CardEmulationOptions) async throws",
                "type": "method"
              },
              {
                "path": "/documentation/secureelementcredential/credentialtransaction/performtransactioninwiredmode(using:instanceaid:)",
                "title": "func performTransactionInWiredMode(using: Credential, instanceAID: Data) async throws",
                "type": "method"
              },
              {
                "path": "/documentation/secureelementcredential/credentialtransaction/performcardemulationtransactionwithcurrentcredential(options:)",
                "title": "func performCardEmulationTransactionWithCurrentCredential(options: CardEmulationOptions) async throws",
                "type": "method"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credential",
                "title": "Credential",
                "type": "typealias"
              },
              {
                "path": "/documentation/secureelementcredential/cardemulationoptions",
                "title": "CardEmulationOptions",
                "type": "typealias"
              }
            ],
            "path": "/documentation/secureelementcredential/credentialtransaction",
            "title": "CredentialTransaction",
            "type": "class"
          },
          {
            "title": "UIKit scene delegate",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Handling events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/secureelementcredential/credentialsessionwindowscenedelegate/windowscene(_:didreceivecredentialsessionwindowsceneevent:)",
                "title": "func windowScene(UIWindowScene, didReceiveCredentialSessionWindowSceneEvent: CredentialSessionWindowSceneEvent)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/presentation",
                    "title": "case presentation",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/readerdetected",
                    "title": "case readerDetected",
                    "type": "case"
                  },
                  {
                    "title": "Describing the event",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Encoding and decoding",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "title": "Hashing",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Comparing events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/==(_:_:)",
                    "title": "static func == (CredentialSessionWindowSceneEvent, CredentialSessionWindowSceneEvent) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/secureelementcredential/credentialsessionwindowsceneevent",
                "title": "CredentialSessionWindowSceneEvent",
                "type": "enum"
              }
            ],
            "path": "/documentation/secureelementcredential/credentialsessionwindowscenedelegate",
            "title": "CredentialSessionWindowSceneDelegate",
            "type": "protocol"
          }
        ],
        "path": "/documentation/secureelementcredential",
        "title": "SecureElementCredential",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
