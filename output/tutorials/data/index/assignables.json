{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Assignable document",
            "type": "groupMarker"
          },
          {
            "title": "Configuration",
            "type": "groupMarker"
          },
          {
            "title": "Presentation",
            "type": "groupMarker"
          },
          {
            "title": "Document elements",
            "type": "groupMarker"
          },
          {
            "title": "Mergeable document",
            "type": "groupMarker"
          },
          {
            "title": "Identity",
            "type": "groupMarker"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/assignables",
        "title": "Assignables",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Assignable document",
            "type": "groupMarker"
          },
          {
            "title": "Configuration",
            "type": "groupMarker"
          },
          {
            "title": "Presentation",
            "type": "groupMarker"
          },
          {
            "title": "Document elements",
            "type": "groupMarker"
          },
          {
            "title": "Mergeable document",
            "type": "groupMarker"
          },
          {
            "title": "Identity",
            "type": "groupMarker"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/assignables",
        "title": "Assignables",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Assignable document",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating an assignable document",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignabledocument/init(pdfurl:authors:id:)",
                "title": "init(pdfURL: URL, authors: [some UserIdentity], id: String?) throws",
                "type": "init"
              },
              {
                "path": "/documentation/assignables/assignabledocument/init(pdfurl:id:)",
                "title": "init(pdfURL: URL, id: String?) throws",
                "type": "init"
              },
              {
                "title": "Inspecting an assignable document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/id-swift.typealias",
                "title": "AssignableDocument.ID",
                "type": "typealias"
              },
              {
                "path": "/documentation/assignables/assignabledocument/id-swift.property",
                "title": "var id: AssignableDocument.ID",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocument/ismultipagedocument",
                "title": "var isMultiPageDocument: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocument/ispartial",
                "title": "var isPartial: Bool",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Layer types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/partids-swift.enum/all",
                    "title": "static let all: [MergeablePartsContainerPartID]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/partids-swift.enum/authors",
                    "title": "static let authors: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/partids-swift.enum/base",
                    "title": "static let base: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/partids-swift.enum/instructionmarkup",
                    "title": "static let instructionMarkup: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/partids-swift.enum/questionboxes",
                    "title": "static let questionBoxes: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "title": "Getting the document type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/partids-swift.enum/document",
                    "title": "AssignableDocument.PartIDs.Document",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/assignables/assignabledocument/partids-swift.enum",
                "title": "AssignableDocument.PartIDs",
                "type": "enum"
              },
              {
                "path": "/documentation/assignables/assignabledocument/partids-swift.property",
                "title": "var partIDs: [AssignableDocument.PartID]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a question",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/init(pageid:boxes:maxscore:)",
                    "title": "init(pageID: AssignableDocument.Page.ID, boxes: [AssignableDocument.QuestionBox], maxScore: Double?)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting a question",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/boxes",
                    "title": "var boxes: [AssignableDocument.QuestionBox]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/id-swift.typealias",
                    "title": "AssignableDocument.Question.ID",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/id-swift.property",
                    "title": "var id: AssignableDocument.Question.ID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/maxscore",
                    "title": "var maxScore: Double?",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Inspecting a thumbnail",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Inspecting thumbnail data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/question/thumbnail/data-swift.struct/box",
                            "title": "var box: AssignableDocument.QuestionBox",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/question/thumbnail/data-swift.struct/image",
                            "title": "var image: UIImage",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/question/thumbnail/data-swift.struct/pageid",
                            "title": "var pageID: AssignableDocument.Page.ID",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/assignables/assignabledocument/question/thumbnail/data-swift.struct",
                        "title": "AssignableDocument.Question.Thumbnail.Data",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/question/thumbnail/data-swift.property",
                        "title": "var data: AssignableDocument.Question.Thumbnail.Data?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/question/thumbnail/questionid",
                        "title": "var questionID: AssignableDocument.Question.ID",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/assignables/assignabledocument/question/thumbnail",
                    "title": "AssignableDocument.Question.Thumbnail",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/document",
                    "title": "AssignableDocument.Question.Document",
                    "type": "typealias"
                  },
                  {
                    "title": "Comparing questions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/==(_:_:)",
                    "title": "static func == (AssignableDocument.Question, AssignableDocument.Question) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Hashing a question",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/question/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/question/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/assignables/assignabledocument/question/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/assignables/assignabledocument/question",
                "title": "AssignableDocument.Question",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/==(_:_:)",
                    "title": "static func == (AssignableDocument.QuestionBox, AssignableDocument.QuestionBox) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/init(id:pageid:bounds:)",
                    "title": "init(id: AssignableDocument.QuestionBox.ID, pageID: AssignableDocument.Page.ID, bounds: CGRect)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/bounds",
                    "title": "var bounds: CGRect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/id-swift.property",
                    "title": "var id: AssignableDocument.QuestionBox.ID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/pageid",
                    "title": "var pageID: AssignableDocument.Page.ID?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/document",
                    "title": "AssignableDocument.QuestionBox.Document",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/questionbox/id-swift.typealias",
                    "title": "AssignableDocument.QuestionBox.ID",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/questionbox/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/assignables/assignabledocument/questionbox/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/assignables/assignabledocument/questionbox",
                "title": "AssignableDocument.QuestionBox",
                "type": "struct"
              },
              {
                "path": "/documentation/assignables/assignabledocument/questions",
                "title": "var questions: [AssignableDocument.Question]",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocument/element",
                "title": "AssignableDocument.Element",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Document errors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/error/invalidurl",
                    "title": "case invalidURL",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/error/otherdocumentisnotavariant",
                    "title": "case otherDocumentIsNotAVariant",
                    "type": "case"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/error/exportfailed(partids:)",
                    "title": "case exportFailed(partIDs: [AssignableDocument.PartID])",
                    "type": "case"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/error/localizeddescription",
                        "title": "var localizedDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/assignables/assignabledocument/error/error-implementations",
                    "title": "Error Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/assignables/assignabledocument/error",
                "title": "AssignableDocument.Error",
                "type": "enum"
              },
              {
                "title": "Getting and setting the questions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/appendquestion(pageid:rect:maxscore:)",
                "title": "func appendQuestion(pageID: AssignableDocument.Page.ID, rect: CGRect, maxScore: Double?) -> AssignableDocument.Question.ID",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignabledocument/questions(on:)",
                "title": "func questions(on: AssignableDocument.Page.ID) -> [AssignableDocument.Question]",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignabledocument/removequestion(_:)",
                "title": "func removeQuestion(AssignableDocument.Question.ID) -> AssignableDocument.Question?",
                "type": "method"
              },
              {
                "title": "Computing the max score",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/computemaxscore(defaultquestionmaxscore:)",
                "title": "func computeMaxScore(defaultQuestionMaxScore: Double?) -> Double?",
                "type": "method"
              },
              {
                "title": "Getting the authors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/authors",
                "title": "var authors: [AnyUserIdentity]",
                "type": "property"
              },
              {
                "title": "Getting the configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/configuration-swift.typealias",
                "title": "AssignableDocument.Configuration",
                "type": "typealias"
              },
              {
                "path": "/documentation/assignables/assignabledocument/configuration-swift.property",
                "title": "var configuration: some AssignableDocumentConfiguration",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Mark types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/checkmark",
                    "title": "case checkmark",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/numeric",
                    "title": "case numeric",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/star",
                    "title": "case star",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/unknown",
                    "title": "case unknown",
                    "type": "case"
                  },
                  {
                    "title": "Inspecting a type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/id-swift.property",
                    "title": "var id: AssignableDocument.CorrectMarkType",
                    "type": "property"
                  },
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/==(_:_:)",
                    "title": "static func == (AssignableDocument.CorrectMarkType, AssignableDocument.CorrectMarkType) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/allcases-swift.typealias",
                    "title": "AssignableDocument.CorrectMarkType.AllCases",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/id-swift.typealias",
                    "title": "AssignableDocument.CorrectMarkType.ID",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/allcases-swift.type.property",
                    "title": "static var allCases: [AssignableDocument.CorrectMarkType]",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/correctmarktype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/assignables/assignabledocument/correctmarktype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/assignables/assignabledocument/correctmarktype",
                "title": "AssignableDocument.CorrectMarkType",
                "type": "enum"
              },
              {
                "title": "Merging the parts",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignabledocument/merge(other:)",
                "title": "func merge(other: AssignableDocument) throws -> Bool",
                "type": "method"
              },
              {
                "title": "Producing thumbnails",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/questionthumbnails(visibleparts:)",
                "title": "func questionThumbnails(visibleParts: [AssignableDocument.PartID]) async -> [AssignableDocument.Question.ID : [AssignableDocument.Question.Thumbnail]]",
                "type": "method"
              },
              {
                "title": "Exporting the parts",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignabledocument/export(partids:)",
                "title": "func export(partIDs: [AssignableDocument.PartID]) async throws -> [AssignableDocument.PartID : URL]",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignabledocument/exportbaseaspdf()",
                "title": "func exportBaseAsPDF() async -> PDFDocument",
                "type": "method"
              },
              {
                "title": "Comparing assignable documents",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/==(_:_:)",
                "title": "static func == (AssignableDocument, AssignableDocument) -> Bool",
                "type": "op"
              },
              {
                "title": "Hashing the assignable document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Accessing documents",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/subscript(_:)-68enn",
                "title": "subscript(AssignableDocument.QuestionBox.ID) -> AssignableDocument.QuestionBox?",
                "type": "subscript"
              },
              {
                "path": "/documentation/assignables/assignabledocument/subscript(_:)-7fijz",
                "title": "subscript(AssignableDocument.Question.ID) -> AssignableDocument.Question?",
                "type": "subscript"
              },
              {
                "path": "/documentation/assignables/assignabledocument/subscript(_:)-8ou91",
                "title": "subscript(AssignableDocument.Page.ID) -> AssignableDocument.Page?",
                "type": "subscript"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignabledocument/init(id:partdata:)-4am19",
                "title": "init(id: AssignableDocument.ID, partData: [AssignableDocument.PartID : URL]) throws",
                "type": "init"
              },
              {
                "path": "/documentation/assignables/assignabledocument/init(id:partdata:)-8gf6g",
                "title": "init(id: AssignableDocument.ID, partData: [AssignableDocument.PartID : MergeablePartData]) async throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocument/pagesdebugdescription",
                "title": "var pagesDebugDescription: String",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocument/exportparts(identifiedby:)",
                "title": "func exportParts(identifiedBy: [AssignableDocument.PartID]) async throws -> [AssignableDocument.PartID : MergeablePartData]",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignabledocument/makepart(for:)",
                "title": "func makePart(for: AssignableDocument.PartID) throws -> MergeablePartData?",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignabledocument/merge(_:)",
                "title": "func merge(AssignableDocument) async throws -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignabledocument/merge(partdata:into:)",
                "title": "func merge(partData: MergeablePartData, into: AssignableDocument.PartID) async throws -> Bool",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignabledocument/merge(partid:partdataurl:)",
                "title": "func merge(partID: AssignableDocument.PartID, partDataURL: URL) throws -> Bool",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignabledocument/assign(to:)",
                    "title": "func assign(to: AnyUserIdentity) throws -> AssignedWorkDocument",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/makeassignedworkdocument()",
                    "title": "func makeAssignedWorkDocument() throws -> AssignedWorkDocument",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/makeassignedworkdocument(id:)",
                    "title": "func makeAssignedWorkDocument(id: String) throws -> AssignedWorkDocument",
                    "type": "method"
                  }
                ],
                "path": "/documentation/assignables/assignabledocument/assignable-implementations",
                "title": "Assignable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/assignables/assignabledocument/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Inspecting a page",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a page identifier",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/element",
                            "title": "AssignableDocument.Page.ID.Element",
                            "type": "typealias"
                          },
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/==(_:_:)",
                            "title": "static func == (AssignableDocument.Page.ID, AssignableDocument.Page.ID) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/assignables/assignabledocument/page/id-swift.struct/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/assignables/assignabledocument/page/id-swift.struct",
                        "title": "AssignableDocument.Page.ID",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/page/id-swift.property",
                        "title": "var id: AssignableDocument.Page.ID",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/page/size",
                        "title": "var size: CGSize",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/page/document",
                        "title": "AssignableDocument.Page.Document",
                        "type": "typealias"
                      },
                      {
                        "title": "Comparing pages",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/page/==(_:_:)",
                        "title": "static func == (AssignableDocument.Page, AssignableDocument.Page) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Hashing a page",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/page/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/page/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/page/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignabledocument/page/rotation",
                        "title": "var rotation: Measurement<UnitAngle>",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignabledocument/page/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/assignables/assignabledocument/page/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/assignables/assignabledocument/page",
                    "title": "AssignableDocument.Page",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/pages",
                    "title": "var pages: [AssignableDocument.Page]",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/exporttopdf(visibleparts:)",
                    "title": "func exportToPDF(visibleParts: [MergeablePartsContainerPartID]) async -> PDFDocument",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocument/pagethumbnails(visibleparts:)",
                    "title": "func pageThumbnails(visibleParts: [MergeablePartsContainerPartID]) async -> [Self.Page.ID : Self.Page.Thumbnail]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/assignables/assignabledocument/mergeabledocument-implementations",
                "title": "MergeableDocument Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/assignabledocument",
            "title": "AssignableDocument",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Inspecting a work document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/id-swift.typealias",
                "title": "AssignedWorkDocument.ID",
                "type": "typealias"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/id-swift.property",
                "title": "var id: AssignedWorkDocument.ID",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/ismultipagedocument",
                "title": "var isMultiPageDocument: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/ispartial",
                "title": "var isPartial: Bool",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Layer types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/all",
                    "title": "static let all: [MergeablePartsContainerPartID]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/assignabledocumentauthors",
                    "title": "static let assignableDocumentAuthors: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/assignabledocumentbase",
                    "title": "static let assignableDocumentBase: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/assignabledocumentinstructionmarkup",
                    "title": "static let assignableDocumentInstructionMarkup: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/assignabledocumentquestionboxes",
                    "title": "static let assignableDocumentQuestionBoxes: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/assignees",
                    "title": "static let assignees: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/scoreannotations",
                    "title": "static let scoreAnnotations: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/scorermarkup",
                    "title": "static let scorerMarkup: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/scorers",
                    "title": "static let scorers: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/takermarkup",
                    "title": "static let takerMarkup: MergeablePartsContainerPartID",
                    "type": "property"
                  },
                  {
                    "title": "Getting the document type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum/document",
                    "title": "AssignedWorkDocument.PartIDs.Document",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/assignables/assignedworkdocument/partids-swift.enum",
                "title": "AssignedWorkDocument.PartIDs",
                "type": "enum"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/partids-swift.property",
                "title": "var partIDs: [MergeablePartsContainerPartID]",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/scoreannotations",
                "title": "var scoreAnnotations: [AssignedWorkDocument.ScoreAnnotation]",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/scorers",
                "title": "var scorers: [AnyUserIdentity]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Variant error",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/error/otherdocumentisnotavariant",
                    "title": "case otherDocumentIsNotAVariant",
                    "type": "case"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/error/exportfailed(partids:)",
                    "title": "case exportFailed(partIDs: [AssignedWorkDocument.PartID])",
                    "type": "case"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/error/localizeddescription",
                        "title": "var localizedDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/assignables/assignedworkdocument/error/error-implementations",
                    "title": "Error Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/assignables/assignedworkdocument/error",
                "title": "AssignedWorkDocument.Error",
                "type": "enum"
              },
              {
                "title": "Getting the assignable document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/assignabledocument",
                "title": "var assignableDocument: AssignableDocument",
                "type": "property"
              },
              {
                "title": "Getting the assignees",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/assignees",
                "title": "var assignees: [AnyUserIdentity]",
                "type": "property"
              },
              {
                "title": "Getting the configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/configuration-swift.typealias",
                "title": "AssignedWorkDocument.Configuration",
                "type": "typealias"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/configuration-swift.property",
                "title": "var configuration: any AssignedWorkDocumentConfiguration",
                "type": "property"
              },
              {
                "title": "Merging the parts",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignedworkdocument/merge(other:)",
                "title": "func merge(other: AssignedWorkDocument) throws -> Bool",
                "type": "method"
              },
              {
                "title": "Producing thumbnails",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/questionthumbnails(visibleparts:)",
                "title": "func questionThumbnails(visibleParts: [AssignedWorkDocument.PartID]) async -> [AssignableDocument.Question.ID : [AssignableDocument.Question.Thumbnail]]",
                "type": "method"
              },
              {
                "title": "Computing the score",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/computescore()",
                "title": "func computeScore() -> Double",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a score annotation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/init(id:pageid:location:kind:)",
                    "title": "init(id: AssignedWorkDocument.ScoreAnnotation.ID, pageID: AssignedWorkDocument.Page.ID?, location: CGPoint, kind: AssignedWorkDocument.ScoreAnnotation.Kind)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting a score annotation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/id-swift.typealias",
                    "title": "AssignedWorkDocument.ScoreAnnotation.ID",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/id-swift.property",
                    "title": "var id: AssignedWorkDocument.ScoreAnnotation.ID",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Score annotations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/bonus",
                        "title": "case bonus",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/correct",
                        "title": "case correct",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/incorrect",
                        "title": "case incorrect",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/unknown",
                        "title": "case unknown",
                        "type": "case"
                      },
                      {
                        "title": "Creating a score annotation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/init(rawvalue:)",
                        "title": "init?(rawValue: Int)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/rawvalue-swift.property",
                        "title": "var rawValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/allcases-swift.typealias",
                        "title": "AssignedWorkDocument.ScoreAnnotation.Kind.AllCases",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/rawvalue-swift.typealias",
                        "title": "AssignedWorkDocument.ScoreAnnotation.Kind.RawValue",
                        "type": "typealias"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/allcases-swift.type.property",
                        "title": "static var allCases: [AssignedWorkDocument.ScoreAnnotation.Kind]",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum/rawrepresentable-implementations",
                        "title": "RawRepresentable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.enum",
                    "title": "AssignedWorkDocument.ScoreAnnotation.Kind",
                    "type": "enum"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/kind-swift.property",
                    "title": "var kind: AssignedWorkDocument.ScoreAnnotation.Kind",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/location",
                    "title": "var location: CGPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/pageid",
                    "title": "var pageID: AssignedWorkDocument.Page.ID?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/document",
                    "title": "AssignedWorkDocument.ScoreAnnotation.Document",
                    "type": "typealias"
                  },
                  {
                    "title": "Comparing score annotations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/==(_:_:)",
                    "title": "static func == (AssignedWorkDocument.ScoreAnnotation, AssignedWorkDocument.ScoreAnnotation) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Hashing the score annotation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/scoreannotation/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/assignables/assignedworkdocument/scoreannotation/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/assignables/assignedworkdocument/scoreannotation",
                "title": "AssignedWorkDocument.ScoreAnnotation",
                "type": "struct"
              },
              {
                "title": "Exporting the parts",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignedworkdocument/export(partids:)",
                "title": "func export(partIDs: [AssignedWorkDocument.PartID]) async throws -> [AssignedWorkDocument.PartID : URL]",
                "type": "method"
              },
              {
                "title": "Comparing work documents",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/==(_:_:)",
                "title": "static func == (AssignedWorkDocument, AssignedWorkDocument) -> Bool",
                "type": "op"
              },
              {
                "title": "Hashing the work document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Accessing work documents",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/subscript(_:)-4srtw",
                "title": "subscript(AssignedWorkDocument.Page.ID) -> AssignedWorkDocument.Page?",
                "type": "subscript"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/subscript(_:)-5h89c",
                "title": "subscript(AssignedWorkDocument.ScoreAnnotation.ID) -> AssignedWorkDocument.ScoreAnnotation?",
                "type": "subscript"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignedworkdocument/init(id:assignabledocument:partdata:)-54yg5",
                "title": "init(id: AssignedWorkDocument.ID, assignableDocument: AssignableDocument, partData: [AssignedWorkDocument.PartID : URL]) throws",
                "type": "init"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/init(id:assignabledocument:partdata:)-8eh38",
                "title": "init(id: AssignedWorkDocument.ID, assignableDocument: AssignableDocument, partData: [AssignedWorkDocument.PartID : MergeablePartData]) async throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/pagesdebugdescription",
                "title": "var pagesDebugDescription: String",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/exportparts(identifiedby:)",
                "title": "func exportParts(identifiedBy: [AssignedWorkDocument.PartID]) async throws -> [AssignedWorkDocument.PartID : MergeablePartData]",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/makepart(for:)",
                "title": "func makePart(for: AssignedWorkDocument.PartID) throws -> MergeablePartData?",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/merge(_:)",
                "title": "func merge(AssignedWorkDocument) async throws -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignedworkdocument/merge(partdata:into:)",
                "title": "func merge(partData: MergeablePartData, into: AssignedWorkDocument.PartID) async throws -> Bool",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignedworkdocument/merge(partid:partdataurl:)",
                "title": "func merge(partID: AssignedWorkDocument.PartID, partDataURL: URL) throws -> Bool",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/assignables/assignedworkdocument/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Inspecting the properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/assignabledocumentpageid",
                        "title": "var assignableDocumentPageID: AssignableDocument.Page.ID",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a page identifier",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          },
                          {
                            "title": "Getting the page identifier",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/assignabledocumentpageid",
                            "title": "var assignableDocumentPageID: AssignableDocument.Page.ID",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/element",
                            "title": "AssignedWorkDocument.Page.ID.Element",
                            "type": "typealias"
                          },
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/==(_:_:)",
                            "title": "static func == (AssignedWorkDocument.Page.ID, AssignedWorkDocument.Page.ID) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/assignables/assignedworkdocument/page/id-swift.struct",
                        "title": "AssignedWorkDocument.Page.ID",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/id-swift.property",
                        "title": "var id: AssignedWorkDocument.Page.ID",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/document",
                        "title": "AssignedWorkDocument.Page.Document",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/document",
                        "title": "AssignedWorkDocument.Page.Document",
                        "type": "typealias"
                      },
                      {
                        "title": "Hashing the page",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Comparing pages",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/==(_:_:)",
                        "title": "static func == (AssignedWorkDocument.Page, AssignedWorkDocument.Page) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/assignables/assignedworkdocument/page/rotation",
                        "title": "var rotation: Measurement<UnitAngle>",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/assignables/assignedworkdocument/page/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/assignables/assignedworkdocument/page/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/assignables/assignedworkdocument/page",
                    "title": "AssignedWorkDocument.Page",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/pages",
                    "title": "var pages: [AssignedWorkDocument.Page]",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/exporttopdf(visibleparts:)",
                    "title": "func exportToPDF(visibleParts: [MergeablePartsContainerPartID]) async -> PDFDocument",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocument/pagethumbnails(visibleparts:)",
                    "title": "func pageThumbnails(visibleParts: [MergeablePartsContainerPartID]) async -> [Self.Page.ID : Self.Page.Thumbnail]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/assignables/assignedworkdocument/mergeabledocument-implementations",
                "title": "MergeableDocument Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/assignedworkdocument",
            "title": "AssignedWorkDocument",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Assigning a document",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignable/assign(to:)-4jnsl",
                "title": "func assign(to: AnyUserIdentity) throws -> AssignedWorkDocument",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/assignable/assign(to:)-4mit8",
                "title": "func assign(to: some UserIdentity) throws -> AssignedWorkDocument",
                "type": "method"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignable/makeassignedworkdocument()",
                "title": "func makeAssignedWorkDocument() throws -> AssignedWorkDocument",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/assignable/makeassignedworkdocument(id:)",
                "title": "func makeAssignedWorkDocument(id: String) throws -> AssignedWorkDocument",
                "type": "method"
              }
            ],
            "path": "/documentation/assignables/assignable",
            "title": "Assignable",
            "type": "protocol"
          },
          {
            "title": "Configuration",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Configuring a document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocumentconfiguration/maxscore",
                "title": "var maxScore: Double?",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocumentconfiguration/correctscoremarktype",
                "title": "var correctScoreMarkType: AssignableDocument.CorrectMarkType",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocumentconfiguration/pointsperbonusscoremark",
                "title": "var pointsPerBonusScoreMark: Double",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocumentconfiguration/pointspercorrectscoremark",
                "title": "var pointsPerCorrectScoreMark: Double",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocumentconfiguration/pointsperincorrectscoremark",
                "title": "var pointsPerIncorrectScoreMark: Double",
                "type": "property"
              }
            ],
            "path": "/documentation/assignables/assignabledocumentconfiguration",
            "title": "AssignableDocumentConfiguration",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Configuring the score",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocumentconfiguration/manualscore",
                "title": "var manualScore: Double?",
                "type": "property"
              }
            ],
            "path": "/documentation/assignables/assignedworkdocumentconfiguration",
            "title": "AssignedWorkDocumentConfiguration",
            "type": "protocol"
          },
          {
            "title": "Presentation",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a document view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocumentview/init(document:activepartid:hiddenpartids:selectedpageid:selectedquestionid:showspagethumbnails:isstructureeditingenabled:)",
                "title": "init(document: Binding<AssignableDocumentView.Document>, activePartID: MergeablePartsContainerPartID?, hiddenPartIDs: [MergeablePartsContainerPartID], selectedPageID: Binding<AssignableDocumentView.Document.Page.ID?>?, selectedQuestionID: Binding<AssignableDocumentView.Document.Question.ID?>?, showsPageThumbnails: Bool, isStructureEditingEnabled: Bool)",
                "type": "init"
              },
              {
                "title": "Customizing the view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocumentview/body-swift.property",
                "title": "var body: some View",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignabledocumentview/document",
                "title": "AssignableDocumentView.Document",
                "type": "typealias"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocumentview/init(document:activepartid:hiddenpartids:selectedpageid:selectedquestionid:showspagethumbnails:isstructureeditingenabled:allowspencildrawing:onmarkupactivation:)",
                "title": "init(document: Binding<AssignableDocumentView.Document>, activePartID: MergeablePartsContainerPartID?, hiddenPartIDs: [MergeablePartsContainerPartID], selectedPageID: Binding<AssignableDocumentView.Document.Page.ID?>?, selectedQuestionID: Binding<AssignableDocumentView.Document.Question.ID?>?, showsPageThumbnails: Bool, isStructureEditingEnabled: Bool, allowsPencilDrawing: Bool, onMarkupActivation: (Bool) -> Void)",
                "type": "init"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignabledocumentview/body-swift.typealias",
                "title": "AssignableDocumentView.Body",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accentcolor(_:)",
                    "title": "func accentColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(activationpoint:)-1jtj6",
                    "title": "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(activationpoint:)-7y71f",
                    "title": "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(addtraits:)",
                    "title": "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(hidden:)",
                    "title": "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(hint:)",
                    "title": "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(identifier:)",
                    "title": "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(inputlabels:)",
                    "title": "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(label:)",
                    "title": "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(removetraits:)",
                    "title": "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(selectionidentifier:)",
                    "title": "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(sortpriority:)",
                    "title": "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibility(value:)",
                    "title": "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityaction(_:_:)",
                    "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityaction(action:label:)",
                    "title": "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityaction(named:_:)-1mxa0",
                    "title": "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityaction(named:_:)-4f0ex",
                    "title": "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityaction(named:_:)-eylu",
                    "title": "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityactions(_:)",
                    "title": "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityactions(category:_:)",
                    "title": "func accessibilityActions<Content>(category: AccessibilityActionCategory, () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityactivationpoint(_:)-4oj3y",
                    "title": "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityactivationpoint(_:)-6kf9q",
                    "title": "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityactivationpoint(_:isenabled:)-680ut",
                    "title": "func accessibilityActivationPoint(UnitPoint, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityactivationpoint(_:isenabled:)-8ouch",
                    "title": "func accessibilityActivationPoint(CGPoint, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityaddtraits(_:)",
                    "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityadjustableaction(_:)",
                    "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitychartdescriptor(_:)",
                    "title": "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitychildren(children:)",
                    "title": "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitycustomcontent(_:_:importance:)-1esid",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitycustomcontent(_:_:importance:)-65u67",
                    "title": "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitycustomcontent(_:_:importance:)-6lvqe",
                    "title": "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitycustomcontent(_:_:importance:)-7obtu",
                    "title": "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitycustomcontent(_:_:importance:)-7s0g",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitycustomcontent(_:_:importance:)-8eu12",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitycustomcontent(_:_:importance:)-94800",
                    "title": "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitycustomcontent(_:_:importance:)-h16",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydirecttouch(_:options:)",
                    "title": "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydragpoint(_:description:)-134aa",
                    "title": "func accessibilityDragPoint(UnitPoint, description: LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydragpoint(_:description:)-64gmb",
                    "title": "func accessibilityDragPoint<S>(UnitPoint, description: S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydragpoint(_:description:)-8o7g8",
                    "title": "func accessibilityDragPoint(UnitPoint, description: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydragpoint(_:description:isenabled:)-1srnq",
                    "title": "func accessibilityDragPoint(UnitPoint, description: LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydragpoint(_:description:isenabled:)-rjs2",
                    "title": "func accessibilityDragPoint<S>(UnitPoint, description: S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydragpoint(_:description:isenabled:)-sluc",
                    "title": "func accessibilityDragPoint(UnitPoint, description: Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydroppoint(_:description:)-1m087",
                    "title": "func accessibilityDropPoint(UnitPoint, description: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydroppoint(_:description:)-6ljqr",
                    "title": "func accessibilityDropPoint<S>(UnitPoint, description: S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydroppoint(_:description:)-8m6uj",
                    "title": "func accessibilityDropPoint(UnitPoint, description: LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydroppoint(_:description:isenabled:)-2blry",
                    "title": "func accessibilityDropPoint(UnitPoint, description: Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydroppoint(_:description:isenabled:)-9fc1r",
                    "title": "func accessibilityDropPoint<S>(UnitPoint, description: S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitydroppoint(_:description:isenabled:)-9p1uc",
                    "title": "func accessibilityDropPoint(UnitPoint, description: LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityelement(children:)",
                    "title": "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityfocused(_:)",
                    "title": "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityfocused(_:equals:)",
                    "title": "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityheading(_:)",
                    "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityhidden(_:)",
                    "title": "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityhidden(_:isenabled:)",
                    "title": "func accessibilityHidden(Bool, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityhint(_:)-3e46s",
                    "title": "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityhint(_:)-71mx6",
                    "title": "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityhint(_:)-7c0vs",
                    "title": "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityhint(_:isenabled:)-3ax80",
                    "title": "func accessibilityHint(Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityhint(_:isenabled:)-50yeq",
                    "title": "func accessibilityHint(LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityhint(_:isenabled:)-8yov3",
                    "title": "func accessibilityHint<S>(S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityidentifier(_:)",
                    "title": "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityidentifier(_:isenabled:)",
                    "title": "func accessibilityIdentifier(String, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityignoresinvertcolors(_:)",
                    "title": "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityinputlabels(_:)-470t0",
                    "title": "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityinputlabels(_:)-6t0oe",
                    "title": "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityinputlabels(_:)-c5ua",
                    "title": "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityinputlabels(_:isenabled:)-3yauv",
                    "title": "func accessibilityInputLabels([Text], isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityinputlabels(_:isenabled:)-4p76",
                    "title": "func accessibilityInputLabels([LocalizedStringKey], isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityinputlabels(_:isenabled:)-76nzn",
                    "title": "func accessibilityInputLabels<S>([S], isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylabel(_:)-5q5y4",
                    "title": "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylabel(_:)-94syi",
                    "title": "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylabel(_:)-985xt",
                    "title": "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylabel(_:isenabled:)-2s20f",
                    "title": "func accessibilityLabel(Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylabel(_:isenabled:)-3cqul",
                    "title": "func accessibilityLabel<S>(S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylabel(_:isenabled:)-8bbvj",
                    "title": "func accessibilityLabel(LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylabel(content:)",
                    "title": "func accessibilityLabel<V>(content: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylabeledpair(role:id:in:)",
                    "title": "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitylinkedgroup(id:in:)",
                    "title": "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityremovetraits(_:)",
                    "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrepresentation(representation:)",
                    "title": "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrespondstouserinteraction(_:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrespondstouserinteraction(_:isenabled:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:)-725qh",
                    "title": "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:)-7zn86",
                    "title": "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:)-8l8wp",
                    "title": "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:)-9xfln",
                    "title": "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:entryid:entrylabel:)-13vm3",
                    "title": "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:entryid:entrylabel:)-34ce7",
                    "title": "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:entryid:entrylabel:)-4z0jg",
                    "title": "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:entryid:entrylabel:)-8fjzv",
                    "title": "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:entrylabel:)-55k2n",
                    "title": "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:entrylabel:)-7kukr",
                    "title": "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:entrylabel:)-81890",
                    "title": "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:entries:entrylabel:)-8bltf",
                    "title": "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:textranges:)-5sw84",
                    "title": "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:textranges:)-66pfo",
                    "title": "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:textranges:)-72k32",
                    "title": "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotor(_:textranges:)-8ejoo",
                    "title": "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityrotorentry(id:in:)",
                    "title": "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityscrollaction(_:)",
                    "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityshowslargecontentviewer()",
                    "title": "func accessibilityShowsLargeContentViewer() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityshowslargecontentviewer(_:)",
                    "title": "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitysortpriority(_:)",
                    "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilitytextcontenttype(_:)",
                    "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityvalue(_:)-6pr4i",
                    "title": "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityvalue(_:)-8tnya",
                    "title": "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityvalue(_:)-pv72",
                    "title": "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityvalue(_:isenabled:)-5dwoz",
                    "title": "func accessibilityValue(Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityvalue(_:isenabled:)-5r9er",
                    "title": "func accessibilityValue<S>(S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityvalue(_:isenabled:)-7ijky",
                    "title": "func accessibilityValue(LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/accessibilityzoomaction(_:)",
                    "title": "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/actionsheet(ispresented:content:)",
                    "title": "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/actionsheet(item:content:)",
                    "title": "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:actions:)-1g47l",
                    "title": "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:actions:)-5o2o1",
                    "title": "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:actions:)-7a66l",
                    "title": "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:actions:message:)-43631",
                    "title": "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:actions:message:)-5dg8l",
                    "title": "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:actions:message:)-8fmgw",
                    "title": "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:presenting:actions:)-1osl2",
                    "title": "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:presenting:actions:)-3igoh",
                    "title": "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:presenting:actions:)-fryk",
                    "title": "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:presenting:actions:message:)-2ses6",
                    "title": "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:presenting:actions:message:)-5rrdo",
                    "title": "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(_:ispresented:presenting:actions:message:)-9hxjx",
                    "title": "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(ispresented:content:)",
                    "title": "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(ispresented:error:actions:)",
                    "title": "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(ispresented:error:actions:message:)",
                    "title": "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alert(item:content:)",
                    "title": "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alignmentguide(_:computevalue:)-2kdcs",
                    "title": "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alignmentguide(_:computevalue:)-7leqr",
                    "title": "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/alloweddynamicrange(_:)",
                    "title": "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/allowshittesting(_:)",
                    "title": "func allowsHitTesting(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/allowstightening(_:)",
                    "title": "func allowsTightening(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/allowswindowactivationevents(_:)",
                    "title": "func allowsWindowActivationEvents(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/anchorpreference(key:value:transform:)",
                    "title": "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignabledocumentview/animation(_:)",
                    "title": "func animation(Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/animation(_:body:)",
                    "title": "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/animation(_:value:)",
                    "title": "func animation<V>(Animation?, value: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/aspectratio(_:contentmode:)-2cwml",
                    "title": "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/aspectratio(_:contentmode:)-7ymf5",
                    "title": "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/autocapitalization(_:)",
                    "title": "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/autocorrectiondisabled(_:)",
                    "title": "func autocorrectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/background(_:alignment:)",
                    "title": "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/background(_:ignoressafeareaedges:)",
                    "title": "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/background(_:in:fillstyle:)-1p4fd",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/background(_:in:fillstyle:)-4nfc5",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/background(alignment:content:)",
                    "title": "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/background(ignoressafeareaedges:)",
                    "title": "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/background(in:fillstyle:)-5jtdz",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/background(in:fillstyle:)-9iavb",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/backgroundpreferencevalue(_:_:)",
                    "title": "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/backgroundpreferencevalue(_:alignment:_:)",
                    "title": "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/backgroundstyle(_:)",
                    "title": "func backgroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/badge(_:)-19ypv",
                    "title": "func badge(LocalizedStringKey?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/badge(_:)-2kkp5",
                    "title": "func badge(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/badge(_:)-43nz1",
                    "title": "func badge(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/badge(_:)-4p6fq",
                    "title": "func badge<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/badgeprominence(_:)",
                    "title": "func badgeProminence(BadgeProminence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/baselineoffset(_:)",
                    "title": "func baselineOffset(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/blendmode(_:)",
                    "title": "func blendMode(BlendMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/blur(radius:opaque:)",
                    "title": "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/bold(_:)",
                    "title": "func bold(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/border(_:width:)",
                    "title": "func border<S>(S, width: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/brightness(_:)",
                    "title": "func brightness(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/buttonbordershape(_:)",
                    "title": "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/buttonrepeatbehavior(_:)",
                    "title": "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/buttonstyle(_:)-4skqx",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/buttonstyle(_:)-85fny",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/clipshape(_:style:)",
                    "title": "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/clipped(antialiased:)",
                    "title": "func clipped(antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/coloreffect(_:isenabled:)",
                    "title": "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/colorinvert()",
                    "title": "func colorInvert() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/colormultiply(_:)",
                    "title": "func colorMultiply(Color) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/colorscheme(_:)",
                    "title": "func colorScheme(ColorScheme) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/compositinggroup()",
                    "title": "func compositingGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:)-2rpia",
                    "title": "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:)-2uqw4",
                    "title": "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:)-6z4th",
                    "title": "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4yljs",
                    "title": "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9g1jb",
                    "title": "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-mn7t",
                    "title": "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-29kuk",
                    "title": "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6hn5o",
                    "title": "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-9zkvr",
                    "title": "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2xf36",
                    "title": "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-3d5sp",
                    "title": "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-p5bq",
                    "title": "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/containerbackground(_:for:)",
                    "title": "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/containerbackground(for:alignment:content:)",
                    "title": "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/containerrelativeframe(_:alignment:)",
                    "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/containerrelativeframe(_:alignment:_:)",
                    "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title": "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/containershape(_:)",
                    "title": "func containerShape<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/containervalue(_:_:)",
                    "title": "func containerValue<V>(WritableKeyPath<ContainerValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contentmargins(_:_:for:)-1j5ux",
                    "title": "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contentmargins(_:_:for:)-9v3h3",
                    "title": "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contentmargins(_:for:)",
                    "title": "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contentshape(_:_:eofill:)",
                    "title": "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contentshape(_:eofill:)",
                    "title": "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignabledocumentview/contenttoolbar(for:content:)-6joos",
                    "title": "func contentToolbar<Content>(for: ContentToolbarPlacement, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignabledocumentview/contenttoolbar(for:content:)-84j4s",
                    "title": "func contentToolbar<Content>(for: ContentToolbarPlacement, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contenttransition(_:)",
                    "title": "func contentTransition(ContentTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contextmenu(_:)",
                    "title": "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title": "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contextmenu(menuitems:)",
                    "title": "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contextmenu(menuitems:preview:)",
                    "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/contrast(_:)",
                    "title": "func contrast(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/controlgroupstyle(_:)",
                    "title": "func controlGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/controlsize(_:)",
                    "title": "func controlSize(ControlSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/coordinatespace(_:)",
                    "title": "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/coordinatespace(name:)",
                    "title": "func coordinateSpace<T>(name: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/cornerradius(_:antialiased:)",
                    "title": "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/datepickerstyle(_:)",
                    "title": "func datePickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/defaultadaptabletabbarplacement(_:)",
                    "title": "func defaultAdaptableTabBarPlacement(AdaptableTabBarPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/defaultappstorage(_:)",
                    "title": "func defaultAppStorage(UserDefaults) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/defaultfocus(_:_:priority:)",
                    "title": "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/defaulthovereffect(_:)-9dssj",
                    "title": "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/defaulthovereffect(_:)-dsy7",
                    "title": "func defaultHoverEffect(some CustomHoverEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/defaultscrollanchor(_:)",
                    "title": "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/defaultscrollanchor(_:for:)",
                    "title": "func defaultScrollAnchor(UnitPoint?, for: ScrollAnchorRole) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/deferssystemgestures(on:)",
                    "title": "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/deletedisabled(_:)",
                    "title": "func deleteDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/dialogicon(_:)",
                    "title": "func dialogIcon(Image?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/dialogsuppressiontoggle(_:issuppressed:)-34vpu",
                    "title": "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/dialogsuppressiontoggle(_:issuppressed:)-4rz0h",
                    "title": "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/dialogsuppressiontoggle(_:issuppressed:)-8mvbb",
                    "title": "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/dialogsuppressiontoggle(issuppressed:)",
                    "title": "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/disableautocorrection(_:)",
                    "title": "func disableAutocorrection(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/disabled(_:)",
                    "title": "func disabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/disclosuregroupstyle(_:)",
                    "title": "func disclosureGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title": "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/documentbrowsercontextmenu(_:)",
                    "title": "func documentBrowserContextMenu(([URL]?) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/draggable(_:)",
                    "title": "func draggable<T>(@autoclosure () -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/draggable(_:preview:)",
                    "title": "func draggable<V, T>(@autoclosure () -> T, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/drawinggroup(opaque:colormode:)",
                    "title": "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/dropdestination(for:action:istargeted:)",
                    "title": "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/dynamictypesize(_:)-5jzjl",
                    "title": "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/dynamictypesize(_:)-6nqjw",
                    "title": "func dynamicTypeSize<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/edgesignoringsafearea(_:)",
                    "title": "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/environment(_:)",
                    "title": "func environment<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/environment(_:_:)",
                    "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/environmentobject(_:)",
                    "title": "func environmentObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogbrowseroptions(_:)",
                    "title": "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogconfirmationlabel(_:)-313v8",
                    "title": "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogconfirmationlabel(_:)-7x004",
                    "title": "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogconfirmationlabel(_:)-84h3u",
                    "title": "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogcustomizationid(_:)",
                    "title": "func fileDialogCustomizationID(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogdefaultdirectory(_:)",
                    "title": "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogimportsunresolvedaliases(_:)",
                    "title": "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogmessage(_:)-58jkx",
                    "title": "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogmessage(_:)-6561",
                    "title": "func fileDialogMessage<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogmessage(_:)-7cd9z",
                    "title": "func fileDialogMessage(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filedialogurlenabled(_:)",
                    "title": "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1wg9y",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4c5qw",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-2lvbx",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-7h8lb",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:documents:contenttype:oncompletion:)-4h8lc",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:documents:contenttype:oncompletion:)-73e61",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1723l",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-912sx",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title": "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title": "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporterfilenamelabel(_:)-2juun",
                    "title": "func fileExporterFilenameLabel(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporterfilenamelabel(_:)-34tej",
                    "title": "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileexporterfilenamelabel(_:)-6bxn7",
                    "title": "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filemover(ispresented:file:oncompletion:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filemover(ispresented:files:oncompletion:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/finddisabled(_:)",
                    "title": "func findDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/findnavigator(ispresented:)",
                    "title": "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fixedsize()",
                    "title": "func fixedSize() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fixedsize(horizontal:vertical:)",
                    "title": "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/flipsforrighttoleftlayoutdirection(_:)",
                    "title": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focuseffectdisabled(_:)",
                    "title": "func focusEffectDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusable(_:)",
                    "title": "func focusable(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusable(_:interactions:)",
                    "title": "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focused(_:)",
                    "title": "func focused(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focused(_:equals:)",
                    "title": "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedobject(_:)-2x0tj",
                    "title": "func focusedObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedobject(_:)-871wj",
                    "title": "func focusedObject<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedsceneobject(_:)-22cm2",
                    "title": "func focusedSceneObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedsceneobject(_:)-636mg",
                    "title": "func focusedSceneObject<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedscenevalue(_:)",
                    "title": "func focusedSceneValue<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedscenevalue(_:_:)-11fbv",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedscenevalue(_:_:)-462n6",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedvalue(_:)",
                    "title": "func focusedValue<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedvalue(_:_:)-15azc",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/focusedvalue(_:_:)-w427",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/font(_:)",
                    "title": "func font(Font?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fontdesign(_:)",
                    "title": "func fontDesign(Font.Design?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fontweight(_:)",
                    "title": "func fontWeight(Font.Weight?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fontwidth(_:)",
                    "title": "func fontWidth(Font.Width?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/foregroundcolor(_:)",
                    "title": "func foregroundColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/foregroundstyle(_:)",
                    "title": "func foregroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/foregroundstyle(_:_:)",
                    "title": "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/foregroundstyle(_:_:_:)",
                    "title": "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/formstyle(_:)",
                    "title": "func formStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignabledocumentview/frame()",
                    "title": "func frame() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/frame(depth:alignment:)",
                    "title": "func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/frame(mindepth:idealdepth:maxdepth:alignment:)",
                    "title": "func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title": "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/frame(width:height:alignment:)",
                    "title": "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fullscreencover(ispresented:ondismiss:content:)",
                    "title": "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/fullscreencover(item:ondismiss:content:)",
                    "title": "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gaugestyle(_:)",
                    "title": "func gaugeStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/geometrygroup()",
                    "title": "func geometryGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gesture(_:)",
                    "title": "func gesture(some UIGestureRecognizerRepresentable) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gesture(_:including:)",
                    "title": "func gesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gesture(_:isenabled:)",
                    "title": "func gesture<T>(T, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gesture(_:name:isenabled:)",
                    "title": "func gesture<T>(T, name: String, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignabledocumentview/glassbackgroundeffect(_:displaymode:)",
                    "title": "func glassBackgroundEffect<S>(S, displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignabledocumentview/glassbackgroundeffect(_:in:displaymode:)",
                    "title": "func glassBackgroundEffect<T, S>(S, in: T, displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/glassbackgroundeffect(displaymode:)",
                    "title": "func glassBackgroundEffect(displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/glassbackgroundeffect(in:displaymode:)",
                    "title": "func glassBackgroundEffect<S>(in: S, displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/grayscale(_:)",
                    "title": "func grayscale(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gridcellanchor(_:)",
                    "title": "func gridCellAnchor(UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gridcellcolumns(_:)",
                    "title": "func gridCellColumns(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gridcellunsizedaxes(_:)",
                    "title": "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/gridcolumnalignment(_:)",
                    "title": "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/groupboxstyle(_:)",
                    "title": "func groupBoxStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/handgestureshortcut(_:isenabled:)",
                    "title": "func handGestureShortcut(HandGestureShortcut, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/handpointerbehavior(_:)",
                    "title": "func handPointerBehavior(HandPointerBehavior?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/handlesexternalevents(preferring:allowing:)",
                    "title": "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/headerprominence(_:)",
                    "title": "func headerProminence(Prominence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/help(_:)-1ervr",
                    "title": "func help<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/help(_:)-3j3b9",
                    "title": "func help(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/help(_:)-3q989",
                    "title": "func help(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hidden()",
                    "title": "func hidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/highprioritygesture(_:including:)",
                    "title": "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/highprioritygesture(_:isenabled:)",
                    "title": "func highPriorityGesture<T>(T, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/highprioritygesture(_:name:isenabled:)",
                    "title": "func highPriorityGesture<T>(T, name: String, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hovereffect(_:)",
                    "title": "func hoverEffect(HoverEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hovereffect(_:in:isenabled:)",
                    "title": "func hoverEffect(some CustomHoverEffect, in: HoverEffectGroup?, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hovereffect(_:isenabled:)",
                    "title": "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hovereffect(in:isenabled:body:)",
                    "title": "func hoverEffect(in: HoverEffectGroup?, isEnabled: Bool, body: (EmptyHoverEffectContent, Bool, GeometryProxy) -> some HoverEffectContent) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hovereffectdisabled(_:)",
                    "title": "func hoverEffectDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hovereffectgroup()",
                    "title": "func hoverEffectGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hovereffectgroup(_:)",
                    "title": "func hoverEffectGroup(HoverEffectGroup?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/hovereffectgroup(id:in:behavior:)",
                    "title": "func hoverEffectGroup(id: String?, in: Namespace.ID, behavior: HoverEffectGroup.Behavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/huerotation(_:)",
                    "title": "func hueRotation(Angle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/id(_:)",
                    "title": "func id<ID>(ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ignoressafearea(_:edges:)",
                    "title": "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/imagescale(_:)",
                    "title": "func imageScale(Image.Scale) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/immersiveenvironmentpicker(content:)",
                    "title": "func immersiveEnvironmentPicker<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/indexviewstyle(_:)",
                    "title": "func indexViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/inspector(ispresented:content:)",
                    "title": "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/inspectorcolumnwidth(_:)",
                    "title": "func inspectorColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/inspectorcolumnwidth(min:ideal:max:)",
                    "title": "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/interactionactivitytrackingtag(_:)",
                    "title": "func interactionActivityTrackingTag(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/interactivedismissdisabled(_:)",
                    "title": "func interactiveDismissDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/invalidatablecontent(_:)",
                    "title": "func invalidatableContent(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/italic(_:)",
                    "title": "func italic(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/itemprovider(_:)",
                    "title": "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/kerning(_:)",
                    "title": "func kerning(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/keyboardshortcut(_:)-15d7p",
                    "title": "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/keyboardshortcut(_:)-4izoa",
                    "title": "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/keyboardshortcut(_:modifiers:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/keyboardshortcut(_:modifiers:localization:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/keyboardtype(_:)",
                    "title": "func keyboardType(UIKeyboardType) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title": "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title": "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/labelstyle(_:)",
                    "title": "func labelStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/labeledcontentstyle(_:)",
                    "title": "func labeledContentStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/labelshidden()",
                    "title": "func labelsHidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/labelsvisibility(_:)",
                    "title": "func labelsVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/layereffect(_:maxsampleoffset:isenabled:)",
                    "title": "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/layoutdirectionbehavior(_:)",
                    "title": "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/layoutpriority(_:)",
                    "title": "func layoutPriority(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/layoutvalue(key:value:)",
                    "title": "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/linelimit(_:)-3e7rs",
                    "title": "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/linelimit(_:)-87nyr",
                    "title": "func lineLimit(ClosedRange<Int>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/linelimit(_:)-9059t",
                    "title": "func lineLimit(Int?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/linelimit(_:)-9e4kk",
                    "title": "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/linelimit(_:reservesspace:)",
                    "title": "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/linespacing(_:)",
                    "title": "func lineSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listitemtint(_:)-1lzfs",
                    "title": "func listItemTint(ListItemTint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listitemtint(_:)-65paj",
                    "title": "func listItemTint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listrowbackground(_:)",
                    "title": "func listRowBackground<V>(V?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listrowhovereffect(_:)",
                    "title": "func listRowHoverEffect(HoverEffect?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listrowhovereffectdisabled(_:)",
                    "title": "func listRowHoverEffectDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listrowinsets(_:)",
                    "title": "func listRowInsets(EdgeInsets?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listrowseparator(_:edges:)",
                    "title": "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listrowseparatortint(_:edges:)",
                    "title": "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listrowspacing(_:)",
                    "title": "func listRowSpacing(CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listsectionseparator(_:edges:)",
                    "title": "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listsectionseparatortint(_:edges:)",
                    "title": "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listsectionspacing(_:)-5ucma",
                    "title": "func listSectionSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/listsectionspacing(_:)-80tcz",
                    "title": "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/liststyle(_:)",
                    "title": "func listStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/luminancetoalpha()",
                    "title": "func luminanceToAlpha() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/mask(_:)",
                    "title": "func mask<Mask>(Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/mask(alignment:_:)",
                    "title": "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title": "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/matchedtransitionsource(id:in:)",
                    "title": "func matchedTransitionSource(id: some Hashable, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/matchedtransitionsource(id:in:configuration:)",
                    "title": "func matchedTransitionSource(id: some Hashable, in: Namespace.ID, configuration: (EmptyMatchedTransitionSourceConfiguration) -> some MatchedTransitionSourceConfiguration) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/materialactiveappearance(_:)",
                    "title": "func materialActiveAppearance(MaterialActiveAppearance) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/menuactiondismissbehavior(_:)",
                    "title": "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/menuindicator(_:)",
                    "title": "func menuIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/menuorder(_:)",
                    "title": "func menuOrder(MenuOrder) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/menustyle(_:)",
                    "title": "func menuStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/minimumscalefactor(_:)",
                    "title": "func minimumScaleFactor(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/modifier(_:)",
                    "title": "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/monospaced(_:)",
                    "title": "func monospaced(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/monospaceddigit()",
                    "title": "func monospacedDigit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/movedisabled(_:)",
                    "title": "func moveDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/multilinetextalignment(_:)",
                    "title": "func multilineTextAlignment(TextAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbarbackbuttonhidden(_:)",
                    "title": "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbarhidden(_:)",
                    "title": "func navigationBarHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbaritems(leading:)",
                    "title": "func navigationBarItems<L>(leading: L) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbaritems(leading:trailing:)",
                    "title": "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbaritems(trailing:)",
                    "title": "func navigationBarItems<T>(trailing: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbartitle(_:)-2evkn",
                    "title": "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbartitle(_:)-2r2sv",
                    "title": "func navigationBarTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbartitle(_:)-9r37n",
                    "title": "func navigationBarTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbartitle(_:displaymode:)-1wnpc",
                    "title": "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbartitle(_:displaymode:)-8kxgt",
                    "title": "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbartitle(_:displaymode:)-9kxn3",
                    "title": "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationbartitledisplaymode(_:)",
                    "title": "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdestination(for:destination:)",
                    "title": "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdestination(ispresented:destination:)",
                    "title": "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdestination(item:destination:)",
                    "title": "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdocument(_:)-1qxal",
                    "title": "func navigationDocument<D>(D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdocument(_:)-6bu8i",
                    "title": "func navigationDocument(URL) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdocument(_:preview:)-3ve5c",
                    "title": "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdocument(_:preview:)-432zb",
                    "title": "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdocument(_:preview:)-6davs",
                    "title": "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationdocument(_:preview:)-8i70z",
                    "title": "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationsplitviewcolumnwidth(_:)",
                    "title": "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title": "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationsplitviewstyle(_:)",
                    "title": "func navigationSplitViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationsubtitle(_:)-5fyvi",
                    "title": "func navigationSubtitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationsubtitle(_:)-6bvpd",
                    "title": "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationsubtitle(_:)-82yqb",
                    "title": "func navigationSubtitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationtitle(_:)-1tz9r",
                    "title": "func navigationTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationtitle(_:)-26b3k",
                    "title": "func navigationTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationtitle(_:)-49q4w",
                    "title": "func navigationTitle<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationtitle(_:)-4s374",
                    "title": "func navigationTitle(Binding<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationtitle(_:)-qg2x",
                    "title": "func navigationTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationtransition(_:)",
                    "title": "func navigationTransition(some NavigationTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/navigationviewstyle(_:)",
                    "title": "func navigationViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/offset(_:)",
                    "title": "func offset(CGSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/offset(z:)",
                    "title": "func offset(z: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onappear(perform:)",
                    "title": "func onAppear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onchange(of:initial:_:)-5cblf",
                    "title": "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onchange(of:initial:_:)-7hrjm",
                    "title": "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignabledocumentview/onchange(of:perform:)",
                    "title": "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/oncontinueuseractivity(_:perform:)",
                    "title": "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/oncontinuoushover(coordinatespace:perform:)",
                    "title": "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondisappear(perform:)",
                    "title": "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondrag(_:)",
                    "title": "func onDrag(() -> NSItemProvider) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondrag(_:preview:)",
                    "title": "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondrop(of:delegate:)-1abfa",
                    "title": "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondrop(of:delegate:)-811l4",
                    "title": "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondrop(of:istargeted:perform:)-16cba",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondrop(of:istargeted:perform:)-1bj4u",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondrop(of:istargeted:perform:)-24xb8",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ondrop(of:istargeted:perform:)-8pa0g",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ongeometrychange(for:of:action:)-53vnw",
                    "title": "func onGeometryChange<T>(for: T.Type, of: (GeometryProxy) -> T, action: (T, T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ongeometrychange(for:of:action:)-75i6t",
                    "title": "func onGeometryChange<T>(for: T.Type, of: (GeometryProxy) -> T, action: (T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ongeometrychange3d(for:of:action:)-1k0b9",
                    "title": "func onGeometryChange3D<T>(for: T.Type, of: (GeometryProxy3D) -> T, action: (T, T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ongeometrychange3d(for:of:action:)-9bw7e",
                    "title": "func onGeometryChange3D<T>(for: T.Type, of: (GeometryProxy3D) -> T, action: (T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onhover(perform:)",
                    "title": "func onHover(perform: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onimmersionchange(initial:_:)",
                    "title": "func onImmersionChange(initial: Bool, (ImmersionChangeContext, ImmersionChangeContext) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onkeypress(_:action:)",
                    "title": "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onkeypress(_:phases:action:)",
                    "title": "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onkeypress(characters:phases:action:)",
                    "title": "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onkeypress(keys:phases:action:)",
                    "title": "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onkeypress(phases:action:)",
                    "title": "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onopenurl(perform:)",
                    "title": "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onpencildoubletap(perform:)",
                    "title": "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onpencilsqueeze(perform:)",
                    "title": "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onpreferencechange(_:perform:)",
                    "title": "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onreceive(_:perform:)",
                    "title": "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onscrollgeometrychange(for:of:action:)",
                    "title": "func onScrollGeometryChange<T>(for: T.Type, of: (ScrollGeometry) -> T, action: (T, T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onscrollphasechange(_:)-51pnd",
                    "title": "func onScrollPhaseChange((ScrollPhase, ScrollPhase, ScrollPhaseChangeContext) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onscrollphasechange(_:)-8kwar",
                    "title": "func onScrollPhaseChange((ScrollPhase, ScrollPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onscrolltargetvisibilitychange(idtype:threshold:_:)",
                    "title": "func onScrollTargetVisibilityChange<ID>(idType: ID.Type, threshold: Double, ([ID]) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onscrollvisibilitychange(threshold:_:)",
                    "title": "func onScrollVisibilityChange(threshold: Double, (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onsubmit(of:_:)",
                    "title": "func onSubmit(of: SubmitTriggers, () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ontapgesture(count:coordinatespace:perform:)",
                    "title": "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ontapgesture(count:perform:)",
                    "title": "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/onvolumeviewpointchange(updatestrategy:initial:_:)",
                    "title": "func onVolumeViewpointChange(updateStrategy: VolumeViewpointUpdateStrategy, initial: Bool, (Viewpoint3D, Viewpoint3D) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/opacity(_:)",
                    "title": "func opacity(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/ornament(visibility:attachmentanchor:contentalignment:ornament:)",
                    "title": "func ornament<Content>(visibility: Visibility, attachmentAnchor: OrnamentAttachmentAnchor, contentAlignment: Alignment, ornament: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/overlay(_:alignment:)",
                    "title": "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/overlay(_:ignoressafeareaedges:)",
                    "title": "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/overlay(_:in:fillstyle:)",
                    "title": "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/overlay(alignment:content:)",
                    "title": "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/overlaypreferencevalue(_:_:)",
                    "title": "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/overlaypreferencevalue(_:alignment:_:)",
                    "title": "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/padding(_:)-3e0c4",
                    "title": "func padding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/padding(_:)-5y302",
                    "title": "func padding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/padding(_:_:)",
                    "title": "func padding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/padding3d(_:)-11lka",
                    "title": "func padding3D(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/padding3d(_:)-2jdpz",
                    "title": "func padding3D(EdgeInsets3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/padding3d(_:_:)",
                    "title": "func padding3D(Edge3D.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/paletteselectioneffect(_:)",
                    "title": "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/persistentsystemoverlays(_:)",
                    "title": "func persistentSystemOverlays(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/perspectiverotationeffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/phaseanimator(_:content:animation:)",
                    "title": "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/phaseanimator(_:trigger:content:animation:)",
                    "title": "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/pickerstyle(_:)",
                    "title": "func pickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/pointerstyle(_:)",
                    "title": "func pointerStyle(PointerStyle?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/popover(item:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/position(_:)",
                    "title": "func position(CGPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/position(x:y:)",
                    "title": "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/preference(key:value:)",
                    "title": "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/preferredcolorscheme(_:)",
                    "title": "func preferredColorScheme(ColorScheme?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/preferredsurroundingseffect(_:)",
                    "title": "func preferredSurroundingsEffect(SurroundingsEffect?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationbackground(_:)",
                    "title": "func presentationBackground<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationbackground(alignment:content:)",
                    "title": "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationbackgroundinteraction(_:)",
                    "title": "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationcompactadaptation(_:)",
                    "title": "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationcompactadaptation(horizontal:vertical:)",
                    "title": "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationcontentinteraction(_:)",
                    "title": "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationcornerradius(_:)",
                    "title": "func presentationCornerRadius(CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationdetents(_:)",
                    "title": "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationdetents(_:selection:)",
                    "title": "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationdragindicator(_:)",
                    "title": "func presentationDragIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/presentationsizing(_:)",
                    "title": "func presentationSizing(some PresentationSizing) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/previewcontext(_:)",
                    "title": "func previewContext<C>(C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/previewdevice(_:)",
                    "title": "func previewDevice(PreviewDevice?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/previewdisplayname(_:)",
                    "title": "func previewDisplayName(String?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/previewinterfaceorientation(_:)",
                    "title": "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/previewlayout(_:)",
                    "title": "func previewLayout(PreviewLayout) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/privacysensitive(_:)",
                    "title": "func privacySensitive(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/progressviewstyle(_:)",
                    "title": "func progressViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/projectioneffect(_:)",
                    "title": "func projectionEffect(ProjectionTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/redacted(reason:)",
                    "title": "func redacted(reason: RedactionReasons) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/refreshable(action:)",
                    "title": "func refreshable(action: () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/renameaction(_:)-5qi9l",
                    "title": "func renameAction(() -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/renameaction(_:)-ad9l",
                    "title": "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/replacedisabled(_:)",
                    "title": "func replaceDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/rotation3deffect(_:anchor:)",
                    "title": "func rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/rotation3deffect(_:axis:anchor:)-208v0",
                    "title": "func rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/rotation3deffect(_:axis:anchor:)-26k0z",
                    "title": "func rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> ModifiedContent<Self, _Rotation3DEffectAngleAxis>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/rotation3deffect(_:axis:anchor:)-3o5e2",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/rotationeffect(_:anchor:)",
                    "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/safeareainset(edge:alignment:spacing:content:)-5kde",
                    "title": "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/safeareainset(edge:alignment:spacing:content:)-8m3pq",
                    "title": "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/safeareapadding(_:)-3i7nd",
                    "title": "func safeAreaPadding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/safeareapadding(_:)-8win9",
                    "title": "func safeAreaPadding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/safeareapadding(_:_:)",
                    "title": "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/saturation(_:)",
                    "title": "func saturation(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaleeffect(_:anchor:)-10tn6",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaleeffect(_:anchor:)-3367a",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint) -> ModifiedContent<Self, _UniformScaleEffect>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaleeffect(_:anchor:)-3yp46",
                    "title": "func scaleEffect(Size3D, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaleeffect(_:anchor:)-4cazh",
                    "title": "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaleeffect(_:anchor:)-70sw3",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaleeffect(x:y:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaleeffect(x:y:z:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaledtofill()",
                    "title": "func scaledToFill() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scaledtofit()",
                    "title": "func scaledToFit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scenepadding(_:)",
                    "title": "func scenePadding(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scenepadding(_:edges:)",
                    "title": "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollbouncebehavior(_:axes:)",
                    "title": "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollclipdisabled(_:)",
                    "title": "func scrollClipDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollcontentbackground(_:)",
                    "title": "func scrollContentBackground(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrolldisabled(_:)",
                    "title": "func scrollDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrolldismisseskeyboard(_:)",
                    "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollindicators(_:axes:)",
                    "title": "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollindicatorsflash(onappear:)",
                    "title": "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollindicatorsflash(trigger:)",
                    "title": "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollinputbehavior(_:for:)",
                    "title": "func scrollInputBehavior(ScrollInputBehavior, for: ScrollInputKind) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollposition(_:anchor:)",
                    "title": "func scrollPosition(Binding<ScrollPosition>, anchor: UnitPoint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrollposition(id:anchor:)",
                    "title": "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrolltargetbehavior(_:)",
                    "title": "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrolltargetlayout(isenabled:)",
                    "title": "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrolltransition(_:axis:transition:)",
                    "title": "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title": "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchcompletion(_:)-7kypn",
                    "title": "func searchCompletion<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchcompletion(_:)-sgom",
                    "title": "func searchCompletion(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchdictationbehavior(_:)",
                    "title": "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchfocused(_:)",
                    "title": "func searchFocused(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchfocused(_:equals:)",
                    "title": "func searchFocused<V>(FocusState<V>.Binding, equals: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchpresentationtoolbarbehavior(_:)",
                    "title": "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchscopes(_:activation:_:)",
                    "title": "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchscopes(_:scopes:)",
                    "title": "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchsuggestions(_:)",
                    "title": "func searchSuggestions<S>(() -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchsuggestions(_:for:)",
                    "title": "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2iq2l",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5awwo",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5ond0",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:editabletokens:placement:prompt:token:)-4ryox",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:editabletokens:placement:prompt:token:)-54o2x",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:editabletokens:placement:prompt:token:)-9349h",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:ispresented:placement:prompt:)-176il",
                    "title": "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:ispresented:placement:prompt:)-1k98v",
                    "title": "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:ispresented:placement:prompt:)-8bdwi",
                    "title": "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:placement:prompt:)-659pr",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:placement:prompt:)-7k9od",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:placement:prompt:)-7w4f5",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:placement:prompt:suggestions:)-3j11h",
                    "title": "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:placement:prompt:suggestions:)-5pusq",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:placement:prompt:suggestions:)-9ejap",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:ispresented:placement:prompt:token:)-2u8vm",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:ispresented:placement:prompt:token:)-4544o",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:ispresented:placement:prompt:token:)-7e09y",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:placement:prompt:token:)-2vr1h",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:placement:prompt:token:)-3uexy",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:placement:prompt:token:)-98ft4",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-17wpi",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2f6ap",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9q515",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5zpfa",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-95nvq",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-jbsy",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/sectionactions(content:)",
                    "title": "func sectionActions<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/selectiondisabled(_:)",
                    "title": "func selectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/sensoryfeedback(_:trigger:)",
                    "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/sensoryfeedback(_:trigger:condition:)",
                    "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/sensoryfeedback(trigger:_:)",
                    "title": "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/shadow(color:radius:x:y:)",
                    "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/sheet(ispresented:ondismiss:content:)",
                    "title": "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/sheet(item:ondismiss:content:)",
                    "title": "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/simultaneousgesture(_:including:)",
                    "title": "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/simultaneousgesture(_:isenabled:)",
                    "title": "func simultaneousGesture<T>(T, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/simultaneousgesture(_:name:isenabled:)",
                    "title": "func simultaneousGesture<T>(T, name: String, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/speechadjustedpitch(_:)",
                    "title": "func speechAdjustedPitch(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/speechalwaysincludespunctuation(_:)",
                    "title": "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/speechannouncementsqueued(_:)",
                    "title": "func speechAnnouncementsQueued(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/speechspellsoutcharacters(_:)",
                    "title": "func speechSpellsOutCharacters(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/springloadingbehavior(_:)",
                    "title": "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/statusbar(hidden:)",
                    "title": "func statusBar(hidden: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/statusbarhidden(_:)",
                    "title": "func statusBarHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/strikethrough(_:pattern:color:)",
                    "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/submitlabel(_:)",
                    "title": "func submitLabel(SubmitLabel) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/submitscope(_:)",
                    "title": "func submitScope(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/supportedvolumeviewpoints(_:)",
                    "title": "func supportedVolumeViewpoints(SquareAzimuth.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/swipeactions(edge:allowsfullswipe:content:)",
                    "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/symboleffect(_:options:isactive:)",
                    "title": "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/symboleffect(_:options:value:)",
                    "title": "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/symboleffectsremoved(_:)",
                    "title": "func symbolEffectsRemoved(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/symbolrenderingmode(_:)",
                    "title": "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/symbolvariant(_:)",
                    "title": "func symbolVariant(SymbolVariants) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tabitem(_:)",
                    "title": "func tabItem<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tabviewcustomization(_:)",
                    "title": "func tabViewCustomization(Binding<TabViewCustomization>?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tabviewsidebarbottombar(content:)",
                    "title": "func tabViewSidebarBottomBar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tabviewsidebarfooter(content:)",
                    "title": "func tabViewSidebarFooter<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tabviewsidebarheader(content:)",
                    "title": "func tabViewSidebarHeader<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tabviewstyle(_:)",
                    "title": "func tabViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tablecolumnheaders(_:)",
                    "title": "func tableColumnHeaders(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tablestyle(_:)",
                    "title": "func tableStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tag(_:includeoptional:)",
                    "title": "func tag<V>(V, includeOptional: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/task(id:priority:_:)",
                    "title": "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/task(priority:_:)",
                    "title": "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/textcase(_:)",
                    "title": "func textCase(Text.Case?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/textcontenttype(_:)",
                    "title": "func textContentType(UITextContentType?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/texteditorstyle(_:)",
                    "title": "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/textfieldstyle(_:)",
                    "title": "func textFieldStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/textinputautocapitalization(_:)",
                    "title": "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/textrenderer(_:)",
                    "title": "func textRenderer<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/textscale(_:isenabled:)",
                    "title": "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/textselection(_:)",
                    "title": "func textSelection<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/textselectionaffinity(_:)",
                    "title": "func textSelectionAffinity(TextSelectionAffinity) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tint(_:)",
                    "title": "func tint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/togglestyle(_:)",
                    "title": "func toggleStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbar(_:for:)",
                    "title": "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbar(content:)-8dis2",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbar(content:)-8xf1r",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbar(id:content:)",
                    "title": "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbar(removing:)",
                    "title": "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbarbackground(_:for:)-36vzk",
                    "title": "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbarbackground(_:for:)-ymry",
                    "title": "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbarbackgroundvisibility(_:for:)",
                    "title": "func toolbarBackgroundVisibility(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbarcolorscheme(_:for:)",
                    "title": "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbarforegroundstyle(_:for:)",
                    "title": "func toolbarForegroundStyle<S>(S, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbarrole(_:)",
                    "title": "func toolbarRole(ToolbarRole) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbartitledisplaymode(_:)",
                    "title": "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbartitlemenu(content:)",
                    "title": "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/toolbarvisibility(_:for:)",
                    "title": "func toolbarVisibility(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/tracking(_:)",
                    "title": "func tracking(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transaction(_:)",
                    "title": "func transaction((inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transaction(_:body:)",
                    "title": "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transaction(value:_:)",
                    "title": "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transform3deffect(_:)",
                    "title": "func transform3DEffect(AffineTransform3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transformanchorpreference(key:value:transform:)",
                    "title": "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transformeffect(_:)",
                    "title": "func transformEffect(CGAffineTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transformenvironment(_:transform:)",
                    "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transformpreference(_:_:)",
                    "title": "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transition(_:)-3sxmt",
                    "title": "func transition(AnyTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/transition(_:)-6cdwt",
                    "title": "func transition<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/truncationmode(_:)",
                    "title": "func truncationMode(Text.TruncationMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/typeselectequivalent(_:)-1juze",
                    "title": "func typeSelectEquivalent(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/typeselectequivalent(_:)-1l60d",
                    "title": "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/typeselectequivalent(_:)-8ghrf",
                    "title": "func typeSelectEquivalent<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/typesettinglanguage(_:isenabled:)-4rjuc",
                    "title": "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/typesettinglanguage(_:isenabled:)-67d5y",
                    "title": "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/underline(_:pattern:color:)",
                    "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/unredacted()",
                    "title": "func unredacted() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/upperlimbvisibility(_:)",
                    "title": "func upperLimbVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/useractivity(_:element:_:)",
                    "title": "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/useractivity(_:isactive:_:)",
                    "title": "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/visualeffect(_:)",
                    "title": "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/visualeffect3d(_:)",
                    "title": "func visualEffect3D((EmptyVisualEffect, GeometryProxy3D) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/volumebaseplatevisibility(_:)",
                    "title": "func volumeBaseplateVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/windowtoolbarfullscreenvisibility(_:)",
                    "title": "func windowToolbarFullScreenVisibility(WindowToolbarFullScreenVisibility) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignabledocumentview/writingtoolsaffordancevisibility(_:)",
                    "title": "func writingToolsAffordanceVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/writingtoolsbehavior(_:)",
                    "title": "func writingToolsBehavior(WritingToolsBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignabledocumentview/zindex(_:)",
                    "title": "func zIndex(Double) -> some View",
                    "type": "method"
                  }
                ],
                "path": "/documentation/assignables/assignabledocumentview/view-implementations",
                "title": "View Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/assignabledocumentview",
            "title": "AssignableDocumentView",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a document view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocumentview/init(document:activepartid:hiddenpartids:selectedpageid:selectedquestionid:showspagethumbnails:isstructureeditingenabled:)",
                "title": "init(document: Binding<AssignedWorkDocumentView.Document>, activePartID: MergeablePartsContainerPartID?, hiddenPartIDs: [MergeablePartsContainerPartID], selectedPageID: Binding<AssignedWorkDocumentView.Document.Page.ID?>?, selectedQuestionID: Binding<AssignableDocument.Question.ID?>?, showsPageThumbnails: Bool, isStructureEditingEnabled: Bool)",
                "type": "init"
              },
              {
                "title": "Implementing a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocumentview/body-swift.property",
                "title": "var body: some View",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/assignedworkdocumentview/document",
                "title": "AssignedWorkDocumentView.Document",
                "type": "typealias"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocumentview/init(document:activepartid:hiddenpartids:selectedpageid:selectedquestionid:showspagethumbnails:isstructureeditingenabled:onmarkupactivation:)",
                "title": "init(document: Binding<AssignedWorkDocumentView.Document>, activePartID: MergeablePartsContainerPartID?, hiddenPartIDs: [MergeablePartsContainerPartID], selectedPageID: Binding<AssignedWorkDocumentView.Document.Page.ID?>?, selectedQuestionID: Binding<AssignableDocument.Question.ID?>?, showsPageThumbnails: Bool, isStructureEditingEnabled: Bool, onMarkupActivation: (Bool) -> Void)",
                "type": "init"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/assignedworkdocumentview/body-swift.typealias",
                "title": "AssignedWorkDocumentView.Body",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accentcolor(_:)",
                    "title": "func accentColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(activationpoint:)-37kte",
                    "title": "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(activationpoint:)-mx5m",
                    "title": "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(addtraits:)",
                    "title": "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(hidden:)",
                    "title": "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(hint:)",
                    "title": "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(identifier:)",
                    "title": "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(inputlabels:)",
                    "title": "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(label:)",
                    "title": "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(removetraits:)",
                    "title": "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(selectionidentifier:)",
                    "title": "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(sortpriority:)",
                    "title": "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibility(value:)",
                    "title": "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityaction(_:_:)",
                    "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityaction(action:label:)",
                    "title": "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityaction(named:_:)-31cjj",
                    "title": "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityaction(named:_:)-85vxt",
                    "title": "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityaction(named:_:)-92vkf",
                    "title": "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityactions(_:)",
                    "title": "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityactions(category:_:)",
                    "title": "func accessibilityActions<Content>(category: AccessibilityActionCategory, () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityactivationpoint(_:)-2j2h1",
                    "title": "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityactivationpoint(_:)-3bue5",
                    "title": "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityactivationpoint(_:isenabled:)-72orj",
                    "title": "func accessibilityActivationPoint(CGPoint, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityactivationpoint(_:isenabled:)-9kqu7",
                    "title": "func accessibilityActivationPoint(UnitPoint, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityaddtraits(_:)",
                    "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityadjustableaction(_:)",
                    "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitychartdescriptor(_:)",
                    "title": "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitychildren(children:)",
                    "title": "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitycustomcontent(_:_:importance:)-1tkcv",
                    "title": "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitycustomcontent(_:_:importance:)-2joln",
                    "title": "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitycustomcontent(_:_:importance:)-2xa7l",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitycustomcontent(_:_:importance:)-3cu51",
                    "title": "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitycustomcontent(_:_:importance:)-3w6d0",
                    "title": "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitycustomcontent(_:_:importance:)-4fj4y",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitycustomcontent(_:_:importance:)-7mspt",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitycustomcontent(_:_:importance:)-vsh6",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydirecttouch(_:options:)",
                    "title": "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydragpoint(_:description:)-2lmoo",
                    "title": "func accessibilityDragPoint(UnitPoint, description: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydragpoint(_:description:)-9yfk7",
                    "title": "func accessibilityDragPoint<S>(UnitPoint, description: S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydragpoint(_:description:)-xdut",
                    "title": "func accessibilityDragPoint(UnitPoint, description: LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydragpoint(_:description:isenabled:)-1b62q",
                    "title": "func accessibilityDragPoint(UnitPoint, description: LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydragpoint(_:description:isenabled:)-2prnx",
                    "title": "func accessibilityDragPoint(UnitPoint, description: Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydragpoint(_:description:isenabled:)-6tgbu",
                    "title": "func accessibilityDragPoint<S>(UnitPoint, description: S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydroppoint(_:description:)-3bluw",
                    "title": "func accessibilityDropPoint<S>(UnitPoint, description: S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydroppoint(_:description:)-4sue4",
                    "title": "func accessibilityDropPoint(UnitPoint, description: LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydroppoint(_:description:)-9ve0c",
                    "title": "func accessibilityDropPoint(UnitPoint, description: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydroppoint(_:description:isenabled:)-50p4r",
                    "title": "func accessibilityDropPoint(UnitPoint, description: LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydroppoint(_:description:isenabled:)-6gpo8",
                    "title": "func accessibilityDropPoint(UnitPoint, description: Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitydroppoint(_:description:isenabled:)-72ser",
                    "title": "func accessibilityDropPoint<S>(UnitPoint, description: S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityelement(children:)",
                    "title": "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityfocused(_:)",
                    "title": "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityfocused(_:equals:)",
                    "title": "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityheading(_:)",
                    "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityhidden(_:)",
                    "title": "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityhidden(_:isenabled:)",
                    "title": "func accessibilityHidden(Bool, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityhint(_:)-8xw9n",
                    "title": "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityhint(_:)-p6fv",
                    "title": "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityhint(_:)-yiyi",
                    "title": "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityhint(_:isenabled:)-2sl9f",
                    "title": "func accessibilityHint(LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityhint(_:isenabled:)-7ho67",
                    "title": "func accessibilityHint(Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityhint(_:isenabled:)-8z4ch",
                    "title": "func accessibilityHint<S>(S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityidentifier(_:)",
                    "title": "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityidentifier(_:isenabled:)",
                    "title": "func accessibilityIdentifier(String, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityignoresinvertcolors(_:)",
                    "title": "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityinputlabels(_:)-1fnlq",
                    "title": "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityinputlabels(_:)-78m34",
                    "title": "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityinputlabels(_:)-7xr0s",
                    "title": "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityinputlabels(_:isenabled:)-1w2r1",
                    "title": "func accessibilityInputLabels([LocalizedStringKey], isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityinputlabels(_:isenabled:)-51cow",
                    "title": "func accessibilityInputLabels([Text], isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityinputlabels(_:isenabled:)-6ltjd",
                    "title": "func accessibilityInputLabels<S>([S], isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylabel(_:)-33cx7",
                    "title": "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylabel(_:)-6w5l0",
                    "title": "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylabel(_:)-9k0xa",
                    "title": "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylabel(_:isenabled:)-1hhxx",
                    "title": "func accessibilityLabel(LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylabel(_:isenabled:)-4ai1m",
                    "title": "func accessibilityLabel<S>(S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylabel(_:isenabled:)-90w0v",
                    "title": "func accessibilityLabel(Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylabel(content:)",
                    "title": "func accessibilityLabel<V>(content: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylabeledpair(role:id:in:)",
                    "title": "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitylinkedgroup(id:in:)",
                    "title": "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityremovetraits(_:)",
                    "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrepresentation(representation:)",
                    "title": "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrespondstouserinteraction(_:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrespondstouserinteraction(_:isenabled:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:)-6pvoi",
                    "title": "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:)-7jxm4",
                    "title": "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:)-82kwv",
                    "title": "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:)-8foxh",
                    "title": "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:entryid:entrylabel:)-277qf",
                    "title": "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:entryid:entrylabel:)-2u2yn",
                    "title": "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:entryid:entrylabel:)-9k6eh",
                    "title": "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:entryid:entrylabel:)-9l86a",
                    "title": "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:entrylabel:)-2e8l3",
                    "title": "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:entrylabel:)-6g4ec",
                    "title": "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:entrylabel:)-7joyh",
                    "title": "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:entries:entrylabel:)-7ke8u",
                    "title": "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:textranges:)-29grr",
                    "title": "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:textranges:)-3zz9h",
                    "title": "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:textranges:)-4clea",
                    "title": "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotor(_:textranges:)-6zp3b",
                    "title": "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityrotorentry(id:in:)",
                    "title": "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityscrollaction(_:)",
                    "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityshowslargecontentviewer()",
                    "title": "func accessibilityShowsLargeContentViewer() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityshowslargecontentviewer(_:)",
                    "title": "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitysortpriority(_:)",
                    "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilitytextcontenttype(_:)",
                    "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityvalue(_:)-5vxkd",
                    "title": "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityvalue(_:)-83z80",
                    "title": "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityvalue(_:)-tlz",
                    "title": "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityvalue(_:isenabled:)-1bx",
                    "title": "func accessibilityValue(LocalizedStringKey, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityvalue(_:isenabled:)-3euti",
                    "title": "func accessibilityValue(Text, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityvalue(_:isenabled:)-80mxd",
                    "title": "func accessibilityValue<S>(S, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/accessibilityzoomaction(_:)",
                    "title": "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/actionsheet(ispresented:content:)",
                    "title": "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/actionsheet(item:content:)",
                    "title": "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:actions:)-7kgaf",
                    "title": "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:actions:)-9mvlp",
                    "title": "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:actions:)-qhb7",
                    "title": "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:actions:message:)-1zyt8",
                    "title": "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:actions:message:)-30k34",
                    "title": "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:actions:message:)-93guw",
                    "title": "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:presenting:actions:)-55a6u",
                    "title": "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:presenting:actions:)-68tbw",
                    "title": "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:presenting:actions:)-8ta55",
                    "title": "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:presenting:actions:message:)-31pwl",
                    "title": "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:presenting:actions:message:)-4qip2",
                    "title": "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(_:ispresented:presenting:actions:message:)-6zhum",
                    "title": "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(ispresented:content:)",
                    "title": "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(ispresented:error:actions:)",
                    "title": "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(ispresented:error:actions:message:)",
                    "title": "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alert(item:content:)",
                    "title": "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alignmentguide(_:computevalue:)-95ouz",
                    "title": "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alignmentguide(_:computevalue:)-9ek94",
                    "title": "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/alloweddynamicrange(_:)",
                    "title": "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/allowshittesting(_:)",
                    "title": "func allowsHitTesting(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/allowstightening(_:)",
                    "title": "func allowsTightening(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/allowswindowactivationevents(_:)",
                    "title": "func allowsWindowActivationEvents(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/anchorpreference(key:value:transform:)",
                    "title": "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/animation(_:)",
                    "title": "func animation(Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/animation(_:body:)",
                    "title": "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/animation(_:value:)",
                    "title": "func animation<V>(Animation?, value: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/aspectratio(_:contentmode:)-1eoi2",
                    "title": "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/aspectratio(_:contentmode:)-8kbdw",
                    "title": "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/autocapitalization(_:)",
                    "title": "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/autocorrectiondisabled(_:)",
                    "title": "func autocorrectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/background(_:alignment:)",
                    "title": "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/background(_:ignoressafeareaedges:)",
                    "title": "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/background(_:in:fillstyle:)-2f7mq",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/background(_:in:fillstyle:)-66gke",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/background(alignment:content:)",
                    "title": "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/background(ignoressafeareaedges:)",
                    "title": "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/background(in:fillstyle:)-1jdzc",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/background(in:fillstyle:)-801b7",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/backgroundpreferencevalue(_:_:)",
                    "title": "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/backgroundpreferencevalue(_:alignment:_:)",
                    "title": "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/backgroundstyle(_:)",
                    "title": "func backgroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/badge(_:)-4nyci",
                    "title": "func badge(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/badge(_:)-6riwm",
                    "title": "func badge(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/badge(_:)-8x6mi",
                    "title": "func badge(LocalizedStringKey?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/badge(_:)-90p7g",
                    "title": "func badge<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/badgeprominence(_:)",
                    "title": "func badgeProminence(BadgeProminence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/baselineoffset(_:)",
                    "title": "func baselineOffset(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/blendmode(_:)",
                    "title": "func blendMode(BlendMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/blur(radius:opaque:)",
                    "title": "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/bold(_:)",
                    "title": "func bold(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/border(_:width:)",
                    "title": "func border<S>(S, width: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/brightness(_:)",
                    "title": "func brightness(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/buttonbordershape(_:)",
                    "title": "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/buttonrepeatbehavior(_:)",
                    "title": "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/buttonstyle(_:)-4xeq3",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/buttonstyle(_:)-8dpcr",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/clipshape(_:style:)",
                    "title": "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/clipped(antialiased:)",
                    "title": "func clipped(antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/coloreffect(_:isenabled:)",
                    "title": "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/colorinvert()",
                    "title": "func colorInvert() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/colormultiply(_:)",
                    "title": "func colorMultiply(Color) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/colorscheme(_:)",
                    "title": "func colorScheme(ColorScheme) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/compositinggroup()",
                    "title": "func compositingGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:)-1cu6c",
                    "title": "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:)-2qsug",
                    "title": "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:)-5kdo",
                    "title": "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1g7wg",
                    "title": "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5ia2i",
                    "title": "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5kleu",
                    "title": "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1atba",
                    "title": "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3lnu5",
                    "title": "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-eai0",
                    "title": "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1jnrf",
                    "title": "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-3fgnd",
                    "title": "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-63lwn",
                    "title": "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/containerbackground(_:for:)",
                    "title": "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/containerbackground(for:alignment:content:)",
                    "title": "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/containerrelativeframe(_:alignment:)",
                    "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/containerrelativeframe(_:alignment:_:)",
                    "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title": "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/containershape(_:)",
                    "title": "func containerShape<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/containervalue(_:_:)",
                    "title": "func containerValue<V>(WritableKeyPath<ContainerValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contentmargins(_:_:for:)-7sxyv",
                    "title": "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contentmargins(_:_:for:)-7zsk2",
                    "title": "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contentmargins(_:for:)",
                    "title": "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contentshape(_:_:eofill:)",
                    "title": "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contentshape(_:eofill:)",
                    "title": "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/contenttoolbar(for:content:)-4njxq",
                    "title": "func contentToolbar<Content>(for: ContentToolbarPlacement, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/contenttoolbar(for:content:)-hd6t",
                    "title": "func contentToolbar<Content>(for: ContentToolbarPlacement, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contenttransition(_:)",
                    "title": "func contentTransition(ContentTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contextmenu(_:)",
                    "title": "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title": "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contextmenu(menuitems:)",
                    "title": "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contextmenu(menuitems:preview:)",
                    "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/contrast(_:)",
                    "title": "func contrast(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/controlgroupstyle(_:)",
                    "title": "func controlGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/controlsize(_:)",
                    "title": "func controlSize(ControlSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/coordinatespace(_:)",
                    "title": "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/coordinatespace(name:)",
                    "title": "func coordinateSpace<T>(name: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/cornerradius(_:antialiased:)",
                    "title": "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/datepickerstyle(_:)",
                    "title": "func datePickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/defaultadaptabletabbarplacement(_:)",
                    "title": "func defaultAdaptableTabBarPlacement(AdaptableTabBarPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/defaultappstorage(_:)",
                    "title": "func defaultAppStorage(UserDefaults) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/defaultfocus(_:_:priority:)",
                    "title": "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/defaulthovereffect(_:)-5lg4e",
                    "title": "func defaultHoverEffect(some CustomHoverEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/defaulthovereffect(_:)-8s7p2",
                    "title": "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/defaultscrollanchor(_:)",
                    "title": "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/defaultscrollanchor(_:for:)",
                    "title": "func defaultScrollAnchor(UnitPoint?, for: ScrollAnchorRole) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/deferssystemgestures(on:)",
                    "title": "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/deletedisabled(_:)",
                    "title": "func deleteDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/dialogicon(_:)",
                    "title": "func dialogIcon(Image?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/dialogsuppressiontoggle(_:issuppressed:)-1jh2c",
                    "title": "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/dialogsuppressiontoggle(_:issuppressed:)-2rivj",
                    "title": "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/dialogsuppressiontoggle(_:issuppressed:)-m6yi",
                    "title": "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/dialogsuppressiontoggle(issuppressed:)",
                    "title": "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/disableautocorrection(_:)",
                    "title": "func disableAutocorrection(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/disabled(_:)",
                    "title": "func disabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/disclosuregroupstyle(_:)",
                    "title": "func disclosureGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title": "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/documentbrowsercontextmenu(_:)",
                    "title": "func documentBrowserContextMenu(([URL]?) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/draggable(_:)",
                    "title": "func draggable<T>(@autoclosure () -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/draggable(_:preview:)",
                    "title": "func draggable<V, T>(@autoclosure () -> T, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/drawinggroup(opaque:colormode:)",
                    "title": "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/dropdestination(for:action:istargeted:)",
                    "title": "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/dynamictypesize(_:)-2o43p",
                    "title": "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/dynamictypesize(_:)-9brzh",
                    "title": "func dynamicTypeSize<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/edgesignoringsafearea(_:)",
                    "title": "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/environment(_:)",
                    "title": "func environment<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/environment(_:_:)",
                    "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/environmentobject(_:)",
                    "title": "func environmentObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogbrowseroptions(_:)",
                    "title": "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogconfirmationlabel(_:)-4f2xu",
                    "title": "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogconfirmationlabel(_:)-5mkc1",
                    "title": "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogconfirmationlabel(_:)-9ddii",
                    "title": "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogcustomizationid(_:)",
                    "title": "func fileDialogCustomizationID(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogdefaultdirectory(_:)",
                    "title": "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogimportsunresolvedaliases(_:)",
                    "title": "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogmessage(_:)-28iww",
                    "title": "func fileDialogMessage(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogmessage(_:)-4myqx",
                    "title": "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogmessage(_:)-71tqd",
                    "title": "func fileDialogMessage<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filedialogurlenabled(_:)",
                    "title": "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-7073c",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-75uc7",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-1of63",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-37h2b",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:documents:contenttype:oncompletion:)-60z4n",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:documents:contenttype:oncompletion:)-9x574",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1r1gt",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-c2kf",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title": "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title": "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporterfilenamelabel(_:)-6o81u",
                    "title": "func fileExporterFilenameLabel(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporterfilenamelabel(_:)-8dodg",
                    "title": "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileexporterfilenamelabel(_:)-8w914",
                    "title": "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filemover(ispresented:file:oncompletion:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filemover(ispresented:files:oncompletion:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/finddisabled(_:)",
                    "title": "func findDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/findnavigator(ispresented:)",
                    "title": "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fixedsize()",
                    "title": "func fixedSize() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fixedsize(horizontal:vertical:)",
                    "title": "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/flipsforrighttoleftlayoutdirection(_:)",
                    "title": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focuseffectdisabled(_:)",
                    "title": "func focusEffectDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusable(_:)",
                    "title": "func focusable(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusable(_:interactions:)",
                    "title": "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focused(_:)",
                    "title": "func focused(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focused(_:equals:)",
                    "title": "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedobject(_:)-5yiho",
                    "title": "func focusedObject<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedobject(_:)-7dwwb",
                    "title": "func focusedObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedsceneobject(_:)-5idvx",
                    "title": "func focusedSceneObject<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedsceneobject(_:)-6t9ty",
                    "title": "func focusedSceneObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedscenevalue(_:)",
                    "title": "func focusedSceneValue<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedscenevalue(_:_:)-5sgfk",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedscenevalue(_:_:)-86vp9",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedvalue(_:)",
                    "title": "func focusedValue<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedvalue(_:_:)-8kr07",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/focusedvalue(_:_:)-rmj4",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/font(_:)",
                    "title": "func font(Font?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fontdesign(_:)",
                    "title": "func fontDesign(Font.Design?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fontweight(_:)",
                    "title": "func fontWeight(Font.Weight?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fontwidth(_:)",
                    "title": "func fontWidth(Font.Width?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/foregroundcolor(_:)",
                    "title": "func foregroundColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/foregroundstyle(_:)",
                    "title": "func foregroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/foregroundstyle(_:_:)",
                    "title": "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/foregroundstyle(_:_:_:)",
                    "title": "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/formstyle(_:)",
                    "title": "func formStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/frame()",
                    "title": "func frame() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/frame(depth:alignment:)",
                    "title": "func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/frame(mindepth:idealdepth:maxdepth:alignment:)",
                    "title": "func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title": "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/frame(width:height:alignment:)",
                    "title": "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fullscreencover(ispresented:ondismiss:content:)",
                    "title": "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/fullscreencover(item:ondismiss:content:)",
                    "title": "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gaugestyle(_:)",
                    "title": "func gaugeStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/geometrygroup()",
                    "title": "func geometryGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gesture(_:)",
                    "title": "func gesture(some UIGestureRecognizerRepresentable) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gesture(_:including:)",
                    "title": "func gesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gesture(_:isenabled:)",
                    "title": "func gesture<T>(T, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gesture(_:name:isenabled:)",
                    "title": "func gesture<T>(T, name: String, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/glassbackgroundeffect(_:displaymode:)",
                    "title": "func glassBackgroundEffect<S>(S, displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/glassbackgroundeffect(_:in:displaymode:)",
                    "title": "func glassBackgroundEffect<T, S>(S, in: T, displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/glassbackgroundeffect(displaymode:)",
                    "title": "func glassBackgroundEffect(displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/glassbackgroundeffect(in:displaymode:)",
                    "title": "func glassBackgroundEffect<S>(in: S, displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/grayscale(_:)",
                    "title": "func grayscale(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gridcellanchor(_:)",
                    "title": "func gridCellAnchor(UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gridcellcolumns(_:)",
                    "title": "func gridCellColumns(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gridcellunsizedaxes(_:)",
                    "title": "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/gridcolumnalignment(_:)",
                    "title": "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/groupboxstyle(_:)",
                    "title": "func groupBoxStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/handgestureshortcut(_:isenabled:)",
                    "title": "func handGestureShortcut(HandGestureShortcut, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/handpointerbehavior(_:)",
                    "title": "func handPointerBehavior(HandPointerBehavior?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/handlesexternalevents(preferring:allowing:)",
                    "title": "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/headerprominence(_:)",
                    "title": "func headerProminence(Prominence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/help(_:)-31a6u",
                    "title": "func help(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/help(_:)-5rr00",
                    "title": "func help(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/help(_:)-6hfbg",
                    "title": "func help<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hidden()",
                    "title": "func hidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/highprioritygesture(_:including:)",
                    "title": "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/highprioritygesture(_:isenabled:)",
                    "title": "func highPriorityGesture<T>(T, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/highprioritygesture(_:name:isenabled:)",
                    "title": "func highPriorityGesture<T>(T, name: String, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hovereffect(_:)",
                    "title": "func hoverEffect(HoverEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hovereffect(_:in:isenabled:)",
                    "title": "func hoverEffect(some CustomHoverEffect, in: HoverEffectGroup?, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hovereffect(_:isenabled:)",
                    "title": "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hovereffect(in:isenabled:body:)",
                    "title": "func hoverEffect(in: HoverEffectGroup?, isEnabled: Bool, body: (EmptyHoverEffectContent, Bool, GeometryProxy) -> some HoverEffectContent) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hovereffectdisabled(_:)",
                    "title": "func hoverEffectDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hovereffectgroup()",
                    "title": "func hoverEffectGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hovereffectgroup(_:)",
                    "title": "func hoverEffectGroup(HoverEffectGroup?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/hovereffectgroup(id:in:behavior:)",
                    "title": "func hoverEffectGroup(id: String?, in: Namespace.ID, behavior: HoverEffectGroup.Behavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/huerotation(_:)",
                    "title": "func hueRotation(Angle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/id(_:)",
                    "title": "func id<ID>(ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ignoressafearea(_:edges:)",
                    "title": "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/imagescale(_:)",
                    "title": "func imageScale(Image.Scale) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/immersiveenvironmentpicker(content:)",
                    "title": "func immersiveEnvironmentPicker<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/indexviewstyle(_:)",
                    "title": "func indexViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/inspector(ispresented:content:)",
                    "title": "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/inspectorcolumnwidth(_:)",
                    "title": "func inspectorColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/inspectorcolumnwidth(min:ideal:max:)",
                    "title": "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/interactionactivitytrackingtag(_:)",
                    "title": "func interactionActivityTrackingTag(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/interactivedismissdisabled(_:)",
                    "title": "func interactiveDismissDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/invalidatablecontent(_:)",
                    "title": "func invalidatableContent(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/italic(_:)",
                    "title": "func italic(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/itemprovider(_:)",
                    "title": "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/kerning(_:)",
                    "title": "func kerning(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/keyboardshortcut(_:)-3m4rf",
                    "title": "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/keyboardshortcut(_:)-7w5f5",
                    "title": "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/keyboardshortcut(_:modifiers:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/keyboardshortcut(_:modifiers:localization:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/keyboardtype(_:)",
                    "title": "func keyboardType(UIKeyboardType) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title": "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title": "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/labelstyle(_:)",
                    "title": "func labelStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/labeledcontentstyle(_:)",
                    "title": "func labeledContentStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/labelshidden()",
                    "title": "func labelsHidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/labelsvisibility(_:)",
                    "title": "func labelsVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/layereffect(_:maxsampleoffset:isenabled:)",
                    "title": "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/layoutdirectionbehavior(_:)",
                    "title": "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/layoutpriority(_:)",
                    "title": "func layoutPriority(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/layoutvalue(key:value:)",
                    "title": "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/linelimit(_:)-161n1",
                    "title": "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/linelimit(_:)-4017z",
                    "title": "func lineLimit(ClosedRange<Int>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/linelimit(_:)-86lhg",
                    "title": "func lineLimit(Int?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/linelimit(_:)-8ubly",
                    "title": "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/linelimit(_:reservesspace:)",
                    "title": "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/linespacing(_:)",
                    "title": "func lineSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listitemtint(_:)-9dq1m",
                    "title": "func listItemTint(ListItemTint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listitemtint(_:)-9udj6",
                    "title": "func listItemTint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listrowbackground(_:)",
                    "title": "func listRowBackground<V>(V?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listrowhovereffect(_:)",
                    "title": "func listRowHoverEffect(HoverEffect?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listrowhovereffectdisabled(_:)",
                    "title": "func listRowHoverEffectDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listrowinsets(_:)",
                    "title": "func listRowInsets(EdgeInsets?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listrowseparator(_:edges:)",
                    "title": "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listrowseparatortint(_:edges:)",
                    "title": "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listrowspacing(_:)",
                    "title": "func listRowSpacing(CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listsectionseparator(_:edges:)",
                    "title": "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listsectionseparatortint(_:edges:)",
                    "title": "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listsectionspacing(_:)-9h2ef",
                    "title": "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/listsectionspacing(_:)-9hoir",
                    "title": "func listSectionSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/liststyle(_:)",
                    "title": "func listStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/luminancetoalpha()",
                    "title": "func luminanceToAlpha() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/mask(_:)",
                    "title": "func mask<Mask>(Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/mask(alignment:_:)",
                    "title": "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title": "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/matchedtransitionsource(id:in:)",
                    "title": "func matchedTransitionSource(id: some Hashable, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/matchedtransitionsource(id:in:configuration:)",
                    "title": "func matchedTransitionSource(id: some Hashable, in: Namespace.ID, configuration: (EmptyMatchedTransitionSourceConfiguration) -> some MatchedTransitionSourceConfiguration) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/materialactiveappearance(_:)",
                    "title": "func materialActiveAppearance(MaterialActiveAppearance) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/menuactiondismissbehavior(_:)",
                    "title": "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/menuindicator(_:)",
                    "title": "func menuIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/menuorder(_:)",
                    "title": "func menuOrder(MenuOrder) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/menustyle(_:)",
                    "title": "func menuStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/minimumscalefactor(_:)",
                    "title": "func minimumScaleFactor(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/modifier(_:)",
                    "title": "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/monospaced(_:)",
                    "title": "func monospaced(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/monospaceddigit()",
                    "title": "func monospacedDigit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/movedisabled(_:)",
                    "title": "func moveDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/multilinetextalignment(_:)",
                    "title": "func multilineTextAlignment(TextAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbarbackbuttonhidden(_:)",
                    "title": "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbarhidden(_:)",
                    "title": "func navigationBarHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbaritems(leading:)",
                    "title": "func navigationBarItems<L>(leading: L) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbaritems(leading:trailing:)",
                    "title": "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbaritems(trailing:)",
                    "title": "func navigationBarItems<T>(trailing: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbartitle(_:)-5l9sb",
                    "title": "func navigationBarTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbartitle(_:)-5pnka",
                    "title": "func navigationBarTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbartitle(_:)-6pxwz",
                    "title": "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbartitle(_:displaymode:)-1b1xg",
                    "title": "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbartitle(_:displaymode:)-2cdux",
                    "title": "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbartitle(_:displaymode:)-2mky2",
                    "title": "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationbartitledisplaymode(_:)",
                    "title": "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdestination(for:destination:)",
                    "title": "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdestination(ispresented:destination:)",
                    "title": "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdestination(item:destination:)",
                    "title": "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdocument(_:)-346ui",
                    "title": "func navigationDocument(URL) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdocument(_:)-57q2o",
                    "title": "func navigationDocument<D>(D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdocument(_:preview:)-13nb7",
                    "title": "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdocument(_:preview:)-2023",
                    "title": "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdocument(_:preview:)-3j420",
                    "title": "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationdocument(_:preview:)-i6rx",
                    "title": "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationsplitviewcolumnwidth(_:)",
                    "title": "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title": "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationsplitviewstyle(_:)",
                    "title": "func navigationSplitViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationsubtitle(_:)-491af",
                    "title": "func navigationSubtitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationsubtitle(_:)-9ma3l",
                    "title": "func navigationSubtitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationsubtitle(_:)-db21",
                    "title": "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationtitle(_:)-1qo8y",
                    "title": "func navigationTitle(Binding<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationtitle(_:)-2imiz",
                    "title": "func navigationTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationtitle(_:)-2pz9k",
                    "title": "func navigationTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationtitle(_:)-558i5",
                    "title": "func navigationTitle<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationtitle(_:)-9uh92",
                    "title": "func navigationTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationtransition(_:)",
                    "title": "func navigationTransition(some NavigationTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/navigationviewstyle(_:)",
                    "title": "func navigationViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/offset(_:)",
                    "title": "func offset(CGSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/offset(z:)",
                    "title": "func offset(z: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onappear(perform:)",
                    "title": "func onAppear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onchange(of:initial:_:)-8xyt0",
                    "title": "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onchange(of:initial:_:)-i7fo",
                    "title": "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/onchange(of:perform:)",
                    "title": "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/oncontinueuseractivity(_:perform:)",
                    "title": "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/oncontinuoushover(coordinatespace:perform:)",
                    "title": "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondisappear(perform:)",
                    "title": "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondrag(_:)",
                    "title": "func onDrag(() -> NSItemProvider) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondrag(_:preview:)",
                    "title": "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondrop(of:delegate:)-2ao9",
                    "title": "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondrop(of:delegate:)-2xarq",
                    "title": "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondrop(of:istargeted:perform:)-1qv7p",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondrop(of:istargeted:perform:)-5v626",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondrop(of:istargeted:perform:)-61arh",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ondrop(of:istargeted:perform:)-6uuo5",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ongeometrychange(for:of:action:)-3fchr",
                    "title": "func onGeometryChange<T>(for: T.Type, of: (GeometryProxy) -> T, action: (T, T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ongeometrychange(for:of:action:)-7yyus",
                    "title": "func onGeometryChange<T>(for: T.Type, of: (GeometryProxy) -> T, action: (T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ongeometrychange3d(for:of:action:)-1usxg",
                    "title": "func onGeometryChange3D<T>(for: T.Type, of: (GeometryProxy3D) -> T, action: (T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ongeometrychange3d(for:of:action:)-57nyn",
                    "title": "func onGeometryChange3D<T>(for: T.Type, of: (GeometryProxy3D) -> T, action: (T, T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onhover(perform:)",
                    "title": "func onHover(perform: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onimmersionchange(initial:_:)",
                    "title": "func onImmersionChange(initial: Bool, (ImmersionChangeContext, ImmersionChangeContext) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onkeypress(_:action:)",
                    "title": "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onkeypress(_:phases:action:)",
                    "title": "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onkeypress(characters:phases:action:)",
                    "title": "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onkeypress(keys:phases:action:)",
                    "title": "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onkeypress(phases:action:)",
                    "title": "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onopenurl(perform:)",
                    "title": "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onpencildoubletap(perform:)",
                    "title": "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onpencilsqueeze(perform:)",
                    "title": "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onpreferencechange(_:perform:)",
                    "title": "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onreceive(_:perform:)",
                    "title": "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onscrollgeometrychange(for:of:action:)",
                    "title": "func onScrollGeometryChange<T>(for: T.Type, of: (ScrollGeometry) -> T, action: (T, T) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onscrollphasechange(_:)-7s75l",
                    "title": "func onScrollPhaseChange((ScrollPhase, ScrollPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onscrollphasechange(_:)-8qoux",
                    "title": "func onScrollPhaseChange((ScrollPhase, ScrollPhase, ScrollPhaseChangeContext) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onscrolltargetvisibilitychange(idtype:threshold:_:)",
                    "title": "func onScrollTargetVisibilityChange<ID>(idType: ID.Type, threshold: Double, ([ID]) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onscrollvisibilitychange(threshold:_:)",
                    "title": "func onScrollVisibilityChange(threshold: Double, (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onsubmit(of:_:)",
                    "title": "func onSubmit(of: SubmitTriggers, () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ontapgesture(count:coordinatespace:perform:)",
                    "title": "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ontapgesture(count:perform:)",
                    "title": "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/onvolumeviewpointchange(updatestrategy:initial:_:)",
                    "title": "func onVolumeViewpointChange(updateStrategy: VolumeViewpointUpdateStrategy, initial: Bool, (Viewpoint3D, Viewpoint3D) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/opacity(_:)",
                    "title": "func opacity(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/ornament(visibility:attachmentanchor:contentalignment:ornament:)",
                    "title": "func ornament<Content>(visibility: Visibility, attachmentAnchor: OrnamentAttachmentAnchor, contentAlignment: Alignment, ornament: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/overlay(_:alignment:)",
                    "title": "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/overlay(_:ignoressafeareaedges:)",
                    "title": "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/overlay(_:in:fillstyle:)",
                    "title": "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/overlay(alignment:content:)",
                    "title": "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/overlaypreferencevalue(_:_:)",
                    "title": "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/overlaypreferencevalue(_:alignment:_:)",
                    "title": "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/padding(_:)-3nd43",
                    "title": "func padding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/padding(_:)-9s9b3",
                    "title": "func padding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/padding(_:_:)",
                    "title": "func padding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/padding3d(_:)-7mucb",
                    "title": "func padding3D(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/padding3d(_:)-8hp7d",
                    "title": "func padding3D(EdgeInsets3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/padding3d(_:_:)",
                    "title": "func padding3D(Edge3D.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/paletteselectioneffect(_:)",
                    "title": "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/persistentsystemoverlays(_:)",
                    "title": "func persistentSystemOverlays(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/perspectiverotationeffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/phaseanimator(_:content:animation:)",
                    "title": "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/phaseanimator(_:trigger:content:animation:)",
                    "title": "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/pickerstyle(_:)",
                    "title": "func pickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/pointerstyle(_:)",
                    "title": "func pointerStyle(PointerStyle?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/popover(item:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/position(_:)",
                    "title": "func position(CGPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/position(x:y:)",
                    "title": "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/preference(key:value:)",
                    "title": "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/preferredcolorscheme(_:)",
                    "title": "func preferredColorScheme(ColorScheme?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/preferredsurroundingseffect(_:)",
                    "title": "func preferredSurroundingsEffect(SurroundingsEffect?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationbackground(_:)",
                    "title": "func presentationBackground<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationbackground(alignment:content:)",
                    "title": "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationbackgroundinteraction(_:)",
                    "title": "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationcompactadaptation(_:)",
                    "title": "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationcompactadaptation(horizontal:vertical:)",
                    "title": "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationcontentinteraction(_:)",
                    "title": "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationcornerradius(_:)",
                    "title": "func presentationCornerRadius(CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationdetents(_:)",
                    "title": "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationdetents(_:selection:)",
                    "title": "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationdragindicator(_:)",
                    "title": "func presentationDragIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/presentationsizing(_:)",
                    "title": "func presentationSizing(some PresentationSizing) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/previewcontext(_:)",
                    "title": "func previewContext<C>(C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/previewdevice(_:)",
                    "title": "func previewDevice(PreviewDevice?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/previewdisplayname(_:)",
                    "title": "func previewDisplayName(String?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/previewinterfaceorientation(_:)",
                    "title": "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/previewlayout(_:)",
                    "title": "func previewLayout(PreviewLayout) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/privacysensitive(_:)",
                    "title": "func privacySensitive(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/progressviewstyle(_:)",
                    "title": "func progressViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/projectioneffect(_:)",
                    "title": "func projectionEffect(ProjectionTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/redacted(reason:)",
                    "title": "func redacted(reason: RedactionReasons) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/refreshable(action:)",
                    "title": "func refreshable(action: () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/renameaction(_:)-69d9l",
                    "title": "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/renameaction(_:)-9jnmm",
                    "title": "func renameAction(() -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/replacedisabled(_:)",
                    "title": "func replaceDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/rotation3deffect(_:anchor:)",
                    "title": "func rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/rotation3deffect(_:axis:anchor:)-3ch38",
                    "title": "func rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> ModifiedContent<Self, _Rotation3DEffectAngleAxis>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/rotation3deffect(_:axis:anchor:)-4pyff",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/rotation3deffect(_:axis:anchor:)-6whw7",
                    "title": "func rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/rotationeffect(_:anchor:)",
                    "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/safeareainset(edge:alignment:spacing:content:)-1xs8p",
                    "title": "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/safeareainset(edge:alignment:spacing:content:)-4qz0t",
                    "title": "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/safeareapadding(_:)-10dbi",
                    "title": "func safeAreaPadding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/safeareapadding(_:)-60od1",
                    "title": "func safeAreaPadding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/safeareapadding(_:_:)",
                    "title": "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/saturation(_:)",
                    "title": "func saturation(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaleeffect(_:anchor:)-1bxvq",
                    "title": "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaleeffect(_:anchor:)-213my",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint) -> ModifiedContent<Self, _UniformScaleEffect>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaleeffect(_:anchor:)-26d5t",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaleeffect(_:anchor:)-55hqx",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaleeffect(_:anchor:)-6ynxk",
                    "title": "func scaleEffect(Size3D, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaleeffect(x:y:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaleeffect(x:y:z:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaledtofill()",
                    "title": "func scaledToFill() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scaledtofit()",
                    "title": "func scaledToFit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scenepadding(_:)",
                    "title": "func scenePadding(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scenepadding(_:edges:)",
                    "title": "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollbouncebehavior(_:axes:)",
                    "title": "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollclipdisabled(_:)",
                    "title": "func scrollClipDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollcontentbackground(_:)",
                    "title": "func scrollContentBackground(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrolldisabled(_:)",
                    "title": "func scrollDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrolldismisseskeyboard(_:)",
                    "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollindicators(_:axes:)",
                    "title": "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollindicatorsflash(onappear:)",
                    "title": "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollindicatorsflash(trigger:)",
                    "title": "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollinputbehavior(_:for:)",
                    "title": "func scrollInputBehavior(ScrollInputBehavior, for: ScrollInputKind) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollposition(_:anchor:)",
                    "title": "func scrollPosition(Binding<ScrollPosition>, anchor: UnitPoint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrollposition(id:anchor:)",
                    "title": "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrolltargetbehavior(_:)",
                    "title": "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrolltargetlayout(isenabled:)",
                    "title": "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrolltransition(_:axis:transition:)",
                    "title": "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title": "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchcompletion(_:)-3iia8",
                    "title": "func searchCompletion<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchcompletion(_:)-5rzb",
                    "title": "func searchCompletion(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchdictationbehavior(_:)",
                    "title": "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchfocused(_:)",
                    "title": "func searchFocused(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchfocused(_:equals:)",
                    "title": "func searchFocused<V>(FocusState<V>.Binding, equals: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchpresentationtoolbarbehavior(_:)",
                    "title": "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchscopes(_:activation:_:)",
                    "title": "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchscopes(_:scopes:)",
                    "title": "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchsuggestions(_:)",
                    "title": "func searchSuggestions<S>(() -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchsuggestions(_:for:)",
                    "title": "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-24zri",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-564ng",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-9jsoe",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:editabletokens:placement:prompt:token:)-227f",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:editabletokens:placement:prompt:token:)-2xkl7",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:editabletokens:placement:prompt:token:)-882v9",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:ispresented:placement:prompt:)-4y13z",
                    "title": "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:ispresented:placement:prompt:)-91swt",
                    "title": "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:ispresented:placement:prompt:)-9w7p5",
                    "title": "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:placement:prompt:)-4j67n",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:placement:prompt:)-946lo",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:placement:prompt:)-ffad",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:placement:prompt:suggestions:)-5so16",
                    "title": "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:placement:prompt:suggestions:)-6h61p",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:placement:prompt:suggestions:)-9c9w",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:ispresented:placement:prompt:token:)-6kdb5",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:ispresented:placement:prompt:token:)-75422",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:ispresented:placement:prompt:token:)-9c13p",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:placement:prompt:token:)-4esu8",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:placement:prompt:token:)-73z5s",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:placement:prompt:token:)-7aqw6",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5piqz",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7ego5",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8zvj3",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3uw40",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3y5ly",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-52asz",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/sectionactions(content:)",
                    "title": "func sectionActions<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/selectiondisabled(_:)",
                    "title": "func selectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/sensoryfeedback(_:trigger:)",
                    "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/sensoryfeedback(_:trigger:condition:)",
                    "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/sensoryfeedback(trigger:_:)",
                    "title": "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/shadow(color:radius:x:y:)",
                    "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/sheet(ispresented:ondismiss:content:)",
                    "title": "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/sheet(item:ondismiss:content:)",
                    "title": "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/simultaneousgesture(_:including:)",
                    "title": "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/simultaneousgesture(_:isenabled:)",
                    "title": "func simultaneousGesture<T>(T, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/simultaneousgesture(_:name:isenabled:)",
                    "title": "func simultaneousGesture<T>(T, name: String, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/speechadjustedpitch(_:)",
                    "title": "func speechAdjustedPitch(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/speechalwaysincludespunctuation(_:)",
                    "title": "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/speechannouncementsqueued(_:)",
                    "title": "func speechAnnouncementsQueued(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/speechspellsoutcharacters(_:)",
                    "title": "func speechSpellsOutCharacters(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/springloadingbehavior(_:)",
                    "title": "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/statusbar(hidden:)",
                    "title": "func statusBar(hidden: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/statusbarhidden(_:)",
                    "title": "func statusBarHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/strikethrough(_:pattern:color:)",
                    "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/submitlabel(_:)",
                    "title": "func submitLabel(SubmitLabel) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/submitscope(_:)",
                    "title": "func submitScope(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/supportedvolumeviewpoints(_:)",
                    "title": "func supportedVolumeViewpoints(SquareAzimuth.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/swipeactions(edge:allowsfullswipe:content:)",
                    "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/symboleffect(_:options:isactive:)",
                    "title": "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/symboleffect(_:options:value:)",
                    "title": "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/symboleffectsremoved(_:)",
                    "title": "func symbolEffectsRemoved(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/symbolrenderingmode(_:)",
                    "title": "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/symbolvariant(_:)",
                    "title": "func symbolVariant(SymbolVariants) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tabitem(_:)",
                    "title": "func tabItem<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tabviewcustomization(_:)",
                    "title": "func tabViewCustomization(Binding<TabViewCustomization>?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tabviewsidebarbottombar(content:)",
                    "title": "func tabViewSidebarBottomBar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tabviewsidebarfooter(content:)",
                    "title": "func tabViewSidebarFooter<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tabviewsidebarheader(content:)",
                    "title": "func tabViewSidebarHeader<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tabviewstyle(_:)",
                    "title": "func tabViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tablecolumnheaders(_:)",
                    "title": "func tableColumnHeaders(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tablestyle(_:)",
                    "title": "func tableStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tag(_:includeoptional:)",
                    "title": "func tag<V>(V, includeOptional: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/task(id:priority:_:)",
                    "title": "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/task(priority:_:)",
                    "title": "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/textcase(_:)",
                    "title": "func textCase(Text.Case?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/textcontenttype(_:)",
                    "title": "func textContentType(UITextContentType?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/texteditorstyle(_:)",
                    "title": "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/textfieldstyle(_:)",
                    "title": "func textFieldStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/textinputautocapitalization(_:)",
                    "title": "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/textrenderer(_:)",
                    "title": "func textRenderer<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/textscale(_:isenabled:)",
                    "title": "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/textselection(_:)",
                    "title": "func textSelection<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/textselectionaffinity(_:)",
                    "title": "func textSelectionAffinity(TextSelectionAffinity) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tint(_:)",
                    "title": "func tint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/togglestyle(_:)",
                    "title": "func toggleStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbar(_:for:)",
                    "title": "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbar(content:)-8gkmv",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbar(content:)-97iry",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbar(id:content:)",
                    "title": "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbar(removing:)",
                    "title": "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbarbackground(_:for:)-5vdno",
                    "title": "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbarbackground(_:for:)-qubr",
                    "title": "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbarbackgroundvisibility(_:for:)",
                    "title": "func toolbarBackgroundVisibility(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbarcolorscheme(_:for:)",
                    "title": "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbarforegroundstyle(_:for:)",
                    "title": "func toolbarForegroundStyle<S>(S, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbarrole(_:)",
                    "title": "func toolbarRole(ToolbarRole) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbartitledisplaymode(_:)",
                    "title": "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbartitlemenu(content:)",
                    "title": "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/toolbarvisibility(_:for:)",
                    "title": "func toolbarVisibility(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/tracking(_:)",
                    "title": "func tracking(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transaction(_:)",
                    "title": "func transaction((inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transaction(_:body:)",
                    "title": "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transaction(value:_:)",
                    "title": "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transform3deffect(_:)",
                    "title": "func transform3DEffect(AffineTransform3D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transformanchorpreference(key:value:transform:)",
                    "title": "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transformeffect(_:)",
                    "title": "func transformEffect(CGAffineTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transformenvironment(_:transform:)",
                    "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transformpreference(_:_:)",
                    "title": "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transition(_:)-2ajhs",
                    "title": "func transition<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/transition(_:)-7vobu",
                    "title": "func transition(AnyTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/truncationmode(_:)",
                    "title": "func truncationMode(Text.TruncationMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/typeselectequivalent(_:)-1vbhb",
                    "title": "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/typeselectequivalent(_:)-2koxi",
                    "title": "func typeSelectEquivalent<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/typeselectequivalent(_:)-5qtap",
                    "title": "func typeSelectEquivalent(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/typesettinglanguage(_:isenabled:)-2p8k6",
                    "title": "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/typesettinglanguage(_:isenabled:)-61x3f",
                    "title": "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/underline(_:pattern:color:)",
                    "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/unredacted()",
                    "title": "func unredacted() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/upperlimbvisibility(_:)",
                    "title": "func upperLimbVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/useractivity(_:element:_:)",
                    "title": "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/useractivity(_:isactive:_:)",
                    "title": "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/visualeffect(_:)",
                    "title": "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/visualeffect3d(_:)",
                    "title": "func visualEffect3D((EmptyVisualEffect, GeometryProxy3D) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/volumebaseplatevisibility(_:)",
                    "title": "func volumeBaseplateVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/windowtoolbarfullscreenvisibility(_:)",
                    "title": "func windowToolbarFullScreenVisibility(WindowToolbarFullScreenVisibility) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/assignables/assignedworkdocumentview/writingtoolsaffordancevisibility(_:)",
                    "title": "func writingToolsAffordanceVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/writingtoolsbehavior(_:)",
                    "title": "func writingToolsBehavior(WritingToolsBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/assignedworkdocumentview/zindex(_:)",
                    "title": "func zIndex(Double) -> some View",
                    "type": "method"
                  }
                ],
                "path": "/documentation/assignables/assignedworkdocumentview/view-implementations",
                "title": "View Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/assignedworkdocumentview",
            "title": "AssignedWorkDocumentView",
            "type": "struct"
          },
          {
            "title": "Document elements",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Implementing a document element",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/documentelement/document",
                "title": "Document",
                "type": "associatedtype"
              }
            ],
            "path": "/documentation/assignables/documentelement",
            "title": "DocumentElement",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating an element identifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/basicdocumentelementid/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/basicdocumentelementid/==(_:_:)",
                "title": "static func == (BasicDocumentElementID<Element>, BasicDocumentElementID<Element>) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/basicdocumentelementid/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/basicdocumentelementid/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/basicdocumentelementid/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/basicdocumentelementid/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/assignables/basicdocumentelementid/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/basicdocumentelementid",
            "title": "BasicDocumentElementID",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Implementing an element identifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/documentelementid/element",
                "title": "Element",
                "type": "associatedtype"
              }
            ],
            "path": "/documentation/assignables/documentelementid",
            "title": "DocumentElementID",
            "type": "protocol"
          },
          {
            "path": "/documentation/assignables/assignabledocumentelement",
            "title": "AssignableDocumentElement",
            "type": "protocol"
          },
          {
            "path": "/documentation/assignables/assignedworkdocumentelement",
            "title": "AssignedWorkDocumentElement",
            "type": "protocol"
          },
          {
            "title": "Mergeable document",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting the pages",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeabledocument/pages",
                "title": "var pages: [Self.Page]",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/mergeabledocument/page",
                "title": "Page",
                "type": "associatedtype"
              },
              {
                "title": "Exporting the layers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeabledocument/exporttopdf(visibleparts:)",
                "title": "func exportToPDF(visibleParts: [Self.PartID]) async -> PDFDocument",
                "type": "method"
              },
              {
                "title": "Exporting the thumbnails",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeabledocument/pagethumbnails(visibleparts:)",
                "title": "func pageThumbnails(visibleParts: [Self.PartID]) async -> [Self.Page.ID : Self.Page.Thumbnail]",
                "type": "method"
              },
              {
                "title": "Getting the error type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeabledocument/error",
                "title": "Error",
                "type": "associatedtype"
              }
            ],
            "path": "/documentation/assignables/mergeabledocument",
            "title": "MergeableDocument",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainerpartid/==(_:_:)",
                "title": "static func == (MergeablePartsContainerPartID, MergeablePartsContainerPartID) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainerpartid/init(_:)",
                "title": "init(String)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainerpartid/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainerpartid/rawvalue",
                "title": "var rawValue: String",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainerpartid/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/mergeablepartscontainerpartid/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/assignables/mergeablepartscontainerpartid/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/mergeablepartscontainerpartid",
            "title": "MergeablePartsContainerPartID",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Implementing a mergeable page",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeabledocumentpage/document",
                "title": "Document",
                "type": "associatedtype"
              },
              {
                "path": "/documentation/assignables/mergeabledocumentpage/thumbnail",
                "title": "MergeableDocumentPage.Thumbnail",
                "type": "typealias"
              }
            ],
            "path": "/documentation/assignables/mergeabledocumentpage",
            "title": "MergeableDocumentPage",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Merging the parts",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/mergeablepartscontainer/merge(other:)",
                "title": "func merge(other: Self) throws -> Bool",
                "type": "method"
              },
              {
                "title": "Exporting the parts",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/mergeablepartscontainer/export(partids:)",
                "title": "func export(partIDs: [Self.PartID]) async throws -> [Self.PartID : URL]",
                "type": "method"
              },
              {
                "title": "Getting the part identifiers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainer/partids",
                "title": "var partIDs: [Self.PartID]",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainer/partid",
                "title": "MergeablePartsContainer.PartID",
                "type": "typealias"
              },
              {
                "title": "Inspecting the parts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainer/ispartial",
                "title": "var isPartial: Bool",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainer/exportparts(identifiedby:)",
                "title": "func exportParts(identifiedBy: [Self.PartID]) async throws -> [Self.PartID : MergeablePartData]",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainer/makepart(for:)",
                "title": "func makePart(for: Self.PartID) throws -> MergeablePartData?",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainer/merge(_:)",
                "title": "func merge(Self) async throws -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/mergeablepartscontainer/merge(partdata:into:)",
                "title": "func merge(partData: MergeablePartData, into: Self.PartID) async throws -> Bool",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/assignables/mergeablepartscontainer/merge(partid:partdataurl:)",
                "title": "func merge(partID: Self.PartID, partDataURL: URL) throws -> Bool",
                "type": "method"
              }
            ],
            "path": "/documentation/assignables/mergeablepartscontainer",
            "title": "MergeablePartsContainer",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Getting the page identifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/documentthumbnail/pageid",
                "title": "var pageID: Document.Page.ID",
                "type": "property"
              }
            ],
            "path": "/documentation/assignables/documentthumbnail",
            "title": "DocumentThumbnail",
            "type": "struct"
          },
          {
            "title": "Identity",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting an identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/useridentity/stringrepresentation",
                "title": "var stringRepresentation: String",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/useridentity/typeid",
                "title": "var typeID: String",
                "type": "property"
              },
              {
                "title": "Setting the scope",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/useridentity/scope(_:)-esta",
                "title": "func scope<R>(() throws -> R) rethrows -> R",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/useridentity/scope(_:)-j2jq",
                "title": "func scope<R>(() async throws -> R) async rethrows -> R",
                "type": "method"
              },
              {
                "title": "Getting a type eraser",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/useridentity/erasetoanyuseridentity()",
                "title": "func eraseToAnyUserIdentity() -> AnyUserIdentity",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/useridentity/as",
                "title": "UserIdentity.As",
                "type": "typealias"
              }
            ],
            "path": "/documentation/assignables/useridentity",
            "title": "UserIdentity",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating an anonymous identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Inspecting an identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/stringrepresentation",
                "title": "var stringRepresentation: String",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/typeid-swift.property",
                "title": "var typeID: String",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/typeid-swift.type.property",
                "title": "static var typeID: String",
                "type": "property"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/==(_:_:)",
                "title": "static func == (AnonymousUserIdentity, AnonymousUserIdentity) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/anonymoususeridentity/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anonymoususeridentity/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/assignables/anonymoususeridentity/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anonymoususeridentity/erasetoanyuseridentity()",
                    "title": "func eraseToAnyUserIdentity() -> AnyUserIdentity",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/anonymoususeridentity/scope(_:)-2x98h",
                    "title": "func scope<R>(() throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/anonymoususeridentity/scope(_:)-3qa3w",
                    "title": "func scope<R>(() async throws -> R) async rethrows -> R",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anonymoususeridentity/as",
                    "title": "AnonymousUserIdentity.As",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/assignables/anonymoususeridentity/useridentity-implementations",
                "title": "UserIdentity Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/anonymoususeridentity",
            "title": "AnonymousUserIdentity",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a user identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/init(_:)",
                "title": "init<T>(T)",
                "type": "init"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Setting the scope",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/scope(_:)-1wfwz",
                "title": "func scope<R>(() throws -> R) rethrows -> R",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/scope(_:)-76dnq",
                "title": "func scope<R>(() async throws -> R) async rethrows -> R",
                "type": "method"
              },
              {
                "title": "Inspecting an identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/stringrepresentation",
                "title": "var stringRepresentation: String",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/typeid",
                "title": "var typeID: String",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Decode error",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/error/cannotdecode",
                    "title": "case cannotDecode",
                    "type": "case"
                  },
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/error/==(_:_:)",
                    "title": "static func == (AnyUserIdentity.Error, AnyUserIdentity.Error) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/error/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/error/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/anyuseridentity/error/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/assignables/anyuseridentity/error/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/assignables/anyuseridentity/error/localizeddescription",
                        "title": "var localizedDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/assignables/anyuseridentity/error/error-implementations",
                    "title": "Error Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/assignables/anyuseridentity/error",
                "title": "AnyUserIdentity.Error",
                "type": "enum"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Comparing identities",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/==(_:_:)",
                "title": "static func == (AnyUserIdentity, AnyUserIdentity) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/anyuseridentity/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/assignables/anyuseridentity/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/erasetoanyuseridentity()",
                    "title": "func eraseToAnyUserIdentity() -> AnyUserIdentity",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/scope(_:)-3xtwb",
                    "title": "func scope<R>(() async throws -> R) async rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/scope(_:)-6mjm1",
                    "title": "func scope<R>(() throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/anyuseridentity/as",
                    "title": "AnyUserIdentity.As",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/assignables/anyuseridentity/useridentity-implementations",
                "title": "UserIdentity Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/anyuseridentity",
            "title": "AnyUserIdentity",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a user identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/init(value:)",
                "title": "init(value: String)",
                "type": "init"
              },
              {
                "title": "Inspecting an identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/stringrepresentation",
                "title": "var stringRepresentation: String",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/typeid-swift.property",
                "title": "var typeID: String",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/typeid-swift.type.property",
                "title": "static var typeID: String",
                "type": "property"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/value",
                "title": "var value: String",
                "type": "property"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/==(_:_:)",
                "title": "static func == (StringUserIdentity, StringUserIdentity) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/assignables/stringuseridentity/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/stringuseridentity/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/assignables/stringuseridentity/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/stringuseridentity/erasetoanyuseridentity()",
                    "title": "func eraseToAnyUserIdentity() -> AnyUserIdentity",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/stringuseridentity/scope(_:)-935zx",
                    "title": "func scope<R>(() async throws -> R) async rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/assignables/stringuseridentity/scope(_:)-93wrt",
                    "title": "func scope<R>(() throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/assignables/stringuseridentity/as",
                    "title": "StringUserIdentity.As",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/assignables/stringuseridentity/useridentity-implementations",
                "title": "UserIdentity Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/assignables/stringuseridentity",
            "title": "StringUserIdentity",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Registering an identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/useridentitytyperegistry/registeruseridentitytype(typeid:type:)",
                "title": "static func registerUserIdentityType<UI>(typeID: String, type: UI.Type)",
                "type": "method"
              }
            ],
            "path": "/documentation/assignables/useridentitytyperegistry",
            "title": "UserIdentityTypeRegistry",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Getting the anonymous identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/useridentityfactory/anonymous",
                "title": "static var anonymous: AnonymousUserIdentity",
                "type": "property"
              },
              {
                "title": "Creating an identity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/useridentityfactory/string(_:)",
                "title": "static func string(String) -> StringUserIdentity",
                "type": "method"
              }
            ],
            "path": "/documentation/assignables/useridentityfactory",
            "title": "UserIdentityFactory",
            "type": "enum"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/assignables/mergeablepartdata/data(_:)",
                "title": "case data(Data)",
                "type": "case"
              },
              {
                "path": "/documentation/assignables/mergeablepartdata/fileurl(_:)",
                "title": "case fileURL(URL)",
                "type": "case"
              }
            ],
            "path": "/documentation/assignables/mergeablepartdata",
            "title": "MergeablePartData",
            "type": "enum"
          }
        ],
        "path": "/documentation/assignables",
        "title": "Assignables",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
