{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Fundamentals",
            "type": "groupMarker"
          },
          {
            "title": "Requests",
            "type": "groupMarker"
          },
          {
            "title": "Characteristics",
            "type": "groupMarker"
          },
          {
            "title": "Alerts and forecasts",
            "type": "groupMarker"
          },
          {
            "title": "Celestial information",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/weatherkit",
        "title": "WeatherKit",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Fundamentals",
            "type": "groupMarker"
          },
          {
            "title": "Requests",
            "type": "groupMarker"
          },
          {
            "title": "Characteristics",
            "type": "groupMarker"
          },
          {
            "title": "Alerts and forecasts",
            "type": "groupMarker"
          },
          {
            "title": "Celestial information",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/weatherkit",
        "title": "WeatherKit",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Fundamentals",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/weatherkit/fetching_weather_forecasts_with_weatherkit",
            "title": "Fetching weather forecasts with WeatherKit",
            "type": "sampleCode"
          },
          {
            "children": [
              {
                "title": "Getting the forecast",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weather/availability",
                "title": "var availability: WeatherAvailability",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weather/currentweather",
                "title": "var currentWeather: CurrentWeather",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weather/dailyforecast",
                "title": "var dailyForecast: Forecast<DayWeather>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weather/hourlyforecast",
                "title": "var hourlyForecast: Forecast<HourWeather>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weather/minuteforecast",
                "title": "var minuteForecast: Forecast<MinuteWeather>?",
                "type": "property"
              },
              {
                "title": "Getting weather alerts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weather/weatheralerts",
                "title": "var weatherAlerts: [WeatherAlert]?",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weather/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/weather/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weather/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weather/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weather/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/weather/==(_:_:)",
                    "title": "static func == (Weather, Weather) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weather/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weather",
            "title": "Weather",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating the object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/init()",
                "title": "convenience init()",
                "type": "init"
              },
              {
                "title": "Obtaining forecasts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/weather(for:)",
                "title": "func weather(for: CLLocation) async throws -> Weather",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/weather(for:including:_:)",
                "title": "func weather<T1, T2>(for: CLLocation, including: WeatherQuery<T1>, WeatherQuery<T2>) async throws -> (T1, T2)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/weather(for:including:_:_:)",
                "title": "func weather<T1, T2, T3>(for: CLLocation, including: WeatherQuery<T1>, WeatherQuery<T2>, WeatherQuery<T3>) async throws -> (T1, T2, T3)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/weather(for:including:_:_:_:)",
                "title": "func weather<T1, T2, T3, T4>(for: CLLocation, including: WeatherQuery<T1>, WeatherQuery<T2>, WeatherQuery<T3>, WeatherQuery<T4>) async throws -> (T1, T2, T3, T4)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/weather(for:including:_:_:_:_:)",
                "title": "func weather<T1, T2, T3, T4, T5>(for: CLLocation, including: WeatherQuery<T1>, WeatherQuery<T2>, WeatherQuery<T3>, WeatherQuery<T4>, WeatherQuery<T5>) async throws -> (T1, T2, T3, T4, T5)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/weather(for:including:_:_:_:_:_:)",
                "title": "func weather<T1, T2, T3, T4, T5, T6>(for: CLLocation, including: WeatherQuery<T1>, WeatherQuery<T2>, WeatherQuery<T3>, WeatherQuery<T4>, WeatherQuery<T5>, WeatherQuery<T6>) async throws -> (T1, T2, T3, T4, T5, T6)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/shared",
                "title": "static let shared: WeatherService",
                "type": "property"
              },
              {
                "title": "Providing attribution",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/attribution",
                "title": "var attribution: WeatherAttribution",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/dailystatistics(for:fordaysin:including:)",
                "title": "func dailyStatistics<each T>(for: CLLocation, forDaysIn: DateInterval, including: repeat DailyWeatherStatisticsQuery<each T>) async throws -> (repeat DailyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/dailystatistics(for:including:)",
                "title": "func dailyStatistics<each T>(for: CLLocation, including: repeat DailyWeatherStatisticsQuery<each T>) async throws -> (repeat DailyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/dailystatistics(for:startday:endday:including:)",
                "title": "func dailyStatistics<each T>(for: CLLocation, startDay: Int, endDay: Int, including: repeat DailyWeatherStatisticsQuery<each T>) async throws -> (repeat DailyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/dailysummary(for:fordaysin:including:)",
                "title": "func dailySummary<each T>(for: CLLocation, forDaysIn: DateInterval, including: repeat DailyWeatherSummaryQuery<each T>) async throws -> (repeat DailyWeatherSummary<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/dailysummary(for:including:)",
                "title": "func dailySummary<each T>(for: CLLocation, including: repeat DailyWeatherSummaryQuery<each T>) async throws -> (repeat DailyWeatherSummary<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/hourlystatistics(for:forhoursin:including:)",
                "title": "func hourlyStatistics<each T>(for: CLLocation, forHoursIn: DateInterval, including: repeat HourlyWeatherStatisticsQuery<each T>) async throws -> (repeat HourlyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/hourlystatistics(for:including:)",
                "title": "func hourlyStatistics<each T>(for: CLLocation, including: repeat HourlyWeatherStatisticsQuery<each T>) async throws -> (repeat HourlyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/hourlystatistics(for:starthour:endhour:including:)",
                "title": "func hourlyStatistics<each T>(for: CLLocation, startHour: Int, endHour: Int, including: repeat HourlyWeatherStatisticsQuery<each T>) async throws -> (repeat HourlyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/monthlystatistics(for:formonthsin:including:)",
                "title": "func monthlyStatistics<each T>(for: CLLocation, forMonthsIn: DateInterval, including: repeat MonthlyWeatherStatisticsQuery<each T>) async throws -> (repeat MonthlyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/monthlystatistics(for:including:)",
                "title": "func monthlyStatistics<each T>(for: CLLocation, including: repeat MonthlyWeatherStatisticsQuery<each T>) async throws -> (repeat MonthlyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/monthlystatistics(for:startmonth:endmonth:including:)",
                "title": "func monthlyStatistics<each T>(for: CLLocation, startMonth: Int, endMonth: Int, including: repeat MonthlyWeatherStatisticsQuery<each T>) async throws -> (repeat MonthlyWeatherStatistics<each T>)",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/weather(for:including:)-3cg1d",
                "title": "func weather<T>(for: CLLocation, including: WeatherQuery<T>) async throws -> T",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherservice/weather(for:including:)-5jqwy",
                "title": "func weather<each T>(for: CLLocation, including: repeat WeatherQuery<each T>) async throws -> (repeat each T)",
                "type": "method"
              }
            ],
            "path": "/documentation/weatherkit/weatherservice",
            "title": "WeatherService",
            "type": "class"
          },
          {
            "title": "Requests",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating queries",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/alerts",
                "title": "static var alerts: WeatherQuery<[WeatherAlert]?>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/availability",
                "title": "static var availability: WeatherQuery<WeatherAvailability>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/current",
                "title": "static var current: WeatherQuery<CurrentWeather>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/daily",
                "title": "static var daily: WeatherQuery<Forecast<DayWeather>>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/hourly",
                "title": "static var hourly: WeatherQuery<Forecast<HourWeather>>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/minute",
                "title": "static var minute: WeatherQuery<Forecast<MinuteWeather>?>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/daily(startdate:enddate:)",
                "title": "static func daily(startDate: Date, endDate: Date) -> WeatherQuery<T>",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/hourly(startdate:enddate:)",
                "title": "static func hourly(startDate: Date, endDate: Date) -> WeatherQuery<T>",
                "type": "method"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/changes",
                "title": "static var changes: WeatherQuery<WeatherChanges?>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherquery/historicalcomparisons",
                "title": "static var historicalComparisons: WeatherQuery<HistoricalComparisons?>",
                "type": "property"
              }
            ],
            "path": "/documentation/weatherkit/weatherquery",
            "title": "WeatherQuery",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting temperature and humidity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/currentweather/apparenttemperature",
                "title": "var apparentTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/dewpoint",
                "title": "var dewPoint: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/humidity",
                "title": "var humidity: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/temperature",
                "title": "var temperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "title": "Getting wind and pressure",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/currentweather/pressure",
                "title": "var pressure: Measurement<UnitPressure>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/pressuretrend",
                "title": "var pressureTrend: PressureTrend",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/wind",
                "title": "var wind: Wind",
                "type": "property"
              },
              {
                "title": "Getting conditions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/currentweather/cloudcover",
                "title": "var cloudCover: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/condition",
                "title": "var condition: WeatherCondition",
                "type": "property"
              },
              {
                "title": "Getting date and validity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/currentweather/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "title": "Getting daylight and visibility",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/currentweather/isdaylight",
                "title": "var isDaylight: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/uvindex",
                "title": "var uvIndex: UVIndex",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/visibility",
                "title": "var visibility: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "title": "Getting additional information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/currentweather/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/symbolname",
                "title": "var symbolName: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/currentweather/cloudcoverbyaltitude",
                "title": "var cloudCoverByAltitude: CloudCoverByAltitude",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/currentweather/precipitationintensity",
                "title": "var precipitationIntensity: Measurement<UnitSpeed>",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/currentweather/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/currentweather/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/currentweather/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/currentweather/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/currentweather/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/currentweather/==(_:_:)",
                    "title": "static func == (CurrentWeather, CurrentWeather) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/currentweather/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/currentweather",
            "title": "CurrentWeather",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting the properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherattribution/combinedmarkdarkurl",
                "title": "var combinedMarkDarkURL: URL",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherattribution/combinedmarklighturl",
                "title": "var combinedMarkLightURL: URL",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherattribution/legalpageurl",
                "title": "var legalPageURL: URL",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherattribution/servicename",
                "title": "var serviceName: String",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherattribution/squaremarkurl",
                "title": "var squareMarkURL: URL",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherattribution/legalattributiontext",
                "title": "var legalAttributionText: String",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherattribution/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/weatherattribution/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherattribution/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatherattribution/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherattribution/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherattribution/==(_:_:)",
                    "title": "static func == (WeatherAttribution, WeatherAttribution) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weatherattribution/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weatherattribution",
            "title": "WeatherAttribution",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting the properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathermetadata/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weathermetadata/expirationdate",
                "title": "var expirationDate: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weathermetadata/location",
                "title": "var location: CLLocation",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathermetadata/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/weathermetadata/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathermetadata/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weathermetadata/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathermetadata/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/weathermetadata/==(_:_:)",
                    "title": "static func == (WeatherMetadata, WeatherMetadata) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weathermetadata/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weathermetadata",
            "title": "WeatherMetadata",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating the object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/init(rawvalue:)",
                "title": "init?(rawValue: String)",
                "type": "init"
              },
              {
                "title": "Getting the properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/minor",
                "title": "case minor",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/moderate",
                "title": "case moderate",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/severe",
                "title": "case severe",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/extreme",
                "title": "case extreme",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/unknown",
                "title": "case unknown",
                "type": "case"
              },
              {
                "title": "Describing the weather severity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/accessibilitydescription",
                "title": "var accessibilityDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/rawvalue-swift.property",
                "title": "var rawValue: String",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/allcases-swift.typealias",
                "title": "WeatherSeverity.AllCases",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/rawvalue-swift.typealias",
                "title": "WeatherSeverity.RawValue",
                "type": "typealias"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherseverity/allcases-swift.type.property",
                "title": "static var allCases: [WeatherSeverity]",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherseverity/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weatherseverity/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherseverity/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherseverity/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherseverity/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherseverity/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatherseverity/rawrepresentable-implementations",
                "title": "RawRepresentable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weatherseverity",
            "title": "WeatherSeverity",
            "type": "enum"
          },
          {
            "title": "Characteristics",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating the object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitation/init(rawvalue:)",
                "title": "init?(rawValue: String)",
                "type": "init"
              },
              {
                "title": "Specifying precipitation types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitation/hail",
                "title": "case hail",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/precipitation/mixed",
                "title": "case mixed",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/precipitation/rain",
                "title": "case rain",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/precipitation/sleet",
                "title": "case sleet",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/precipitation/snow",
                "title": "case snow",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/precipitation/none",
                "title": "case none",
                "type": "case"
              },
              {
                "title": "Describing the precipitation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitation/accessibilitydescription",
                "title": "var accessibilityDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/precipitation/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitation/rawvalue-swift.property",
                "title": "var rawValue: String",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitation/allcases-swift.typealias",
                "title": "Precipitation.AllCases",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/precipitation/rawvalue-swift.typealias",
                "title": "Precipitation.RawValue",
                "type": "typealias"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitation/allcases-swift.type.property",
                "title": "static var allCases: [Precipitation]",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/precipitation/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/precipitation/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/precipitation/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/precipitation/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/precipitation/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/precipitation/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/precipitation/rawrepresentable-implementations",
                "title": "RawRepresentable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/precipitation",
            "title": "Precipitation",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Creating the object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/init(rawvalue:)",
                "title": "init?(rawValue: String)",
                "type": "init"
              },
              {
                "title": "Getting the trend",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/falling",
                "title": "case falling",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/rising",
                "title": "case rising",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/steady",
                "title": "case steady",
                "type": "case"
              },
              {
                "title": "Describing the trend",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/accessibilitydescription",
                "title": "var accessibilityDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/rawvalue-swift.property",
                "title": "var rawValue: String",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/allcases-swift.typealias",
                "title": "PressureTrend.AllCases",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/rawvalue-swift.typealias",
                "title": "PressureTrend.RawValue",
                "type": "typealias"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/pressuretrend/allcases-swift.type.property",
                "title": "static var allCases: [PressureTrend]",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/pressuretrend/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/pressuretrend/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/pressuretrend/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/pressuretrend/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/pressuretrend/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/pressuretrend/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/pressuretrend/rawrepresentable-implementations",
                "title": "RawRepresentable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/pressuretrend",
            "title": "PressureTrend",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Getting the UV index",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/uvindex/category",
                "title": "var category: UVIndex.ExposureCategory",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/uvindex/value",
                "title": "var value: Int",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/_(_:_:)",
                    "title": "static func < (UVIndex.ExposureCategory, UVIndex.ExposureCategory) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/extreme",
                    "title": "case extreme",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/high",
                    "title": "case high",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/low",
                    "title": "case low",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/moderate",
                    "title": "case moderate",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/veryhigh",
                    "title": "case veryHigh",
                    "type": "case"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/accessibilitydescription",
                    "title": "var accessibilityDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/rangevalue",
                    "title": "var rangeValue: ClosedRange<Int>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/allcases-swift.typealias",
                    "title": "UVIndex.ExposureCategory.AllCases",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/rawvalue-swift.typealias",
                    "title": "UVIndex.ExposureCategory.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/allcases-swift.type.property",
                    "title": "static var allCases: [UVIndex.ExposureCategory]",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/'...(_:)-2h7t6",
                        "title": "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/'...(_:)-455ha",
                        "title": "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/'...(_:_:)",
                        "title": "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/'.._(_:)",
                        "title": "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/'.._(_:_:)",
                        "title": "static func ..< (Self, Self) -> Range<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/_(_:_:)-7cd20",
                        "title": "static func > (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/_=(_:_:)-6r0vb",
                        "title": "static func <= (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/_=(_:_:)-7v8gd",
                        "title": "static func >= (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/comparable-implementations",
                    "title": "Comparable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/weatherkit/uvindex/exposurecategory/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/weatherkit/uvindex/exposurecategory/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/weatherkit/uvindex/exposurecategory",
                "title": "UVIndex.ExposureCategory",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/uvindex/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/uvindex/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/uvindex/==(_:_:)",
                    "title": "static func == (UVIndex, UVIndex) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/uvindex/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/uvindex",
            "title": "UVIndex",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting the properties",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating the object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Describing the compass direction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/abbreviation",
                    "title": "var abbreviation: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/accessibilitydescription",
                    "title": "var accessibilityDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/east",
                    "title": "case east",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/eastnortheast",
                    "title": "case eastNortheast",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/eastsoutheast",
                    "title": "case eastSoutheast",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/north",
                    "title": "case north",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/northnortheast",
                    "title": "case northNortheast",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/northnorthwest",
                    "title": "case northNorthwest",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/northeast",
                    "title": "case northeast",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/northwest",
                    "title": "case northwest",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/south",
                    "title": "case south",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/southsoutheast",
                    "title": "case southSoutheast",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/southsouthwest",
                    "title": "case southSouthwest",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/southeast",
                    "title": "case southeast",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/southwest",
                    "title": "case southwest",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/west",
                    "title": "case west",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/westnorthwest",
                    "title": "case westNorthwest",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/westsouthwest",
                    "title": "case westSouthwest",
                    "type": "case"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/allcases-swift.typealias",
                    "title": "Wind.CompassDirection.AllCases",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/rawvalue-swift.typealias",
                    "title": "Wind.CompassDirection.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/allcases-swift.type.property",
                    "title": "static var allCases: [Wind.CompassDirection]",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/weatherkit/wind/compassdirection-swift.enum/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/weatherkit/wind/compassdirection-swift.enum",
                "title": "Wind.CompassDirection",
                "type": "enum"
              },
              {
                "path": "/documentation/weatherkit/wind/compassdirection-swift.property",
                "title": "var compassDirection: Wind.CompassDirection",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/wind/direction",
                "title": "var direction: Measurement<UnitAngle>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/wind/gust",
                "title": "var gust: Measurement<UnitSpeed>?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/wind/speed",
                "title": "var speed: Measurement<UnitSpeed>",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/wind/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/wind/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/wind/==(_:_:)",
                    "title": "static func == (Wind, Wind) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/wind/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/wind",
            "title": "Wind",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating the object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/init(rawvalue:)",
                "title": "init?(rawValue: String)",
                "type": "init"
              },
              {
                "title": "Getting visibility properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/blowingdust",
                "title": "case blowingDust",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/clear",
                "title": "case clear",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/cloudy",
                "title": "case cloudy",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/foggy",
                "title": "case foggy",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/haze",
                "title": "case haze",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/mostlyclear",
                "title": "case mostlyClear",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/mostlycloudy",
                "title": "case mostlyCloudy",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/partlycloudy",
                "title": "case partlyCloudy",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/smoky",
                "title": "case smoky",
                "type": "case"
              },
              {
                "title": "Getting wind properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/breezy",
                "title": "case breezy",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/windy",
                "title": "case windy",
                "type": "case"
              },
              {
                "title": "Getting precipitation properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/drizzle",
                "title": "case drizzle",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/heavyrain",
                "title": "case heavyRain",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/isolatedthunderstorms",
                "title": "case isolatedThunderstorms",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/rain",
                "title": "case rain",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/sunshowers",
                "title": "case sunShowers",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/scatteredthunderstorms",
                "title": "case scatteredThunderstorms",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/strongstorms",
                "title": "case strongStorms",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/thunderstorms",
                "title": "case thunderstorms",
                "type": "case"
              },
              {
                "title": "Getting hazardous properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/frigid",
                "title": "case frigid",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/hail",
                "title": "case hail",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/hot",
                "title": "case hot",
                "type": "case"
              },
              {
                "title": "Getting winter precipitation properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/flurries",
                "title": "case flurries",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/sleet",
                "title": "case sleet",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/snow",
                "title": "case snow",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/sunflurries",
                "title": "case sunFlurries",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/wintrymix",
                "title": "case wintryMix",
                "type": "case"
              },
              {
                "title": "Getting hazardous winter properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/blizzard",
                "title": "case blizzard",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/blowingsnow",
                "title": "case blowingSnow",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/freezingdrizzle",
                "title": "case freezingDrizzle",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/freezingrain",
                "title": "case freezingRain",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/heavysnow",
                "title": "case heavySnow",
                "type": "case"
              },
              {
                "title": "Getting tropical hazard properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/hurricane",
                "title": "case hurricane",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/tropicalstorm",
                "title": "case tropicalStorm",
                "type": "case"
              },
              {
                "title": "Describing the weather condition",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/accessibilitydescription",
                "title": "var accessibilityDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/rawvalue-swift.property",
                "title": "var rawValue: String",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/allcases-swift.typealias",
                "title": "WeatherCondition.AllCases",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/rawvalue-swift.typealias",
                "title": "WeatherCondition.RawValue",
                "type": "typealias"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathercondition/allcases-swift.type.property",
                "title": "static var allCases: [WeatherCondition]",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathercondition/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weathercondition/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathercondition/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathercondition/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathercondition/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weathercondition/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weathercondition/rawrepresentable-implementations",
                "title": "RawRepresentable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weathercondition",
            "title": "WeatherCondition",
            "type": "enum"
          },
          {
            "title": "Alerts and forecasts",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting the properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatheralert/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatheralert/region",
                "title": "var region: String?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatheralert/severity",
                "title": "var severity: WeatherSeverity",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatheralert/summary",
                "title": "var summary: String",
                "type": "property"
              },
              {
                "title": "Providing attribution",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatheralert/detailsurl",
                "title": "var detailsURL: URL",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatheralert/source",
                "title": "var source: String",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheralert/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/weatheralert/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheralert/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatheralert/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheralert/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheralert/==(_:_:)",
                    "title": "static func == (WeatherAlert, WeatherAlert) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weatheralert/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weatheralert",
            "title": "WeatherAlert",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting the properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatheravailability/alertavailability",
                "title": "var alertAvailability: WeatherAvailability.AvailabilityKind",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatheravailability/minuteavailability",
                "title": "var minuteAvailability: WeatherAvailability.AvailabilityKind",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/available",
                    "title": "case available",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/temporarilyunavailable",
                    "title": "case temporarilyUnavailable",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/unknown",
                    "title": "case unknown",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/unsupported",
                    "title": "case unsupported",
                    "type": "case"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/rawvalue-swift.typealias",
                    "title": "WeatherAvailability.AvailabilityKind.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/weatheravailability/availabilitykind/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/weatheravailability/availabilitykind/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/weatheravailability/availabilitykind/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/weatheravailability/availabilitykind/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/weatherkit/weatheravailability/availabilitykind/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/weatherkit/weatheravailability/availabilitykind/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/weatherkit/weatheravailability/availabilitykind",
                "title": "WeatherAvailability.AvailabilityKind",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/weatheravailability/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatheravailability/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/weatheravailability/==(_:_:)",
                    "title": "static func == (WeatherAvailability, WeatherAvailability) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weatheravailability/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weatheravailability",
            "title": "WeatherAvailability",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating the forecast",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/forecast/init(from:)-390k1",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "path": "/documentation/weatherkit/forecast/init(from:)-4wobg",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "path": "/documentation/weatherkit/forecast/init(from:)-51k1n",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Serializing objects",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/forecast/encode(to:)-5zuqd",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/forecast/encode(to:)-6lmvg",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/forecast/encode(to:)-fbco",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Getting the properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/forecast/endindex",
                "title": "var endIndex: Forecast<Element>.Index",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/forecast/forecast",
                "title": "var forecast: [Element]",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/forecast/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/forecast/startindex",
                "title": "var startIndex: Forecast<Element>.Index",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/forecast/summary",
                "title": "var summary: String",
                "type": "property"
              },
              {
                "title": "Accessing elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/forecast/subscript(_:)",
                "title": "subscript(Forecast<Element>.Index) -> Element",
                "type": "subscript"
              },
              {
                "path": "/documentation/weatherkit/forecast/index",
                "title": "Forecast.Index",
                "type": "typealias"
              },
              {
                "title": "Comparing forecasts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/forecast/==(_:_:)-9xlo4",
                "title": "static func == (Forecast<MinuteWeather>, Forecast<MinuteWeather>) -> Bool",
                "type": "op"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/forecast/==(_:_:)-n0ps",
                "title": "static func == (Forecast<Element>, Forecast<Element>) -> Bool",
                "type": "op"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/forecast/indices",
                "title": "Forecast.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/forecast/iterator",
                "title": "Forecast.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/forecast/subsequence",
                "title": "Forecast.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/firstrange(of:)-7gy81",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/joined(separator:)-2i1p6",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/forecast/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/firstrange(of:)-2ep5",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/map(_:)-5v6s5",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/forecast/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/forecast/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/forecast/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/contains(_:)",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/flatmap(_:)-8di7o",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/flatmap(_:)-9oyxq",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/formatted()",
                    "title": "func formatted() -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/joined()",
                    "title": "func joined() -> FlattenSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/joined(separator:)-3pmb0",
                    "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/joined(separator:)-59nrx",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/lexicographicallyprecedes(_:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/map(_:)-8cehe",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/max()",
                    "title": "func max() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/min()",
                    "title": "func min() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/sorted()",
                    "title": "func sorted() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/sorted(using:)-286yx",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/sorted(using:)-5aia3",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/forecast/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/forecast/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/forecast",
            "title": "Forecast",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting the precipitation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/minuteweather/precipitation",
                "title": "var precipitation: Precipitation",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/minuteweather/precipitationchance",
                "title": "var precipitationChance: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/minuteweather/precipitationintensity",
                "title": "var precipitationIntensity: Measurement<UnitSpeed>",
                "type": "property"
              },
              {
                "title": "Getting the date",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/minuteweather/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/minuteweather/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/minuteweather/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/minuteweather/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/minuteweather/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/minuteweather/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/minuteweather/==(_:_:)",
                    "title": "static func == (MinuteWeather, MinuteWeather) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/minuteweather/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/minuteweather",
            "title": "MinuteWeather",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting temperature and humidity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/apparenttemperature",
                "title": "var apparentTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/humidity",
                "title": "var humidity: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/temperature",
                "title": "var temperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/dewpoint",
                "title": "var dewPoint: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "title": "Getting pressure",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/pressure",
                "title": "var pressure: Measurement<UnitPressure>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/pressuretrend",
                "title": "var pressureTrend: PressureTrend",
                "type": "property"
              },
              {
                "title": "Getting conditions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/cloudcover",
                "title": "var cloudCover: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/condition",
                "title": "var condition: WeatherCondition",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/isdaylight",
                "title": "var isDaylight: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/visibility",
                "title": "var visibility: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "title": "Getting the UV index",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/uvindex",
                "title": "var uvIndex: UVIndex",
                "type": "property"
              },
              {
                "title": "Getting the wind",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/wind",
                "title": "var wind: Wind",
                "type": "property"
              },
              {
                "title": "Getting the date",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "title": "Getting the precipitation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/precipitation",
                "title": "var precipitation: Precipitation",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/precipitationchance",
                "title": "var precipitationChance: Double",
                "type": "property"
              },
              {
                "title": "Getting the weather symbol",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/symbolname",
                "title": "var symbolName: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourweather/cloudcoverbyaltitude",
                "title": "var cloudCoverByAltitude: CloudCoverByAltitude",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/precipitationamount",
                "title": "var precipitationAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourweather/snowfallamount",
                "title": "var snowfallAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourweather/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/hourweather/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourweather/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/hourweather/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourweather/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/hourweather/==(_:_:)",
                    "title": "static func == (HourWeather, HourWeather) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/hourweather/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/hourweather",
            "title": "HourWeather",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting temperature",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayweather/hightemperature",
                "title": "var highTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/lowtemperature",
                "title": "var lowTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "title": "Getting precipitation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayweather/precipitation",
                "title": "var precipitation: Precipitation",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/precipitationchance",
                "title": "var precipitationChance: Double",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/weatherkit/dayweather/rainfallamount",
                "title": "var rainfallAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/weatherkit/dayweather/snowfallamount",
                "title": "var snowfallAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "title": "Getting celestial information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayweather/moon",
                "title": "var moon: MoonEvents",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/sun",
                "title": "var sun: SunEvents",
                "type": "property"
              },
              {
                "title": "Getting the wind",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayweather/wind",
                "title": "var wind: Wind",
                "type": "property"
              },
              {
                "title": "Getting the date",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayweather/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "title": "Getting condition and UV index",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayweather/condition",
                "title": "var condition: WeatherCondition",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/uvindex",
                "title": "var uvIndex: UVIndex",
                "type": "property"
              },
              {
                "title": "Getting the weather symbol",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayweather/symbolname",
                "title": "var symbolName: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayweather/daytimeforecast",
                "title": "var daytimeForecast: DayPartForecast",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/hightemperaturetime",
                "title": "var highTemperatureTime: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/highwindspeed",
                "title": "var highWindSpeed: Measurement<UnitSpeed>?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/lowtemperaturetime",
                "title": "var lowTemperatureTime: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/maximumhumidity",
                "title": "var maximumHumidity: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/maximumvisibility",
                "title": "var maximumVisibility: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/minimumhumidity",
                "title": "var minimumHumidity: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/minimumvisibility",
                "title": "var minimumVisibility: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/overnightforecast",
                "title": "var overnightForecast: DayPartForecast",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/weatherkit/dayweather/precipitationamount",
                "title": "var precipitationAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/precipitationamountbytype",
                "title": "var precipitationAmountByType: PrecipitationAmountByType",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayweather/restofdayforecast",
                "title": "var restOfDayForecast: DayPartForecast?",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dayweather/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/dayweather/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dayweather/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dayweather/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dayweather/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/dayweather/==(_:_:)",
                    "title": "static func == (DayWeather, DayWeather) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/dayweather/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/dayweather",
            "title": "DayWeather",
            "type": "struct"
          },
          {
            "title": "Celestial information",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting the sun events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/sunevents/astronomicaldawn",
                "title": "var astronomicalDawn: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/astronomicaldusk",
                "title": "var astronomicalDusk: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/civildawn",
                "title": "var civilDawn: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/civildusk",
                "title": "var civilDusk: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/nauticaldawn",
                "title": "var nauticalDawn: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/nauticaldusk",
                "title": "var nauticalDusk: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/solarmidnight",
                "title": "var solarMidnight: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/solarnoon",
                "title": "var solarNoon: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/sunrise",
                "title": "var sunrise: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/sunevents/sunset",
                "title": "var sunset: Date?",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/sunevents/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/sunevents/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/sunevents/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/sunevents/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/sunevents/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/sunevents/==(_:_:)",
                    "title": "static func == (SunEvents, SunEvents) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/sunevents/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/sunevents",
            "title": "SunEvents",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting the moon events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/moonevents/moonrise",
                "title": "var moonrise: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/moonevents/moonset",
                "title": "var moonset: Date?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/moonevents/phase",
                "title": "var phase: MoonPhase",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/moonevents/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/moonevents/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/moonevents/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/moonevents/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/moonevents/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/moonevents/==(_:_:)",
                    "title": "static func == (MoonEvents, MoonEvents) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/moonevents/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/moonevents",
            "title": "MoonEvents",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating the object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/moonphase/init(rawvalue:)",
                "title": "init?(rawValue: String)",
                "type": "init"
              },
              {
                "title": "Getting the moon phase",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/moonphase/firstquarter",
                "title": "case firstQuarter",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/moonphase/full",
                "title": "case full",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/moonphase/lastquarter",
                "title": "case lastQuarter",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/moonphase/new",
                "title": "case new",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/moonphase/waningcrescent",
                "title": "case waningCrescent",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/moonphase/waninggibbous",
                "title": "case waningGibbous",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/moonphase/waxingcrescent",
                "title": "case waxingCrescent",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/moonphase/waxinggibbous",
                "title": "case waxingGibbous",
                "type": "case"
              },
              {
                "title": "Describing the moon phase",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/moonphase/accessibilitydescription",
                "title": "var accessibilityDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/moonphase/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/moonphase/symbolname",
                "title": "var symbolName: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/moonphase/rawvalue-swift.property",
                "title": "var rawValue: String",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/moonphase/allcases-swift.typealias",
                "title": "MoonPhase.AllCases",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/moonphase/rawvalue-swift.typealias",
                "title": "MoonPhase.RawValue",
                "type": "typealias"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/moonphase/allcases-swift.type.property",
                "title": "static var allCases: [MoonPhase]",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/moonphase/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/moonphase/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/moonphase/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/moonphase/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/moonphase/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/moonphase/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/moonphase/rawrepresentable-implementations",
                "title": "RawRepresentable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/moonphase",
            "title": "MoonPhase",
            "type": "enum"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting the error type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathererror/permissiondenied",
                "title": "case permissionDenied",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/weathererror/unknown",
                "title": "case unknown",
                "type": "case"
              },
              {
                "title": "Getting the error properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathererror/errordescription",
                "title": "var errorDescription: String?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weathererror/failurereason",
                "title": "var failureReason: String?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weathererror/helpanchor",
                "title": "var helpAnchor: String?",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weathererror/recoverysuggestion",
                "title": "var recoverySuggestion: String?",
                "type": "property"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathererror/==(_:_:)",
                "title": "static func == (WeatherError, WeatherError) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathererror/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weathererror/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathererror/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weathererror/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weathererror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/weatherkit/weathererror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weathererror",
            "title": "WeatherError",
            "type": "enum"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/cloudcoverbyaltitude/high",
                "title": "var high: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/cloudcoverbyaltitude/low",
                "title": "var low: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/cloudcoverbyaltitude/medium",
                "title": "var medium: Double",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/cloudcoverbyaltitude/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/cloudcoverbyaltitude/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/cloudcoverbyaltitude/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/cloudcoverbyaltitude/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/cloudcoverbyaltitude/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/cloudcoverbyaltitude/==(_:_:)",
                    "title": "static func == (CloudCoverByAltitude, CloudCoverByAltitude) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/cloudcoverbyaltitude/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/cloudcoverbyaltitude",
            "title": "CloudCoverByAltitude",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/==(_:_:)",
                "title": "static func == (DailyWeatherStatistics<T>, DailyWeatherStatistics<T>) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/baselinestartdate",
                "title": "var baselineStartDate: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/days",
                "title": "var days: [T]",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/endindex",
                "title": "var endIndex: DailyWeatherStatistics<T>.Index",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/startindex",
                "title": "var startIndex: DailyWeatherStatistics<T>.Index",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Subscripts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/subscript(_:)",
                "title": "subscript(DailyWeatherStatistics<T>.Index) -> DailyWeatherStatistics<T>.Element",
                "type": "subscript"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/element",
                "title": "DailyWeatherStatistics.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/index",
                "title": "DailyWeatherStatistics.Index",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/indices",
                "title": "DailyWeatherStatistics.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/iterator",
                "title": "DailyWeatherStatistics.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatistics/subsequence",
                "title": "DailyWeatherStatistics.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/firstrange(of:)-1x8lz",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/joined(separator:)-60fmk",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweatherstatistics/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/firstrange(of:)-1ob3x",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/map(_:)-1eco3",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweatherstatistics/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweatherstatistics/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweatherstatistics/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/contains(_:)",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/flatmap(_:)-44z19",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/flatmap(_:)-8wajh",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/formatted()",
                    "title": "func formatted() -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/joined()",
                    "title": "func joined() -> FlattenSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/joined(separator:)-58rrx",
                    "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/joined(separator:)-85xyu",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/lexicographicallyprecedes(_:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/map(_:)-38jyf",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/max()",
                    "title": "func max() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/min()",
                    "title": "func min() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/sorted()",
                    "title": "func sorted() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/sorted(using:)-4ty6m",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/sorted(using:)-8aen6",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweatherstatistics/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweatherstatistics/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/dailyweatherstatistics",
            "title": "DailyWeatherStatistics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatisticsquery/precipitation",
                "title": "static var precipitation: DailyWeatherStatisticsQuery<DayPrecipitationStatistics>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweatherstatisticsquery/temperature",
                "title": "static var temperature: DailyWeatherStatisticsQuery<DayTemperatureStatistics>",
                "type": "property"
              }
            ],
            "path": "/documentation/weatherkit/dailyweatherstatisticsquery",
            "title": "DailyWeatherStatisticsQuery",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/==(_:_:)",
                "title": "static func == (DailyWeatherSummary<T>, DailyWeatherSummary<T>) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/days",
                "title": "var days: [T]",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/endindex",
                "title": "var endIndex: DailyWeatherSummary<T>.Index",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/startindex",
                "title": "var startIndex: DailyWeatherSummary<T>.Index",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Subscripts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/subscript(_:)",
                "title": "subscript(DailyWeatherSummary<T>.Index) -> DailyWeatherSummary<T>.Element",
                "type": "subscript"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/element",
                "title": "DailyWeatherSummary.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/index",
                "title": "DailyWeatherSummary.Index",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/indices",
                "title": "DailyWeatherSummary.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/iterator",
                "title": "DailyWeatherSummary.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummary/subsequence",
                "title": "DailyWeatherSummary.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/firstrange(of:)-234wv",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/joined(separator:)-7uvyc",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweathersummary/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/firstrange(of:)-9t55z",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/map(_:)-4p0g9",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweathersummary/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweathersummary/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweathersummary/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/contains(_:)",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/flatmap(_:)-34dpm",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/flatmap(_:)-7fv2p",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/formatted()",
                    "title": "func formatted() -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/joined()",
                    "title": "func joined() -> FlattenSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/joined(separator:)-3x4ok",
                    "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/joined(separator:)-7ehx",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/lexicographicallyprecedes(_:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/map(_:)-91m9m",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/max()",
                    "title": "func max() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/min()",
                    "title": "func min() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/sorted()",
                    "title": "func sorted() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/sorted(using:)-38sia",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/sorted(using:)-6i4ol",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/dailyweathersummary/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/dailyweathersummary/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/dailyweathersummary",
            "title": "DailyWeatherSummary",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummaryquery/precipitation",
                "title": "static var precipitation: DailyWeatherSummaryQuery<DayPrecipitationSummary>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dailyweathersummaryquery/temperature",
                "title": "static var temperature: DailyWeatherSummaryQuery<DayTemperatureSummary>",
                "type": "property"
              }
            ],
            "path": "/documentation/weatherkit/dailyweathersummaryquery",
            "title": "DailyWeatherSummaryQuery",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/cloudcover",
                "title": "var cloudCover: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/cloudcoverbyaltitude",
                "title": "var cloudCoverByAltitude: CloudCoverByAltitude",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/condition",
                "title": "var condition: WeatherCondition",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/hightemperature",
                "title": "var highTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/highwindspeed",
                "title": "var highWindSpeed: Measurement<UnitSpeed>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/lowtemperature",
                "title": "var lowTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/maximumhumidity",
                "title": "var maximumHumidity: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/maximumvisibility",
                "title": "var maximumVisibility: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/minimumhumidity",
                "title": "var minimumHumidity: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/minimumvisibility",
                "title": "var minimumVisibility: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/precipitation",
                "title": "var precipitation: Precipitation",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/precipitationamountbytype",
                "title": "var precipitationAmountByType: PrecipitationAmountByType",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/precipitationchance",
                "title": "var precipitationChance: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daypartforecast/wind",
                "title": "var wind: Wind",
                "type": "property"
              }
            ],
            "path": "/documentation/weatherkit/daypartforecast",
            "title": "DayPartForecast",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationstatistics/==(_:_:)",
                "title": "static func == (DayPrecipitationStatistics, DayPrecipitationStatistics) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationstatistics/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationstatistics/averageprecipitationamount",
                "title": "var averagePrecipitationAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationstatistics/averageprecipitationprobability",
                "title": "var averagePrecipitationProbability: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationstatistics/averagesnowfallamount",
                "title": "var averageSnowfallAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationstatistics/day",
                "title": "var day: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationstatistics/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dayprecipitationstatistics/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/dayprecipitationstatistics/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/dayprecipitationstatistics",
            "title": "DayPrecipitationStatistics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationsummary/==(_:_:)",
                "title": "static func == (DayPrecipitationSummary, DayPrecipitationSummary) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationsummary/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationsummary/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationsummary/precipitationamount",
                "title": "var precipitationAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationsummary/snowfallamount",
                "title": "var snowfallAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/dayprecipitationsummary/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/dayprecipitationsummary/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/dayprecipitationsummary/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/dayprecipitationsummary",
            "title": "DayPrecipitationSummary",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturestatistics/==(_:_:)",
                "title": "static func == (DayTemperatureStatistics, DayTemperatureStatistics) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturestatistics/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturestatistics/averagehightemperature",
                "title": "var averageHighTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturestatistics/averagelowtemperature",
                "title": "var averageLowTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturestatistics/day",
                "title": "var day: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturestatistics/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/daytemperaturestatistics/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/daytemperaturestatistics/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/daytemperaturestatistics",
            "title": "DayTemperatureStatistics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturesummary/==(_:_:)",
                "title": "static func == (DayTemperatureSummary, DayTemperatureSummary) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturesummary/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturesummary/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturesummary/hightemperature",
                "title": "var highTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturesummary/lowtemperature",
                "title": "var lowTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/daytemperaturesummary/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/daytemperaturesummary/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/daytemperaturesummary/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/daytemperaturesummary",
            "title": "DayTemperatureSummary",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/==(_:_:)",
                "title": "static func == (HistoricalComparisons, HistoricalComparisons) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/comparisons",
                "title": "var comparisons: [HistoricalComparison]",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/endindex",
                "title": "var endIndex: HistoricalComparisons.Index",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/startindex",
                "title": "var startIndex: HistoricalComparisons.Index",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Subscripts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/subscript(_:)",
                "title": "subscript(HistoricalComparisons.Index) -> HistoricalComparisons.Element",
                "type": "subscript"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/element",
                "title": "HistoricalComparisons.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/index",
                "title": "HistoricalComparisons.Index",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/indices",
                "title": "HistoricalComparisons.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/iterator",
                "title": "HistoricalComparisons.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparisons/subsequence",
                "title": "HistoricalComparisons.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/historicalcomparisons/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/firstrange(of:)",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/map(_:)-55zso",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/historicalcomparisons/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/historicalcomparisons/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/historicalcomparisons/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/contains(_:)",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/flatmap(_:)-1iz4f",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/flatmap(_:)-2qz4g",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/map(_:)-4urz9",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/sorted(using:)-3cizj",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/sorted(using:)-7ajrg",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparisons/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/historicalcomparisons/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/historicalcomparisons",
            "title": "HistoricalComparisons",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourtemperaturestatistics/==(_:_:)",
                "title": "static func == (HourTemperatureStatistics, HourTemperatureStatistics) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourtemperaturestatistics/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourtemperaturestatistics/hour",
                "title": "var hour: Int",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourtemperaturestatistics/percentiles",
                "title": "var percentiles: Percentiles<UnitTemperature>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourtemperaturestatistics/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourtemperaturestatistics/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/hourtemperaturestatistics/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/hourtemperaturestatistics",
            "title": "HourTemperatureStatistics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/==(_:_:)",
                "title": "static func == (HourlyWeatherStatistics<T>, HourlyWeatherStatistics<T>) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/baselinestartdate",
                "title": "var baselineStartDate: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/endindex",
                "title": "var endIndex: HourlyWeatherStatistics<T>.Index",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/hours",
                "title": "var hours: [T]",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/startindex",
                "title": "var startIndex: HourlyWeatherStatistics<T>.Index",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Subscripts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/subscript(_:)",
                "title": "subscript(HourlyWeatherStatistics<T>.Index) -> HourlyWeatherStatistics<T>.Element",
                "type": "subscript"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/element",
                "title": "HourlyWeatherStatistics.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/index",
                "title": "HourlyWeatherStatistics.Index",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/indices",
                "title": "HourlyWeatherStatistics.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/iterator",
                "title": "HourlyWeatherStatistics.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatistics/subsequence",
                "title": "HourlyWeatherStatistics.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/firstrange(of:)-3c2ya",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/joined(separator:)-7ykz5",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/hourlyweatherstatistics/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/firstrange(of:)-1nrh9",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/map(_:)-3fp6u",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/hourlyweatherstatistics/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/hourlyweatherstatistics/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/hourlyweatherstatistics/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/contains(_:)",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/flatmap(_:)-29he8",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/flatmap(_:)-8zd5i",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/formatted()",
                    "title": "func formatted() -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/joined()",
                    "title": "func joined() -> FlattenSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/joined(separator:)-57yxg",
                    "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/joined(separator:)-7b13d",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/lexicographicallyprecedes(_:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/map(_:)-5iwuj",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/max()",
                    "title": "func max() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/min()",
                    "title": "func min() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/sorted()",
                    "title": "func sorted() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/sorted(using:)-3vcnd",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/sorted(using:)-9hshg",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/hourlyweatherstatistics/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/hourlyweatherstatistics/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/hourlyweatherstatistics",
            "title": "HourlyWeatherStatistics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/hourlyweatherstatisticsquery/temperature",
                "title": "static var temperature: HourlyWeatherStatisticsQuery<HourTemperatureStatistics>",
                "type": "property"
              }
            ],
            "path": "/documentation/weatherkit/hourlyweatherstatisticsquery",
            "title": "HourlyWeatherStatisticsQuery",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthprecipitationstatistics/==(_:_:)",
                "title": "static func == (MonthPrecipitationStatistics, MonthPrecipitationStatistics) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthprecipitationstatistics/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthprecipitationstatistics/averageprecipitationamount",
                "title": "var averagePrecipitationAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthprecipitationstatistics/averageprecipitationprobability",
                "title": "var averagePrecipitationProbability: Double",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthprecipitationstatistics/averagesnowfallamount",
                "title": "var averageSnowfallAmount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthprecipitationstatistics/month",
                "title": "var month: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthprecipitationstatistics/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthprecipitationstatistics/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/monthprecipitationstatistics/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/monthprecipitationstatistics",
            "title": "MonthPrecipitationStatistics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthtemperaturestatistics/==(_:_:)",
                "title": "static func == (MonthTemperatureStatistics, MonthTemperatureStatistics) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthtemperaturestatistics/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthtemperaturestatistics/averagehightemperature",
                "title": "var averageHighTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthtemperaturestatistics/averagelowtemperature",
                "title": "var averageLowTemperature: Measurement<UnitTemperature>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthtemperaturestatistics/month",
                "title": "var month: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthtemperaturestatistics/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthtemperaturestatistics/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/monthtemperaturestatistics/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/monthtemperaturestatistics",
            "title": "MonthTemperatureStatistics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/==(_:_:)",
                "title": "static func == (MonthlyWeatherStatistics<T>, MonthlyWeatherStatistics<T>) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/baselinestartdate",
                "title": "var baselineStartDate: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/endindex",
                "title": "var endIndex: MonthlyWeatherStatistics<T>.Index",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/months",
                "title": "var months: [T]",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/startindex",
                "title": "var startIndex: MonthlyWeatherStatistics<T>.Index",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Subscripts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/subscript(_:)",
                "title": "subscript(MonthlyWeatherStatistics<T>.Index) -> MonthlyWeatherStatistics<T>.Element",
                "type": "subscript"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/element",
                "title": "MonthlyWeatherStatistics.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/index",
                "title": "MonthlyWeatherStatistics.Index",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/indices",
                "title": "MonthlyWeatherStatistics.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/iterator",
                "title": "MonthlyWeatherStatistics.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatistics/subsequence",
                "title": "MonthlyWeatherStatistics.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/firstrange(of:)-9t3on",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/joined(separator:)-k48p",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/monthlyweatherstatistics/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/firstrange(of:)-91pty",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/map(_:)-1ttxx",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/monthlyweatherstatistics/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/monthlyweatherstatistics/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/monthlyweatherstatistics/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/contains(_:)",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/flatmap(_:)-5m24v",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/flatmap(_:)-67f29",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/formatted()",
                    "title": "func formatted() -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/joined()",
                    "title": "func joined() -> FlattenSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/joined(separator:)-1lcqo",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/joined(separator:)-2quhe",
                    "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/lexicographicallyprecedes(_:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/map(_:)-1t9xw",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/max()",
                    "title": "func max() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/min()",
                    "title": "func min() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/sorted()",
                    "title": "func sorted() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/sorted(using:)-5ag4b",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/sorted(using:)-8yhon",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/monthlyweatherstatistics/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/monthlyweatherstatistics/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/monthlyweatherstatistics",
            "title": "MonthlyWeatherStatistics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatisticsquery/precipitation",
                "title": "static var precipitation: MonthlyWeatherStatisticsQuery<MonthPrecipitationStatistics>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/monthlyweatherstatisticsquery/temperature",
                "title": "static var temperature: MonthlyWeatherStatisticsQuery<MonthTemperatureStatistics>",
                "type": "property"
              }
            ],
            "path": "/documentation/weatherkit/monthlyweatherstatisticsquery",
            "title": "MonthlyWeatherStatisticsQuery",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/percentiles/==(_:_:)",
                "title": "static func == (Percentiles<Dimension>, Percentiles<Dimension>) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/percentiles/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/percentiles/p10",
                "title": "var p10: Measurement<Dimension>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/percentiles/p50",
                "title": "var p50: Measurement<Dimension>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/percentiles/p90",
                "title": "var p90: Measurement<Dimension>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/percentiles/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/percentiles/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/percentiles/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/percentiles",
            "title": "Percentiles",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/==(_:_:)",
                "title": "static func == (PrecipitationAmountByType, PrecipitationAmountByType) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/hail",
                "title": "var hail: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/mixed",
                "title": "var mixed: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/precipitation",
                "title": "var precipitation: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/rainfall",
                "title": "var rainfall: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/sleet",
                "title": "var sleet: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/snowfallamount",
                "title": "var snowfallAmount: SnowfallAmount",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/precipitationamountbytype/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/precipitationamountbytype/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/precipitationamountbytype/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/precipitationamountbytype",
            "title": "PrecipitationAmountByType",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/==(_:_:)",
                "title": "static func == (SnowfallAmount, SnowfallAmount) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/amount",
                "title": "var amount: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/amountliquidequivalent",
                "title": "var amountLiquidEquivalent: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/maximum",
                "title": "var maximum: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/maximumliquidequivalent",
                "title": "var maximumLiquidEquivalent: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/minimum",
                "title": "var minimum: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/minimumliquidequivalent",
                "title": "var minimumLiquidEquivalent: Measurement<UnitLength>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/snowfallamount/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/snowfallamount/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/snowfallamount/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/snowfallamount",
            "title": "SnowfallAmount",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/trend/==(_:_:)",
                "title": "static func == (Trend<Dimension>, Trend<Dimension>) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/trend/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/trend/baseline",
                "title": "var baseline: TrendBaseline<Dimension>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/trend/currentvalue",
                "title": "var currentValue: Measurement<Dimension>",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/trend/deviation",
                "title": "var deviation: Deviation",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/trend/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/trend/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/trend/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/trend",
            "title": "Trend",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/trendbaseline/==(_:_:)",
                "title": "static func == (TrendBaseline<Dimension>, TrendBaseline<Dimension>) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/trendbaseline/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/trendbaseline/kind-swift.property",
                "title": "let kind: TrendBaseline<Dimension>.Kind",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/trendbaseline/startdate",
                "title": "let startDate: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/trendbaseline/value",
                "title": "let value: Measurement<Dimension>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/trendbaseline/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum/==(_:_:)",
                    "title": "static func == (TrendBaseline<Dimension>.Kind, TrendBaseline<Dimension>.Kind) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum/mean",
                    "title": "case mean",
                    "type": "case"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/weatherkit/trendbaseline/kind-swift.enum",
                "title": "TrendBaseline.Kind",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/trendbaseline/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/trendbaseline/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/trendbaseline",
            "title": "TrendBaseline",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherchange/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherchange/dayprecipitationamount",
                "title": "var dayPrecipitationAmount: WeatherChange.Direction",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherchange/hightemperature",
                "title": "var highTemperature: WeatherChange.Direction",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherchange/lowtemperature",
                "title": "var lowTemperature: WeatherChange.Direction",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherchange/nightprecipitationamount",
                "title": "var nightPrecipitationAmount: WeatherChange.Direction",
                "type": "property"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/direction/decrease",
                    "title": "case decrease",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/direction/increase",
                    "title": "case increase",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/direction/steady",
                    "title": "case steady",
                    "type": "case"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/direction/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/direction/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/weatherchange/direction/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/weatherkit/weatherchange/direction/decodable-implementations",
                    "title": "Decodable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/weatherchange/direction/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/weatherkit/weatherchange/direction/encodable-implementations",
                    "title": "Encodable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/weatherkit/weatherchange/direction/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/weatherkit/weatherchange/direction/==(_:_:)",
                        "title": "static func == (WeatherChange.Direction, WeatherChange.Direction) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/weatherkit/weatherchange/direction/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchange/direction",
                "title": "WeatherChange.Direction",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchange/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchange/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchange/==(_:_:)",
                    "title": "static func == (WeatherChange, WeatherChange) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchange/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weatherchange",
            "title": "WeatherChange",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/changes",
                "title": "var changes: [WeatherChange]",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/endindex",
                "title": "var endIndex: WeatherChanges.Index",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/metadata",
                "title": "var metadata: WeatherMetadata",
                "type": "property"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/startindex",
                "title": "var startIndex: WeatherChanges.Index",
                "type": "property"
              },
              {
                "title": "Subscripts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/subscript(_:)",
                "title": "subscript(WeatherChanges.Index) -> WeatherChanges.Element",
                "type": "subscript"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/element",
                "title": "WeatherChanges.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/index",
                "title": "WeatherChanges.Index",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/indices",
                "title": "WeatherChanges.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/iterator",
                "title": "WeatherChanges.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/weatherkit/weatherchanges/subsequence",
                "title": "WeatherChanges.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchanges/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/firstrange(of:)",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/map(_:)-5xti1",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchanges/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchanges/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchanges/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/==(_:_:)",
                    "title": "static func == (WeatherChanges, WeatherChanges) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchanges/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchanges/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/contains(_:)",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/flatmap(_:)-6odfz",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/flatmap(_:)-7zrxa",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/map(_:)-6t4cq",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/sorted(using:)-5u4sa",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/sorted(using:)-rila",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/weatherkit/weatherchanges/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/weatherkit/weatherchanges/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/weatherchanges",
            "title": "WeatherChanges",
            "type": "struct"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/deviation/==(_:_:)",
                "title": "static func == (Deviation, Deviation) -> Bool",
                "type": "op"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/deviation/higher",
                "title": "case higher",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/deviation/lower",
                "title": "case lower",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/deviation/muchhigher",
                "title": "case muchHigher",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/deviation/muchlower",
                "title": "case muchLower",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/deviation/normal",
                "title": "case normal",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/deviation/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/deviation/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/deviation/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/weatherkit/deviation/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/deviation/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/deviation/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/deviation",
            "title": "Deviation",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparison/==(_:_:)",
                "title": "static func == (HistoricalComparison, HistoricalComparison) -> Bool",
                "type": "op"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparison/hightemperature(_:)",
                "title": "case highTemperature(Trend<UnitTemperature>)",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparison/lowtemperature(_:)",
                "title": "case lowTemperature(Trend<UnitTemperature>)",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparison/precipitationamount(_:)",
                "title": "case precipitationAmount(Trend<UnitLength>)",
                "type": "case"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparison/snowfallamount(_:)",
                "title": "case snowfallAmount(Trend<UnitLength>)",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparison/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/weatherkit/historicalcomparison/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/weatherkit/historicalcomparison/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/weatherkit/historicalcomparison/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/weatherkit/historicalcomparison",
            "title": "HistoricalComparison",
            "type": "enum"
          }
        ],
        "path": "/documentation/weatherkit",
        "title": "WeatherKit",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
