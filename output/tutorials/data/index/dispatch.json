{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Queues and Tasks",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Queue",
                "type": "groupMarker"
              },
              {
                "title": "Configuring Queue Execution Parameters",
                "type": "groupMarker"
              },
              {
                "title": "Executing Tasks Synchronously",
                "type": "groupMarker"
              },
              {
                "title": "Managing Queue Attributes",
                "type": "groupMarker"
              },
              {
                "title": "Managing the Main Dispatch Queue",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-queue",
            "title": "Dispatch Queue",
            "type": "collection"
          },
          {
            "path": "/documentation/dispatch/dispatch-work-item",
            "title": "Dispatch Work Item",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Group",
                "type": "groupMarker"
              },
              {
                "title": "Updating the Group Manually",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-group",
            "title": "Dispatch Group",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Workloop",
                "type": "groupMarker"
              },
              {
                "title": "Executing Tasks Synchronously",
                "type": "groupMarker"
              },
              {
                "title": "Managing Queue Attributes",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/workloop",
            "title": "Workloop",
            "type": "collection"
          },
          {
            "title": "Thread Scheduling",
            "type": "groupMarker"
          },
          {
            "title": "System Event Monitoring",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Source",
                "type": "groupMarker"
              },
              {
                "title": "Getting Dispatch Source Attributes",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-source",
            "title": "Dispatch Source",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch I/O Object",
                "type": "groupMarker"
              },
              {
                "title": "Managing the File Descriptor",
                "type": "groupMarker"
              },
              {
                "title": "Synchronizing File Operations",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-i-o",
            "title": "Dispatch I/O",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Data Object",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-data",
            "title": "Dispatch Data",
            "type": "collection"
          },
          {
            "title": "Task Synchronization",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Semaphore",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-semaphore",
            "title": "Dispatch Semaphore",
            "type": "collection"
          },
          {
            "path": "/documentation/dispatch/dispatch-barrier",
            "title": "Dispatch Barrier",
            "type": "collection"
          },
          {
            "title": "Time Constructs",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Times",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/2963138-wall-time-constants",
            "title": "Wall Time Constants",
            "type": "collection"
          },
          {
            "title": "Dispatch Objects",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Activating, Suspending, and Resuming the Object",
                "type": "groupMarker"
              },
              {
                "title": "Changing the Assigned Target Queue",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-objects",
            "title": "Dispatch Objects",
            "type": "collection"
          },
          {
            "title": "Deprecated",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Functions",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/deprecated-symbols",
            "title": "Deprecated Symbols",
            "type": "collection"
          },
          {
            "title": "Classes",
            "type": "groupMarker"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-constants",
            "title": "Dispatch Constants",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Data Types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-data-types",
            "title": "Dispatch Data Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Functions",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/dispatch/dispatch-functions",
            "title": "Dispatch Functions",
            "type": "collection"
          }
        ],
        "path": "/documentation/dispatch",
        "title": "Dispatch",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Queues and Tasks",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Queue",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Queue Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_concurrent",
                    "title": "OS_dispatch_queue_concurrent",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_global-c.protocol",
                    "title": "OS_dispatch_queue_global",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_main-c.protocol",
                    "title": "OS_dispatch_queue_main",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_serial",
                    "title": "OS_dispatch_queue_serial",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue",
                    "title": "OS_dispatch_queue",
                    "type": "protocol"
                  }
                ],
                "path": "/documentation/dispatch/dispatch_queue_t",
                "title": "dispatch_queue_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_main_t",
                "title": "dispatch_queue_main_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_global_t",
                "title": "dispatch_queue_global_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_serial_t",
                "title": "dispatch_queue_serial_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_concurrent_t",
                "title": "dispatch_queue_concurrent_t",
                "type": "typealias"
              },
              {
                "title": "Configuring Queue Execution Parameters",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Attribute Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_attr",
                    "title": "OS_dispatch_queue_attr",
                    "type": "protocol"
                  }
                ],
                "path": "/documentation/dispatch/dispatch_queue_attr_t",
                "title": "dispatch_queue_attr_t",
                "type": "typealias"
              },
              {
                "title": "Executing Tasks Synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/sync(execute:)-3segw",
                "title": "dispatch_sync",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncandwait(execute:)-1udeu",
                "title": "dispatch_async_and_wait",
                "type": "func"
              },
              {
                "title": "Managing Queue Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/settarget(queue:)",
                "title": "dispatch_set_target_queue",
                "type": "func"
              },
              {
                "title": "Managing the Main Dispatch Queue",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchmain()",
                "title": "dispatch_main",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/dispatch-queue",
            "title": "Dispatch Queue",
            "type": "collection"
          },
          {
            "path": "/documentation/dispatch/dispatch-work-item",
            "title": "Dispatch Work Item",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Group",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/init()",
                "title": "dispatch_group_create",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatch_group_t",
                "title": "dispatch_group_t",
                "type": "typealias"
              },
              {
                "title": "Updating the Group Manually",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/enter()",
                "title": "dispatch_group_enter",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/leave()",
                "title": "dispatch_group_leave",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/dispatch-group",
            "title": "Dispatch Group",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Workloop",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_workloop_t",
                "title": "dispatch_workloop_t",
                "type": "typealias"
              },
              {
                "title": "Executing Tasks Synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/sync(execute:)-3segw",
                "title": "dispatch_sync",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncandwait(execute:)-1udeu",
                "title": "dispatch_async_and_wait",
                "type": "func"
              },
              {
                "title": "Managing Queue Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/settarget(queue:)",
                "title": "dispatch_set_target_queue",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/workloop",
            "title": "Workloop",
            "type": "collection"
          },
          {
            "title": "Thread Scheduling",
            "type": "groupMarker"
          },
          {
            "title": "System Event Monitoring",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_source_t",
                "title": "dispatch_source_t",
                "type": "typealias"
              },
              {
                "title": "Getting Dispatch Source Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_source_mach_recv_flags_t",
                "title": "dispatch_source_mach_recv_flags_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/dispatch/dispatch-source",
            "title": "Dispatch Source",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch I/O Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_io_t",
                "title": "dispatch_io_t",
                "type": "typealias"
              },
              {
                "title": "Managing the File Descriptor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/filedescriptor",
                "title": "dispatch_io_get_descriptor",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatchio/setlimit(lowwater:)",
                "title": "dispatch_io_set_low_water",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatchio/setlimit(highwater:)",
                "title": "dispatch_io_set_high_water",
                "type": "func"
              },
              {
                "title": "Synchronizing File Operations",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/barrier(execute:)",
                "title": "dispatch_io_barrier",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/dispatch-i-o",
            "title": "Dispatch I/O",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Data Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_data_t",
                "title": "dispatch_data_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/dispatch/dispatch-data",
            "title": "Dispatch Data",
            "type": "collection"
          },
          {
            "path": "/documentation/dispatch/dispatchsourceprotocol",
            "title": "OS_dispatch_source",
            "type": "protocol"
          },
          {
            "title": "Task Synchronization",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Semaphore",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsemaphore/init(value:)",
                "title": "dispatch_semaphore_create",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatch_semaphore_t",
                "title": "dispatch_semaphore_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/dispatch/dispatch-semaphore",
            "title": "Dispatch Semaphore",
            "type": "collection"
          },
          {
            "path": "/documentation/dispatch/dispatch-barrier",
            "title": "Dispatch Barrier",
            "type": "collection"
          },
          {
            "title": "Time Constructs",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Well-Defined Times",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_time_now",
                "title": "DISPATCH_TIME_NOW",
                "type": "macro"
              },
              {
                "path": "/documentation/dispatch/dispatch_time_forever",
                "title": "DISPATCH_TIME_FOREVER",
                "type": "macro"
              },
              {
                "title": "Time Multiplier Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/usec_per_sec",
                "title": "USEC_PER_SEC",
                "type": "macro"
              },
              {
                "path": "/documentation/dispatch/nsec_per_sec",
                "title": "NSEC_PER_SEC",
                "type": "macro"
              },
              {
                "path": "/documentation/dispatch/nsec_per_msec",
                "title": "NSEC_PER_MSEC",
                "type": "macro"
              },
              {
                "path": "/documentation/dispatch/nsec_per_usec",
                "title": "NSEC_PER_USEC",
                "type": "macro"
              }
            ],
            "path": "/documentation/dispatch/dispatch_time_t",
            "title": "dispatch_time_t",
            "type": "typealias"
          },
          {
            "path": "/documentation/dispatch/dispatch_walltime_now",
            "title": "DISPATCH_WALLTIME_NOW",
            "type": "case"
          },
          {
            "children": [
              {
                "title": "Times",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_walltime_now",
                "title": "DISPATCH_WALLTIME_NOW",
                "type": "case"
              }
            ],
            "path": "/documentation/dispatch/2963138-wall-time-constants",
            "title": "Wall Time Constants",
            "type": "collection"
          },
          {
            "title": "Dispatch Objects",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Activating, Suspending, and Resuming the Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/activate()",
                "title": "dispatch_activate",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/suspend()",
                "title": "dispatch_suspend",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/resume()",
                "title": "dispatch_resume",
                "type": "func"
              },
              {
                "children": [
                  {
                    "title": "Object Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_object",
                    "title": "OS_dispatch_object",
                    "type": "protocol"
                  }
                ],
                "path": "/documentation/dispatch/dispatch_object_t",
                "title": "dispatch_object_t",
                "type": "typealias"
              },
              {
                "title": "Changing the Assigned Target Queue",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/settarget(queue:)",
                "title": "dispatch_set_target_queue",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/dispatch-objects",
            "title": "Dispatch Objects",
            "type": "collection"
          },
          {
            "title": "Deprecated",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Functions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_get_current_queue()",
                "title": "dispatch_get_current_queue",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatch_debugv(_:_:_:)",
                "title": "dispatch_debugv",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/deprecated-symbols",
            "title": "Deprecated Symbols",
            "type": "collection"
          },
          {
            "title": "Classes",
            "type": "groupMarker"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_api_version",
                "title": "DISPATCH_API_VERSION",
                "type": "macro"
              },
              {
                "path": "/documentation/dispatch/dispatch_apply_auto_available",
                "title": "DISPATCH_APPLY_AUTO_AVAILABLE",
                "type": "macro"
              },
              {
                "path": "/documentation/dispatch/dispatch_once_inline_fastpath",
                "title": "DISPATCH_ONCE_INLINE_FASTPATH",
                "type": "macro"
              },
              {
                "path": "/documentation/dispatch/dispatch_swift3_overlay",
                "title": "DISPATCH_SWIFT3_OVERLAY",
                "type": "macro"
              },
              {
                "path": "/documentation/dispatch/msec_per_sec",
                "title": "MSEC_PER_SEC",
                "type": "macro"
              }
            ],
            "path": "/documentation/dispatch/dispatch-constants",
            "title": "Dispatch Constants",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Data Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_group_t",
                "title": "dispatch_group_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_io_t",
                "title": "dispatch_io_t",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Object Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_object",
                    "title": "OS_dispatch_object",
                    "type": "protocol"
                  }
                ],
                "path": "/documentation/dispatch/dispatch_object_t",
                "title": "dispatch_object_t",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Attribute Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_attr",
                    "title": "OS_dispatch_queue_attr",
                    "type": "protocol"
                  }
                ],
                "path": "/documentation/dispatch/dispatch_queue_attr_t",
                "title": "dispatch_queue_attr_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_serial_executor_t",
                "title": "dispatch_queue_serial_executor_t",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Queue Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_concurrent",
                    "title": "OS_dispatch_queue_concurrent",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_global-c.protocol",
                    "title": "OS_dispatch_queue_global",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_main-c.protocol",
                    "title": "OS_dispatch_queue_main",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue_serial",
                    "title": "OS_dispatch_queue_serial",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/dispatch/os_dispatch_queue",
                    "title": "OS_dispatch_queue",
                    "type": "protocol"
                  }
                ],
                "path": "/documentation/dispatch/dispatch_queue_t",
                "title": "dispatch_queue_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_semaphore_t",
                "title": "dispatch_semaphore_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/dispatch/dispatch-data-types",
            "title": "Dispatch Data Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Functions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_allow_send_signals(_:)",
                "title": "dispatch_allow_send_signals",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/dispatch-functions",
            "title": "Dispatch Functions",
            "type": "collection"
          }
        ],
        "path": "/documentation/dispatch",
        "title": "Dispatch",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Queues and Tasks",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Queue",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/main",
                "title": "class var main: DispatchQueue",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/global(qos:)",
                "title": "class func global(qos: DispatchQoS.QoSClass) -> DispatchQueue",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/init(label:qos:attributes:autoreleasefrequency:target:)",
                "title": "convenience init(label: String, qos: DispatchQoS, attributes: DispatchQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Getting the Quality-of-Service Class",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/userinteractive",
                    "title": "case userInteractive",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/userinitiated",
                    "title": "case userInitiated",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/default",
                    "title": "case `default`",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/utility",
                    "title": "case utility",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/background",
                    "title": "case background",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/unspecified",
                    "title": "case unspecified",
                    "type": "case"
                  },
                  {
                    "title": "Initializing the Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/init(rawvalue:)",
                    "title": "init?(rawValue: qos_class_t)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/rawvalue",
                    "title": "var rawValue: qos_class_t",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum",
                "title": "DispatchQoS.QoSClass",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Attributes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/attributes/concurrent",
                    "title": "static let concurrent: DispatchQueue.Attributes",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/attributes/initiallyinactive",
                    "title": "static let initiallyInactive: DispatchQueue.Attributes",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchqueue/attributes",
                "title": "DispatchQueue.Attributes",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Autorelease Frequencies",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/autoreleasefrequency/inherit",
                    "title": "case inherit",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/autoreleasefrequency/workitem",
                    "title": "case workItem",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/autoreleasefrequency/never",
                    "title": "case never",
                    "type": "case"
                  }
                ],
                "path": "/documentation/dispatch/dispatchqueue/autoreleasefrequency",
                "title": "DispatchQueue.AutoreleaseFrequency",
                "type": "enum"
              },
              {
                "path": "/documentation/dispatch/os_dispatch_queue_main-swift.class",
                "title": "OS_dispatch_queue_main",
                "type": "class"
              },
              {
                "path": "/documentation/dispatch/os_dispatch_queue_global-swift.class",
                "title": "OS_dispatch_queue_global",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchserialqueue/attributes/initiallyinactive",
                        "title": "static let initiallyInactive: DispatchSerialQueue.Attributes",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/dispatch/dispatchserialqueue/attributes",
                    "title": "DispatchSerialQueue.Attributes",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchserialqueue/init(label:qos:attributes:autoreleasefrequency:target:)",
                    "title": "convenience init(label: String, qos: DispatchQoS, attributes: DispatchSerialQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/dispatch/dispatchserialqueue",
                "title": "DispatchSerialQueue",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchconcurrentqueue/attributes/initiallyinactive",
                        "title": "static let initiallyInactive: DispatchConcurrentQueue.Attributes",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/dispatch/dispatchconcurrentqueue/attributes",
                    "title": "DispatchConcurrentQueue.Attributes",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchconcurrentqueue/init(label:qos:attributes:autoreleasefrequency:target:)",
                    "title": "convenience init(label: String, qos: DispatchQoS, attributes: DispatchConcurrentQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/dispatch/dispatchconcurrentqueue",
                "title": "DispatchConcurrentQueue",
                "type": "class"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_main_t",
                "title": "dispatch_queue_main_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_global_t",
                "title": "dispatch_queue_global_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_serial_t",
                "title": "dispatch_queue_serial_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_concurrent_t",
                "title": "dispatch_queue_concurrent_t",
                "type": "typealias"
              },
              {
                "title": "Executing Tasks Asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/async(execute:)",
                "title": "func async(execute: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncafter(deadline:execute:)",
                "title": "func asyncAfter(deadline: DispatchTime, execute: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncafter(deadline:qos:flags:execute:)",
                "title": "func asyncAfter(deadline: DispatchTime, qos: DispatchQoS, flags: DispatchWorkItemFlags, execute: () -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncafter(walldeadline:execute:)",
                "title": "func asyncAfter(wallDeadline: DispatchWallTime, execute: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncafter(walldeadline:qos:flags:execute:)",
                "title": "func asyncAfter(wallDeadline: DispatchWallTime, qos: DispatchQoS, flags: DispatchWorkItemFlags, execute: () -> Void)",
                "type": "method"
              },
              {
                "title": "Executing Tasks Synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/sync(execute:)-2fzvo",
                "title": "func sync(execute: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/sync(execute:)-3segw",
                "title": "func sync(execute: () -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/sync(execute:)-20xby",
                "title": "func sync<T>(execute: () throws -> T) rethrows -> T",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/sync(flags:execute:)",
                "title": "func sync<T>(flags: DispatchWorkItemFlags, execute: () throws -> T) rethrows -> T",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncandwait(execute:)-1udeu",
                "title": "func asyncAndWait(execute: () -> Void)",
                "type": "method"
              },
              {
                "title": "Executing a Task in Parallel",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/concurrentperform(iterations:execute:)",
                "title": "class func concurrentPerform(iterations: Int, execute: (Int) -> Void)",
                "type": "method"
              },
              {
                "title": "Dispatching Work to Groups",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/async(group:execute:)",
                "title": "func async(group: DispatchGroup, execute: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/async(group:qos:flags:execute:)",
                "title": "func async(group: DispatchGroup?, qos: DispatchQoS, flags: DispatchWorkItemFlags, execute: () -> Void)",
                "type": "method"
              },
              {
                "title": "Managing Queue Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/label",
                "title": "var label: String",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/qos",
                "title": "var qos: DispatchQoS",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/settarget(queue:)",
                "title": "func setTarget(queue: dispatch_queue_t?)",
                "type": "method"
              },
              {
                "title": "Getting and Setting Contextual Data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/setspecific(key:value:)",
                "title": "func setSpecific<T>(key: DispatchSpecificKey<T>, value: T?)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/getspecific(key:)-swift.method",
                "title": "func getSpecific<T>(key: DispatchSpecificKey<T>) -> T?",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/getspecific(key:)-swift.type.method",
                "title": "class func getSpecific<T>(key: DispatchSpecificKey<T>) -> T?",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a Key",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchspecifickey/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/dispatch/dispatchspecifickey",
                "title": "DispatchSpecificKey",
                "type": "class"
              },
              {
                "title": "Managing the Main Dispatch Queue",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchmain()",
                "title": "func dispatchMain() -> Never",
                "type": "func"
              },
              {
                "title": "Scheduling Combine Publishers",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating Scheduler Times",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/schedulertimetype/init(_:)",
                    "title": "init(DispatchTime)",
                    "type": "init"
                  },
                  {
                    "title": "Working with Scheduler Time Intervals",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/schedulertimetype/advanced(by:)",
                    "title": "func advanced(by: DispatchQueue.SchedulerTimeType.Stride) -> DispatchQueue.SchedulerTimeType",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/schedulertimetype/distance(to:)",
                    "title": "func distance(to: DispatchQueue.SchedulerTimeType) -> DispatchQueue.SchedulerTimeType.Stride",
                    "type": "method"
                  },
                  {
                    "title": "Inspecting Scheduler Time Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/schedulertimetype/dispatchtime",
                    "title": "var dispatchTime: DispatchTime",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchqueue/schedulertimetype",
                "title": "DispatchQueue.SchedulerTimeType",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating Dispatch Queue Scheduler Options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/scheduleroptions/init(qos:flags:group:)",
                    "title": "init(qos: DispatchQoS, flags: DispatchWorkItemFlags, group: DispatchGroup?)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting Scheduler Options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/scheduleroptions/qos",
                    "title": "var qos: DispatchQoS",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/scheduleroptions/flags",
                    "title": "var flags: DispatchWorkItemFlags",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqueue/scheduleroptions/group",
                    "title": "var group: DispatchGroup?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchqueue/scheduleroptions",
                "title": "DispatchQueue.SchedulerOptions",
                "type": "struct"
              },
              {
                "title": "Deprecated",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/global(priority:)",
                "title": "class func global(priority: DispatchQueue.GlobalQueuePriority) -> DispatchQueue",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Priorities",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchqueue/globalqueuepriority/default",
                    "title": "case `default`",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchqueue/globalqueuepriority/high",
                    "title": "case high",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchqueue/globalqueuepriority/low",
                    "title": "case low",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchqueue/globalqueuepriority/background",
                    "title": "case background",
                    "type": "case"
                  }
                ],
                "path": "/documentation/dispatch/dispatchqueue/globalqueuepriority",
                "title": "DispatchQueue.GlobalQueuePriority",
                "type": "enum"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncafterunsafe(deadline:qos:flags:execute:)",
                "title": "func asyncAfterUnsafe(deadline: DispatchTime, qos: DispatchQoS, flags: DispatchWorkItemFlags, execute: () -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncafterunsafe(walldeadline:qos:flags:execute:)",
                "title": "func asyncAfterUnsafe(wallDeadline: DispatchWallTime, qos: DispatchQoS, flags: DispatchWorkItemFlags, execute: () -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncandwait(execute:)-52p9n",
                "title": "func asyncAndWait<T>(execute: () throws -> T) rethrows -> T",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncandwait(execute:)-pfxy",
                "title": "func asyncAndWait(execute: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncandwait(flags:execute:)",
                "title": "func asyncAndWait<T>(flags: DispatchWorkItemFlags, execute: () throws -> T) rethrows -> T",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncunsafe(group:qos:flags:execute:)",
                "title": "func asyncUnsafe(group: DispatchGroup?, qos: DispatchQoS, flags: DispatchWorkItemFlags, execute: () -> Void)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating Dispatch Queue Scheduler Options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchqueue/scheduleroptions/init(qos:flags:group:)",
                        "title": "init(qos: DispatchQoS, flags: DispatchWorkItemFlags, group: DispatchGroup?)",
                        "type": "init"
                      },
                      {
                        "title": "Inspecting Scheduler Options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchqueue/scheduleroptions/qos",
                        "title": "var qos: DispatchQoS",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchqueue/scheduleroptions/flags",
                        "title": "var flags: DispatchWorkItemFlags",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchqueue/scheduleroptions/group",
                        "title": "var group: DispatchGroup?",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/dispatch/dispatchqueue/scheduleroptions",
                    "title": "DispatchQueue.SchedulerOptions",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating Scheduler Times",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchqueue/schedulertimetype/init(_:)",
                        "title": "init(DispatchTime)",
                        "type": "init"
                      },
                      {
                        "title": "Working with Scheduler Time Intervals",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchqueue/schedulertimetype/advanced(by:)",
                        "title": "func advanced(by: DispatchQueue.SchedulerTimeType.Stride) -> DispatchQueue.SchedulerTimeType",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchqueue/schedulertimetype/distance(to:)",
                        "title": "func distance(to: DispatchQueue.SchedulerTimeType) -> DispatchQueue.SchedulerTimeType.Stride",
                        "type": "method"
                      },
                      {
                        "title": "Inspecting Scheduler Time Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/dispatch/dispatchqueue/schedulertimetype/dispatchtime",
                        "title": "var dispatchTime: DispatchTime",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/dispatch/dispatchqueue/schedulertimetype",
                    "title": "DispatchQueue.SchedulerTimeType",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/dispatch/dispatchqueue/scheduler-implementations",
                "title": "Scheduler Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/dispatch/dispatchqueue",
            "title": "DispatchQueue",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a Work Item",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/init(qos:flags:block:)",
                "title": "init(qos: DispatchQoS, flags: DispatchWorkItemFlags, block: () -> Void)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Work Item Flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchworkitemflags/assigncurrentcontext",
                    "title": "static let assignCurrentContext: DispatchWorkItemFlags",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchworkitemflags/barrier",
                    "title": "static let barrier: DispatchWorkItemFlags",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchworkitemflags/detached",
                    "title": "static let detached: DispatchWorkItemFlags",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchworkitemflags/enforceqos",
                    "title": "static let enforceQoS: DispatchWorkItemFlags",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchworkitemflags/inheritqos",
                    "title": "static let inheritQoS: DispatchWorkItemFlags",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchworkitemflags/noqos",
                    "title": "static let noQoS: DispatchWorkItemFlags",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchworkitemflags",
                "title": "DispatchWorkItemFlags",
                "type": "struct"
              },
              {
                "title": "Executing the Work Item",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/perform()",
                "title": "func perform()",
                "type": "method"
              },
              {
                "title": "Adding a Completion Handler",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/notify(queue:execute:)",
                "title": "func notify(queue: DispatchQueue, execute: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/notify(qos:flags:queue:execute:)",
                "title": "func notify(qos: DispatchQoS, flags: DispatchWorkItemFlags, queue: DispatchQueue, execute: () -> Void)",
                "type": "method"
              },
              {
                "title": "Waiting for the Completion of a Work Item",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/wait()",
                "title": "func wait()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/wait(timeout:)",
                "title": "func wait(timeout: DispatchTime) -> DispatchTimeoutResult",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/wait(walltimeout:)",
                "title": "func wait(wallTimeout: DispatchWallTime) -> DispatchTimeoutResult",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting Well-Known Times",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchtime/now()",
                    "title": "static func now() -> DispatchTime",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchtime/distantfuture",
                    "title": "static let distantFuture: DispatchTime",
                    "type": "property"
                  },
                  {
                    "title": "Creating a Dispatch Time Object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchtime/init(uptimenanoseconds:)",
                    "title": "init(uptimeNanoseconds: UInt64)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the Time",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchtime/rawvalue",
                    "title": "let rawValue: dispatch_time_t",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchtime/uptimenanoseconds",
                    "title": "var uptimeNanoseconds: UInt64",
                    "type": "property"
                  },
                  {
                    "title": "Modifying the Value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchtime/advanced(by:)",
                    "title": "func advanced(by: DispatchTimeInterval) -> DispatchTime",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchtime/distance(to:)",
                    "title": "func distance(to: DispatchTime) -> DispatchTimeInterval",
                    "type": "method"
                  },
                  {
                    "title": "Operator Functions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/+(_:_:)-6fmcc",
                    "title": "func + (DispatchTime, Double) -> DispatchTime",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/dispatch/+(_:_:)-2dcrq",
                    "title": "func + (DispatchTime, DispatchTimeInterval) -> DispatchTime",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/dispatch/-(_:_:)-5l4yh",
                    "title": "func - (DispatchTime, Double) -> DispatchTime",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/dispatch/-(_:_:)-8usj3",
                    "title": "func - (DispatchTime, DispatchTimeInterval) -> DispatchTime",
                    "type": "op"
                  }
                ],
                "path": "/documentation/dispatch/dispatchtime",
                "title": "DispatchTime",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting Well-Known Times",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchwalltime/now()",
                    "title": "static func now() -> DispatchWallTime",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchwalltime/distantfuture",
                    "title": "static let distantFuture: DispatchWallTime",
                    "type": "property"
                  },
                  {
                    "title": "Creating a Dispatch Wall Time Object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchwalltime/init(timespec:)",
                    "title": "init(timespec: timespec)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the Time",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchwalltime/rawvalue",
                    "title": "let rawValue: dispatch_time_t",
                    "type": "property"
                  },
                  {
                    "title": "Operator Functions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/+(_:_:)-8ylhk",
                    "title": "func + (DispatchWallTime, DispatchTimeInterval) -> DispatchWallTime",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/dispatch/+(_:_:)-8pe6k",
                    "title": "func + (DispatchWallTime, Double) -> DispatchWallTime",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/dispatch/-(_:_:)-6jk71",
                    "title": "func - (DispatchWallTime, Double) -> DispatchWallTime",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/dispatch/-(_:_:)-50bxr",
                    "title": "func - (DispatchWallTime, DispatchTimeInterval) -> DispatchWallTime",
                    "type": "op"
                  }
                ],
                "path": "/documentation/dispatch/dispatchwalltime",
                "title": "DispatchWallTime",
                "type": "struct"
              },
              {
                "title": "Canceling a Work Item",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/cancel()",
                "title": "func cancel()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/iscancelled",
                "title": "var isCancelled: Bool",
                "type": "property"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchworkitem/init(flags:block:)",
                "title": "init(flags: DispatchWorkItemFlags, block: () -> Void)",
                "type": "init"
              }
            ],
            "path": "/documentation/dispatch/dispatchworkitem",
            "title": "DispatchWorkItem",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Group",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Adding a Completion Handler",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/notify(qos:flags:queue:execute:)",
                "title": "func notify(qos: DispatchQoS, flags: DispatchWorkItemFlags, queue: DispatchQueue, execute: () -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/notify(queue:work:)",
                "title": "func notify(queue: DispatchQueue, work: DispatchWorkItem)",
                "type": "method"
              },
              {
                "title": "Waiting for Tasks to Finish Executing",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/wait()",
                "title": "func wait()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/wait(timeout:)",
                "title": "func wait(timeout: DispatchTime) -> DispatchTimeoutResult",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/wait(walltimeout:)",
                "title": "func wait(wallTimeout: DispatchWallTime) -> DispatchTimeoutResult",
                "type": "method"
              },
              {
                "title": "Updating the Group Manually",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/enter()",
                "title": "func enter()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/leave()",
                "title": "func leave()",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/dispatchgroup",
            "title": "DispatchGroup",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Queue",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_t",
                "title": "dispatch_queue_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_main_t",
                "title": "dispatch_queue_main_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_global_t",
                "title": "dispatch_queue_global_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_serial_t",
                "title": "dispatch_queue_serial_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_concurrent_t",
                "title": "dispatch_queue_concurrent_t",
                "type": "typealias"
              },
              {
                "title": "Configuring Queue Execution Parameters",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_attr_t",
                "title": "dispatch_queue_attr_t",
                "type": "typealias"
              },
              {
                "title": "Executing Tasks Synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/sync(execute:)-3segw",
                "title": "func sync(execute: () -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncandwait(execute:)-1udeu",
                "title": "func asyncAndWait(execute: () -> Void)",
                "type": "method"
              },
              {
                "title": "Managing Queue Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/settarget(queue:)",
                "title": "func setTarget(queue: dispatch_queue_t?)",
                "type": "method"
              },
              {
                "title": "Managing the Main Dispatch Queue",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchmain()",
                "title": "func dispatchMain() -> Never",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/dispatch-queue",
            "title": "Dispatch Queue",
            "type": "collection"
          },
          {
            "path": "/documentation/dispatch/dispatch-work-item",
            "title": "Dispatch Work Item",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Group",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/dispatch/dispatch_group_t",
                "title": "dispatch_group_t",
                "type": "typealias"
              },
              {
                "title": "Updating the Group Manually",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/enter()",
                "title": "func enter()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchgroup/leave()",
                "title": "func leave()",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/dispatch-group",
            "title": "Dispatch Group",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Workloop",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_workloop_t",
                "title": "dispatch_workloop_t",
                "type": "typealias"
              },
              {
                "title": "Executing Tasks Synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/sync(execute:)-3segw",
                "title": "func sync(execute: () -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchqueue/asyncandwait(execute:)-1udeu",
                "title": "func asyncAndWait(execute: () -> Void)",
                "type": "method"
              },
              {
                "title": "Managing Queue Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/settarget(queue:)",
                "title": "func setTarget(queue: dispatch_queue_t?)",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/workloop",
            "title": "Workloop",
            "type": "collection"
          },
          {
            "title": "Thread Scheduling",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting the Predefined QoS Objects",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/userinteractive",
                "title": "static let userInteractive: DispatchQoS",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/userinitiated",
                "title": "static let userInitiated: DispatchQoS",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/default",
                "title": "static let `default`: DispatchQoS",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/utility",
                "title": "static let utility: DispatchQoS",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/background",
                "title": "static let background: DispatchQoS",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/unspecified",
                "title": "static let unspecified: DispatchQoS",
                "type": "property"
              },
              {
                "title": "Creating a QoS Structure",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/init(qosclass:relativepriority:)",
                "title": "init(qosClass: DispatchQoS.QoSClass, relativePriority: Int)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Getting the Quality-of-Service Class",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/userinteractive",
                    "title": "case userInteractive",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/userinitiated",
                    "title": "case userInitiated",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/default",
                    "title": "case `default`",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/utility",
                    "title": "case utility",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/background",
                    "title": "case background",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/unspecified",
                    "title": "case unspecified",
                    "type": "case"
                  },
                  {
                    "title": "Initializing the Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/init(rawvalue:)",
                    "title": "init?(rawValue: qos_class_t)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum/rawvalue",
                    "title": "var rawValue: qos_class_t",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchqos/qosclass-swift.enum",
                "title": "DispatchQoS.QoSClass",
                "type": "enum"
              },
              {
                "title": "Getting the QoS Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/qosclass-swift.property",
                "title": "let qosClass: DispatchQoS.QoSClass",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchqos/relativepriority",
                "title": "let relativePriority: Int",
                "type": "property"
              }
            ],
            "path": "/documentation/dispatch/dispatchqos",
            "title": "DispatchQoS",
            "type": "struct"
          },
          {
            "title": "System Event Monitoring",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Managing Common Dispatch Source Properties",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Activating, Suspending, and Resuming a Source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/activate()",
                    "title": "func activate()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/suspend()",
                    "title": "func suspend()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/resume()",
                    "title": "func resume()",
                    "type": "method"
                  },
                  {
                    "title": "Canceling a Dispatch Source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/cancel()",
                    "title": "func cancel()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/iscancelled",
                    "title": "var isCancelled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/setcancelhandler(handler:)",
                    "title": "func setCancelHandler(handler: DispatchWorkItem)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/setcancelhandler(qos:flags:handler:)",
                    "title": "func setCancelHandler(qos: DispatchQoS, flags: DispatchWorkItemFlags, handler: Self.DispatchSourceHandler?)",
                    "type": "method"
                  },
                  {
                    "title": "Installing Event Handlers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/seteventhandler(handler:)",
                    "title": "func setEventHandler(handler: DispatchWorkItem)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/seteventhandler(qos:flags:handler:)",
                    "title": "func setEventHandler(qos: DispatchQoS, flags: DispatchWorkItemFlags, handler: Self.DispatchSourceHandler?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/setregistrationhandler(handler:)",
                    "title": "func setRegistrationHandler(handler: DispatchWorkItem)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/setregistrationhandler(qos:flags:handler:)",
                    "title": "func setRegistrationHandler(qos: DispatchQoS, flags: DispatchWorkItemFlags, handler: Self.DispatchSourceHandler?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/dispatchsourcehandler",
                    "title": "DispatchSourceProtocol.DispatchSourceHandler",
                    "type": "typealias"
                  },
                  {
                    "title": "Getting the Dispatch Source Attributes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/handle",
                    "title": "var handle: UInt",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/data",
                    "title": "var data: UInt",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprotocol/mask",
                    "title": "var mask: UInt",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourceprotocol",
                "title": "DispatchSourceProtocol",
                "type": "protocol"
              },
              {
                "title": "Creating a Timer Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/maketimersource(flags:queue:)",
                "title": "class func makeTimerSource(flags: DispatchSource.TimerFlags, queue: DispatchQueue?) -> any DispatchSourceTimer",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Scheduling the Timer Trigger Conditions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcetimer/schedule(deadline:repeating:leeway:)-hvhp",
                    "title": "func schedule(deadline: DispatchTime, repeating: DispatchTimeInterval, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcetimer/schedule(deadline:repeating:leeway:)-24w9r",
                    "title": "func schedule(deadline: DispatchTime, repeating: Double, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcetimer/schedule(walldeadline:repeating:leeway:)-7c4d7",
                    "title": "func schedule(wallDeadline: DispatchWallTime, repeating: DispatchTimeInterval, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcetimer/schedule(walldeadline:repeating:leeway:)-21bay",
                    "title": "func schedule(wallDeadline: DispatchWallTime, repeating: Double, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "title": "Deprecated",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchsourcetimer/scheduleoneshot(deadline:leeway:)",
                    "title": "func scheduleOneshot(deadline: DispatchTime, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchsourcetimer/scheduleoneshot(walldeadline:leeway:)",
                    "title": "func scheduleOneshot(wallDeadline: DispatchWallTime, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchsourcetimer/schedulerepeating(deadline:interval:leeway:)-3k199",
                    "title": "func scheduleRepeating(deadline: DispatchTime, interval: DispatchTimeInterval, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchsourcetimer/schedulerepeating(deadline:interval:leeway:)-4wtot",
                    "title": "func scheduleRepeating(deadline: DispatchTime, interval: Double, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchsourcetimer/schedulerepeating(walldeadline:interval:leeway:)-6fiox",
                    "title": "func scheduleRepeating(wallDeadline: DispatchWallTime, interval: Double, leeway: DispatchTimeInterval)",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/dispatch/dispatchsourcetimer/schedulerepeating(walldeadline:interval:leeway:)-942p7",
                    "title": "func scheduleRepeating(wallDeadline: DispatchWallTime, interval: DispatchTimeInterval, leeway: DispatchTimeInterval)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourcetimer",
                "title": "DispatchSourceTimer",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Timer Flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/timerflags/strict",
                    "title": "static let strict: DispatchSource.TimerFlags",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsource/timerflags",
                "title": "DispatchSource.TimerFlags",
                "type": "struct"
              },
              {
                "title": "Creating a File System Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makereadsource(filedescriptor:queue:)",
                "title": "class func makeReadSource(fileDescriptor: Int32, queue: DispatchQueue?) -> any DispatchSourceRead",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makewritesource(filedescriptor:queue:)",
                "title": "class func makeWriteSource(fileDescriptor: Int32, queue: DispatchQueue?) -> any DispatchSourceWrite",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makefilesystemobjectsource(filedescriptor:eventmask:queue:)",
                "title": "class func makeFileSystemObjectSource(fileDescriptor: Int32, eventMask: DispatchSource.FileSystemEvent, queue: DispatchQueue?) -> any DispatchSourceFileSystemObject",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceread",
                "title": "DispatchSourceRead",
                "type": "protocol"
              },
              {
                "path": "/documentation/dispatch/dispatchsourcewrite",
                "title": "DispatchSourceWrite",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting the Data Handle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcefilesystemobject/handle",
                    "title": "var handle: Int32",
                    "type": "property"
                  },
                  {
                    "title": "Getting the Event Data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcefilesystemobject/data",
                    "title": "var data: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcefilesystemobject/mask",
                    "title": "var mask: DispatchSource.FileSystemEvent",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourcefilesystemobject",
                "title": "DispatchSourceFileSystemObject",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "File System Event Flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/all",
                    "title": "static let all: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/attrib",
                    "title": "static let attrib: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/delete",
                    "title": "static let delete: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/extend",
                    "title": "static let extend: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/funlock",
                    "title": "static let funlock: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/link",
                    "title": "static let link: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/rename",
                    "title": "static let rename: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/revoke",
                    "title": "static let revoke: DispatchSource.FileSystemEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/filesystemevent/write",
                    "title": "static let write: DispatchSource.FileSystemEvent",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsource/filesystemevent",
                "title": "DispatchSource.FileSystemEvent",
                "type": "struct"
              },
              {
                "title": "Creating a Process Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makeprocesssource(identifier:eventmask:queue:)",
                "title": "class func makeProcessSource(identifier: pid_t, eventMask: DispatchSource.ProcessEvent, queue: DispatchQueue?) -> any DispatchSourceProcess",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the Process ID",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprocess/handle",
                    "title": "var handle: pid_t",
                    "type": "property"
                  },
                  {
                    "title": "Getting the Event Data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprocess/data",
                    "title": "var data: DispatchSource.ProcessEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceprocess/mask",
                    "title": "var mask: DispatchSource.ProcessEvent",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourceprocess",
                "title": "DispatchSourceProcess",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Process Event Flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/processevent/all",
                    "title": "static let all: DispatchSource.ProcessEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/processevent/exec",
                    "title": "static let exec: DispatchSource.ProcessEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/processevent/exit",
                    "title": "static let exit: DispatchSource.ProcessEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/processevent/fork",
                    "title": "static let fork: DispatchSource.ProcessEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/processevent/signal",
                    "title": "static let signal: DispatchSource.ProcessEvent",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsource/processevent",
                "title": "DispatchSource.ProcessEvent",
                "type": "struct"
              },
              {
                "title": "Creating a Memory Pressure Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makememorypressuresource(eventmask:queue:)",
                "title": "class func makeMemoryPressureSource(eventMask: DispatchSource.MemoryPressureEvent, queue: DispatchQueue?) -> any DispatchSourceMemoryPressure",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the Event Data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcememorypressure/data",
                    "title": "var data: DispatchSource.MemoryPressureEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcememorypressure/mask",
                    "title": "var mask: DispatchSource.MemoryPressureEvent",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourcememorypressure",
                "title": "DispatchSourceMemoryPressure",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Memory Pressure Event Flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/memorypressureevent/all",
                    "title": "static let all: DispatchSource.MemoryPressureEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/memorypressureevent/normal",
                    "title": "static let normal: DispatchSource.MemoryPressureEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/memorypressureevent/warning",
                    "title": "static let warning: DispatchSource.MemoryPressureEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/memorypressureevent/critical",
                    "title": "static let critical: DispatchSource.MemoryPressureEvent",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsource/memorypressureevent",
                "title": "DispatchSource.MemoryPressureEvent",
                "type": "struct"
              },
              {
                "title": "Creating a Signal Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makesignalsource(signal:queue:)",
                "title": "class func makeSignalSource(signal: Int32, queue: DispatchQueue?) -> any DispatchSourceSignal",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourcesignal",
                "title": "DispatchSourceSignal",
                "type": "protocol"
              },
              {
                "title": "Creating a Mach Port Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makemachreceivesource(port:queue:)",
                "title": "class func makeMachReceiveSource(port: mach_port_t, queue: DispatchQueue?) -> any DispatchSourceMachReceive",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makemachsendsource(port:eventmask:queue:)",
                "title": "class func makeMachSendSource(port: mach_port_t, eventMask: DispatchSource.MachSendEvent, queue: DispatchQueue?) -> any DispatchSourceMachSend",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the Mach Port Handle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcemachreceive/handle",
                    "title": "var handle: mach_port_t",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourcemachreceive",
                "title": "DispatchSourceMachReceive",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting the Mach Port Handle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcemachsend/handle",
                    "title": "var handle: mach_port_t",
                    "type": "property"
                  },
                  {
                    "title": "Getting the Event Data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcemachsend/data",
                    "title": "var data: DispatchSource.MachSendEvent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourcemachsend/mask",
                    "title": "var mask: DispatchSource.MachSendEvent",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourcemachsend",
                "title": "DispatchSourceMachSend",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Mach Event Flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsource/machsendevent/dead",
                    "title": "static let dead: DispatchSource.MachSendEvent",
                    "type": "property"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsource/machsendevent",
                "title": "DispatchSource.MachSendEvent",
                "type": "struct"
              },
              {
                "title": "Creating a Custom Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makeuserdataaddsource(queue:)",
                "title": "class func makeUserDataAddSource(queue: DispatchQueue?) -> any DispatchSourceUserDataAdd",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makeuserdataorsource(queue:)",
                "title": "class func makeUserDataOrSource(queue: DispatchQueue?) -> any DispatchSourceUserDataOr",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsource/makeuserdatareplacesource(queue:)",
                "title": "class func makeUserDataReplaceSource(queue: DispatchQueue?) -> any DispatchSourceUserDataReplace",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the Event Data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceuserdataadd/add(data:)",
                    "title": "func add(data: UInt)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourceuserdataadd",
                "title": "DispatchSourceUserDataAdd",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting the Event Data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceuserdataor/or(data:)",
                    "title": "func or(data: UInt)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourceuserdataor",
                "title": "DispatchSourceUserDataOr",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting the Event Data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchsourceuserdatareplace/replace(data:)",
                    "title": "func replace(data: UInt)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/dispatch/dispatchsourceuserdatareplace",
                "title": "DispatchSourceUserDataReplace",
                "type": "protocol"
              }
            ],
            "path": "/documentation/dispatch/dispatchsource",
            "title": "DispatchSource",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_source_t",
                "title": "dispatch_source_t",
                "type": "typealias"
              },
              {
                "title": "Getting Dispatch Source Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_source_mach_recv_flags_t",
                "title": "dispatch_source_mach_recv_flags_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/dispatch/dispatch-source",
            "title": "Dispatch Source",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch I/O Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/init(type:filedescriptor:queue:cleanuphandler:)",
                "title": "convenience init(type: DispatchIO.StreamType, fileDescriptor: Int32, queue: DispatchQueue, cleanupHandler: (Int32) -> Void)",
                "type": "init"
              },
              {
                "path": "/documentation/dispatch/dispatchio/init(type:path:oflag:mode:queue:cleanuphandler:)-50rb0",
                "title": "convenience init?(type: DispatchIO.StreamType, path: UnsafePointer<Int8>, oflag: Int32, mode: mode_t, queue: DispatchQueue, cleanupHandler: (Int32) -> Void)",
                "type": "init"
              },
              {
                "path": "/documentation/dispatch/dispatchio/init(type:io:queue:cleanuphandler:)",
                "title": "convenience init(type: DispatchIO.StreamType, io: DispatchIO, queue: DispatchQueue, cleanupHandler: (Int32) -> Void)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Stream Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchio/streamtype/stream",
                    "title": "case stream",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchio/streamtype/random",
                    "title": "case random",
                    "type": "case"
                  },
                  {
                    "title": "Initializing the Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatch_io_random",
                    "title": "var DISPATCH_IO_RANDOM: Int32",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/dispatch/dispatch_io_stream",
                    "title": "var DISPATCH_IO_STREAM: Int32",
                    "type": "var"
                  }
                ],
                "path": "/documentation/dispatch/dispatchio/streamtype",
                "title": "DispatchIO.StreamType",
                "type": "enum"
              },
              {
                "title": "Reading from the File",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/read(offset:length:queue:iohandler:)",
                "title": "func read(offset: off_t, length: Int, queue: DispatchQueue, ioHandler: (Bool, DispatchData?, Int32) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchio/read(fromfiledescriptor:maxlength:runninghandleron:handler:)",
                "title": "class func read(fromFileDescriptor: Int32, maxLength: Int, runningHandlerOn: DispatchQueue, handler: (DispatchData, Int32) -> Void)",
                "type": "method"
              },
              {
                "title": "Writing to the File",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/write(offset:data:queue:iohandler:)",
                "title": "func write(offset: off_t, data: DispatchData, queue: DispatchQueue, ioHandler: (Bool, DispatchData?, Int32) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchio/write(tofiledescriptor:data:runninghandleron:handler:)",
                "title": "class func write(toFileDescriptor: Int32, data: DispatchData, runningHandlerOn: DispatchQueue, handler: (DispatchData?, Int32) -> Void)",
                "type": "method"
              },
              {
                "title": "Closing the File",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/close(flags:)",
                "title": "func close(flags: DispatchIO.CloseFlags)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Close Flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchio/closeflags/stop",
                    "title": "static let stop: DispatchIO.CloseFlags",
                    "type": "property"
                  },
                  {
                    "title": "Initializing the Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatch_io_stop",
                    "title": "var DISPATCH_IO_STOP: Int32",
                    "type": "var"
                  }
                ],
                "path": "/documentation/dispatch/dispatchio/closeflags",
                "title": "DispatchIO.CloseFlags",
                "type": "struct"
              },
              {
                "title": "Managing the File Descriptor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/filedescriptor",
                "title": "var fileDescriptor: Int32",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchio/setlimit(highwater:)",
                "title": "func setLimit(highWater: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchio/setlimit(lowwater:)",
                "title": "func setLimit(lowWater: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchio/setinterval(interval:flags:)",
                "title": "func setInterval(interval: DispatchTimeInterval, flags: DispatchIO.IntervalFlags)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Interval Flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchio/intervalflags/strictinterval",
                    "title": "static let strictInterval: DispatchIO.IntervalFlags",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/dispatch/dispatch_io_strict_interval",
                    "title": "var DISPATCH_IO_STRICT_INTERVAL: Int32",
                    "type": "var"
                  },
                  {
                    "title": "Initializing the Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchio/intervalflags/init(nilliteral:)",
                    "title": "init(nilLiteral: ())",
                    "type": "init"
                  }
                ],
                "path": "/documentation/dispatch/dispatchio/intervalflags",
                "title": "DispatchIO.IntervalFlags",
                "type": "struct"
              },
              {
                "title": "Synchronizing File Operations",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/barrier(execute:)",
                "title": "func barrier(execute: () -> Void)",
                "type": "method"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/init(type:path:oflag:mode:queue:cleanuphandler:)-25rlb",
                "title": "convenience init(type: DispatchIO.StreamType, path: UnsafePointer<Int8>, oflag: Int32, mode: mode_t, queue: DispatchQueue, cleanupHandler: (Int32) -> Void)",
                "type": "init"
              }
            ],
            "path": "/documentation/dispatch/dispatchio",
            "title": "DispatchIO",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Data Structure",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/init(bytes:)-9lrd",
                "title": "init(bytes: UnsafeRawBufferPointer)",
                "type": "init"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/init(bytesnocopy:deallocator:)-vfoe",
                "title": "init(bytesNoCopy: UnsafeRawBufferPointer, deallocator: DispatchData.Deallocator)",
                "type": "init"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/withunsafebytes(body:)",
                "title": "func withUnsafeBytes<Result, ContentType>(body: (UnsafePointer<ContentType>) throws -> Result) rethrows -> Result",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Deallocators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchdata/deallocator/free",
                    "title": "case free",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchdata/deallocator/unmap",
                    "title": "case unmap",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchdata/deallocator/custom(_:_:)",
                    "title": "case custom(DispatchQueue?, () -> Void)",
                    "type": "case"
                  }
                ],
                "path": "/documentation/dispatch/dispatchdata/deallocator",
                "title": "DispatchData.Deallocator",
                "type": "enum"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/empty",
                "title": "static let empty: DispatchData",
                "type": "property"
              },
              {
                "title": "Appending Data to the Buffer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/append(_:)-3bvdr",
                "title": "func append(DispatchData)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/append(_:)-9sgkq",
                "title": "func append<SourceType>(UnsafeBufferPointer<SourceType>)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/append(_:)-1m94x",
                "title": "func append(UnsafeRawBufferPointer)",
                "type": "method"
              },
              {
                "title": "Copying Bytes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:count:)-3j0qx",
                "title": "func copyBytes(to: UnsafeMutableRawBufferPointer, count: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:from:)-7zz4y",
                "title": "func copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>, from: Range<DispatchData.Index>?) -> Int",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:from:)-60yai",
                "title": "func copyBytes(to: UnsafeMutableRawBufferPointer, from: Range<DispatchData.Index>)",
                "type": "method"
              },
              {
                "title": "Accessing Buffer Data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/subscript(_:)",
                "title": "subscript(DispatchData.Index) -> UInt8",
                "type": "subscript"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/region(location:)",
                "title": "func region(location: Int) -> (data: DispatchData, offset: Int)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Accessing the Region",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/dispatch/dispatchdata/subscript(_:)",
                    "title": "subscript(DispatchData.Index) -> UInt8",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/dispatch/dispatchdata/region",
                "title": "DispatchData.Region",
                "type": "struct"
              },
              {
                "title": "Iterating Over the Buffer Contents",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/makeiterator()",
                "title": "func makeIterator() -> DispatchData.Iterator",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/enumeratebytes(_:)",
                "title": "func enumerateBytes((UnsafeBufferPointer<UInt8>, Int, inout Bool) -> Void)",
                "type": "method"
              },
              {
                "title": "Retrieving Buffer Subsequences",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/subdata(in:)",
                "title": "func subdata(in: Range<DispatchData.Index>) -> DispatchData",
                "type": "method"
              },
              {
                "title": "Combining Sequence Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/append(_:)-3bvdr",
                "title": "func append(DispatchData)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/append(_:)-9sgkq",
                "title": "func append<SourceType>(UnsafeBufferPointer<SourceType>)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/append(_:)-1m94x",
                "title": "func append(UnsafeRawBufferPointer)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/append(_:count:)",
                "title": "func append(UnsafePointer<UInt8>, count: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:count:)-4ffyj",
                "title": "func copyBytes(to: UnsafeMutablePointer<UInt8>, count: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:count:)-3j0qx",
                "title": "func copyBytes(to: UnsafeMutableRawBufferPointer, count: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:from:)-7zz4y",
                "title": "func copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>, from: Range<DispatchData.Index>?) -> Int",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:from:)-6ztcb",
                "title": "func copyBytes(to: UnsafeMutablePointer<UInt8>, from: Range<DispatchData.Index>)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:from:)-60yai",
                "title": "func copyBytes(to: UnsafeMutableRawBufferPointer, from: Range<DispatchData.Index>)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/enumeratebytes(_:)",
                "title": "func enumerateBytes((UnsafeBufferPointer<UInt8>, Int, inout Bool) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/makeiterator()",
                "title": "func makeIterator() -> DispatchData.Iterator",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/region(location:)",
                "title": "func region(location: Int) -> (data: DispatchData, offset: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/subdata(in:)",
                "title": "func subdata(in: Range<DispatchData.Index>) -> DispatchData",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/withunsafebytes(body:)",
                "title": "func withUnsafeBytes<Result, ContentType>(body: (UnsafePointer<ContentType>) throws -> Result) rethrows -> Result",
                "type": "method"
              },
              {
                "title": "Deprecated",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/init(bytes:)-mkbp",
                "title": "init(bytes: UnsafeBufferPointer<UInt8>)",
                "type": "init"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/init(bytesnocopy:deallocator:)-7h08w",
                "title": "init(bytesNoCopy: UnsafeBufferPointer<UInt8>, deallocator: DispatchData.Deallocator)",
                "type": "init"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/append(_:count:)",
                "title": "func append(UnsafePointer<UInt8>, count: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:count:)-4ffyj",
                "title": "func copyBytes(to: UnsafeMutablePointer<UInt8>, count: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/copybytes(to:from:)-6ztcb",
                "title": "func copyBytes(to: UnsafeMutablePointer<UInt8>, from: Range<DispatchData.Index>)",
                "type": "method"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdata/enumeratebytes(block:)",
                "title": "func enumerateBytes(block: (UnsafeBufferPointer<UInt8>, Int, inout Bool) -> Void)",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/dispatchdata",
            "title": "DispatchData",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Iterating Over a Sequence’s Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchdataiterator/next()",
                "title": "func next() -> DispatchData.Element?",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/dispatchdataiterator",
            "title": "DispatchDataIterator",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch I/O Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_io_t",
                "title": "dispatch_io_t",
                "type": "typealias"
              },
              {
                "title": "Managing the File Descriptor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/filedescriptor",
                "title": "var fileDescriptor: Int32",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchio/setlimit(lowwater:)",
                "title": "func setLimit(lowWater: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchio/setlimit(highwater:)",
                "title": "func setLimit(highWater: Int)",
                "type": "method"
              },
              {
                "title": "Synchronizing File Operations",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchio/barrier(execute:)",
                "title": "func barrier(execute: () -> Void)",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/dispatch-i-o",
            "title": "Dispatch I/O",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a Dispatch Data Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_data_t",
                "title": "dispatch_data_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/dispatch/dispatch-data",
            "title": "Dispatch Data",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Activating, Suspending, and Resuming a Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/activate()",
                "title": "func activate()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/suspend()",
                "title": "func suspend()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/resume()",
                "title": "func resume()",
                "type": "method"
              },
              {
                "title": "Canceling a Dispatch Source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/cancel()",
                "title": "func cancel()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/iscancelled",
                "title": "var isCancelled: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/setcancelhandler(handler:)",
                "title": "func setCancelHandler(handler: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/setcancelhandler(qos:flags:handler:)",
                "title": "func setCancelHandler(qos: DispatchQoS, flags: DispatchWorkItemFlags, handler: Self.DispatchSourceHandler?)",
                "type": "method"
              },
              {
                "title": "Installing Event Handlers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/seteventhandler(handler:)",
                "title": "func setEventHandler(handler: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/seteventhandler(qos:flags:handler:)",
                "title": "func setEventHandler(qos: DispatchQoS, flags: DispatchWorkItemFlags, handler: Self.DispatchSourceHandler?)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/setregistrationhandler(handler:)",
                "title": "func setRegistrationHandler(handler: DispatchWorkItem)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/setregistrationhandler(qos:flags:handler:)",
                "title": "func setRegistrationHandler(qos: DispatchQoS, flags: DispatchWorkItemFlags, handler: Self.DispatchSourceHandler?)",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/dispatchsourcehandler",
                "title": "DispatchSourceProtocol.DispatchSourceHandler",
                "type": "typealias"
              },
              {
                "title": "Getting the Dispatch Source Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/handle",
                "title": "var handle: UInt",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/data",
                "title": "var data: UInt",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchsourceprotocol/mask",
                "title": "var mask: UInt",
                "type": "property"
              }
            ],
            "path": "/documentation/dispatch/dispatchsourceprotocol",
            "title": "DispatchSourceProtocol",
            "type": "protocol"
          },
          {
            "title": "Task Synchronization",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Semaphore",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsemaphore/init(value:)",
                "title": "init(value: Int)",
                "type": "init"
              },
              {
                "title": "Signaling the Semaphore",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsemaphore/signal()",
                "title": "func signal() -> Int",
                "type": "method"
              },
              {
                "title": "Blocking on the Semaphore",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsemaphore/wait()",
                "title": "func wait()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsemaphore/wait(timeout:)",
                "title": "func wait(timeout: DispatchTime) -> DispatchTimeoutResult",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchsemaphore/wait(walltimeout:)",
                "title": "func wait(wallTimeout: DispatchWallTime) -> DispatchTimeoutResult",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/dispatchsemaphore",
            "title": "DispatchSemaphore",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a Semaphore",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchsemaphore/init(value:)",
                "title": "init(value: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/dispatch/dispatch_semaphore_t",
                "title": "dispatch_semaphore_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/dispatch/dispatch-semaphore",
            "title": "Dispatch Semaphore",
            "type": "collection"
          },
          {
            "path": "/documentation/dispatch/dispatch-barrier",
            "title": "Dispatch Barrier",
            "type": "collection"
          },
          {
            "title": "Time Constructs",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting Well-Known Times",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchtime/now()",
                "title": "static func now() -> DispatchTime",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchtime/distantfuture",
                "title": "static let distantFuture: DispatchTime",
                "type": "property"
              },
              {
                "title": "Creating a Dispatch Time Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchtime/init(uptimenanoseconds:)",
                "title": "init(uptimeNanoseconds: UInt64)",
                "type": "init"
              },
              {
                "title": "Getting the Time",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchtime/rawvalue",
                "title": "let rawValue: dispatch_time_t",
                "type": "property"
              },
              {
                "path": "/documentation/dispatch/dispatchtime/uptimenanoseconds",
                "title": "var uptimeNanoseconds: UInt64",
                "type": "property"
              },
              {
                "title": "Modifying the Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchtime/advanced(by:)",
                "title": "func advanced(by: DispatchTimeInterval) -> DispatchTime",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchtime/distance(to:)",
                "title": "func distance(to: DispatchTime) -> DispatchTimeInterval",
                "type": "method"
              },
              {
                "title": "Operator Functions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/+(_:_:)-6fmcc",
                "title": "func + (DispatchTime, Double) -> DispatchTime",
                "type": "op"
              },
              {
                "path": "/documentation/dispatch/+(_:_:)-2dcrq",
                "title": "func + (DispatchTime, DispatchTimeInterval) -> DispatchTime",
                "type": "op"
              },
              {
                "path": "/documentation/dispatch/-(_:_:)-5l4yh",
                "title": "func - (DispatchTime, Double) -> DispatchTime",
                "type": "op"
              },
              {
                "path": "/documentation/dispatch/-(_:_:)-8usj3",
                "title": "func - (DispatchTime, DispatchTimeInterval) -> DispatchTime",
                "type": "op"
              }
            ],
            "path": "/documentation/dispatch/dispatchtime",
            "title": "DispatchTime",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting Well-Known Times",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchwalltime/now()",
                "title": "static func now() -> DispatchWallTime",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchwalltime/distantfuture",
                "title": "static let distantFuture: DispatchWallTime",
                "type": "property"
              },
              {
                "title": "Creating a Dispatch Wall Time Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchwalltime/init(timespec:)",
                "title": "init(timespec: timespec)",
                "type": "init"
              },
              {
                "title": "Getting the Time",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchwalltime/rawvalue",
                "title": "let rawValue: dispatch_time_t",
                "type": "property"
              },
              {
                "title": "Operator Functions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/+(_:_:)-8ylhk",
                "title": "func + (DispatchWallTime, DispatchTimeInterval) -> DispatchWallTime",
                "type": "op"
              },
              {
                "path": "/documentation/dispatch/+(_:_:)-8pe6k",
                "title": "func + (DispatchWallTime, Double) -> DispatchWallTime",
                "type": "op"
              },
              {
                "path": "/documentation/dispatch/-(_:_:)-6jk71",
                "title": "func - (DispatchWallTime, Double) -> DispatchWallTime",
                "type": "op"
              },
              {
                "path": "/documentation/dispatch/-(_:_:)-50bxr",
                "title": "func - (DispatchWallTime, DispatchTimeInterval) -> DispatchWallTime",
                "type": "op"
              }
            ],
            "path": "/documentation/dispatch/dispatchwalltime",
            "title": "DispatchWallTime",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchtimeinterval/seconds(_:)",
                "title": "case seconds(Int)",
                "type": "case"
              },
              {
                "path": "/documentation/dispatch/dispatchtimeinterval/milliseconds(_:)",
                "title": "case milliseconds(Int)",
                "type": "case"
              },
              {
                "path": "/documentation/dispatch/dispatchtimeinterval/microseconds(_:)",
                "title": "case microseconds(Int)",
                "type": "case"
              },
              {
                "path": "/documentation/dispatch/dispatchtimeinterval/nanoseconds(_:)",
                "title": "case nanoseconds(Int)",
                "type": "case"
              },
              {
                "path": "/documentation/dispatch/dispatchtimeinterval/never",
                "title": "case never",
                "type": "case"
              }
            ],
            "path": "/documentation/dispatch/dispatchtimeinterval",
            "title": "DispatchTimeInterval",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchtimeoutresult/success",
                "title": "case success",
                "type": "case"
              },
              {
                "path": "/documentation/dispatch/dispatchtimeoutresult/timedout",
                "title": "case timedOut",
                "type": "case"
              }
            ],
            "path": "/documentation/dispatch/dispatchtimeoutresult",
            "title": "DispatchTimeoutResult",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Well-Defined Times",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_time_now",
                "title": "var DISPATCH_TIME_NOW: UInt64",
                "type": "var"
              },
              {
                "path": "/documentation/dispatch/dispatch_time_forever",
                "title": "var DISPATCH_TIME_FOREVER: UInt64",
                "type": "var"
              },
              {
                "title": "Time Multiplier Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/usec_per_sec",
                "title": "var USEC_PER_SEC: UInt64",
                "type": "var"
              },
              {
                "path": "/documentation/dispatch/nsec_per_sec",
                "title": "var NSEC_PER_SEC: UInt64",
                "type": "var"
              },
              {
                "path": "/documentation/dispatch/nsec_per_msec",
                "title": "var NSEC_PER_MSEC: UInt64",
                "type": "var"
              },
              {
                "path": "/documentation/dispatch/nsec_per_usec",
                "title": "var NSEC_PER_USEC: UInt64",
                "type": "var"
              }
            ],
            "path": "/documentation/dispatch/dispatch_time_t",
            "title": "dispatch_time_t",
            "type": "typealias"
          },
          {
            "path": "/documentation/dispatch/dispatch_walltime_now",
            "title": "var DISPATCH_WALLTIME_NOW: UInt",
            "type": "var"
          },
          {
            "children": [
              {
                "title": "Times",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_walltime_now",
                "title": "var DISPATCH_WALLTIME_NOW: UInt",
                "type": "var"
              }
            ],
            "path": "/documentation/dispatch/2963138-wall-time-constants",
            "title": "Wall Time Constants",
            "type": "collection"
          },
          {
            "title": "Dispatch Objects",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Activating, Suspending, and Resuming",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/activate()",
                "title": "func activate()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/resume()",
                "title": "func resume()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/suspend()",
                "title": "func suspend()",
                "type": "method"
              },
              {
                "title": "Changing the Assigned Target Queue",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/settarget(queue:)",
                "title": "func setTarget(queue: dispatch_queue_t?)",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/dispatchobject",
            "title": "DispatchObject",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Predicates",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchpredicate/onqueue(_:)",
                "title": "case onQueue(DispatchQueue)",
                "type": "case"
              },
              {
                "path": "/documentation/dispatch/dispatchpredicate/onqueueasbarrier(_:)",
                "title": "case onQueueAsBarrier(DispatchQueue)",
                "type": "case"
              },
              {
                "path": "/documentation/dispatch/dispatchpredicate/notonqueue(_:)",
                "title": "case notOnQueue(DispatchQueue)",
                "type": "case"
              }
            ],
            "path": "/documentation/dispatch/dispatchpredicate",
            "title": "DispatchPredicate",
            "type": "enum"
          },
          {
            "path": "/documentation/dispatch/dispatchprecondition(condition:)",
            "title": "func dispatchPrecondition(condition: @autoclosure () -> DispatchPredicate)",
            "type": "func"
          },
          {
            "children": [
              {
                "title": "Activating, Suspending, and Resuming the Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/activate()",
                "title": "func activate()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/suspend()",
                "title": "func suspend()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/resume()",
                "title": "func resume()",
                "type": "method"
              },
              {
                "path": "/documentation/dispatch/dispatch_object_t",
                "title": "dispatch_object_t",
                "type": "typealias"
              },
              {
                "title": "Changing the Assigned Target Queue",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchobject/settarget(queue:)",
                "title": "func setTarget(queue: dispatch_queue_t?)",
                "type": "method"
              }
            ],
            "path": "/documentation/dispatch/dispatch-objects",
            "title": "Dispatch Objects",
            "type": "collection"
          },
          {
            "title": "Deprecated",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Functions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_get_current_queue()",
                "title": "func dispatch_get_current_queue() -> dispatch_queue_t",
                "type": "func"
              },
              {
                "path": "/documentation/dispatch/dispatch_debugv(_:_:_:)",
                "title": "func dispatch_debugv(dispatch_object_t, UnsafePointer<CChar>, CVaListPointer)",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/deprecated-symbols",
            "title": "Deprecated Symbols",
            "type": "collection"
          },
          {
            "title": "Classes",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchworkloop/attributes",
                "title": "DispatchWorkloop.Attributes",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatchworkloop/init(label:attributes:autoreleasefrequency:osworkgroup:)",
                "title": "convenience init(label: String, attributes: DispatchWorkloop.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, osWorkgroup: WorkGroup?)",
                "type": "init"
              }
            ],
            "path": "/documentation/dispatch/dispatchworkloop",
            "title": "DispatchWorkloop",
            "type": "class"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_api_version",
                "title": "var DISPATCH_API_VERSION: Int32",
                "type": "var"
              },
              {
                "path": "/documentation/dispatch/dispatch_apply_auto_available",
                "title": "var DISPATCH_APPLY_AUTO_AVAILABLE: Int32",
                "type": "var"
              },
              {
                "path": "/documentation/dispatch/dispatch_once_inline_fastpath",
                "title": "var DISPATCH_ONCE_INLINE_FASTPATH: Int32",
                "type": "var"
              },
              {
                "path": "/documentation/dispatch/dispatch_swift3_overlay",
                "title": "var DISPATCH_SWIFT3_OVERLAY: Int32",
                "type": "var"
              },
              {
                "path": "/documentation/dispatch/msec_per_sec",
                "title": "var MSEC_PER_SEC: UInt64",
                "type": "var"
              }
            ],
            "path": "/documentation/dispatch/dispatch-constants",
            "title": "Dispatch Constants",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Data Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_group_t",
                "title": "dispatch_group_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_io_t",
                "title": "dispatch_io_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_object_t",
                "title": "dispatch_object_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_attr_t",
                "title": "dispatch_queue_attr_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_serial_executor_t",
                "title": "dispatch_queue_serial_executor_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_queue_t",
                "title": "dispatch_queue_t",
                "type": "typealias"
              },
              {
                "path": "/documentation/dispatch/dispatch_semaphore_t",
                "title": "dispatch_semaphore_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/dispatch/dispatch-data-types",
            "title": "Dispatch Data Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Functions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/dispatch/dispatch_allow_send_signals(_:)",
                "title": "func dispatch_allow_send_signals(Int32) -> Int32",
                "type": "func"
              }
            ],
            "path": "/documentation/dispatch/dispatch-functions",
            "title": "Dispatch Functions",
            "type": "collection"
          }
        ],
        "path": "/documentation/dispatch",
        "title": "Dispatch",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
