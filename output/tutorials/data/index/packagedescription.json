{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Creating a Package",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/packagedescription",
        "title": "PackageDescription",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Creating a Package",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/packagedescription",
        "title": "PackageDescription",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Creating a Package",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Package",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/packagedescription/package/init(name:defaultlocalization:platforms:pkgconfig:providers:products:dependencies:targets:swiftlanguageversions:clanguagestandard:cxxlanguagestandard:)",
                "title": "init(name: String, defaultLocalization: LanguageTag?, platforms: [SupportedPlatform]?, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageVersions: [SwiftVersion]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                "type": "init"
              },
              {
                "title": "Naming the Package",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/package/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "title": "Localizing Package Resources",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/package/defaultlocalization",
                "title": "var defaultLocalization: LanguageTag?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a Language Tag",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/init(extendedgraphemeclusterliteral:)",
                    "title": "init(extendedGraphemeClusterLiteral: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/init(stringliteral:)",
                    "title": "init(stringLiteral: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/init(unicodescalarliteral:)",
                    "title": "init(unicodeScalarLiteral: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "title": "Describing a Language Tag",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Hashing",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Operator Functions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Identifying Related Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/extendedgraphemeclusterliteraltype",
                    "title": "LanguageTag.ExtendedGraphemeClusterLiteralType",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/rawvalue-swift.typealias",
                    "title": "LanguageTag.RawValue",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/stringliteraltype",
                    "title": "LanguageTag.StringLiteralType",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/packagedescription/languagetag/unicodescalarliteraltype",
                    "title": "LanguageTag.UnicodeScalarLiteralType",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/languagetag/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/packagedescription/languagetag/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/init(extendedgraphemeclusterliteral:)",
                        "title": "init(extendedGraphemeClusterLiteral: String)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/init(unicodescalarliteral:)-22z0a",
                        "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                        "type": "init"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/extendedgraphemeclusterliteraltype",
                        "title": "LanguageTag.ExtendedGraphemeClusterLiteralType",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/packagedescription/languagetag/expressiblebyextendedgraphemeclusterliteral-implementations",
                    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/init(extendedgraphemeclusterliteral:)-1merv",
                        "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/init(stringliteral:)",
                        "title": "init(stringLiteral: String)",
                        "type": "init"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/stringliteraltype",
                        "title": "LanguageTag.StringLiteralType",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/packagedescription/languagetag/expressiblebystringliteral-implementations",
                    "title": "ExpressibleByStringLiteral Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/init(unicodescalarliteral:)",
                        "title": "init(unicodeScalarLiteral: String)",
                        "type": "init"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/unicodescalarliteraltype",
                        "title": "LanguageTag.UnicodeScalarLiteralType",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/packagedescription/languagetag/expressiblebyunicodescalarliteral-implementations",
                    "title": "ExpressibleByUnicodeScalarLiteral Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/init(rawvalue:)",
                        "title": "init?(rawValue: String)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/rawvalue-swift.property",
                        "title": "var rawValue: String",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/languagetag/rawvalue-swift.typealias",
                        "title": "LanguageTag.RawValue",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/packagedescription/languagetag/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/packagedescription/languagetag",
                "title": "LanguageTag",
                "type": "struct"
              },
              {
                "title": "Configuring Products",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/package/products",
                "title": "var products: [Product]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a Library Product",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/product/library(name:type:targets:)",
                    "title": "static func library(name: String, type: Product.Library.LibraryType?, targets: [String]) -> Product",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Describing a Library Product",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/product/library/targets",
                        "title": "let targets: [String]",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/product/library/type",
                        "title": "let type: Product.Library.LibraryType?",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Enumeration Cases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/product/library/librarytype/dynamic",
                            "title": "case dynamic",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/packagedescription/product/library/librarytype/static",
                            "title": "case `static`",
                            "type": "case"
                          },
                          {
                            "title": "Hashing",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/product/library/librarytype/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/packagedescription/product/library/librarytype/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Operator Functions",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/product/library/librarytype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Creating a Value",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/product/library/librarytype/init(rawvalue:)",
                            "title": "init?(rawValue: String)",
                            "type": "init"
                          },
                          {
                            "title": "Accessing the Raw Value",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/product/library/librarytype/rawvalue-swift.property",
                            "title": "var rawValue: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/packagedescription/product/library/librarytype/rawvalue-swift.typealias",
                            "title": "Product.Library.LibraryType.RawValue",
                            "type": "typealias"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/product/library/librarytype/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/packagedescription/product/library/librarytype/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/product/library/librarytype/hashvalue",
                                "title": "var hashValue: Int",
                                "type": "property"
                              },
                              {
                                "title": "Instance Methods",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/product/library/librarytype/hash(into:)",
                                "title": "func hash(into: inout Hasher)",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/packagedescription/product/library/librarytype/rawrepresentable-implementations",
                            "title": "RawRepresentable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/packagedescription/product/library/librarytype",
                        "title": "Product.Library.LibraryType",
                        "type": "enum"
                      }
                    ],
                    "path": "/documentation/packagedescription/product/library",
                    "title": "Product.Library",
                    "type": "class"
                  },
                  {
                    "title": "Creating an Executable Product",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/product/executable(name:targets:)",
                    "title": "static func executable(name: String, targets: [String]) -> Product",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Describing an executable product",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/product/executable/targets",
                        "title": "let targets: [String]",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/product/executable",
                    "title": "Product.Executable",
                    "type": "class"
                  },
                  {
                    "title": "Creating a Plugin Product",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/product/plugin(name:targets:)",
                    "title": "static func plugin(name: String, targets: [String]) -> Product",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Describing a plug-in product",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/product/plugin/targets",
                        "title": "let targets: [String]",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/product/plugin",
                    "title": "Product.Plugin",
                    "type": "class"
                  },
                  {
                    "title": "Naming the product",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/product/name",
                    "title": "let name: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/packagedescription/product",
                "title": "Product",
                "type": "class"
              },
              {
                "title": "Configuring Targets",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/package/targets",
                "title": "var targets: [Target]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Naming the Target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/name",
                    "title": "var name: String",
                    "type": "property"
                  },
                  {
                    "title": "Configuring File Locations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/path",
                    "title": "var path: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/exclude",
                    "title": "var exclude: [String]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/sources",
                    "title": "var sources: [String]?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/resources",
                    "title": "var resources: [Resource]?",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Applying Rules",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/resource/process(_:localization:)",
                        "title": "static func process(String, localization: Resource.Localization?) -> Resource",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Enumeration Cases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/resource/localization/base",
                            "title": "case base",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/packagedescription/resource/localization/default",
                            "title": "case `default`",
                            "type": "case"
                          },
                          {
                            "title": "Hashing",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/resource/localization/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/packagedescription/resource/localization/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Operator Functions",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/resource/localization/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Creating a Value",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/resource/localization/init(rawvalue:)",
                            "title": "init?(rawValue: String)",
                            "type": "init"
                          },
                          {
                            "title": "Accessing the Raw Value",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/resource/localization/rawvalue-swift.property",
                            "title": "var rawValue: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/packagedescription/resource/localization/rawvalue-swift.typealias",
                            "title": "Resource.Localization.RawValue",
                            "type": "typealias"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/resource/localization/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/packagedescription/resource/localization/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/resource/localization/hashvalue",
                                "title": "var hashValue: Int",
                                "type": "property"
                              },
                              {
                                "title": "Instance Methods",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/resource/localization/hash(into:)",
                                "title": "func hash(into: inout Hasher)",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/packagedescription/resource/localization/rawrepresentable-implementations",
                            "title": "RawRepresentable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/packagedescription/resource/localization",
                        "title": "Resource.Localization",
                        "type": "enum"
                      },
                      {
                        "path": "/documentation/packagedescription/resource/copy(_:)",
                        "title": "static func copy(String) -> Resource",
                        "type": "method"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/resource/embedincode(_:)",
                        "title": "static func embedInCode(String) -> Resource",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/packagedescription/resource",
                    "title": "Resource",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/packagedescription/target/publicheaderspath",
                    "title": "var publicHeadersPath: String?",
                    "type": "property"
                  },
                  {
                    "title": "Creating a Binary Target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/binarytarget(name:path:)",
                    "title": "static func binaryTarget(name: String, path: String) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/binarytarget(name:url:checksum:)",
                    "title": "static func binaryTarget(name: String, url: String, checksum: String) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/url",
                    "title": "var url: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/checksum",
                    "title": "var checksum: String?",
                    "type": "property"
                  },
                  {
                    "title": "Creating a System Target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/systemlibrary(name:path:pkgconfig:providers:)",
                    "title": "static func systemLibrary(name: String, path: String?, pkgConfig: String?, providers: [SystemPackageProvider]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/pkgconfig",
                    "title": "let pkgConfig: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/providers",
                    "title": "let providers: [SystemPackageProvider]?",
                    "type": "property"
                  },
                  {
                    "title": "Creating an Executable Target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/executabletarget(name:dependencies:path:exclude:sources:resources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:)",
                    "title": "static func executableTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/executabletarget(name:dependencies:path:exclude:sources:resources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                    "title": "static func executableTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                    "type": "method"
                  },
                  {
                    "title": "Creating a Plugin Target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/plugin(name:capability:dependencies:path:exclude:sources:)",
                    "title": "static func plugin(name: String, capability: Target.PluginCapability, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/plugincapability-swift.property",
                    "title": "var pluginCapability: Target.PluginCapability?",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a Plugin Capability",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/plugincapability-swift.enum/buildtool()",
                        "title": "static func buildTool() -> Target.PluginCapability",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/plugincapability-swift.enum/command(intent:permissions:)",
                        "title": "case command(intent: PluginCommandIntent, permissions: [PluginPermission])",
                        "type": "case"
                      },
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/plugincapability-swift.enum/buildtool",
                        "title": "case buildTool",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/packagedescription/target/plugincapability-swift.enum",
                    "title": "Target.PluginCapability",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a Command Intent",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/plugincommandintent/documentationgeneration()",
                        "title": "static func documentationGeneration() -> PluginCommandIntent",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/plugincommandintent/sourcecodeformatting()",
                        "title": "static func sourceCodeFormatting() -> PluginCommandIntent",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/plugincommandintent/custom(verb:description:)",
                        "title": "case custom(verb: String, description: String)",
                        "type": "case"
                      },
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/plugincommandintent/documentationgeneration",
                        "title": "case documentationGeneration",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/plugincommandintent/sourcecodeformatting",
                        "title": "case sourceCodeFormatting",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/packagedescription/plugincommandintent",
                    "title": "PluginCommandIntent",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Create a permission",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/pluginpermission/allownetworkconnections(scope:reason:)",
                        "title": "case allowNetworkConnections(scope: PluginNetworkPermissionScope, reason: String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/pluginpermission/writetopackagedirectory(reason:)",
                        "title": "case writeToPackageDirectory(reason: String)",
                        "type": "case"
                      },
                      {
                        "title": "Allow network connection",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Enumeration Cases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/pluginnetworkpermissionscope/all(ports:)-swift.enum.case",
                            "title": "case all(ports: [Int])",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/packagedescription/pluginnetworkpermissionscope/docker",
                            "title": "case docker",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/packagedescription/pluginnetworkpermissionscope/local(ports:)-swift.enum.case",
                            "title": "case local(ports: [Int])",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/packagedescription/pluginnetworkpermissionscope/none",
                            "title": "case none",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/packagedescription/pluginnetworkpermissionscope/unixdomainsocket",
                            "title": "case unixDomainSocket",
                            "type": "case"
                          },
                          {
                            "title": "Type Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/pluginnetworkpermissionscope/all(ports:)-swift.type.method",
                            "title": "static func all(ports: Range<Int>) -> PluginNetworkPermissionScope",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/packagedescription/pluginnetworkpermissionscope/local(ports:)-swift.type.method",
                            "title": "static func local(ports: Range<Int>) -> PluginNetworkPermissionScope",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/packagedescription/pluginnetworkpermissionscope",
                        "title": "PluginNetworkPermissionScope",
                        "type": "enum"
                      }
                    ],
                    "path": "/documentation/packagedescription/pluginpermission",
                    "title": "PluginPermission",
                    "type": "enum"
                  },
                  {
                    "title": "Declaring a Dependency Target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/dependencies",
                    "title": "var dependencies: [Target.Dependency]",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a Target Dependency",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/product(name:package:condition:)",
                        "title": "static func product(name: String, package: String, condition: TargetDependencyCondition?) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/product(name:package:)-fp0j",
                        "title": "static func product(name: String, package: String?) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/product(name:package:)-2nako",
                        "title": "static func product(name: String, package: String) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/product(name:package:modulealiases:condition:)",
                        "title": "static func product(name: String, package: String, moduleAliases: [String : String]?, condition: TargetDependencyCondition?) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/target(name:condition:)",
                        "title": "static func target(name: String, condition: TargetDependencyCondition?) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/target(name:)",
                        "title": "static func target(name: String) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/byname(name:condition:)",
                        "title": "static func byName(name: String, condition: TargetDependencyCondition?) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/byname(name:)",
                        "title": "static func byName(name: String) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a Dependency Condition",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/targetdependencycondition/when(platforms:)-5bxhc",
                            "title": "static func when(platforms: [Platform]) -> TargetDependencyCondition?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/packagedescription/targetdependencycondition/when(platforms:)-4djh6",
                            "title": "static func when(platforms: [Platform]?) -> TargetDependencyCondition",
                            "type": "method"
                          },
                          {
                            "title": "Type Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/targetdependencycondition/when(platforms:traits:)",
                            "title": "static func when(platforms: [Platform], traits: Set<String>) -> TargetDependencyCondition?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/packagedescription/targetdependencycondition/when(traits:)",
                            "title": "static func when(traits: Set<String>) -> TargetDependencyCondition?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/packagedescription/targetdependencycondition",
                        "title": "TargetDependencyCondition",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/init(stringliteral:)",
                        "title": "init(stringLiteral: String)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/init(extendedgraphemeclusterliteral:)",
                        "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/init(unicodescalarliteral:)",
                        "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                        "type": "init"
                      },
                      {
                        "title": "Identifying related types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/extendedgraphemeclusterliteraltype",
                        "title": "Target.Dependency.ExtendedGraphemeClusterLiteralType",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/stringliteraltype",
                        "title": "Target.Dependency.StringLiteralType",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/unicodescalarliteraltype",
                        "title": "Target.Dependency.UnicodeScalarLiteralType",
                        "type": "typealias"
                      },
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/bynameitem(name:condition:)",
                        "title": "case byNameItem(name: String, condition: TargetDependencyCondition?)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/productitem(name:package:modulealiases:condition:)",
                        "title": "case productItem(name: String, package: String?, moduleAliases: [String : String]?, condition: TargetDependencyCondition?)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/targetitem(name:condition:)",
                        "title": "case targetItem(name: String, condition: TargetDependencyCondition?)",
                        "type": "case"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/dependency/productitem(name:package:condition:)",
                        "title": "static func productItem(name: String, package: String?, condition: TargetDependencyCondition?) -> Target.Dependency",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/dependency/init(unicodescalarliteral:)",
                            "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                            "type": "init"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/dependency/extendedgraphemeclusterliteraltype",
                            "title": "Target.Dependency.ExtendedGraphemeClusterLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/target/dependency/expressiblebyextendedgraphemeclusterliteral-implementations",
                        "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/dependency/init(extendedgraphemeclusterliteral:)",
                            "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/packagedescription/target/dependency/init(stringliteral:)",
                            "title": "init(stringLiteral: String)",
                            "type": "init"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/dependency/stringliteraltype",
                            "title": "Target.Dependency.StringLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/target/dependency/expressiblebystringliteral-implementations",
                        "title": "ExpressibleByStringLiteral Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/dependency/unicodescalarliteraltype",
                            "title": "Target.Dependency.UnicodeScalarLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/target/dependency/expressiblebyunicodescalarliteral-implementations",
                        "title": "ExpressibleByUnicodeScalarLiteral Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/packagedescription/target/dependency",
                    "title": "Target.Dependency",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a Dependency Condition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/targetdependencycondition/when(platforms:)-5bxhc",
                        "title": "static func when(platforms: [Platform]) -> TargetDependencyCondition?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/targetdependencycondition/when(platforms:)-4djh6",
                        "title": "static func when(platforms: [Platform]?) -> TargetDependencyCondition",
                        "type": "method"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/targetdependencycondition/when(platforms:traits:)",
                        "title": "static func when(platforms: [Platform], traits: Set<String>) -> TargetDependencyCondition?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/targetdependencycondition/when(traits:)",
                        "title": "static func when(traits: Set<String>) -> TargetDependencyCondition?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/packagedescription/targetdependencycondition",
                    "title": "TargetDependencyCondition",
                    "type": "struct"
                  },
                  {
                    "title": "Configuring the Target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/csettings",
                    "title": "var cSettings: [CSetting]?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/cxxsettings",
                    "title": "var cxxSettings: [CXXSetting]?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/swiftsettings",
                    "title": "var swiftSettings: [SwiftSetting]?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/linkersettings",
                    "title": "var linkerSettings: [LinkerSetting]?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/plugins",
                    "title": "var plugins: [Target.PluginUsage]?",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Describing Build Configurations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/buildconfiguration/debug",
                        "title": "static let debug: BuildConfiguration",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/buildconfiguration/release",
                        "title": "static let release: BuildConfiguration",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/buildconfiguration",
                    "title": "BuildConfiguration",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Checking for a Build Condition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/buildsettingcondition/when(platforms:)",
                        "title": "static func when(platforms: [Platform]) -> BuildSettingCondition",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/buildsettingcondition/when(configuration:)",
                        "title": "static func when(configuration: BuildConfiguration) -> BuildSettingCondition",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/buildsettingcondition/when(platforms:configuration:)-2991l",
                        "title": "static func when(platforms: [Platform]?, configuration: BuildConfiguration?) -> BuildSettingCondition",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/buildsettingcondition/when(platforms:configuration:)-475co",
                        "title": "static func when(platforms: [Platform], configuration: BuildConfiguration) -> BuildSettingCondition",
                        "type": "method"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/buildsettingcondition/when(platforms:configuration:traits:)",
                        "title": "static func when(platforms: [Platform]?, configuration: BuildConfiguration?, traits: Set<String>?) -> BuildSettingCondition",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/packagedescription/buildsettingcondition",
                    "title": "BuildSettingCondition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Configuring C Settings",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/csetting/define(_:to:_:)",
                        "title": "static func define(String, to: String?, BuildSettingCondition?) -> CSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/csetting/headersearchpath(_:_:)",
                        "title": "static func headerSearchPath(String, BuildSettingCondition?) -> CSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/csetting/unsafeflags(_:_:)",
                        "title": "static func unsafeFlags([String], BuildSettingCondition?) -> CSetting",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/packagedescription/csetting",
                    "title": "CSetting",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Configuring CXX Settings",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/cxxsetting/define(_:to:_:)",
                        "title": "static func define(String, to: String?, BuildSettingCondition?) -> CXXSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/cxxsetting/headersearchpath(_:_:)",
                        "title": "static func headerSearchPath(String, BuildSettingCondition?) -> CXXSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/cxxsetting/unsafeflags(_:_:)",
                        "title": "static func unsafeFlags([String], BuildSettingCondition?) -> CXXSetting",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/packagedescription/cxxsetting",
                    "title": "CXXSetting",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Configuring Swift Settings",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/swiftsetting/define(_:_:)",
                        "title": "static func define(String, BuildSettingCondition?) -> SwiftSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/swiftsetting/unsafeflags(_:_:)",
                        "title": "static func unsafeFlags([String], BuildSettingCondition?) -> SwiftSetting",
                        "type": "method"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/swiftsetting/enableexperimentalfeature(_:_:)",
                        "title": "static func enableExperimentalFeature(String, BuildSettingCondition?) -> SwiftSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/swiftsetting/enableupcomingfeature(_:_:)",
                        "title": "static func enableUpcomingFeature(String, BuildSettingCondition?) -> SwiftSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode(_:_:)",
                        "title": "static func interoperabilityMode(SwiftSetting.InteroperabilityMode, BuildSettingCondition?) -> SwiftSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/swiftsetting/swiftlanguagemode(_:_:)",
                        "title": "static func swiftLanguageMode(SwiftLanguageMode, BuildSettingCondition?) -> SwiftSetting",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/swiftsetting/swiftlanguageversion(_:_:)",
                        "title": "static func swiftLanguageVersion(SwiftVersion, BuildSettingCondition?) -> SwiftSetting",
                        "type": "method"
                      },
                      {
                        "title": "Enumerations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Enumeration Cases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/c",
                            "title": "case C",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/cxx",
                            "title": "case Cxx",
                            "type": "case"
                          },
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/init(rawvalue:)",
                            "title": "init?(rawValue: String)",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/rawvalue-swift.property",
                            "title": "var rawValue: String",
                            "type": "property"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/rawvalue-swift.typealias",
                            "title": "SwiftSetting.InteroperabilityMode.RawValue",
                            "type": "typealias"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/hashvalue",
                                "title": "var hashValue: Int",
                                "type": "property"
                              },
                              {
                                "title": "Instance Methods",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/hash(into:)",
                                "title": "func hash(into: inout Hasher)",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode/rawrepresentable-implementations",
                            "title": "RawRepresentable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/packagedescription/swiftsetting/interoperabilitymode",
                        "title": "SwiftSetting.InteroperabilityMode",
                        "type": "enum"
                      }
                    ],
                    "path": "/documentation/packagedescription/swiftsetting",
                    "title": "SwiftSetting",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Configuring Linker Settings",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/linkersetting/linkedframework(_:_:)",
                        "title": "static func linkedFramework(String, BuildSettingCondition?) -> LinkerSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/linkersetting/linkedlibrary(_:_:)",
                        "title": "static func linkedLibrary(String, BuildSettingCondition?) -> LinkerSetting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/linkersetting/unsafeflags(_:_:)",
                        "title": "static func unsafeFlags([String], BuildSettingCondition?) -> LinkerSetting",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/packagedescription/linkersetting",
                    "title": "LinkerSetting",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a Plugin Usage",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/pluginusage/plugin(name:)",
                        "title": "static func plugin(name: String) -> Target.PluginUsage",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/pluginusage/plugin(name:package:)",
                        "title": "case plugin(name: String, package: String?)",
                        "type": "case"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/pluginusage/init(unicodescalarliteral:)",
                            "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                            "type": "init"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/pluginusage/extendedgraphemeclusterliteraltype",
                            "title": "Target.PluginUsage.ExtendedGraphemeClusterLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/target/pluginusage/expressiblebyextendedgraphemeclusterliteral-implementations",
                        "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/pluginusage/init(extendedgraphemeclusterliteral:)",
                            "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/packagedescription/target/pluginusage/init(stringliteral:)",
                            "title": "init(stringLiteral: String)",
                            "type": "init"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/pluginusage/stringliteraltype",
                            "title": "Target.PluginUsage.StringLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/target/pluginusage/expressiblebystringliteral-implementations",
                        "title": "ExpressibleByStringLiteral Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/pluginusage/unicodescalarliteraltype",
                            "title": "Target.PluginUsage.UnicodeScalarLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/target/pluginusage/expressiblebyunicodescalarliteral-implementations",
                        "title": "ExpressibleByUnicodeScalarLiteral Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/packagedescription/target/pluginusage",
                    "title": "Target.PluginUsage",
                    "type": "enum"
                  },
                  {
                    "title": "Describing the Target Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/istest",
                    "title": "var isTest: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/target/type",
                    "title": "let type: Target.TargetType",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/regular",
                        "title": "case regular",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/binary",
                        "title": "case binary",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/system",
                        "title": "case system",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/test",
                        "title": "case test",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/executable",
                        "title": "case executable",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/plugin",
                        "title": "case plugin",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/macro",
                        "title": "case macro",
                        "type": "case"
                      },
                      {
                        "title": "Creating a Value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/init(rawvalue:)",
                        "title": "init?(rawValue: String)",
                        "type": "init"
                      },
                      {
                        "title": "Hashing",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Operator Functions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Accessing the Raw Value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/rawvalue-swift.property",
                        "title": "var rawValue: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/target/targettype/rawvalue-swift.typealias",
                        "title": "Target.TargetType.RawValue",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/targettype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/packagedescription/target/targettype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/targettype/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/target/targettype/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/packagedescription/target/targettype/rawrepresentable-implementations",
                        "title": "RawRepresentable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/packagedescription/target/targettype",
                    "title": "Target.TargetType",
                    "type": "enum"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/packageaccess",
                    "title": "let packageAccess: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/target/executabletarget(name:dependencies:path:exclude:sources:resources:publicheaderspath:packageaccess:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                    "title": "static func executableTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, packageAccess: Bool, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/macro(name:dependencies:path:exclude:sources:packageaccess:swiftsettings:linkersettings:plugins:)",
                    "title": "static func macro(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, packageAccess: Bool, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/plugin(name:capability:dependencies:path:exclude:sources:packageaccess:)",
                    "title": "static func plugin(name: String, capability: Target.PluginCapability, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, packageAccess: Bool) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/target(name:dependencies:path:exclude:sources:publicheaderspath:)",
                    "title": "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, publicHeadersPath: String?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/target(name:dependencies:path:exclude:sources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:)",
                    "title": "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/target(name:dependencies:path:exclude:sources:resources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:)",
                    "title": "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/target(name:dependencies:path:exclude:sources:resources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                    "title": "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/target(name:dependencies:path:exclude:sources:resources:publicheaderspath:packageaccess:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                    "title": "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, packageAccess: Bool, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/testtarget(name:dependencies:path:exclude:sources:)",
                    "title": "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/testtarget(name:dependencies:path:exclude:sources:csettings:cxxsettings:swiftsettings:linkersettings:)",
                    "title": "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/testtarget(name:dependencies:path:exclude:sources:resources:csettings:cxxsettings:swiftsettings:linkersettings:)",
                    "title": "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/testtarget(name:dependencies:path:exclude:sources:resources:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                    "title": "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/target/testtarget(name:dependencies:path:exclude:sources:resources:packageaccess:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                    "title": "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, packageAccess: Bool, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                    "type": "method"
                  }
                ],
                "path": "/documentation/packagedescription/target",
                "title": "Target",
                "type": "class"
              },
              {
                "title": "Declaring Supported Platforms",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/package/platforms",
                "title": "var platforms: [SupportedPlatform]?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Supporting iOS",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/ios(_:)-5pvv5",
                    "title": "static func iOS(SupportedPlatform.IOSVersion) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/ios(_:)-83bbf",
                    "title": "static func iOS(String) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/ios",
                    "title": "static let iOS: Platform",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v10",
                        "title": "static let v10: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v11",
                        "title": "static let v11: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v12",
                        "title": "static let v12: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v13",
                        "title": "static let v13: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v14",
                        "title": "static let v14: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v15",
                        "title": "static let v15: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v16",
                        "title": "static let v16: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v17",
                        "title": "static let v17: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v18",
                        "title": "static let v18: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v8",
                        "title": "static let v8: SupportedPlatform.IOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/iosversion/v9",
                        "title": "static let v9: SupportedPlatform.IOSVersion",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/supportedplatform/iosversion",
                    "title": "SupportedPlatform.IOSVersion",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting macOS",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/macos(_:)-2wthp",
                    "title": "static func macOS(SupportedPlatform.MacOSVersion) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/macos(_:)-9771f",
                    "title": "static func macOS(String) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/macos",
                    "title": "static let macOS: Platform",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v10_10",
                        "title": "static let v10_10: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v10_11",
                        "title": "static let v10_11: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v10_12",
                        "title": "static let v10_12: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v10_13",
                        "title": "static let v10_13: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v10_14",
                        "title": "static let v10_14: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v10_15",
                        "title": "static let v10_15: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v11",
                        "title": "static let v11: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v12",
                        "title": "static let v12: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v13",
                        "title": "static let v13: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v14",
                        "title": "static let v14: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/macosversion/v15",
                        "title": "static let v15: SupportedPlatform.MacOSVersion",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/supportedplatform/macosversion",
                    "title": "SupportedPlatform.MacOSVersion",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting watchOS",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/watchos(_:)-t998",
                    "title": "static func watchOS(SupportedPlatform.WatchOSVersion) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/watchos(_:)-4lrx0",
                    "title": "static func watchOS(String) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/watchos",
                    "title": "static let watchOS: Platform",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v10",
                        "title": "static let v10: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v11",
                        "title": "static let v11: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v2",
                        "title": "static let v2: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v3",
                        "title": "static let v3: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v4",
                        "title": "static let v4: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v5",
                        "title": "static let v5: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v6",
                        "title": "static let v6: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v7",
                        "title": "static let v7: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v8",
                        "title": "static let v8: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/watchosversion/v9",
                        "title": "static let v9: SupportedPlatform.WatchOSVersion",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/supportedplatform/watchosversion",
                    "title": "SupportedPlatform.WatchOSVersion",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting visionOS",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/visionos(_:)-3ip0z",
                    "title": "static func visionOS(SupportedPlatform.VisionOSVersion) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/visionos(_:)-6ur2u",
                    "title": "static func visionOS(String) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/visionos",
                    "title": "static let visionOS: Platform",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/visionosversion/v1",
                        "title": "static let v1: SupportedPlatform.VisionOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/visionosversion/v2",
                        "title": "static let v2: SupportedPlatform.VisionOSVersion",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/supportedplatform/visionosversion",
                    "title": "SupportedPlatform.VisionOSVersion",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting tvOS",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/tvos(_:)-6931l",
                    "title": "static func tvOS(SupportedPlatform.TVOSVersion) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/tvos(_:)-3k8sy",
                    "title": "static func tvOS(String) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/tvos",
                    "title": "static let tvOS: Platform",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v10",
                        "title": "static let v10: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v11",
                        "title": "static let v11: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v12",
                        "title": "static let v12: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v13",
                        "title": "static let v13: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v14",
                        "title": "static let v14: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v15",
                        "title": "static let v15: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v16",
                        "title": "static let v16: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v17",
                        "title": "static let v17: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v18",
                        "title": "static let v18: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/supportedplatform/tvosversion/v9",
                        "title": "static let v9: SupportedPlatform.TVOSVersion",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/supportedplatform/tvosversion",
                    "title": "SupportedPlatform.TVOSVersion",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting MacCatalyst",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/maccatalyst(_:)-6bh40",
                    "title": "static func macCatalyst(SupportedPlatform.MacCatalystVersion) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/maccatalyst(_:)-9wbz",
                    "title": "static func macCatalyst(String) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/maccatalyst",
                    "title": "static let macCatalyst: Platform",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/maccatalystversion/v13",
                        "title": "static let v13: SupportedPlatform.MacCatalystVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/maccatalystversion/v14",
                        "title": "static let v14: SupportedPlatform.MacCatalystVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/maccatalystversion/v15",
                        "title": "static let v15: SupportedPlatform.MacCatalystVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/maccatalystversion/v16",
                        "title": "static let v16: SupportedPlatform.MacCatalystVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/maccatalystversion/v17",
                        "title": "static let v17: SupportedPlatform.MacCatalystVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/maccatalystversion/v18",
                        "title": "static let v18: SupportedPlatform.MacCatalystVersion",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/supportedplatform/maccatalystversion",
                    "title": "SupportedPlatform.MacCatalystVersion",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting DriverKit",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/driverkit(_:)-jxlz",
                    "title": "static func driverKit(SupportedPlatform.DriverKitVersion) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/driverkit(_:)-6evdd",
                    "title": "static func driverKit(String) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/driverkit",
                    "title": "static let driverKit: Platform",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/driverkitversion/v19",
                        "title": "static let v19: SupportedPlatform.DriverKitVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/driverkitversion/v20",
                        "title": "static let v20: SupportedPlatform.DriverKitVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/driverkitversion/v21",
                        "title": "static let v21: SupportedPlatform.DriverKitVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/driverkitversion/v22",
                        "title": "static let v22: SupportedPlatform.DriverKitVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/driverkitversion/v23",
                        "title": "static let v23: SupportedPlatform.DriverKitVersion",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/driverkitversion/v24",
                        "title": "static let v24: SupportedPlatform.DriverKitVersion",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/packagedescription/supportedplatform/driverkitversion",
                    "title": "SupportedPlatform.DriverKitVersion",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting Linux",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/linux",
                    "title": "static let linux: Platform",
                    "type": "property"
                  },
                  {
                    "title": "Type methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/custom(_:versionstring:)",
                    "title": "static func custom(String, versionString: String) -> SupportedPlatform",
                    "type": "method"
                  },
                  {
                    "title": "Operator Functions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/==(_:_:)",
                    "title": "static func == (SupportedPlatform, SupportedPlatform) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/supportedplatform/customplatformversion",
                    "title": "SupportedPlatform.CustomPlatformVersion",
                    "type": "struct"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/supportedplatform/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/packagedescription/supportedplatform/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/packagedescription/supportedplatform",
                "title": "SupportedPlatform",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Platforms",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/ios",
                    "title": "static let iOS: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/macos",
                    "title": "static let macOS: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/tvos",
                    "title": "static let tvOS: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/watchos",
                    "title": "static let watchOS: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/maccatalyst",
                    "title": "static let macCatalyst: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/driverkit",
                    "title": "static let driverKit: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/android",
                    "title": "static let android: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/linux",
                    "title": "static let linux: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/openbsd",
                    "title": "static let openbsd: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/wasi",
                    "title": "static let wasi: Platform",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/windows",
                    "title": "static let windows: Platform",
                    "type": "property"
                  },
                  {
                    "title": "Type methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/custom(_:)",
                    "title": "static func custom(String) -> Platform",
                    "type": "method"
                  },
                  {
                    "title": "Operator Functions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/==(_:_:)",
                    "title": "static func == (Platform, Platform) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/platform/visionos",
                    "title": "static let visionOS: Platform",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/platform/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/packagedescription/platform/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/packagedescription/platform",
                "title": "Platform",
                "type": "struct"
              },
              {
                "title": "Configuring System Packages",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Providing Hints to Users of System Packages",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/systempackageprovider/brew(_:)",
                    "title": "static func brew([String]) -> SystemPackageProvider",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/systempackageprovider/apt(_:)",
                    "title": "static func apt([String]) -> SystemPackageProvider",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/systempackageprovider/yum(_:)",
                    "title": "static func yum([String]) -> SystemPackageProvider",
                    "type": "method"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/systempackageprovider/aptitem(_:)",
                    "title": "case aptItem([String])",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/systempackageprovider/brewitem(_:)",
                    "title": "case brewItem([String])",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/systempackageprovider/nugetitem(_:)",
                    "title": "case nugetItem([String])",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/systempackageprovider/yumitem(_:)",
                    "title": "case yumItem([String])",
                    "type": "case"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/systempackageprovider/nuget(_:)",
                    "title": "static func nuget([String]) -> SystemPackageProvider",
                    "type": "method"
                  }
                ],
                "path": "/documentation/packagedescription/systempackageprovider",
                "title": "SystemPackageProvider",
                "type": "enum"
              },
              {
                "path": "/documentation/packagedescription/package/pkgconfig",
                "title": "var pkgConfig: String?",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/package/providers",
                "title": "var providers: [SystemPackageProvider]?",
                "type": "property"
              },
              {
                "title": "Declaring Package Dependencies",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/package/dependencies",
                "title": "var dependencies: [Package.Dependency]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a Package Dependency",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(name:path:)",
                    "title": "static func package(name: String, path: String) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:from:)",
                    "title": "static func package(url: String, from: Version) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:_:)-2ys47",
                    "title": "static func package(url: String, Range<Version>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:_:)-1r6rc",
                    "title": "static func package(url: String, ClosedRange<Version>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:branch:)",
                    "title": "static func package(url: String, branch: String) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:revision:)",
                    "title": "static func package(url: String, revision: String) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:exact:)",
                    "title": "static func package(url: String, exact: Version) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(path:)",
                    "title": "static func package(path: String) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "title": "Declaring Requirements",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/requirement-swift.property",
                    "title": "var requirement: Package.Dependency.Requirement",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/branchitem(_:)",
                        "title": "case branchItem(String)",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/exactitem(_:)",
                        "title": "case exactItem(Version)",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/localpackageitem",
                        "title": "case localPackageItem",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/rangeitem(_:)",
                        "title": "case rangeItem(Range<Version>)",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/revisionitem(_:)",
                        "title": "case revisionItem(String)",
                        "type": "case"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/branch(_:)",
                        "title": "static func branch(String) -> Package.Dependency.Requirement",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/exact(_:)",
                        "title": "static func exact(Version) -> Package.Dependency.Requirement",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/revision(_:)",
                        "title": "static func revision(String) -> Package.Dependency.Requirement",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/uptonextmajor(from:)",
                        "title": "static func upToNextMajor(from: Version) -> Package.Dependency.Requirement",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum/uptonextminor(from:)",
                        "title": "static func upToNextMinor(from: Version) -> Package.Dependency.Requirement",
                        "type": "method"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/requirement-swift.enum",
                    "title": "Package.Dependency.Requirement",
                    "type": "enum"
                  },
                  {
                    "title": "Describing a Package Dependency",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/kind-swift.property",
                    "title": "let kind: Package.Dependency.Kind",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/version/init(_:_:_:prereleaseidentifiers:buildmetadataidentifiers:)",
                        "title": "init(Int, Int, Int, prereleaseIdentifiers: [String], buildMetadataIdentifiers: [String])",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/version/buildmetadataidentifiers",
                        "title": "let buildMetadataIdentifiers: [String]",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/version/major",
                        "title": "let major: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/version/minor",
                        "title": "let minor: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/version/patch",
                        "title": "let patch: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/version/prereleaseidentifiers",
                        "title": "let prereleaseIdentifiers: [String]",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/'...(_:)-69iyk",
                            "title": "static func ... (Self) -> PartialRangeThrough<Self>",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/'...(_:)-9ansa",
                            "title": "static func ... (Self) -> PartialRangeFrom<Self>",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/'...(_:_:)",
                            "title": "static func ... (Self, Self) -> ClosedRange<Self>",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/'.._(_:)",
                            "title": "static func ..< (Self) -> PartialRangeUpTo<Self>",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/'.._(_:_:)",
                            "title": "static func ..< (Self, Self) -> Range<Self>",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/_(_:_:)",
                            "title": "static func < (Version, Version) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/_(_:_:)-6qwjc",
                            "title": "static func > (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/_=(_:_:)-2r3us",
                            "title": "static func <= (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/_=(_:_:)-7n9wi",
                            "title": "static func >= (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/packagedescription/version/comparable-implementations",
                        "title": "Comparable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/packagedescription/version/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/packagedescription/version/==(_:_:)",
                            "title": "static func == (Version, Version) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/packagedescription/version/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/init(extendedgraphemeclusterliteral:)",
                            "title": "init(extendedGraphemeClusterLiteral: String)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/packagedescription/version/init(unicodescalarliteral:)-4tmk2",
                            "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                            "type": "init"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/extendedgraphemeclusterliteraltype",
                            "title": "Version.ExtendedGraphemeClusterLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/version/expressiblebyextendedgraphemeclusterliteral-implementations",
                        "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/init(extendedgraphemeclusterliteral:)-2ra9s",
                            "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/packagedescription/version/init(stringliteral:)",
                            "title": "init(stringLiteral: String)",
                            "type": "init"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/stringliteraltype",
                            "title": "Version.StringLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/version/expressiblebystringliteral-implementations",
                        "title": "ExpressibleByStringLiteral Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/init(unicodescalarliteral:)",
                            "title": "init(unicodeScalarLiteral: String)",
                            "type": "init"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/unicodescalarliteraltype",
                            "title": "Version.UnicodeScalarLiteralType",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/packagedescription/version/expressiblebyunicodescalarliteral-implementations",
                        "title": "ExpressibleByUnicodeScalarLiteral Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/version/init(_:)",
                            "title": "init?(String)",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/packagedescription/version/losslessstringconvertible-implementations",
                        "title": "LosslessStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/packagedescription/version",
                    "title": "Version",
                    "type": "struct"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Structures",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/package/dependency/trait/condition-swift.struct/==(_:_:)",
                            "title": "static func == (Package.Dependency.Trait.Condition, Package.Dependency.Trait.Condition) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/package/dependency/trait/condition-swift.struct/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/package/dependency/trait/condition-swift.struct/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "title": "Type Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/package/dependency/trait/condition-swift.struct/when(traits:)",
                            "title": "static func when(traits: Set<String>) -> Package.Dependency.Trait.Condition?",
                            "type": "method"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/packagedescription/package/dependency/trait/condition-swift.struct/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/packagedescription/package/dependency/trait/condition-swift.struct/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/packagedescription/package/dependency/trait/condition-swift.struct",
                        "title": "Package.Dependency.Trait.Condition",
                        "type": "struct"
                      },
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/==(_:_:)",
                        "title": "static func == (Package.Dependency.Trait, Package.Dependency.Trait) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/init(name:condition:)",
                        "title": "init(name: String, condition: Package.Dependency.Trait.Condition?)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/init(stringliteral:)",
                        "title": "init(stringLiteral: StringLiteralType)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/condition-swift.property",
                        "title": "var condition: Package.Dependency.Trait.Condition?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/name",
                        "title": "var name: String",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/extendedgraphemeclusterliteraltype",
                        "title": "Package.Dependency.Trait.ExtendedGraphemeClusterLiteralType",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/stringliteraltype",
                        "title": "Package.Dependency.Trait.StringLiteralType",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/unicodescalarliteraltype",
                        "title": "Package.Dependency.Trait.UnicodeScalarLiteralType",
                        "type": "typealias"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/defaults",
                        "title": "static let defaults: Package.Dependency.Trait",
                        "type": "property"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/trait/trait(name:condition:)",
                        "title": "static func trait(name: String, condition: Package.Dependency.Trait.Condition?) -> Package.Dependency.Trait",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/package/dependency/trait/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/packagedescription/package/dependency/trait/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/package/dependency/trait/init(unicodescalarliteral:)",
                            "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/packagedescription/package/dependency/trait/expressiblebyextendedgraphemeclusterliteral-implementations",
                        "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/packagedescription/package/dependency/trait/init(extendedgraphemeclusterliteral:)",
                            "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/packagedescription/package/dependency/trait/expressiblebystringliteral-implementations",
                        "title": "ExpressibleByStringLiteral Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/packagedescription/package/dependency/trait",
                    "title": "Package.Dependency.Trait",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/name",
                    "title": "var name: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/traits",
                    "title": "let traits: Set<Package.Dependency.Trait>",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/url",
                    "title": "var url: String?",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(id:_:)-27raa",
                    "title": "static func package(id: String, Range<Version>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(id:_:)-6anr7",
                    "title": "static func package(id: String, ClosedRange<Version>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(id:_:traits:)-5rb8r",
                    "title": "static func package(id: String, Range<Version>, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(id:_:traits:)-5x94p",
                    "title": "static func package(id: String, ClosedRange<Version>, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(id:exact:)",
                    "title": "static func package(id: String, exact: Version) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(id:exact:traits:)",
                    "title": "static func package(id: String, exact: Version, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(id:from:)",
                    "title": "static func package(id: String, from: Version) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(id:from:traits:)",
                    "title": "static func package(id: String, from: Version, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(name:path:traits:)",
                    "title": "static func package(name: String, path: String, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/package(name:url:_:)-6k3na",
                    "title": "static func package(name: String?, url: String, Package.Dependency.Requirement) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/package(name:url:_:)-7zltl",
                    "title": "static func package(name: String, url: String, ClosedRange<Version>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/package(name:url:_:)-nqbk",
                    "title": "static func package(name: String, url: String, Range<Version>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/package(name:url:branch:)",
                    "title": "static func package(name: String, url: String, branch: String) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/package(name:url:from:)",
                    "title": "static func package(name: String, url: String, from: Version) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/package(name:url:revision:)",
                    "title": "static func package(name: String, url: String, revision: String) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(path:traits:)",
                    "title": "static func package(path: String, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/package/dependency/package(url:_:)-4tkwi",
                    "title": "static func package(url: String, Package.Dependency.Requirement) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:_:traits:)-5pt81",
                    "title": "static func package(url: String, Range<Version>, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:_:traits:)-mjzv",
                    "title": "static func package(url: String, ClosedRange<Version>, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:branch:traits:)",
                    "title": "static func package(url: String, branch: String, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:exact:traits:)",
                    "title": "static func package(url: String, exact: Version, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:from:traits:)",
                    "title": "static func package(url: String, from: Version, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/package/dependency/package(url:revision:traits:)",
                    "title": "static func package(url: String, revision: String, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                    "type": "method"
                  },
                  {
                    "title": "Enumerations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/kind-swift.enum/filesystem(name:path:)",
                        "title": "case fileSystem(name: String?, path: String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/kind-swift.enum/registry(id:requirement:)",
                        "title": "case registry(id: String, requirement: Package.Dependency.RegistryRequirement)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/kind-swift.enum/sourcecontrol(name:location:requirement:)",
                        "title": "case sourceControl(name: String?, location: String, requirement: Package.Dependency.SourceControlRequirement)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/packagedescription/package/dependency/kind-swift.enum",
                    "title": "Package.Dependency.Kind",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/registryrequirement/exact(_:)",
                        "title": "case exact(Version)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/registryrequirement/range(_:)",
                        "title": "case range(Range<Version>)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/packagedescription/package/dependency/registryrequirement",
                    "title": "Package.Dependency.RegistryRequirement",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/sourcecontrolrequirement/branch(_:)",
                        "title": "case branch(String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/sourcecontrolrequirement/exact(_:)",
                        "title": "case exact(Version)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/sourcecontrolrequirement/range(_:)",
                        "title": "case range(Range<Version>)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/packagedescription/package/dependency/sourcecontrolrequirement/revision(_:)",
                        "title": "case revision(String)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/packagedescription/package/dependency/sourcecontrolrequirement",
                    "title": "Package.Dependency.SourceControlRequirement",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/packagedescription/package/dependency",
                "title": "Package.Dependency",
                "type": "class"
              },
              {
                "title": "Declaring Supported Languages",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/packagedescription/swiftversion",
                "title": "SwiftVersion",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/c11",
                    "title": "case c11",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/c17",
                    "title": "case c17",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/c18",
                    "title": "case c18",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/c2x",
                    "title": "case c2x",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/c89",
                    "title": "case c89",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/c90",
                    "title": "case c90",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/c99",
                    "title": "case c99",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/gnu11",
                    "title": "case gnu11",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/gnu17",
                    "title": "case gnu17",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/gnu18",
                    "title": "case gnu18",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/gnu2x",
                    "title": "case gnu2x",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/gnu89",
                    "title": "case gnu89",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/gnu90",
                    "title": "case gnu90",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/gnu99",
                    "title": "case gnu99",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/iso9899_1990",
                    "title": "case iso9899_1990",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/iso9899_199409",
                    "title": "case iso9899_199409",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/iso9899_1999",
                    "title": "case iso9899_1999",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/iso9899_2011",
                    "title": "case iso9899_2011",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/iso9899_2017",
                    "title": "case iso9899_2017",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/iso9899_2018",
                    "title": "case iso9899_2018",
                    "type": "case"
                  },
                  {
                    "title": "Hashing",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Operator Functions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Creating a Value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the Raw Value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/clanguagestandard/rawvalue-swift.typealias",
                    "title": "CLanguageStandard.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/clanguagestandard/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/packagedescription/clanguagestandard/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/clanguagestandard/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/clanguagestandard/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/packagedescription/clanguagestandard/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/packagedescription/clanguagestandard",
                "title": "CLanguageStandard",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/cxx03",
                    "title": "case cxx03",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/cxx11",
                    "title": "case cxx11",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/cxx14",
                    "title": "case cxx14",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/cxxlanguagestandard/cxx1z",
                    "title": "case cxx1z",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/cxx98",
                    "title": "case cxx98",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/gnucxx03",
                    "title": "case gnucxx03",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/gnucxx11",
                    "title": "case gnucxx11",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/gnucxx14",
                    "title": "case gnucxx14",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/packagedescription/cxxlanguagestandard/gnucxx1z",
                    "title": "case gnucxx1z",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/gnucxx98",
                    "title": "case gnucxx98",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/cxx17",
                    "title": "case cxx17",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/cxx20",
                    "title": "case cxx20",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/cxx2b",
                    "title": "case cxx2b",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/gnucxx17",
                    "title": "case gnucxx17",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/gnucxx20",
                    "title": "case gnucxx20",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/gnucxx2b",
                    "title": "case gnucxx2b",
                    "type": "case"
                  },
                  {
                    "title": "Hashing",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Operator Functions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Creating a Value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the Raw Value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/packagedescription/cxxlanguagestandard/rawvalue-swift.typealias",
                    "title": "CXXLanguageStandard.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/cxxlanguagestandard/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/packagedescription/cxxlanguagestandard/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/cxxlanguagestandard/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/packagedescription/cxxlanguagestandard/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/packagedescription/cxxlanguagestandard/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/packagedescription/cxxlanguagestandard",
                "title": "CXXLanguageStandard",
                "type": "enum"
              },
              {
                "deprecated": true,
                "path": "/documentation/packagedescription/package/swiftlanguageversions",
                "title": "var swiftLanguageVersions: [SwiftVersion]?",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/package/clanguagestandard",
                "title": "var cLanguageStandard: CLanguageStandard?",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/package/cxxlanguagestandard",
                "title": "var cxxLanguageStandard: CXXLanguageStandard?",
                "type": "property"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/package/init(name:defaultlocalization:platforms:pkgconfig:providers:products:dependencies:targets:swiftlanguagemodes:clanguagestandard:cxxlanguagestandard:)",
                "title": "init(name: String, defaultLocalization: LanguageTag?, platforms: [SupportedPlatform]?, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageModes: [SwiftLanguageMode]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                "type": "init"
              },
              {
                "path": "/documentation/packagedescription/package/init(name:defaultlocalization:platforms:pkgconfig:providers:products:traits:dependencies:targets:swiftlanguagemodes:clanguagestandard:cxxlanguagestandard:)",
                "title": "init(name: String, defaultLocalization: LanguageTag?, platforms: [SupportedPlatform]?, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], traits: Set<Trait>, dependencies: [Package.Dependency], targets: [Target], swiftLanguageModes: [SwiftLanguageMode]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                "type": "init"
              },
              {
                "path": "/documentation/packagedescription/package/init(name:pkgconfig:providers:products:dependencies:targets:swiftlanguageversions:clanguagestandard:cxxlanguagestandard:)-767rj",
                "title": "init(name: String, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageVersions: [SwiftVersion]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                "type": "init"
              },
              {
                "path": "/documentation/packagedescription/package/init(name:pkgconfig:providers:products:dependencies:targets:swiftlanguageversions:clanguagestandard:cxxlanguagestandard:)-7ld3y",
                "title": "init(name: String, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageVersions: [Int]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                "type": "init"
              },
              {
                "path": "/documentation/packagedescription/package/init(name:platforms:pkgconfig:providers:products:dependencies:targets:swiftlanguageversions:clanguagestandard:cxxlanguagestandard:)",
                "title": "init(name: String, platforms: [SupportedPlatform]?, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageVersions: [SwiftVersion]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/package/swiftlanguagemodes",
                "title": "var swiftLanguageModes: [SwiftLanguageMode]?",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/package/traits",
                "title": "var traits: Set<Trait>",
                "type": "property"
              }
            ],
            "path": "/documentation/packagedescription/package",
            "title": "Package",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/context/environment",
                "title": "static var environment: [String : String]",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/context/gitinformation",
                "title": "static var gitInformation: GitInformation?",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/context/packagedirectory",
                "title": "static var packageDirectory: String",
                "type": "property"
              }
            ],
            "path": "/documentation/packagedescription/context",
            "title": "Context",
            "type": "struct"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/gitinformation/currentcommit",
                "title": "let currentCommit: String",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/gitinformation/currenttag",
                "title": "let currentTag: String?",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/gitinformation/hasuncommittedchanges",
                "title": "let hasUncommittedChanges: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/packagedescription/gitinformation",
            "title": "GitInformation",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/trait/==(_:_:)",
                "title": "static func == (Trait, Trait) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/trait/init(name:description:enabledtraits:)",
                "title": "init(name: String, description: String?, enabledTraits: Set<String>)",
                "type": "init"
              },
              {
                "path": "/documentation/packagedescription/trait/init(stringliteral:)",
                "title": "init(stringLiteral: StringLiteralType)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/trait/description",
                "title": "var description: String?",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/trait/enabledtraits",
                "title": "var enabledTraits: Set<String>",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/trait/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/trait/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/trait/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/trait/extendedgraphemeclusterliteraltype",
                "title": "Trait.ExtendedGraphemeClusterLiteralType",
                "type": "typealias"
              },
              {
                "path": "/documentation/packagedescription/trait/stringliteraltype",
                "title": "Trait.StringLiteralType",
                "type": "typealias"
              },
              {
                "path": "/documentation/packagedescription/trait/unicodescalarliteraltype",
                "title": "Trait.UnicodeScalarLiteralType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/trait/default(enabledtraits:)",
                "title": "static func `default`(enabledTraits: Set<String>) -> Trait",
                "type": "method"
              },
              {
                "path": "/documentation/packagedescription/trait/trait(name:description:enabledtraits:)",
                "title": "static func trait(name: String, description: String?, enabledTraits: Set<String>) -> Trait",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/trait/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/packagedescription/trait/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/trait/init(unicodescalarliteral:)",
                    "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/packagedescription/trait/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/trait/init(extendedgraphemeclusterliteral:)",
                    "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/packagedescription/trait/expressiblebystringliteral-implementations",
                "title": "ExpressibleByStringLiteral Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/packagedescription/trait",
            "title": "Trait",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/version/init(_:_:_:prereleaseidentifiers:buildmetadataidentifiers:)",
                "title": "init(Int, Int, Int, prereleaseIdentifiers: [String], buildMetadataIdentifiers: [String])",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/version/buildmetadataidentifiers",
                "title": "let buildMetadataIdentifiers: [String]",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/version/major",
                "title": "let major: Int",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/version/minor",
                "title": "let minor: Int",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/version/patch",
                "title": "let patch: Int",
                "type": "property"
              },
              {
                "path": "/documentation/packagedescription/version/prereleaseidentifiers",
                "title": "let prereleaseIdentifiers: [String]",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/'...(_:)-69iyk",
                    "title": "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/'...(_:)-9ansa",
                    "title": "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/'...(_:_:)",
                    "title": "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/'.._(_:)",
                    "title": "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/'.._(_:_:)",
                    "title": "static func ..< (Self, Self) -> Range<Self>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/_(_:_:)",
                    "title": "static func < (Version, Version) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/_(_:_:)-6qwjc",
                    "title": "static func > (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/_=(_:_:)-2r3us",
                    "title": "static func <= (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/_=(_:_:)-7n9wi",
                    "title": "static func >= (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/packagedescription/version/comparable-implementations",
                "title": "Comparable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/packagedescription/version/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/packagedescription/version/==(_:_:)",
                    "title": "static func == (Version, Version) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/packagedescription/version/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/init(extendedgraphemeclusterliteral:)",
                    "title": "init(extendedGraphemeClusterLiteral: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/packagedescription/version/init(unicodescalarliteral:)-4tmk2",
                    "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                    "type": "init"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/extendedgraphemeclusterliteraltype",
                    "title": "Version.ExtendedGraphemeClusterLiteralType",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/packagedescription/version/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/init(extendedgraphemeclusterliteral:)-2ra9s",
                    "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/packagedescription/version/init(stringliteral:)",
                    "title": "init(stringLiteral: String)",
                    "type": "init"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/stringliteraltype",
                    "title": "Version.StringLiteralType",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/packagedescription/version/expressiblebystringliteral-implementations",
                "title": "ExpressibleByStringLiteral Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/init(unicodescalarliteral:)",
                    "title": "init(unicodeScalarLiteral: String)",
                    "type": "init"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/unicodescalarliteraltype",
                    "title": "Version.UnicodeScalarLiteralType",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/packagedescription/version/expressiblebyunicodescalarliteral-implementations",
                "title": "ExpressibleByUnicodeScalarLiteral Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/version/init(_:)",
                    "title": "init?(String)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/packagedescription/version/losslessstringconvertible-implementations",
                "title": "LosslessStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/packagedescription/version",
            "title": "Version",
            "type": "struct"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/packagedescription/swiftlanguagemode/v3",
                "title": "case v3",
                "type": "case"
              },
              {
                "path": "/documentation/packagedescription/swiftlanguagemode/v4",
                "title": "case v4",
                "type": "case"
              },
              {
                "path": "/documentation/packagedescription/swiftlanguagemode/v4_2",
                "title": "case v4_2",
                "type": "case"
              },
              {
                "path": "/documentation/packagedescription/swiftlanguagemode/v5",
                "title": "case v5",
                "type": "case"
              },
              {
                "path": "/documentation/packagedescription/swiftlanguagemode/v6",
                "title": "case v6",
                "type": "case"
              },
              {
                "path": "/documentation/packagedescription/swiftlanguagemode/version(_:)",
                "title": "case version(String)",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/packagedescription/swiftlanguagemode/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/packagedescription/swiftlanguagemode/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/packagedescription/swiftlanguagemode",
            "title": "SwiftLanguageMode",
            "type": "enum"
          }
        ],
        "path": "/documentation/packagedescription",
        "title": "PackageDescription",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
