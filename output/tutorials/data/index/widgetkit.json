{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/developing-a-widgetkit-strategy",
            "title": "Developing a WidgetKit strategy",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/updates/widgetkit",
            "title": "WidgetKit updates",
            "type": "article"
          },
          {
            "title": "Widget creation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-a-widget-extension",
            "title": "Creating a widget extension",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/supporting-additional-widget-sizes",
            "title": "Supporting additional widget sizes",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/creating-accessory-widgets-and-watch-complications",
            "title": "Creating accessory widgets and watch complications",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/converting-a-clockkit-app",
            "title": "Migrating ClockKit complications to WidgetKit",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/emoji-rangers-supporting-live-activities-interactivity-and-animations",
            "title": "Emoji Rangers: Supporting Live Activities, interactivity, and animations",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/backyard-birds-sample",
            "title": "Backyard Birds: Building an app with SwiftData and widgets",
            "type": "sampleCode"
          },
          {
            "title": "Presentation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-views-for-widgets-live-activities-and-watch-complications",
            "title": "Creating views for widgets, Live Activities, and watch complications",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/preparing-widgets-for-additional-contexts-and-appearances",
            "title": "Preparing widgets for additional platforms, contexts, and appearances",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Displaying text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/displaying-dynamic-dates",
                "title": "Displaying dynamic dates in widgets",
                "type": "article"
              },
              {
                "title": "Showing images",
                "type": "groupMarker"
              },
              {
                "title": "Adding interaction",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/adding-interactivity-to-widgets-and-live-activities",
                "title": "Adding interactivity to widgets and Live Activities",
                "type": "article"
              },
              {
                "title": "Adding labels and links",
                "type": "groupMarker"
              },
              {
                "title": "Stacking views",
                "type": "groupMarker"
              },
              {
                "title": "Arranging views in grids",
                "type": "groupMarker"
              },
              {
                "title": "Enumerating lists",
                "type": "groupMarker"
              },
              {
                "title": "Grouping views",
                "type": "groupMarker"
              },
              {
                "title": "Representing hierarchies",
                "type": "groupMarker"
              },
              {
                "title": "Adding spacers and dividers",
                "type": "groupMarker"
              },
              {
                "title": "Handling conditional views",
                "type": "groupMarker"
              },
              {
                "title": "Displaying shapes",
                "type": "groupMarker"
              },
              {
                "title": "Transforming views",
                "type": "groupMarker"
              },
              {
                "title": "Styling views",
                "type": "groupMarker"
              },
              {
                "title": "Creating 2D graphics",
                "type": "groupMarker"
              },
              {
                "title": "Managing view geometry",
                "type": "groupMarker"
              },
              {
                "title": "Substituting views",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/widgetkit/swiftui-views",
            "title": "SwiftUI views for widgets",
            "type": "collection"
          },
          {
            "external": true,
            "path": "/tutorials/swiftui",
            "title": "Introducing SwiftUI",
            "type": "overview"
          },
          {
            "title": "Interactivity",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/adding-interactivity-to-widgets-and-live-activities",
            "title": "Adding interactivity to widgets and Live Activities",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/animating-data-updates-in-widgets-and-live-activities",
            "title": "Animating data updates in widgets and Live Activities",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/linking-to-specific-app-scenes-from-your-widget-or-live-activity",
            "title": "Linking to specific app scenes from your widget or Live Activity",
            "type": "article"
          },
          {
            "title": "Configurable widgets",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/making-a-configurable-widget",
            "title": "Making a configurable widget",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/migrating-from-sirikit-intents-to-app-intents",
            "title": "Migrating widgets from SiriKit Intents to App Intents",
            "type": "article"
          },
          {
            "title": "Timeline management",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/keeping-a-widget-up-to-date",
            "title": "Keeping a widget up to date",
            "type": "article"
          },
          {
            "title": "Accessibility",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/activitykit/adding-accessible-descriptions-to-widgets-and-live-activities",
            "title": "Adding accessible descriptions to widgets and Live Activities",
            "type": "article"
          },
          {
            "title": "Location services in widgets",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/accessing-location-information-in-widgets",
            "title": "Accessing location information in widgets",
            "type": "article"
          },
          {
            "title": "Networking",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/making-network-requests-in-a-widget-extension",
            "title": "Making network requests in a widget extension",
            "type": "article"
          },
          {
            "title": "Smart Stacks",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/widget-suggestions-in-smart-stacks",
            "title": "Increasing the visibility of widgets in Smart Stacks",
            "type": "article"
          },
          {
            "title": "Widget preview and debugging",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/previewing-widgets-and-live-activities-in-xcode",
            "title": "Previewing widgets and Live Activities in Xcode",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/debugging-widgets",
            "title": "Debugging Widgets",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Providing a widget preview",
                "type": "groupMarker"
              },
              {
                "title": "Generating a Live Activity preview",
                "type": "groupMarker"
              },
              {
                "title": "Generated structures",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/widgetkit/preview-macros",
            "title": "Preview macros",
            "type": "collection"
          },
          {
            "title": "Live Activities",
            "type": "groupMarker"
          },
          {
            "title": "Controls",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-controls-to-perform-actions-across-the-system",
            "title": "Creating controls to perform actions across the system",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/adding-refinements-and-configuration-to-controls",
            "title": "Adding refinements and configuration to controls",
            "type": "article"
          },
          {
            "title": "Control values and previews",
            "type": "groupMarker"
          },
          {
            "title": "Control configuration",
            "type": "groupMarker"
          },
          {
            "title": "Control updates",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/updating-controls-locally-and-remotely",
            "title": "Updating controls locally and remotely",
            "type": "article"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/widgetkit",
        "title": "WidgetKit",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/developing-a-widgetkit-strategy",
            "title": "Developing a WidgetKit strategy",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/updates/widgetkit",
            "title": "WidgetKit updates",
            "type": "article"
          },
          {
            "title": "Widget creation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-a-widget-extension",
            "title": "Creating a widget extension",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/supporting-additional-widget-sizes",
            "title": "Supporting additional widget sizes",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/creating-accessory-widgets-and-watch-complications",
            "title": "Creating accessory widgets and watch complications",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/converting-a-clockkit-app",
            "title": "Migrating ClockKit complications to WidgetKit",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/emoji-rangers-supporting-live-activities-interactivity-and-animations",
            "title": "Emoji Rangers: Supporting Live Activities, interactivity, and animations",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/backyard-birds-sample",
            "title": "Backyard Birds: Building an app with SwiftData and widgets",
            "type": "sampleCode"
          },
          {
            "title": "Presentation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-views-for-widgets-live-activities-and-watch-complications",
            "title": "Creating views for widgets, Live Activities, and watch complications",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/preparing-widgets-for-additional-contexts-and-appearances",
            "title": "Preparing widgets for additional platforms, contexts, and appearances",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Displaying text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/displaying-dynamic-dates",
                "title": "Displaying dynamic dates in widgets",
                "type": "article"
              },
              {
                "title": "Showing images",
                "type": "groupMarker"
              },
              {
                "title": "Adding interaction",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/adding-interactivity-to-widgets-and-live-activities",
                "title": "Adding interactivity to widgets and Live Activities",
                "type": "article"
              },
              {
                "title": "Adding labels and links",
                "type": "groupMarker"
              },
              {
                "title": "Stacking views",
                "type": "groupMarker"
              },
              {
                "title": "Arranging views in grids",
                "type": "groupMarker"
              },
              {
                "title": "Enumerating lists",
                "type": "groupMarker"
              },
              {
                "title": "Grouping views",
                "type": "groupMarker"
              },
              {
                "title": "Representing hierarchies",
                "type": "groupMarker"
              },
              {
                "title": "Adding spacers and dividers",
                "type": "groupMarker"
              },
              {
                "title": "Handling conditional views",
                "type": "groupMarker"
              },
              {
                "title": "Displaying shapes",
                "type": "groupMarker"
              },
              {
                "title": "Transforming views",
                "type": "groupMarker"
              },
              {
                "title": "Styling views",
                "type": "groupMarker"
              },
              {
                "title": "Creating 2D graphics",
                "type": "groupMarker"
              },
              {
                "title": "Managing view geometry",
                "type": "groupMarker"
              },
              {
                "title": "Substituting views",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/widgetkit/swiftui-views",
            "title": "SwiftUI views for widgets",
            "type": "collection"
          },
          {
            "external": true,
            "path": "/tutorials/swiftui",
            "title": "Introducing SwiftUI",
            "type": "overview"
          },
          {
            "title": "Interactivity",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/adding-interactivity-to-widgets-and-live-activities",
            "title": "Adding interactivity to widgets and Live Activities",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/animating-data-updates-in-widgets-and-live-activities",
            "title": "Animating data updates in widgets and Live Activities",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/linking-to-specific-app-scenes-from-your-widget-or-live-activity",
            "title": "Linking to specific app scenes from your widget or Live Activity",
            "type": "article"
          },
          {
            "title": "Configurable widgets",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/making-a-configurable-widget",
            "title": "Making a configurable widget",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/migrating-from-sirikit-intents-to-app-intents",
            "title": "Migrating widgets from SiriKit Intents to App Intents",
            "type": "article"
          },
          {
            "title": "Timeline management",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/keeping-a-widget-up-to-date",
            "title": "Keeping a widget up to date",
            "type": "article"
          },
          {
            "title": "Accessibility",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/activitykit/adding-accessible-descriptions-to-widgets-and-live-activities",
            "title": "Adding accessible descriptions to widgets and Live Activities",
            "type": "article"
          },
          {
            "title": "Location services in widgets",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/accessing-location-information-in-widgets",
            "title": "Accessing location information in widgets",
            "type": "article"
          },
          {
            "title": "Networking",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/making-network-requests-in-a-widget-extension",
            "title": "Making network requests in a widget extension",
            "type": "article"
          },
          {
            "title": "Smart Stacks",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/widget-suggestions-in-smart-stacks",
            "title": "Increasing the visibility of widgets in Smart Stacks",
            "type": "article"
          },
          {
            "title": "Widget preview and debugging",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/previewing-widgets-and-live-activities-in-xcode",
            "title": "Previewing widgets and Live Activities in Xcode",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/debugging-widgets",
            "title": "Debugging Widgets",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Providing a widget preview",
                "type": "groupMarker"
              },
              {
                "title": "Generating a Live Activity preview",
                "type": "groupMarker"
              },
              {
                "title": "Generated structures",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/widgetkit/preview-macros",
            "title": "Preview macros",
            "type": "collection"
          },
          {
            "title": "Live Activities",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/nsuseractivitytypeliveactivity",
            "title": "NSUserActivityTypeLiveActivity",
            "type": "var"
          },
          {
            "title": "Controls",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-controls-to-perform-actions-across-the-system",
            "title": "Creating controls to perform actions across the system",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/adding-refinements-and-configuration-to-controls",
            "title": "Adding refinements and configuration to controls",
            "type": "article"
          },
          {
            "title": "Control values and previews",
            "type": "groupMarker"
          },
          {
            "title": "Control configuration",
            "type": "groupMarker"
          },
          {
            "title": "Control updates",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/updating-controls-locally-and-remotely",
            "title": "Updating controls locally and remotely",
            "type": "article"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/widgetkit",
        "title": "WidgetKit",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/developing-a-widgetkit-strategy",
            "title": "Developing a WidgetKit strategy",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/updates/widgetkit",
            "title": "WidgetKit updates",
            "type": "article"
          },
          {
            "title": "Widget creation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-a-widget-extension",
            "title": "Creating a widget extension",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/supporting-additional-widget-sizes",
            "title": "Supporting additional widget sizes",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/creating-accessory-widgets-and-watch-complications",
            "title": "Creating accessory widgets and watch complications",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/converting-a-clockkit-app",
            "title": "Migrating ClockKit complications to WidgetKit",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/building_widgets_using_widgetkit_and_swiftui",
            "title": "Building Widgets Using WidgetKit and SwiftUI",
            "type": "sampleCode"
          },
          {
            "path": "/documentation/widgetkit/emoji-rangers-supporting-live-activities-interactivity-and-animations",
            "title": "Emoji Rangers: Supporting Live Activities, interactivity, and animations",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/backyard-birds-sample",
            "title": "Backyard Birds: Building an app with SwiftData and widgets",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/appclip/fruta_building_a_feature-rich_app_with_swiftui",
            "title": "Fruta: Building a Feature-Rich App with SwiftUI",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/widget",
            "title": "Widget",
            "type": "protocol"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/widgetbundle",
            "title": "WidgetBundle",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a widget configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/staticconfiguration/init(kind:provider:content:)",
                "title": "init<Provider>(kind: String, provider: Provider, content: (Provider.Entry) -> Content)",
                "type": "init"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/body-swift.property",
                "title": "var body: Self.Body",
                "type": "property"
              },
              {
                "title": "Setting the display name",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-2c3zv",
                "title": "func configurationDisplayName<S>(S) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-3sbn4",
                "title": "func configurationDisplayName(Text) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-4v9q",
                "title": "func configurationDisplayName(LocalizedStringKey) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Setting the description",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-1bvuj",
                "title": "func description(Text) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-2bfr",
                "title": "func description<S>(S) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-4q9pa",
                "title": "func description(LocalizedStringKey) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Setting the supported families",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/supportedfamilies(_:)",
                "title": "func supportedFamilies([WidgetFamily]) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/supplementalactivityfamilies(_:)",
                "title": "func supplementalActivityFamilies([ActivityFamily]) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Handling background network requests",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/backgroundtask(_:action:)",
                "title": "func backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)-2e152",
                "title": "func onBackgroundURLSessionEvents(matching: ((String) -> Bool)?, (String, () -> Void) -> Void) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)-fw6x",
                "title": "func onBackgroundURLSessionEvents(matching: String, (String, () -> Void) -> Void) -> some WidgetConfiguration",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/staticconfiguration",
            "title": "StaticConfiguration",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Accessing system families",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetfamily/systemsmall",
                "title": "case systemSmall",
                "type": "case"
              },
              {
                "path": "/documentation/widgetkit/widgetfamily/systemmedium",
                "title": "case systemMedium",
                "type": "case"
              },
              {
                "path": "/documentation/widgetkit/widgetfamily/systemlarge",
                "title": "case systemLarge",
                "type": "case"
              },
              {
                "path": "/documentation/widgetkit/widgetfamily/systemextralarge",
                "title": "case systemExtraLarge",
                "type": "case"
              },
              {
                "title": "Accessing accessory families",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetfamily/accessorycircular",
                "title": "case accessoryCircular",
                "type": "case"
              },
              {
                "path": "/documentation/widgetkit/widgetfamily/accessorycorner",
                "title": "case accessoryCorner",
                "type": "case"
              },
              {
                "path": "/documentation/widgetkit/widgetfamily/accessoryrectangular",
                "title": "case accessoryRectangular",
                "type": "case"
              },
              {
                "path": "/documentation/widgetkit/widgetfamily/accessoryinline",
                "title": "case accessoryInline",
                "type": "case"
              }
            ],
            "path": "/documentation/widgetkit/widgetfamily",
            "title": "WidgetFamily",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Rendering modes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetrenderingmode/fullcolor",
                "title": "static let fullColor: WidgetRenderingMode",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetrenderingmode/accented",
                "title": "static let accented: WidgetRenderingMode",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetrenderingmode/vibrant",
                "title": "static let vibrant: WidgetRenderingMode",
                "type": "property"
              }
            ],
            "path": "/documentation/widgetkit/widgetrenderingmode",
            "title": "WidgetRenderingMode",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetaccentedrenderingmode/accented",
                "title": "static let accented: WidgetAccentedRenderingMode",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetaccentedrenderingmode/accenteddesaturated",
                "title": "static let accentedDesaturated: WidgetAccentedRenderingMode",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetaccentedrenderingmode/desaturated",
                "title": "static let desaturated: WidgetAccentedRenderingMode",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetaccentedrenderingmode/fullcolor",
                "title": "static let fullColor: WidgetAccentedRenderingMode",
                "type": "property"
              }
            ],
            "path": "/documentation/widgetkit/widgetaccentedrenderingmode",
            "title": "WidgetAccentedRenderingMode",
            "type": "struct"
          },
          {
            "title": "Presentation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-views-for-widgets-live-activities-and-watch-complications",
            "title": "Creating views for widgets, Live Activities, and watch complications",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/preparing-widgets-for-additional-contexts-and-appearances",
            "title": "Preparing widgets for additional platforms, contexts, and appearances",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Displaying text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/displaying-dynamic-dates",
                "title": "Displaying dynamic dates in widgets",
                "type": "article"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/text",
                "title": "Text",
                "type": "struct"
              },
              {
                "title": "Showing images",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/image",
                "title": "Image",
                "type": "struct"
              },
              {
                "title": "Adding interaction",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/adding-interactivity-to-widgets-and-live-activities",
                "title": "Adding interactivity to widgets and Live Activities",
                "type": "article"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/button",
                "title": "Button",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/toggle",
                "title": "Toggle",
                "type": "struct"
              },
              {
                "title": "Adding labels and links",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/label",
                "title": "Label",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/link",
                "title": "Link",
                "type": "struct"
              },
              {
                "title": "Stacking views",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/hstack",
                "title": "HStack",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/vstack",
                "title": "VStack",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/zstack",
                "title": "ZStack",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/lazyhstack",
                "title": "LazyHStack",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/lazyvstack",
                "title": "LazyVStack",
                "type": "struct"
              },
              {
                "title": "Arranging views in grids",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/lazyhgrid",
                "title": "LazyHGrid",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/lazyvgrid",
                "title": "LazyVGrid",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/griditem",
                "title": "GridItem",
                "type": "struct"
              },
              {
                "title": "Enumerating lists",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/foreach",
                "title": "ForEach",
                "type": "struct"
              },
              {
                "title": "Grouping views",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/group",
                "title": "Group",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/groupbox",
                "title": "GroupBox",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/section",
                "title": "Section",
                "type": "struct"
              },
              {
                "title": "Representing hierarchies",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/outlinegroup",
                "title": "OutlineGroup",
                "type": "struct"
              },
              {
                "title": "Adding spacers and dividers",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/spacer",
                "title": "Spacer",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/divider",
                "title": "Divider",
                "type": "struct"
              },
              {
                "title": "Handling conditional views",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/emptyview",
                "title": "EmptyView",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/equatableview",
                "title": "EquatableView",
                "type": "struct"
              },
              {
                "title": "Displaying shapes",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/rectangle",
                "title": "Rectangle",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/roundedrectangle",
                "title": "RoundedRectangle",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/circle",
                "title": "Circle",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/ellipse",
                "title": "Ellipse",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/capsule",
                "title": "Capsule",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/path",
                "title": "Path",
                "type": "struct"
              },
              {
                "title": "Transforming views",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/scaledshape",
                "title": "ScaledShape",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/rotatedshape",
                "title": "RotatedShape",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/offsetshape",
                "title": "OffsetShape",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/transformedshape",
                "title": "TransformedShape",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/containerrelativeshape",
                "title": "ContainerRelativeShape",
                "type": "struct"
              },
              {
                "title": "Styling views",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/color",
                "title": "Color",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/imagepaint",
                "title": "ImagePaint",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/gradient",
                "title": "Gradient",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/lineargradient",
                "title": "LinearGradient",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/angulargradient",
                "title": "AngularGradient",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/radialgradient",
                "title": "RadialGradient",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/foregroundstyle",
                "title": "ForegroundStyle",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/fillstyle",
                "title": "FillStyle",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/backgroundstyle",
                "title": "BackgroundStyle",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/selectionshapestyle",
                "title": "SelectionShapeStyle",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/separatorshapestyle",
                "title": "SeparatorShapeStyle",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/strokestyle",
                "title": "StrokeStyle",
                "type": "struct"
              },
              {
                "title": "Creating 2D graphics",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/canvas",
                "title": "Canvas",
                "type": "struct"
              },
              {
                "title": "Managing view geometry",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/geometryproxy",
                "title": "GeometryProxy",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/geometryreader",
                "title": "GeometryReader",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/projectiontransform",
                "title": "ProjectionTransform",
                "type": "struct"
              },
              {
                "title": "Substituting views",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/anyview",
                "title": "AnyView",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/tupleview",
                "title": "TupleView",
                "type": "struct"
              }
            ],
            "path": "/documentation/widgetkit/swiftui-views",
            "title": "SwiftUI views for widgets",
            "type": "collection"
          },
          {
            "external": true,
            "path": "/tutorials/swiftui",
            "title": "Introducing SwiftUI",
            "type": "overview"
          },
          {
            "children": [
              {
                "title": "Creating accessory widget backgrounds",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetbackground/init()",
                "title": "init()",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/accessorywidgetbackground",
            "title": "AccessoryWidgetBackground",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Specifying a location style",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetlocation/iphonewidgetsonmac",
                "title": "static let iPhoneWidgetsOnMac: WidgetLocation",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetlocation/homescreen",
                "title": "static let homeScreen: WidgetLocation",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetlocation/lockscreen",
                "title": "static let lockScreen: WidgetLocation",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetlocation/standby",
                "title": "static let standBy: WidgetLocation",
                "type": "property"
              }
            ],
            "path": "/documentation/widgetkit/widgetlocation",
            "title": "WidgetLocation",
            "type": "struct"
          },
          {
            "title": "Interactivity",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/adding-interactivity-to-widgets-and-live-activities",
            "title": "Adding interactivity to widgets and Live Activities",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/animating-data-updates-in-widgets-and-live-activities",
            "title": "Animating data updates in widgets and Live Activities",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/linking-to-specific-app-scenes-from-your-widget-or-live-activity",
            "title": "Linking to specific app scenes from your widget or Live Activity",
            "type": "article"
          },
          {
            "title": "Configurable widgets",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/making-a-configurable-widget",
            "title": "Making a configurable widget",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/migrating-from-sirikit-intents-to-app-intents",
            "title": "Migrating widgets from SiriKit Intents to App Intents",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Creating a widget configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/appintentconfiguration/init(kind:intent:provider:content:)",
                "title": "init<Provider>(kind: String, intent: Intent.Type, provider: Provider, content: (Provider.Entry) -> Content)",
                "type": "init"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/body-swift.property",
                "title": "var body: Self.Body",
                "type": "property"
              },
              {
                "title": "Setting the display name",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-2c3zv",
                "title": "func configurationDisplayName<S>(S) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-3sbn4",
                "title": "func configurationDisplayName(Text) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-4v9q",
                "title": "func configurationDisplayName(LocalizedStringKey) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Setting the description",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-1bvuj",
                "title": "func description(Text) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-2bfr",
                "title": "func description<S>(S) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-4q9pa",
                "title": "func description(LocalizedStringKey) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Setting the supported families",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/supportedfamilies(_:)",
                "title": "func supportedFamilies([WidgetFamily]) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Handling background network requests",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/backgroundtask(_:action:)",
                "title": "func backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)-2e152",
                "title": "func onBackgroundURLSessionEvents(matching: ((String) -> Bool)?, (String, () -> Void) -> Void) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)-fw6x",
                "title": "func onBackgroundURLSessionEvents(matching: String, (String, () -> Void) -> Void) -> some WidgetConfiguration",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/appintentconfiguration",
            "title": "AppIntentConfiguration",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting Configured Widget Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetinfo/kind",
                "title": "let kind: String",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetinfo/family",
                "title": "let family: WidgetFamily",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetinfo/configuration",
                "title": "let configuration: INIntent?",
                "type": "property"
              },
              {
                "title": "Identifying Widget Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetinfo/id",
                "title": "var id: WidgetInfo",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetinfo/widgetconfigurationintent(of:)",
                "title": "func widgetConfigurationIntent<Intent>(of: Intent.Type) -> Intent?",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/widgetinfo/id",
                    "title": "var id: WidgetInfo",
                    "type": "property"
                  }
                ],
                "path": "/documentation/widgetkit/widgetinfo/identifiable-implementations",
                "title": "Identifiable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/widgetkit/widgetinfo",
            "title": "WidgetInfo",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a recommended widget configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/appintentrecommendation/init(intent:description:)-2p4dh",
                "title": "init(intent: Intent, description: LocalizedStringKey)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/appintentrecommendation/init(intent:description:)-65igj",
                "title": "init(intent: Intent, description: Text)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/appintentrecommendation/init(intent:description:)-7zn32",
                "title": "init(intent: Intent, description: some StringProtocol)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/appintentrecommendation",
            "title": "AppIntentRecommendation",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a widget configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/intentconfiguration/init(kind:intent:provider:content:)",
                "title": "init<Provider>(kind: String, intent: Intent.Type, provider: Provider, content: (Provider.Entry) -> Content)",
                "type": "init"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/body-swift.property",
                "title": "var body: Self.Body",
                "type": "property"
              },
              {
                "title": "Setting the display name",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-2c3zv",
                "title": "func configurationDisplayName<S>(S) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-3sbn4",
                "title": "func configurationDisplayName(Text) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)-4v9q",
                "title": "func configurationDisplayName(LocalizedStringKey) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Setting the description",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-1bvuj",
                "title": "func description(Text) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-2bfr",
                "title": "func description<S>(S) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/description(_:)-4q9pa",
                "title": "func description(LocalizedStringKey) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Setting the supported families",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/supportedfamilies(_:)",
                "title": "func supportedFamilies([WidgetFamily]) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "title": "Handling background network requests",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/backgroundtask(_:action:)",
                "title": "func backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)-2e152",
                "title": "func onBackgroundURLSessionEvents(matching: ((String) -> Bool)?, (String, () -> Void) -> Void) -> some WidgetConfiguration",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)-fw6x",
                "title": "func onBackgroundURLSessionEvents(matching: String, (String, () -> Void) -> Void) -> some WidgetConfiguration",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/intentconfiguration",
            "title": "IntentConfiguration",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a Recommended Widget Configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/intentrecommendation/init(intent:description:)-1zh33",
                "title": "init(intent: T, description: LocalizedStringKey)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/intentrecommendation/init(intent:description:)-4epo2",
                "title": "init(intent: T, description: Text)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/intentrecommendation/init(intent:description:)-6v7dj",
                "title": "init<S>(intent: T, description: S)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/intentrecommendation",
            "title": "IntentRecommendation",
            "type": "struct"
          },
          {
            "title": "Timeline management",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/keeping-a-widget-up-to-date",
            "title": "Keeping a widget up to date",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Generating Timelines",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timelineprovider/getsnapshot(in:completion:)",
                "title": "func getSnapshot(in: Self.Context, completion: (Self.Entry) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/timelineprovider/gettimeline(in:completion:)",
                "title": "func getTimeline(in: Self.Context, completion: (Timeline<Self.Entry>) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/timelineprovider/placeholder(in:)",
                "title": "func placeholder(in: Self.Context) -> Self.Entry",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/timelineprovider/entry",
                "title": "Entry",
                "type": "associatedtype"
              },
              {
                "path": "/documentation/widgetkit/timelineprovider/context",
                "title": "TimelineProvider.Context",
                "type": "typealias"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timelineprovider/relevance()",
                "title": "func relevance() async -> WidgetRelevance<Void>",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/timelineprovider",
            "title": "TimelineProvider",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Generating Timelines",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/intenttimelineprovider/getsnapshot(for:in:completion:)",
                "title": "func getSnapshot(for: Self.Intent, in: Self.Context, completion: (Self.Entry) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/intenttimelineprovider/gettimeline(for:in:completion:)",
                "title": "func getTimeline(for: Self.Intent, in: Self.Context, completion: (Timeline<Self.Entry>) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/intenttimelineprovider/placeholder(in:)",
                "title": "func placeholder(in: Self.Context) -> Self.Entry",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/intenttimelineprovider/entry",
                "title": "Entry",
                "type": "associatedtype"
              },
              {
                "path": "/documentation/widgetkit/intenttimelineprovider/intent",
                "title": "Intent",
                "type": "associatedtype"
              },
              {
                "path": "/documentation/widgetkit/intenttimelineprovider/recommendations()",
                "title": "func recommendations() -> [IntentRecommendation<Self.Intent>]",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/intenttimelineprovider/context",
                "title": "IntentTimelineProvider.Context",
                "type": "typealias"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/intenttimelineprovider/relevance()",
                "title": "func relevance() async -> WidgetRelevance<Self.Intent>",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/intenttimelineprovider",
            "title": "IntentTimelineProvider",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Preparing Preview Content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timelineprovidercontext/ispreview",
                "title": "let isPreview: Bool",
                "type": "property"
              },
              {
                "title": "Accessing Size Attributes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timelineprovidercontext/family",
                "title": "let family: WidgetFamily",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/timelineprovidercontext/displaysize",
                "title": "let displaySize: CGSize",
                "type": "property"
              },
              {
                "title": "Accessing Environment Variations",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timelineprovidercontext/environmentvariants-swift.property",
                "title": "let environmentVariants: TimelineProviderContext.EnvironmentVariants",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/timelineprovidercontext/environmentvariants-swift.struct/subscript(_:)",
                    "title": "subscript<T>(WritableKeyPath<EnvironmentValues, T>) -> [T]?",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/widgetkit/timelineprovidercontext/environmentvariants-swift.struct/subscript(dynamicmember:)",
                    "title": "subscript<T>(dynamicMember _: WritableKeyPath<EnvironmentValues, T>) -> [T]?",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/widgetkit/timelineprovidercontext/environmentvariants-swift.struct",
                "title": "TimelineProviderContext.EnvironmentVariants",
                "type": "struct"
              }
            ],
            "path": "/documentation/widgetkit/timelineprovidercontext",
            "title": "TimelineProviderContext",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Configuring Timeline Entry Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timelineentry/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/timelineentry/relevance",
                "title": "var relevance: TimelineEntryRelevance?",
                "type": "property"
              }
            ],
            "path": "/documentation/widgetkit/timelineentry",
            "title": "TimelineEntry",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a Timeline",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timeline/init(entries:policy:)",
                "title": "init(entries: [EntryType], policy: TimelineReloadPolicy)",
                "type": "init"
              },
              {
                "title": "Getting Timeline Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timeline/entries",
                "title": "let entries: [EntryType]",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/timeline/policy",
                "title": "let policy: TimelineReloadPolicy",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Reload Policies",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/timelinereloadpolicy/atend",
                    "title": "static let atEnd: TimelineReloadPolicy",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/widgetkit/timelinereloadpolicy/after(_:)",
                    "title": "static func after(Date) -> TimelineReloadPolicy",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/widgetkit/timelinereloadpolicy/never",
                    "title": "static let never: TimelineReloadPolicy",
                    "type": "property"
                  }
                ],
                "path": "/documentation/widgetkit/timelinereloadpolicy",
                "title": "TimelineReloadPolicy",
                "type": "struct"
              }
            ],
            "path": "/documentation/widgetkit/timeline",
            "title": "Timeline",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting Widget Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetcenter/shared",
                "title": "static let shared: WidgetCenter",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetcenter/getcurrentconfigurations(_:)",
                "title": "func getCurrentConfigurations((Result<[WidgetInfo], any Error>) -> Void)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Describing a widget",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/widgetcenter/userinfokey/family",
                    "title": "static let family: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/widgetkit/widgetcenter/userinfokey/kind",
                    "title": "static let kind: String",
                    "type": "property"
                  },
                  {
                    "title": "Describing a Live Activity",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/widgetcenter/userinfokey/activityid",
                    "title": "static let activityID: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/widgetkit/widgetcenter/userinfokey",
                "title": "WidgetCenter.UserInfoKey",
                "type": "struct"
              },
              {
                "title": "Reloading Widget Timelines",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetcenter/reloadtimelines(ofkind:)",
                "title": "func reloadTimelines(ofKind: String)",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/widgetcenter/reloadalltimelines()",
                "title": "func reloadAllTimelines()",
                "type": "method"
              },
              {
                "title": "Reloading Recommended Preconfigured Widgets",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetcenter/invalidateconfigurationrecommendations()",
                "title": "func invalidateConfigurationRecommendations()",
                "type": "method"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetcenter/currentconfigurations()",
                "title": "func currentConfigurations() async throws -> [WidgetInfo]",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/widgetcenter/invalidaterelevance(ofkind:)",
                "title": "func invalidateRelevance(ofKind: String)",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/widgetcenter",
            "title": "WidgetCenter",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Generating timelines",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/appintenttimelineprovider/placeholder(in:)",
                "title": "func placeholder(in: Self.Context) -> Self.Entry",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/appintenttimelineprovider/recommendations()",
                "title": "func recommendations() -> [AppIntentRecommendation<Self.Intent>]",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/appintenttimelineprovider/snapshot(for:in:)",
                "title": "func snapshot(for: Self.Intent, in: Self.Context) async -> Self.Entry",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/appintenttimelineprovider/timeline(for:in:)",
                "title": "func timeline(for: Self.Intent, in: Self.Context) async -> Timeline<Self.Entry>",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/appintenttimelineprovider/context",
                "title": "AppIntentTimelineProvider.Context",
                "type": "typealias"
              },
              {
                "path": "/documentation/widgetkit/appintenttimelineprovider/entry",
                "title": "Entry",
                "type": "associatedtype"
              },
              {
                "path": "/documentation/widgetkit/appintenttimelineprovider/intent",
                "title": "Intent",
                "type": "associatedtype"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/appintenttimelineprovider/relevance()",
                "title": "func relevance() async -> WidgetRelevance<Self.Intent>",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/appintenttimelineprovider",
            "title": "AppIntentTimelineProvider",
            "type": "protocol"
          },
          {
            "title": "Accessibility",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/activitykit/adding-accessible-descriptions-to-widgets-and-live-activities",
            "title": "Adding accessible descriptions to widgets and Live Activities",
            "type": "article"
          },
          {
            "title": "Location services in widgets",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/accessing-location-information-in-widgets",
            "title": "Accessing location information in widgets",
            "type": "article"
          },
          {
            "title": "Networking",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/making-network-requests-in-a-widget-extension",
            "title": "Making network requests in a widget extension",
            "type": "article"
          },
          {
            "title": "Smart Stacks",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/widget-suggestions-in-smart-stacks",
            "title": "Increasing the visibility of widgets in Smart Stacks",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Creating a Relevance Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timelineentryrelevance/init(score:duration:)",
                "title": "init(score: Float, duration: TimeInterval)",
                "type": "init"
              },
              {
                "title": "Configuring Relevance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/timelineentryrelevance/duration",
                "title": "var duration: TimeInterval",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/timelineentryrelevance/score",
                "title": "var score: Float",
                "type": "property"
              }
            ],
            "path": "/documentation/widgetkit/timelineentryrelevance",
            "title": "TimelineEntryRelevance",
            "type": "struct"
          },
          {
            "title": "Widget preview and debugging",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/previewing-widgets-and-live-activities-in-xcode",
            "title": "Previewing widgets and Live Activities in Xcode",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/debugging-widgets",
            "title": "Debugging Widgets",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Creating a Preview Context",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetpreviewcontext/init(family:)",
                "title": "init(family: WidgetFamily)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/widgetpreviewcontext",
            "title": "WidgetPreviewContext",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Providing a widget preview",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/preview(_:as:widget:timelineprovider:)",
                "title": "macro Preview<Widget, Provider>(String?, as: WidgetFamily, widget: () -> Widget, timelineProvider: () -> Provider)",
                "type": "macro"
              },
              {
                "path": "/documentation/widgetkit/preview(_:as:using:widget:timelineprovider:)-4ljg1",
                "title": "macro Preview<Widget, Provider>(String?, as: WidgetFamily, using: Provider.Intent, widget: () -> Widget, timelineProvider: () -> Provider)",
                "type": "macro"
              },
              {
                "path": "/documentation/widgetkit/preview(_:as:using:widget:timelineprovider:)-3df1l",
                "title": "macro Preview<Widget, Provider>(String?, as: WidgetFamily, using: Provider.Intent, widget: () -> Widget, timelineProvider: () -> Provider)",
                "type": "macro"
              },
              {
                "path": "/documentation/widgetkit/preview(_:as:widget:timeline:)",
                "title": "macro Preview<Widget>(String?, as: WidgetFamily, widget: () -> Widget, timeline: () async -> [any TimelineEntry])",
                "type": "macro"
              },
              {
                "title": "Generating a Live Activity preview",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/preview(_:as:using:widget:contentstates:)",
                "title": "macro Preview<Widget, Attributes>(String?, as: ActivityPreviewViewKind, using: Attributes, widget: () -> Widget, contentStates: () async -> [Attributes.ContentState])",
                "type": "macro"
              },
              {
                "title": "Generated structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Previewing Live Activities",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/previewactivitybuilder/buildarray(_:)",
                    "title": "static func buildArray([[A.ContentState]]) -> [A.ContentState]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/widgetkit/previewactivitybuilder/buildexpression(_:)",
                    "title": "static func buildExpression(A.ContentState) -> [A.ContentState]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/widgetkit/previewactivitybuilder/buildpartialblock(accumulated:next:)",
                    "title": "static func buildPartialBlock(accumulated: [A.ContentState], next: [A.ContentState]) -> [A.ContentState]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/widgetkit/previewactivitybuilder/buildpartialblock(first:)",
                    "title": "static func buildPartialBlock(first: [A.ContentState]) -> [A.ContentState]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/widgetkit/previewactivitybuilder",
                "title": "PreviewActivityBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Previewing timelines",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/previewtimelinebuilder/buildarray(_:)",
                    "title": "static func buildArray([[any TimelineEntry]]) -> [any TimelineEntry]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/widgetkit/previewtimelinebuilder/buildexpression(_:)",
                    "title": "static func buildExpression(some TimelineEntry) -> [any TimelineEntry]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/widgetkit/previewtimelinebuilder/buildpartialblock(accumulated:next:)",
                    "title": "static func buildPartialBlock(accumulated: [any TimelineEntry], next: [any TimelineEntry]) -> [any TimelineEntry]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/widgetkit/previewtimelinebuilder/buildpartialblock(first:)",
                    "title": "static func buildPartialBlock(first: [any TimelineEntry]) -> [any TimelineEntry]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/widgetkit/previewtimelinebuilder",
                "title": "PreviewTimelineBuilder",
                "type": "struct"
              }
            ],
            "path": "/documentation/widgetkit/preview-macros",
            "title": "Preview macros",
            "type": "collection"
          },
          {
            "title": "Live Activities",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Live Activity configuration",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Describing a Live Activity",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/activityviewcontext/attributes",
                    "title": "let attributes: Attributes",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/widgetkit/activityviewcontext/state",
                    "title": "let state: Attributes.ContentState",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/widgetkit/activityviewcontext/isstale",
                    "title": "let isStale: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/widgetkit/activityviewcontext/activityid",
                    "title": "let activityID: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/widgetkit/activityviewcontext",
                "title": "ActivityViewContext",
                "type": "struct"
              },
              {
                "path": "/documentation/widgetkit/activityconfiguration/init(for:content:dynamicisland:)",
                "title": "init<Content>(for: Attributes.Type, content: (ActivityViewContext<Attributes>) -> Content, dynamicIsland: (ActivityViewContext<Attributes>) -> DynamicIsland)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/activityconfiguration",
            "title": "ActivityConfiguration",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating the view for the Dynamic Island",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/dynamicisland/init(expanded:compactleading:compacttrailing:minimal:)",
                "title": "init<Expanded, CompactLeading, CompactTrailing, Minimal>(expanded: () -> DynamicIslandExpandedContent<Expanded>, compactLeading: () -> CompactLeading, compactTrailing: () -> CompactTrailing, minimal: () -> Minimal)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Creating the expanded presentation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/dynamicislandexpandedregion/init(_:priority:content:)",
                    "title": "init(DynamicIslandExpandedRegionPosition, priority: Double, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "View positions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedregionposition/bottom",
                        "title": "static let bottom: DynamicIslandExpandedRegionPosition",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedregionposition/center",
                        "title": "static let center: DynamicIslandExpandedRegionPosition",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedregionposition/leading",
                        "title": "static let leading: DynamicIslandExpandedRegionPosition",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedregionposition/trailing",
                        "title": "static let trailing: DynamicIslandExpandedRegionPosition",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/widgetkit/dynamicislandexpandedregionposition",
                    "title": "DynamicIslandExpandedRegionPosition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Configuring vertical content placement",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedregionverticalplacement/default",
                        "title": "static let `default`: DynamicIslandExpandedRegionVerticalPlacement",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedregionverticalplacement/belowiftoowide",
                        "title": "static let belowIfTooWide: DynamicIslandExpandedRegionVerticalPlacement",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/widgetkit/dynamicislandexpandedregionverticalplacement",
                    "title": "DynamicIslandExpandedRegionVerticalPlacement",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/widgetkit/dynamicislandexpandedcontent",
                    "title": "DynamicIslandExpandedContent",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedcontentbuilder/buildpartialblock(accumulated:next:)-39sr0",
                        "title": "static func buildPartialBlock<C0, C1>(accumulated: DynamicIslandExpandedContent<C0>, next: DynamicIslandExpandedContent<C1>) -> DynamicIslandExpandedContent<some View>\n",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedcontentbuilder/buildpartialblock(accumulated:next:)-3jswv",
                        "title": "static func buildPartialBlock<C0, C1>(accumulated: DynamicIslandExpandedContent<C0>, next: DynamicIslandExpandedRegion<C1>) -> DynamicIslandExpandedContent<some View>\n",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedcontentbuilder/buildpartialblock(first:)-5j108",
                        "title": "static func buildPartialBlock<C>(first: DynamicIslandExpandedRegion<C>) -> DynamicIslandExpandedContent<some View>\n",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/widgetkit/dynamicislandexpandedcontentbuilder/buildpartialblock(first:)-74hpw",
                        "title": "static func buildPartialBlock<C>(first: DynamicIslandExpandedContent<C>) -> DynamicIslandExpandedContent<some View>\n",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/widgetkit/dynamicislandexpandedcontentbuilder",
                    "title": "DynamicIslandExpandedContentBuilder",
                    "type": "struct"
                  },
                  {
                    "title": "Specifying custom content margins",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/dynamicislandexpandedregion/contentmargins(_:_:)",
                    "title": "func contentMargins(Edge.Set, Double) -> DynamicIslandExpandedRegion<Content>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/widgetkit/dynamicislandexpandedregion",
                "title": "DynamicIslandExpandedRegion",
                "type": "struct"
              },
              {
                "title": "Deep linking",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/dynamicisland/widgeturl(_:)",
                "title": "func widgetURL(URL?) -> DynamicIsland",
                "type": "method"
              },
              {
                "title": "Setting a tint color",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/dynamicisland/keylinetint(_:)",
                "title": "func keylineTint(Color?) -> DynamicIsland",
                "type": "method"
              },
              {
                "title": "Specifying content margins",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/dynamicisland/contentmargins(_:_:for:)",
                "title": "func contentMargins(Edge.Set, Double, for: DynamicIslandMode) -> DynamicIsland",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Dynamic Island presentations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/dynamicislandmode/compactleading",
                    "title": "static let compactLeading: DynamicIslandMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/widgetkit/dynamicislandmode/compacttrailing",
                    "title": "static let compactTrailing: DynamicIslandMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/widgetkit/dynamicislandmode/expanded",
                    "title": "static let expanded: DynamicIslandMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/widgetkit/dynamicislandmode/minimal",
                    "title": "static let minimal: DynamicIslandMode",
                    "type": "property"
                  }
                ],
                "path": "/documentation/widgetkit/dynamicislandmode",
                "title": "DynamicIslandMode",
                "type": "struct"
              }
            ],
            "path": "/documentation/widgetkit/dynamicisland",
            "title": "DynamicIsland",
            "type": "struct"
          },
          {
            "path": "/documentation/widgetkit/nsuseractivitytypeliveactivity",
            "title": "let NSUserActivityTypeLiveActivity: String",
            "type": "var"
          },
          {
            "children": [
              {
                "title": "Live Activity preview types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/activitypreviewviewkind/content",
                "title": "case content",
                "type": "case"
              },
              {
                "path": "/documentation/widgetkit/activitypreviewviewkind/dynamicisland(_:)",
                "title": "case dynamicIsland(ActivityPreviewViewKind.DynamicIslandPreviewViewState)",
                "type": "case"
              },
              {
                "children": [
                  {
                    "title": "Dynamic Island presentations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/activitypreviewviewkind/dynamicislandpreviewviewstate/compact",
                    "title": "case compact",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/widgetkit/activitypreviewviewkind/dynamicislandpreviewviewstate/minimal",
                    "title": "case minimal",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/widgetkit/activitypreviewviewkind/dynamicislandpreviewviewstate/expanded",
                    "title": "case expanded",
                    "type": "case"
                  }
                ],
                "path": "/documentation/widgetkit/activitypreviewviewkind/dynamicislandpreviewviewstate",
                "title": "ActivityPreviewViewKind.DynamicIslandPreviewViewState",
                "type": "enum"
              }
            ],
            "path": "/documentation/widgetkit/activitypreviewviewkind",
            "title": "ActivityPreviewViewKind",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Accessing system families",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/activityfamily/small",
                "title": "case small",
                "type": "case"
              },
              {
                "path": "/documentation/widgetkit/activityfamily/medium",
                "title": "case medium",
                "type": "case"
              },
              {
                "title": "Environment keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/supportedactivityfamiliesenvironmentkey",
                "title": "SupportedActivityFamiliesEnvironmentKey",
                "type": "struct"
              }
            ],
            "path": "/documentation/widgetkit/activityfamily",
            "title": "ActivityFamily",
            "type": "enum"
          },
          {
            "title": "Controls",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/creating-controls-to-perform-actions-across-the-system",
            "title": "Creating controls to perform actions across the system",
            "type": "article"
          },
          {
            "path": "/documentation/widgetkit/adding-refinements-and-configuration-to-controls",
            "title": "Adding refinements and configuration to controls",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlwidgettoggle/init(_:ison:action:valuelabel:)-33wfq",
                "title": "init(some StringProtocol, isOn: Bool, action: Action, valueLabel: (Bool) -> ValueLabel)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/controlwidgettoggle/init(_:ison:action:valuelabel:)-5o6bn",
                "title": "init(LocalizedStringKey, isOn: Bool, action: Action, valueLabel: (Bool) -> ValueLabel)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/controlwidgettoggle/init(ison:action:label:)",
                "title": "init(isOn: Bool, action: Action, label: () -> Label)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/controlwidgettoggle/init(ison:action:label:valuelabel:)",
                "title": "init(isOn: Bool, action: Action, label: () -> Label, valueLabel: (Bool) -> ValueLabel)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/controlwidgettoggle",
            "title": "ControlWidgetToggle",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlwidgetbutton/init(_:action:actionlabel:)-4sgji",
                "title": "init(some StringProtocol, action: Action, actionLabel: (Bool) -> ActionLabel)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/controlwidgetbutton/init(_:action:actionlabel:)-67uvw",
                "title": "init(LocalizedStringKey, action: Action, actionLabel: (Bool) -> ActionLabel)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/controlwidgetbutton/init(action:label:)-77p8j",
                "title": "init(action: Action, label: () -> Label)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/controlwidgetbutton/init(action:label:)-8oxxp",
                "title": "init(action: Action, label: () -> Label)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/controlwidgetbutton/init(action:label:actionlabel:)",
                "title": "init(action: Action, label: () -> Label, actionLabel: (Bool) -> ActionLabel)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/controlwidgetbutton",
            "title": "ControlWidgetButton",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlcenter/currentcontrols()",
                "title": "func currentControls() async throws -> [ControlInfo]",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/controlcenter/reloadallcontrols()",
                "title": "func reloadAllControls()",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/controlcenter/reloadcontrols(ofkind:)",
                "title": "func reloadControls(ofKind: String)",
                "type": "method"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlcenter/shared",
                "title": "static let shared: ControlCenter",
                "type": "property"
              }
            ],
            "path": "/documentation/widgetkit/controlcenter",
            "title": "ControlCenter",
            "type": "class"
          },
          {
            "title": "Control values and previews",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlvalueprovider/value",
                "title": "Value",
                "type": "associatedtype"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlvalueprovider/previewvalue",
                "title": "var previewValue: Self.Value",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlvalueprovider/currentvalue()",
                "title": "func currentValue() async throws -> Self.Value",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/controlvalueprovider",
            "title": "ControlValueProvider",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/appintentcontrolvalueprovider/configuration",
                "title": "Configuration",
                "type": "associatedtype"
              },
              {
                "path": "/documentation/widgetkit/appintentcontrolvalueprovider/value",
                "title": "Value",
                "type": "associatedtype"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/appintentcontrolvalueprovider/currentvalue(configuration:)",
                "title": "func currentValue(configuration: Self.Configuration) async throws -> Self.Value",
                "type": "method"
              },
              {
                "path": "/documentation/widgetkit/appintentcontrolvalueprovider/previewvalue(configuration:)",
                "title": "func previewValue(configuration: Self.Configuration) -> Self.Value",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/appintentcontrolvalueprovider",
            "title": "AppIntentControlValueProvider",
            "type": "protocol"
          },
          {
            "title": "Control configuration",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/staticcontrolconfiguration/init(kind:content:)",
                "title": "init(kind: String, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/staticcontrolconfiguration/init(kind:provider:content:)",
                "title": "init<Provider>(kind: String, provider: Provider, content: (Provider.Value) -> Content)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/staticcontrolconfiguration",
            "title": "StaticControlConfiguration",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/appintentcontrolconfiguration/init(kind:intent:content:)",
                "title": "init(kind: String, intent: Configuration.Type, content: (Configuration) -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/appintentcontrolconfiguration/init(kind:provider:content:)",
                "title": "init<Provider>(kind: String, provider: Provider, content: (Provider.Value) -> Content)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/appintentcontrolconfiguration",
            "title": "AppIntentControlConfiguration",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlinfo/kind",
                "title": "let kind: String",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/controlinfo/pushinfo",
                "title": "var pushInfo: ControlPushInfo?",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlinfo/configurationintent(of:)",
                "title": "func configurationIntent<Intent>(of: Intent.Type) -> Intent?",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/widgetkit/controlinfo/id",
                    "title": "var id: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/widgetkit/controlinfo/identifiable-implementations",
                "title": "Identifiable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/widgetkit/controlinfo",
            "title": "ControlInfo",
            "type": "struct"
          },
          {
            "title": "Control updates",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/widgetkit/updating-controls-locally-and-remotely",
            "title": "Updating controls locally and remotely",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlpushhandler/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlpushhandler/pushtokensdidchange(controls:)",
                "title": "func pushTokensDidChange(controls: [ControlInfo])",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/controlpushhandler",
            "title": "ControlPushHandler",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/controlpushinfo/token",
                "title": "let token: Data",
                "type": "property"
              }
            ],
            "path": "/documentation/widgetkit/controlpushinfo",
            "title": "ControlPushInfo",
            "type": "struct"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroup/init(_:content:)-3ij0e",
                "title": "init(some StringProtocol, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroup/init(_:content:)-nb0",
                "title": "init(LocalizedStringKey, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroup/init(_:image:content:)-50iyk",
                "title": "init(LocalizedStringKey, image: ImageResource, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroup/init(_:image:content:)-66iys",
                "title": "init(some StringProtocol, image: ImageResource, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroup/init(_:systemimage:content:)-54h9w",
                "title": "init(LocalizedStringKey, systemImage: String, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroup/init(_:systemimage:content:)-7rnqc",
                "title": "init(some StringProtocol, systemImage: String, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroup/init(label:content:)",
                "title": "init(label: () -> Label, content: () -> Content)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/accessorywidgetgroup",
            "title": "AccessoryWidgetGroup",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroupstyle/automatic",
                "title": "static let automatic: AccessoryWidgetGroupStyle",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroupstyle/circular",
                "title": "static let circular: AccessoryWidgetGroupStyle",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/accessorywidgetgroupstyle/roundedsquare",
                "title": "static let roundedSquare: AccessoryWidgetGroupStyle",
                "type": "property"
              }
            ],
            "path": "/documentation/widgetkit/accessorywidgetgroupstyle",
            "title": "AccessoryWidgetGroupStyle",
            "type": "struct"
          },
          {
            "path": "/documentation/widgetkit/controlwidgetbuttondefaultactionlabel",
            "title": "ControlWidgetButtonDefaultActionLabel",
            "type": "struct"
          },
          {
            "path": "/documentation/widgetkit/controlwidgettoggledefaultlabel",
            "title": "ControlWidgetToggleDefaultLabel",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevance/init(_:)",
                "title": "init([WidgetRelevanceAttribute<Configuration>])",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/widgetrelevance",
            "title": "WidgetRelevance",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevanceattribute/init(configuration:context:)-4nd5m",
                "title": "init(configuration: Configuration, context: RelevantContext)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevanceattribute/init(configuration:context:)-8b5x2",
                "title": "init(configuration: Configuration, context: RelevantContext)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevanceattribute/init(configuration:group:)-5yh17",
                "title": "init(configuration: Configuration, group: WidgetRelevanceGroup)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevanceattribute/init(configuration:group:)-93jm5",
                "title": "init(configuration: Configuration, group: WidgetRelevanceGroup)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevanceattribute/init(context:)",
                "title": "init(context: RelevantContext)",
                "type": "init"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevanceattribute/init(group:)",
                "title": "init(group: WidgetRelevanceGroup)",
                "type": "init"
              }
            ],
            "path": "/documentation/widgetkit/widgetrelevanceattribute",
            "title": "WidgetRelevanceAttribute",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevancegroup/automatic",
                "title": "static let automatic: WidgetRelevanceGroup",
                "type": "property"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevancegroup/ungrouped",
                "title": "static let ungrouped: WidgetRelevanceGroup",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/widgetkit/widgetrelevancegroup/named(_:)",
                "title": "static func named(String) -> WidgetRelevanceGroup",
                "type": "method"
              }
            ],
            "path": "/documentation/widgetkit/widgetrelevancegroup",
            "title": "WidgetRelevanceGroup",
            "type": "struct"
          }
        ],
        "path": "/documentation/widgetkit",
        "title": "WidgetKit",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
