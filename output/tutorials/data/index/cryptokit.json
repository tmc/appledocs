{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/security/complying-with-encryption-export-regulations",
            "title": "Complying with Encryption Export Regulations",
            "type": "collection"
          },
          {
            "title": "Cryptographically secure hashes",
            "type": "groupMarker"
          },
          {
            "title": "Message authentication codes",
            "type": "groupMarker"
          },
          {
            "title": "Ciphers",
            "type": "groupMarker"
          },
          {
            "title": "Public key cryptography",
            "type": "groupMarker"
          },
          {
            "title": "Key derivation functions",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "title": "Legacy algorithms",
            "type": "groupMarker"
          },
          {
            "title": "Protocols",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "title": "Type Aliases",
            "type": "groupMarker"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/cryptokit",
        "title": "Apple CryptoKit",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/security/complying-with-encryption-export-regulations",
            "title": "Complying with Encryption Export Regulations",
            "type": "collection"
          },
          {
            "title": "Cryptographically secure hashes",
            "type": "groupMarker"
          },
          {
            "title": "Message authentication codes",
            "type": "groupMarker"
          },
          {
            "title": "Ciphers",
            "type": "groupMarker"
          },
          {
            "title": "Public key cryptography",
            "type": "groupMarker"
          },
          {
            "title": "Key derivation functions",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "title": "Legacy algorithms",
            "type": "groupMarker"
          },
          {
            "title": "Protocols",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "title": "Type Aliases",
            "type": "groupMarker"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/cryptokit",
        "title": "Apple CryptoKit",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/security/complying-with-encryption-export-regulations",
            "title": "Complying with Encryption Export Regulations",
            "type": "collection"
          },
          {
            "path": "/documentation/cryptokit/performing_common_cryptographic_operations",
            "title": "Performing Common Cryptographic Operations",
            "type": "sampleCode"
          },
          {
            "path": "/documentation/cryptokit/storing_cryptokit_keys_in_the_keychain",
            "title": "Storing CryptoKit Keys in the Keychain",
            "type": "sampleCode"
          },
          {
            "title": "Cryptographically secure hashes",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Specifying the output type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hashfunction/digest",
                "title": "Digest",
                "type": "associatedtype"
              },
              {
                "children": [
                  {
                    "title": "Getting the digest length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/digest/bytecount",
                    "title": "static var byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Comparing digests",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/digest/==(_:_:)-7yz3z",
                    "title": "static func == <D>(Self, D) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/cryptokit/digest/==(_:_:)-6m59k",
                    "title": "static func == (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/digest/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/cryptokit/digest/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/cryptokit/digest",
                "title": "Digest",
                "type": "protocol"
              },
              {
                "title": "Computing a hash in one call",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hashfunction/hash(data:)",
                "title": "static func hash<D>(data: D) -> Self.Digest",
                "type": "method"
              },
              {
                "title": "Computing a hash iteratively",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hashfunction/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/cryptokit/hashfunction/update(data:)",
                "title": "func update<D>(data: D)",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hashfunction/update(bufferpointer:)",
                "title": "func update(bufferPointer: UnsafeRawBufferPointer)",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hashfunction/finalize()",
                "title": "func finalize() -> Self.Digest",
                "type": "method"
              },
              {
                "title": "Inspecting hash information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hashfunction/blockbytecount",
                "title": "static var blockByteCount: Int",
                "type": "property"
              }
            ],
            "path": "/documentation/cryptokit/hashfunction",
            "title": "HashFunction",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Specifying the output type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha512/digest",
                "title": "SHA512.Digest",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Inspecting the digest length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha512digest/bytecount",
                    "title": "static var byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Describing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha512digest/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Hashing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha512digest/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/sha512digest",
                "title": "SHA512Digest",
                "type": "struct"
              },
              {
                "title": "Computing a hash iteratively",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha512/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/cryptokit/sha512/update(bufferpointer:)",
                "title": "func update(bufferPointer: UnsafeRawBufferPointer)",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/sha512/finalize()",
                "title": "func finalize() -> SHA512.Digest",
                "type": "method"
              },
              {
                "title": "Inspecting hash information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha512/bytecount",
                "title": "static let byteCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/cryptokit/sha512/blockbytecount",
                "title": "static let blockByteCount: Int",
                "type": "property"
              }
            ],
            "path": "/documentation/cryptokit/sha512",
            "title": "SHA512",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Specifying the output type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha384/digest",
                "title": "SHA384.Digest",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Inspecting the digest length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha384digest/bytecount",
                    "title": "static var byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Describing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha384digest/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Hashing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha384digest/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/sha384digest",
                "title": "SHA384Digest",
                "type": "struct"
              },
              {
                "title": "Computing a hash iteratively",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha384/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/cryptokit/sha384/update(bufferpointer:)",
                "title": "func update(bufferPointer: UnsafeRawBufferPointer)",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/sha384/finalize()",
                "title": "func finalize() -> SHA384.Digest",
                "type": "method"
              },
              {
                "title": "Inspecting hash information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha384/bytecount",
                "title": "static let byteCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/cryptokit/sha384/blockbytecount",
                "title": "static let blockByteCount: Int",
                "type": "property"
              }
            ],
            "path": "/documentation/cryptokit/sha384",
            "title": "SHA384",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Specifying the output type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha256/digest",
                "title": "SHA256.Digest",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Inspecting the digest length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha256digest/bytecount",
                    "title": "static var byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Describing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha256digest/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Hashing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/sha256digest/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/sha256digest",
                "title": "SHA256Digest",
                "type": "struct"
              },
              {
                "title": "Computing a hash iteratively",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha256/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/cryptokit/sha256/update(bufferpointer:)",
                "title": "func update(bufferPointer: UnsafeRawBufferPointer)",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/sha256/finalize()",
                "title": "func finalize() -> SHA256.Digest",
                "type": "method"
              },
              {
                "title": "Inspecting hash information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sha256/bytecount",
                "title": "static let byteCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/cryptokit/sha256/blockbytecount",
                "title": "static let blockByteCount: Int",
                "type": "property"
              }
            ],
            "path": "/documentation/cryptokit/sha256",
            "title": "SHA256",
            "type": "struct"
          },
          {
            "title": "Message authentication codes",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting a key",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hmac/key",
                "title": "HMAC.Key",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Creating a key",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/symmetrickey/init(data:)",
                    "title": "init<D>(data: D)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/symmetrickey/init(size:)",
                    "title": "init(size: SymmetricKeySize)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the key length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/symmetrickey/bitcount",
                    "title": "var bitCount: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/cryptokit/symmetrickey",
                "title": "SymmetricKey",
                "type": "struct"
              },
              {
                "title": "Working with codes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hmac/mac",
                "title": "HMAC.MAC",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Retrieving the code length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hashedauthenticationcode/bytecount",
                    "title": "var byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Describing a code",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hashedauthenticationcode/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/cryptokit/hashedauthenticationcode",
                "title": "HashedAuthenticationCode",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Retrieving the code length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/messageauthenticationcode/bytecount",
                    "title": "var byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Comparing codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/messageauthenticationcode/==(_:_:)-3rxc4",
                    "title": "static func == <D>(Self, D) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/cryptokit/messageauthenticationcode/==(_:_:)-b90",
                    "title": "static func == (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/messageauthenticationcode/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/cryptokit/messageauthenticationcode/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/cryptokit/messageauthenticationcode",
                "title": "MessageAuthenticationCode",
                "type": "protocol"
              },
              {
                "title": "Creating an authentication code with one call",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hmac/authenticationcode(for:using:)",
                "title": "static func authenticationCode<D>(for: D, using: SymmetricKey) -> HMAC<H>.MAC",
                "type": "method"
              },
              {
                "title": "Creating an authentication code iteratively",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hmac/init(key:)",
                "title": "init(key: SymmetricKey)",
                "type": "init"
              },
              {
                "path": "/documentation/cryptokit/hmac/update(data:)",
                "title": "func update<D>(data: D)",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hmac/finalize()",
                "title": "func finalize() -> HMAC<H>.MAC",
                "type": "method"
              },
              {
                "title": "Checking an authentication code",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hmac/isvalidauthenticationcode(_:authenticating:using:)-8ezmw",
                "title": "static func isValidAuthenticationCode<D>(HMAC<H>.MAC, authenticating: D, using: SymmetricKey) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hmac/isvalidauthenticationcode(_:authenticating:using:)-5jbc8",
                "title": "static func isValidAuthenticationCode(HMAC<H>.MAC, authenticating: UnsafeRawBufferPointer, using: SymmetricKey) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hmac/isvalidauthenticationcode(_:authenticating:using:)-5ilt9",
                "title": "static func isValidAuthenticationCode<C, D>(C, authenticating: D, using: SymmetricKey) -> Bool",
                "type": "method"
              }
            ],
            "path": "/documentation/cryptokit/hmac",
            "title": "HMAC",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a key",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/symmetrickey/init(data:)",
                "title": "init<D>(data: D)",
                "type": "init"
              },
              {
                "path": "/documentation/cryptokit/symmetrickey/init(size:)",
                "title": "init(size: SymmetricKeySize)",
                "type": "init"
              },
              {
                "title": "Getting the key length",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/symmetrickey/bitcount",
                "title": "var bitCount: Int",
                "type": "property"
              }
            ],
            "path": "/documentation/cryptokit/symmetrickey",
            "title": "SymmetricKey",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Using standard key lengths",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/symmetrickeysize/bits128",
                "title": "static var bits128: SymmetricKeySize",
                "type": "property"
              },
              {
                "path": "/documentation/cryptokit/symmetrickeysize/bits192",
                "title": "static var bits192: SymmetricKeySize",
                "type": "property"
              },
              {
                "path": "/documentation/cryptokit/symmetrickeysize/bits256",
                "title": "static var bits256: SymmetricKeySize",
                "type": "property"
              },
              {
                "title": "Creating a nonstandard key length",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/symmetrickeysize/init(bitcount:)",
                "title": "init(bitCount: Int)",
                "type": "init"
              },
              {
                "title": "Getting the length",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/symmetrickeysize/bitcount",
                "title": "let bitCount: Int",
                "type": "property"
              }
            ],
            "path": "/documentation/cryptokit/symmetrickeysize",
            "title": "SymmetricKeySize",
            "type": "struct"
          },
          {
            "title": "Ciphers",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "AES modes",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Storing the output",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the sealed box",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/sealedbox/init(nonce:ciphertext:tag:)",
                        "title": "init<C, T>(nonce: AES.GCM.Nonce, ciphertext: C, tag: T) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/sealedbox/init(combined:)",
                        "title": "init<D>(combined: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Retrieving the combined contents",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/sealedbox/combined",
                        "title": "var combined: Data?",
                        "type": "property"
                      },
                      {
                        "title": "Inspecting the component elements",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/sealedbox/nonce",
                        "title": "var nonce: AES.GCM.Nonce",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/sealedbox/ciphertext",
                        "title": "var ciphertext: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/sealedbox/tag",
                        "title": "var tag: Data",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/cryptokit/aes/gcm/sealedbox",
                    "title": "AES.GCM.SealedBox",
                    "type": "struct"
                  },
                  {
                    "title": "Getting a nonce",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a nonce",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/nonce/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/nonce/init(data:)",
                        "title": "init<D>(data: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Iterating over a nonce’s bytes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/aes/gcm/nonce/makeiterator()",
                        "title": "func makeIterator() -> Array<UInt8>.Iterator",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/cryptokit/aes/gcm/nonce",
                    "title": "AES.GCM.Nonce",
                    "type": "struct"
                  },
                  {
                    "title": "Securing the plaintext message",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/aes/gcm/seal(_:using:nonce:)",
                    "title": "static func seal<Plaintext>(Plaintext, using: SymmetricKey, nonce: AES.GCM.Nonce?) throws -> AES.GCM.SealedBox",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/cryptokit/aes/gcm/seal(_:using:nonce:authenticating:)",
                    "title": "static func seal<Plaintext, AuthenticatedData>(Plaintext, using: SymmetricKey, nonce: AES.GCM.Nonce?, authenticating: AuthenticatedData) throws -> AES.GCM.SealedBox",
                    "type": "method"
                  },
                  {
                    "title": "Decrypting and verifying the message",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/aes/gcm/open(_:using:)",
                    "title": "static func open(AES.GCM.SealedBox, using: SymmetricKey) throws -> Data",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/cryptokit/aes/gcm/open(_:using:authenticating:)",
                    "title": "static func open<AuthenticatedData>(AES.GCM.SealedBox, using: SymmetricKey, authenticating: AuthenticatedData) throws -> Data",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/aes/gcm",
                "title": "AES.GCM",
                "type": "enum"
              },
              {
                "title": "AES wrappers",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Wrapping an AES key",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/aes/keywrap/wrap(_:using:)",
                    "title": "static func wrap(SymmetricKey, using: SymmetricKey) throws -> Data",
                    "type": "method"
                  },
                  {
                    "title": "Unwrapping an AES key",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/aes/keywrap/unwrap(_:using:)",
                    "title": "static func unwrap<WrappedKey>(WrappedKey, using: SymmetricKey) throws -> SymmetricKey",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/aes/keywrap",
                "title": "AES.KeyWrap",
                "type": "enum"
              }
            ],
            "path": "/documentation/cryptokit/aes",
            "title": "AES",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Storing the output",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating the sealed box",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/sealedbox/init(combined:)",
                    "title": "init<D>(combined: D) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/sealedbox/init(nonce:ciphertext:tag:)",
                    "title": "init<C, T>(nonce: ChaChaPoly.Nonce, ciphertext: C, tag: T) throws",
                    "type": "init"
                  },
                  {
                    "title": "Retrieving the combined contents",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/sealedbox/combined",
                    "title": "let combined: Data",
                    "type": "property"
                  },
                  {
                    "title": "Inspecting the component elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/sealedbox/nonce",
                    "title": "var nonce: ChaChaPoly.Nonce",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/sealedbox/ciphertext",
                    "title": "var ciphertext: Data",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/sealedbox/tag",
                    "title": "var tag: Data",
                    "type": "property"
                  }
                ],
                "path": "/documentation/cryptokit/chachapoly/sealedbox",
                "title": "ChaChaPoly.SealedBox",
                "type": "struct"
              },
              {
                "title": "Getting a nonce",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a nonce",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/nonce/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/nonce/init(data:)",
                    "title": "init<D>(data: D) throws",
                    "type": "init"
                  },
                  {
                    "title": "Iterating over a nonce’s bytes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/chachapoly/nonce/makeiterator()",
                    "title": "func makeIterator() -> Array<UInt8>.Iterator",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/chachapoly/nonce",
                "title": "ChaChaPoly.Nonce",
                "type": "struct"
              },
              {
                "title": "Securing the plaintext message",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/chachapoly/seal(_:using:nonce:)",
                "title": "static func seal<Plaintext>(Plaintext, using: SymmetricKey, nonce: ChaChaPoly.Nonce?) throws -> ChaChaPoly.SealedBox",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/chachapoly/seal(_:using:nonce:authenticating:)",
                "title": "static func seal<Plaintext, AuthenticatedData>(Plaintext, using: SymmetricKey, nonce: ChaChaPoly.Nonce?, authenticating: AuthenticatedData) throws -> ChaChaPoly.SealedBox",
                "type": "method"
              },
              {
                "title": "Decrypting and verifying the message",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/chachapoly/open(_:using:)",
                "title": "static func open(ChaChaPoly.SealedBox, using: SymmetricKey) throws -> Data",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/chachapoly/open(_:using:authenticating:)",
                "title": "static func open<AuthenticatedData>(ChaChaPoly.SealedBox, using: SymmetricKey, authenticating: AuthenticatedData) throws -> Data",
                "type": "method"
              }
            ],
            "path": "/documentation/cryptokit/chachapoly",
            "title": "ChaChaPoly",
            "type": "enum"
          },
          {
            "title": "Public key cryptography",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Performing operations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Using keys",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/keyagreement/privatekey/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/keyagreement/privatekey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Reporting the private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/keyagreement/privatekey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Finding the public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/keyagreement/privatekey/publickey",
                        "title": "var publicKey: Curve25519.KeyAgreement.PublicKey",
                        "type": "property"
                      },
                      {
                        "title": "Creating a shared secret",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                        "title": "func sharedSecretFromKeyAgreement(with: Curve25519.KeyAgreement.PublicKey) throws -> SharedSecret",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Deriving keys",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/hkdfderivedsymmetrickey(using:salt:sharedinfo:outputbytecount:)",
                            "title": "func hkdfDerivedSymmetricKey<H, Salt, SI>(using: H.Type, salt: Salt, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/x963derivedsymmetrickey(using:sharedinfo:outputbytecount:)",
                            "title": "func x963DerivedSymmetricKey<H, SI>(using: H.Type, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                            "type": "method"
                          },
                          {
                            "title": "Comparing shared secrets",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/==(_:_:)",
                            "title": "static func == <D>(SharedSecret, D) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/cryptokit/sharedsecret",
                        "title": "SharedSecret",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/curve25519/keyagreement/privatekey",
                    "title": "Curve25519.KeyAgreement.PrivateKey",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/keyagreement/publickey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/keyagreement/publickey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/keyagreement/publickey/hpkeephemeralprivatekey",
                        "title": "Curve25519.KeyAgreement.PublicKey.HPKEEphemeralPrivateKey",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/curve25519/keyagreement/publickey/ephemeralprivatekey",
                            "title": "Curve25519.KeyAgreement.PublicKey.EphemeralPrivateKey",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/cryptokit/curve25519/keyagreement/publickey/hpkediffiehellmanpublickey-implementations",
                        "title": "HPKEDiffieHellmanPublicKey Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/curve25519/keyagreement/publickey/init(_:kem:)",
                            "title": "init<D>(D, kem: HPKE.KEM) throws",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/curve25519/keyagreement/publickey/hpkerepresentation(kem:)",
                            "title": "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/cryptokit/curve25519/keyagreement/publickey/hpkepublickeyserialization-implementations",
                        "title": "HPKEPublicKeySerialization Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/cryptokit/curve25519/keyagreement/publickey",
                    "title": "Curve25519.KeyAgreement.PublicKey",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/cryptokit/curve25519/keyagreement",
                "title": "Curve25519.KeyAgreement",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Using keys",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/signing/privatekey/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/signing/privatekey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Reporting the private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/signing/privatekey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Finding the public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/signing/privatekey/publickey",
                        "title": "var publicKey: Curve25519.Signing.PublicKey",
                        "type": "property"
                      },
                      {
                        "title": "Creating a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/signing/privatekey/signature(for:)",
                        "title": "func signature<D>(for: D) throws -> Data",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/cryptokit/curve25519/signing/privatekey",
                    "title": "Curve25519.Signing.PrivateKey",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/signing/publickey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/signing/publickey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Verifying a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/curve25519/signing/publickey/isvalidsignature(_:for:)",
                        "title": "func isValidSignature<S, D>(S, for: D) -> Bool",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/cryptokit/curve25519/signing/publickey",
                    "title": "Curve25519.Signing.PublicKey",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/cryptokit/curve25519/signing",
                "title": "Curve25519.Signing",
                "type": "enum"
              }
            ],
            "path": "/documentation/cryptokit/curve25519",
            "title": "Curve25519",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Performing operations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Using keys",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/init(compactrepresentable:)",
                        "title": "init(compactRepresentable: Bool)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/init(rawrepresentation:)",
                        "title": "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Finding the public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/publickey",
                        "title": "var publicKey: P521.KeyAgreement.PublicKey",
                        "type": "property"
                      },
                      {
                        "title": "Creating a shared secret",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                        "title": "func sharedSecretFromKeyAgreement(with: P521.KeyAgreement.PublicKey) throws -> SharedSecret",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Deriving keys",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/hkdfderivedsymmetrickey(using:salt:sharedinfo:outputbytecount:)",
                            "title": "func hkdfDerivedSymmetricKey<H, Salt, SI>(using: H.Type, salt: Salt, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/x963derivedsymmetrickey(using:sharedinfo:outputbytecount:)",
                            "title": "func x963DerivedSymmetricKey<H, SI>(using: H.Type, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                            "type": "method"
                          },
                          {
                            "title": "Comparing shared secrets",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/==(_:_:)",
                            "title": "static func == <D>(SharedSecret, D) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/cryptokit/sharedsecret",
                        "title": "SharedSecret",
                        "type": "struct"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                            "title": "func sharedSecretFromKeyAgreement(with: P521.KeyAgreement.PublicKey) throws -> SharedSecret",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/diffiehellmankeyagreement-implementations",
                        "title": "DiffieHellmanKeyAgreement Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/keyagreement/privatekey/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/cryptokit/p521/keyagreement/privatekey/hpkediffiehellmanprivatekeygeneration-implementations",
                        "title": "HPKEDiffieHellmanPrivateKeyGeneration Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/cryptokit/p521/keyagreement/privatekey",
                    "title": "P521.KeyAgreement.PrivateKey",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/init(compactrepresentation:)",
                        "title": "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/init(compressedrepresentation:)",
                        "title": "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/compactrepresentation",
                        "title": "var compactRepresentation: Data?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/compressedrepresentation",
                        "title": "var compressedRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/hpkeephemeralprivatekey",
                        "title": "P521.KeyAgreement.PublicKey.HPKEEphemeralPrivateKey",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/keyagreement/publickey/ephemeralprivatekey",
                            "title": "P521.KeyAgreement.PublicKey.EphemeralPrivateKey",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/hpkediffiehellmanpublickey-implementations",
                        "title": "HPKEDiffieHellmanPublicKey Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/keyagreement/publickey/init(_:kem:)",
                            "title": "init<D>(D, kem: HPKE.KEM) throws",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/keyagreement/publickey/hpkerepresentation(kem:)",
                            "title": "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/cryptokit/p521/keyagreement/publickey/hpkepublickeyserialization-implementations",
                        "title": "HPKEPublicKeySerialization Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/cryptokit/p521/keyagreement/publickey",
                    "title": "P521.KeyAgreement.PublicKey",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/cryptokit/p521/keyagreement",
                "title": "P521.KeyAgreement",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Using keys",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/init(rawrepresentation:)",
                        "title": "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/init(compactrepresentable:)",
                        "title": "init(compactRepresentable: Bool)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Finding the public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/publickey",
                        "title": "var publicKey: P521.Signing.PublicKey",
                        "type": "property"
                      },
                      {
                        "title": "Creating a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/signature(for:)-34g01",
                        "title": "func signature<D>(for: D) throws -> P521.Signing.ECDSASignature",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/privatekey/signature(for:)-7rxva",
                        "title": "func signature<D>(for: D) throws -> P521.Signing.ECDSASignature",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/signing/ecdsasignature/init(derrepresentation:)",
                            "title": "init<D>(derRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/signing/ecdsasignature/init(rawrepresentation:)",
                            "title": "init<D>(rawRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "title": "Representing the signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/signing/ecdsasignature/derrepresentation",
                            "title": "var derRepresentation: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/signing/ecdsasignature/rawrepresentation",
                            "title": "var rawRepresentation: Data",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/cryptokit/p521/signing/ecdsasignature",
                        "title": "P521.Signing.ECDSASignature",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/p521/signing/privatekey",
                    "title": "P521.Signing.PrivateKey",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/init(compactrepresentation:)",
                        "title": "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/init(compressedrepresentation:)",
                        "title": "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/compactrepresentation",
                        "title": "var compactRepresentation: Data?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/compressedrepresentation",
                        "title": "var compressedRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Verifying a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/isvalidsignature(_:for:)-5kwev",
                        "title": "func isValidSignature<D>(P521.Signing.ECDSASignature, for: D) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/publickey/isvalidsignature(_:for:)-dhjh",
                        "title": "func isValidSignature<D>(P521.Signing.ECDSASignature, for: D) -> Bool",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/signing/ecdsasignature/init(derrepresentation:)",
                            "title": "init<D>(derRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/signing/ecdsasignature/init(rawrepresentation:)",
                            "title": "init<D>(rawRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "title": "Representing the signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/signing/ecdsasignature/derrepresentation",
                            "title": "var derRepresentation: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/cryptokit/p521/signing/ecdsasignature/rawrepresentation",
                            "title": "var rawRepresentation: Data",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/cryptokit/p521/signing/ecdsasignature",
                        "title": "P521.Signing.ECDSASignature",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/p521/signing/publickey",
                    "title": "P521.Signing.PublicKey",
                    "type": "struct"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/ecdsasignature/init(derrepresentation:)",
                        "title": "init<D>(derRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/ecdsasignature/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/ecdsasignature/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p521/signing/ecdsasignature/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/cryptokit/p521/signing/ecdsasignature",
                    "title": "P521.Signing.ECDSASignature",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/cryptokit/p521/signing",
                "title": "P521.Signing",
                "type": "enum"
              }
            ],
            "path": "/documentation/cryptokit/p521",
            "title": "P521",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Performing operations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Using keys",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/init(rawrepresentation:)",
                        "title": "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/init(compactrepresentable:)",
                        "title": "init(compactRepresentable: Bool)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Finding the public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/publickey",
                        "title": "var publicKey: P384.KeyAgreement.PublicKey",
                        "type": "property"
                      },
                      {
                        "title": "Creating a shared secret",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                        "title": "func sharedSecretFromKeyAgreement(with: P384.KeyAgreement.PublicKey) throws -> SharedSecret",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Deriving keys",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/hkdfderivedsymmetrickey(using:salt:sharedinfo:outputbytecount:)",
                            "title": "func hkdfDerivedSymmetricKey<H, Salt, SI>(using: H.Type, salt: Salt, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/x963derivedsymmetrickey(using:sharedinfo:outputbytecount:)",
                            "title": "func x963DerivedSymmetricKey<H, SI>(using: H.Type, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                            "type": "method"
                          },
                          {
                            "title": "Comparing shared secrets",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/==(_:_:)",
                            "title": "static func == <D>(SharedSecret, D) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/cryptokit/sharedsecret",
                        "title": "SharedSecret",
                        "type": "struct"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                            "title": "func sharedSecretFromKeyAgreement(with: P384.KeyAgreement.PublicKey) throws -> SharedSecret",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/diffiehellmankeyagreement-implementations",
                        "title": "DiffieHellmanKeyAgreement Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/keyagreement/privatekey/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/cryptokit/p384/keyagreement/privatekey/hpkediffiehellmanprivatekeygeneration-implementations",
                        "title": "HPKEDiffieHellmanPrivateKeyGeneration Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/cryptokit/p384/keyagreement/privatekey",
                    "title": "P384.KeyAgreement.PrivateKey",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/init(compactrepresentation:)",
                        "title": "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/init(compressedrepresentation:)",
                        "title": "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/compactrepresentation",
                        "title": "var compactRepresentation: Data?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/compressedrepresentation",
                        "title": "var compressedRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/keyagreement/publickey/ephemeralprivatekey",
                            "title": "P384.KeyAgreement.PublicKey.EphemeralPrivateKey",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/hpkediffiehellmanpublickey-implementations",
                        "title": "HPKEDiffieHellmanPublicKey Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/keyagreement/publickey/init(_:kem:)",
                            "title": "init<D>(D, kem: HPKE.KEM) throws",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/keyagreement/publickey/hpkerepresentation(kem:)",
                            "title": "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/cryptokit/p384/keyagreement/publickey/hpkepublickeyserialization-implementations",
                        "title": "HPKEPublicKeySerialization Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/cryptokit/p384/keyagreement/publickey",
                    "title": "P384.KeyAgreement.PublicKey",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/cryptokit/p384/keyagreement",
                "title": "P384.KeyAgreement",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Using keys",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/init(rawrepresentation:)",
                        "title": "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/init(compactrepresentable:)",
                        "title": "init(compactRepresentable: Bool)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Finding the public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/publickey",
                        "title": "var publicKey: P384.Signing.PublicKey",
                        "type": "property"
                      },
                      {
                        "title": "Creating a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/signature(for:)-8nncg",
                        "title": "func signature<D>(for: D) throws -> P384.Signing.ECDSASignature",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/privatekey/signature(for:)-wrsj",
                        "title": "func signature<D>(for: D) throws -> P384.Signing.ECDSASignature",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/signing/ecdsasignature/init(derrepresentation:)",
                            "title": "init<D>(derRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/signing/ecdsasignature/init(rawrepresentation:)",
                            "title": "init<D>(rawRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "title": "Representing the signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/signing/ecdsasignature/derrepresentation",
                            "title": "var derRepresentation: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/signing/ecdsasignature/rawrepresentation",
                            "title": "var rawRepresentation: Data",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/cryptokit/p384/signing/ecdsasignature",
                        "title": "P384.Signing.ECDSASignature",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/p384/signing/privatekey",
                    "title": "P384.Signing.PrivateKey",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/init(compactrepresentation:)",
                        "title": "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/init(compressedrepresentation:)",
                        "title": "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/compactrepresentation",
                        "title": "var compactRepresentation: Data?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/compressedrepresentation",
                        "title": "var compressedRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Verifying a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/isvalidsignature(_:for:)-2zf75",
                        "title": "func isValidSignature<D>(P384.Signing.ECDSASignature, for: D) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/publickey/isvalidsignature(_:for:)-1hrtv",
                        "title": "func isValidSignature<D>(P384.Signing.ECDSASignature, for: D) -> Bool",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/signing/ecdsasignature/init(derrepresentation:)",
                            "title": "init<D>(derRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/signing/ecdsasignature/init(rawrepresentation:)",
                            "title": "init<D>(rawRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "title": "Representing the signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/signing/ecdsasignature/derrepresentation",
                            "title": "var derRepresentation: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/cryptokit/p384/signing/ecdsasignature/rawrepresentation",
                            "title": "var rawRepresentation: Data",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/cryptokit/p384/signing/ecdsasignature",
                        "title": "P384.Signing.ECDSASignature",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/p384/signing/publickey",
                    "title": "P384.Signing.PublicKey",
                    "type": "struct"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/ecdsasignature/init(derrepresentation:)",
                        "title": "init<D>(derRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/ecdsasignature/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/ecdsasignature/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p384/signing/ecdsasignature/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/cryptokit/p384/signing/ecdsasignature",
                    "title": "P384.Signing.ECDSASignature",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/cryptokit/p384/signing",
                "title": "P384.Signing",
                "type": "enum"
              }
            ],
            "path": "/documentation/cryptokit/p384",
            "title": "P384",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Performing operations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Using keys",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/init(rawrepresentation:)",
                        "title": "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/init(compactrepresentable:)",
                        "title": "init(compactRepresentable: Bool)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Finding the public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/publickey",
                        "title": "var publicKey: P256.KeyAgreement.PublicKey",
                        "type": "property"
                      },
                      {
                        "title": "Creating a shared secret",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                        "title": "func sharedSecretFromKeyAgreement(with: P256.KeyAgreement.PublicKey) throws -> SharedSecret",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Deriving keys",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/hkdfderivedsymmetrickey(using:salt:sharedinfo:outputbytecount:)",
                            "title": "func hkdfDerivedSymmetricKey<H, Salt, SI>(using: H.Type, salt: Salt, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/x963derivedsymmetrickey(using:sharedinfo:outputbytecount:)",
                            "title": "func x963DerivedSymmetricKey<H, SI>(using: H.Type, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                            "type": "method"
                          },
                          {
                            "title": "Comparing shared secrets",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/sharedsecret/==(_:_:)",
                            "title": "static func == <D>(SharedSecret, D) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/cryptokit/sharedsecret",
                        "title": "SharedSecret",
                        "type": "struct"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                            "title": "func sharedSecretFromKeyAgreement(with: P256.KeyAgreement.PublicKey) throws -> SharedSecret",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/diffiehellmankeyagreement-implementations",
                        "title": "DiffieHellmanKeyAgreement Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/keyagreement/privatekey/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/cryptokit/p256/keyagreement/privatekey/hpkediffiehellmanprivatekeygeneration-implementations",
                        "title": "HPKEDiffieHellmanPrivateKeyGeneration Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/cryptokit/p256/keyagreement/privatekey",
                    "title": "P256.KeyAgreement.PrivateKey",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/init(compactrepresentation:)",
                        "title": "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/init(compressedrepresentation:)",
                        "title": "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/compactrepresentation",
                        "title": "var compactRepresentation: Data?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/compressedrepresentation",
                        "title": "var compressedRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/hpkeephemeralprivatekey",
                        "title": "P256.KeyAgreement.PublicKey.HPKEEphemeralPrivateKey",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/keyagreement/publickey/ephemeralprivatekey",
                            "title": "P256.KeyAgreement.PublicKey.EphemeralPrivateKey",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/hpkediffiehellmanpublickey-implementations",
                        "title": "HPKEDiffieHellmanPublicKey Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/keyagreement/publickey/init(_:kem:)",
                            "title": "init<D>(D, kem: HPKE.KEM) throws",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/keyagreement/publickey/hpkerepresentation(kem:)",
                            "title": "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/cryptokit/p256/keyagreement/publickey/hpkepublickeyserialization-implementations",
                        "title": "HPKEPublicKeySerialization Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/cryptokit/p256/keyagreement/publickey",
                    "title": "P256.KeyAgreement.PublicKey",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/cryptokit/p256/keyagreement",
                "title": "P256.KeyAgreement",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Using keys",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a private key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/init(rawrepresentation:)",
                        "title": "init<Bytes>(rawRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/init(compactrepresentable:)",
                        "title": "init(compactRepresentable: Bool)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Finding the public key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/publickey",
                        "title": "var publicKey: P256.Signing.PublicKey",
                        "type": "property"
                      },
                      {
                        "title": "Creating a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/signature(for:)-5h94p",
                        "title": "func signature<D>(for: D) throws -> P256.Signing.ECDSASignature",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/privatekey/signature(for:)-1iyzc",
                        "title": "func signature<D>(for: D) throws -> P256.Signing.ECDSASignature",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/signing/ecdsasignature/init(derrepresentation:)",
                            "title": "init<D>(derRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/signing/ecdsasignature/init(rawrepresentation:)",
                            "title": "init<D>(rawRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "title": "Representing the signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/signing/ecdsasignature/derrepresentation",
                            "title": "var derRepresentation: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/signing/ecdsasignature/rawrepresentation",
                            "title": "var rawRepresentation: Data",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/cryptokit/p256/signing/ecdsasignature",
                        "title": "P256.Signing.ECDSASignature",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/p256/signing/privatekey",
                    "title": "P256.Signing.PrivateKey",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/init(compactrepresentation:)",
                        "title": "init<Bytes>(compactRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/init(compressedrepresentation:)",
                        "title": "init<Bytes>(compressedRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/init(derrepresentation:)",
                        "title": "init<Bytes>(derRepresentation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/init(pemrepresentation:)",
                        "title": "init(pemRepresentation: String) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/init(x963representation:)",
                        "title": "init<Bytes>(x963Representation: Bytes) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/compactrepresentation",
                        "title": "var compactRepresentation: Data?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/compressedrepresentation",
                        "title": "var compressedRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/pemrepresentation",
                        "title": "var pemRepresentation: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/x963representation",
                        "title": "var x963Representation: Data",
                        "type": "property"
                      },
                      {
                        "title": "Verifying a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/isvalidsignature(_:for:)-3da2m",
                        "title": "func isValidSignature<D>(P256.Signing.ECDSASignature, for: D) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/publickey/isvalidsignature(_:for:)-2rsb5",
                        "title": "func isValidSignature<D>(P256.Signing.ECDSASignature, for: D) -> Bool",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/signing/ecdsasignature/init(derrepresentation:)",
                            "title": "init<D>(derRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/signing/ecdsasignature/init(rawrepresentation:)",
                            "title": "init<D>(rawRepresentation: D) throws",
                            "type": "init"
                          },
                          {
                            "title": "Representing the signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/signing/ecdsasignature/derrepresentation",
                            "title": "var derRepresentation: Data",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/cryptokit/p256/signing/ecdsasignature/rawrepresentation",
                            "title": "var rawRepresentation: Data",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/cryptokit/p256/signing/ecdsasignature",
                        "title": "P256.Signing.ECDSASignature",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/p256/signing/publickey",
                    "title": "P256.Signing.PublicKey",
                    "type": "struct"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/ecdsasignature/init(derrepresentation:)",
                        "title": "init<D>(derRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/ecdsasignature/init(rawrepresentation:)",
                        "title": "init<D>(rawRepresentation: D) throws",
                        "type": "init"
                      },
                      {
                        "title": "Representing the signature",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/ecdsasignature/derrepresentation",
                        "title": "var derRepresentation: Data",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/cryptokit/p256/signing/ecdsasignature/rawrepresentation",
                        "title": "var rawRepresentation: Data",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/cryptokit/p256/signing/ecdsasignature",
                    "title": "P256.Signing.ECDSASignature",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/cryptokit/p256/signing",
                "title": "P256.Signing",
                "type": "enum"
              }
            ],
            "path": "/documentation/cryptokit/p256",
            "title": "P256",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Deriving keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sharedsecret/hkdfderivedsymmetrickey(using:salt:sharedinfo:outputbytecount:)",
                "title": "func hkdfDerivedSymmetricKey<H, Salt, SI>(using: H.Type, salt: Salt, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/sharedsecret/x963derivedsymmetrickey(using:sharedinfo:outputbytecount:)",
                "title": "func x963DerivedSymmetricKey<H, SI>(using: H.Type, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                "type": "method"
              },
              {
                "title": "Comparing shared secrets",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/sharedsecret/==(_:_:)",
                "title": "static func == <D>(SharedSecret, D) -> Bool",
                "type": "op"
              }
            ],
            "path": "/documentation/cryptokit/sharedsecret",
            "title": "SharedSecret",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Checking availability",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/secureenclave/isavailable",
                "title": "static var isAvailable: Bool",
                "type": "property"
              },
              {
                "title": "Using the secure enclave",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Performing operations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Using keys",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a private key",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/init(datarepresentation:)",
                            "title": "init(dataRepresentation: Data) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/init(datarepresentation:authenticationcontext:)",
                            "title": "init(dataRepresentation: Data, authenticationContext: LAContext?) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/init(compactrepresentable:accesscontrol:)",
                            "title": "init(compactRepresentable: Bool, accessControl: SecAccessControl) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/init(compactrepresentable:accesscontrol:authenticationcontext:)",
                            "title": "init(compactRepresentable: Bool, accessControl: SecAccessControl, authenticationContext: LAContext?) throws",
                            "type": "init"
                          },
                          {
                            "title": "Representing the key",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/datarepresentation",
                            "title": "let dataRepresentation: Data",
                            "type": "property"
                          },
                          {
                            "title": "Finding the public key",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/publickey",
                            "title": "let publicKey: P256.KeyAgreement.PublicKey",
                            "type": "property"
                          },
                          {
                            "title": "Creating a shared secret",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                            "title": "func sharedSecretFromKeyAgreement(with: P256.KeyAgreement.PublicKey) throws -> SharedSecret",
                            "type": "method"
                          },
                          {
                            "children": [
                              {
                                "title": "Deriving keys",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/cryptokit/sharedsecret/hkdfderivedsymmetrickey(using:salt:sharedinfo:outputbytecount:)",
                                "title": "func hkdfDerivedSymmetricKey<H, Salt, SI>(using: H.Type, salt: Salt, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/cryptokit/sharedsecret/x963derivedsymmetrickey(using:sharedinfo:outputbytecount:)",
                                "title": "func x963DerivedSymmetricKey<H, SI>(using: H.Type, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey",
                                "type": "method"
                              },
                              {
                                "title": "Comparing shared secrets",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/cryptokit/sharedsecret/==(_:_:)",
                                "title": "static func == <D>(SharedSecret, D) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/cryptokit/sharedsecret",
                            "title": "SharedSecret",
                            "type": "struct"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Methods",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/sharedsecretfromkeyagreement(with:)",
                                "title": "func sharedSecretFromKeyAgreement(with: P256.KeyAgreement.PublicKey) throws -> SharedSecret",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey/diffiehellmankeyagreement-implementations",
                            "title": "DiffieHellmanKeyAgreement Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/cryptokit/secureenclave/p256/keyagreement/privatekey",
                        "title": "SecureEnclave.P256.KeyAgreement.PrivateKey",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/secureenclave/p256/keyagreement",
                    "title": "SecureEnclave.P256.KeyAgreement",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Using keys",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a private key",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey/init(datarepresentation:)",
                            "title": "init(dataRepresentation: Data) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey/init(datarepresentation:authenticationcontext:)",
                            "title": "init(dataRepresentation: Data, authenticationContext: LAContext?) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey/init(compactrepresentable:accesscontrol:)",
                            "title": "init(compactRepresentable: Bool, accessControl: SecAccessControl) throws",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey/init(compactrepresentable:accesscontrol:authenticationcontext:)",
                            "title": "init(compactRepresentable: Bool, accessControl: SecAccessControl, authenticationContext: LAContext?) throws",
                            "type": "init"
                          },
                          {
                            "title": "Representing the key",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey/datarepresentation",
                            "title": "let dataRepresentation: Data",
                            "type": "property"
                          },
                          {
                            "title": "Getting the public key",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey/publickey",
                            "title": "let publicKey: P256.Signing.PublicKey",
                            "type": "property"
                          },
                          {
                            "title": "Generating a signature",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey/signature(for:)-3xogs",
                            "title": "func signature<D>(for: D) throws -> P256.Signing.ECDSASignature",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey/signature(for:)-76j0u",
                            "title": "func signature<D>(for: D) throws -> P256.Signing.ECDSASignature",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/cryptokit/secureenclave/p256/signing/privatekey",
                        "title": "SecureEnclave.P256.Signing.PrivateKey",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/cryptokit/secureenclave/p256/signing",
                    "title": "SecureEnclave.P256.Signing",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/cryptokit/secureenclave/p256",
                "title": "SecureEnclave.P256",
                "type": "enum"
              }
            ],
            "path": "/documentation/cryptokit/secureenclave",
            "title": "SecureEnclave",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Sending and receiving messages",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/sender/init(recipientkey:ciphersuite:info:)",
                    "title": "init<PK>(recipientKey: PK, ciphersuite: HPKE.Ciphersuite, info: Data) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/sender/init(recipientkey:ciphersuite:info:authenticatedby:)",
                    "title": "init<SK>(recipientKey: SK.PublicKey, ciphersuite: HPKE.Ciphersuite, info: Data, authenticatedBy: SK) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/sender/init(recipientkey:ciphersuite:info:authenticatedby:presharedkey:presharedkeyidentifier:)",
                    "title": "init<SK>(recipientKey: SK.PublicKey, ciphersuite: HPKE.Ciphersuite, info: Data, authenticatedBy: SK, presharedKey: SymmetricKey, presharedKeyIdentifier: Data) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/sender/init(recipientkey:ciphersuite:info:presharedkey:presharedkeyidentifier:)",
                    "title": "init<PK>(recipientKey: PK, ciphersuite: HPKE.Ciphersuite, info: Data, presharedKey: SymmetricKey, presharedKeyIdentifier: Data) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/sender/encapsulatedkey",
                    "title": "let encapsulatedKey: Data",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/sender/exportsecret(context:outputbytecount:)",
                    "title": "func exportSecret<Context>(context: Context, outputByteCount: Int) throws -> SymmetricKey",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/sender/seal(_:)",
                    "title": "func seal<M>(M) throws -> Data",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/sender/seal(_:authenticating:)",
                    "title": "func seal<M, AD>(M, authenticating: AD) throws -> Data",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/hpke/sender",
                "title": "HPKE.Sender",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/recipient/init(privatekey:ciphersuite:info:encapsulatedkey:)",
                    "title": "init<SK>(privateKey: SK, ciphersuite: HPKE.Ciphersuite, info: Data, encapsulatedKey: Data) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/recipient/init(privatekey:ciphersuite:info:encapsulatedkey:authenticatedby:)",
                    "title": "init<SK>(privateKey: SK, ciphersuite: HPKE.Ciphersuite, info: Data, encapsulatedKey: Data, authenticatedBy: SK.PublicKey) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/recipient/init(privatekey:ciphersuite:info:encapsulatedkey:authenticatedby:presharedkey:presharedkeyidentifier:)",
                    "title": "init<SK>(privateKey: SK, ciphersuite: HPKE.Ciphersuite, info: Data, encapsulatedKey: Data, authenticatedBy: SK.PublicKey, presharedKey: SymmetricKey, presharedKeyIdentifier: Data) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/recipient/init(privatekey:ciphersuite:info:encapsulatedkey:presharedkey:presharedkeyidentifier:)",
                    "title": "init<SK>(privateKey: SK, ciphersuite: HPKE.Ciphersuite, info: Data, encapsulatedKey: Data, presharedKey: SymmetricKey, presharedKeyIdentifier: Data) throws",
                    "type": "init"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/recipient/exportsecret(context:outputbytecount:)",
                    "title": "func exportSecret<Context>(context: Context, outputByteCount: Int) throws -> SymmetricKey",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/recipient/open(_:)",
                    "title": "func open<C>(C) throws -> Data",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/recipient/open(_:authenticating:)",
                    "title": "func open<C, AD>(C, authenticating: AD) throws -> Data",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/hpke/recipient",
                "title": "HPKE.Recipient",
                "type": "struct"
              },
              {
                "title": "Choosing cryptographic algorithms",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/ciphersuite/init(kem:kdf:aead:)",
                    "title": "init(kem: HPKE.KEM, kdf: HPKE.KDF, aead: HPKE.AEAD)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/ciphersuite/aead",
                    "title": "let aead: HPKE.AEAD",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/ciphersuite/kdf",
                    "title": "let kdf: HPKE.KDF",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/ciphersuite/kem",
                    "title": "let kem: HPKE.KEM",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/ciphersuite/curve25519_sha256_chachapoly",
                    "title": "static let Curve25519_SHA256_ChachaPoly: HPKE.Ciphersuite",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/ciphersuite/p256_sha256_aes_gcm_256",
                    "title": "static let P256_SHA256_AES_GCM_256: HPKE.Ciphersuite",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/ciphersuite/p384_sha384_aes_gcm_256",
                    "title": "static let P384_SHA384_AES_GCM_256: HPKE.Ciphersuite",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/ciphersuite/p521_sha512_aes_gcm_256",
                    "title": "static let P521_SHA512_AES_GCM_256: HPKE.Ciphersuite",
                    "type": "property"
                  }
                ],
                "path": "/documentation/cryptokit/hpke/ciphersuite",
                "title": "HPKE.Ciphersuite",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/aead/aes_gcm_128",
                    "title": "case AES_GCM_128",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/aead/aes_gcm_256",
                    "title": "case AES_GCM_256",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/aead/chachapoly",
                    "title": "case chaChaPoly",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/aead/exportonly",
                    "title": "case exportOnly",
                    "type": "case"
                  }
                ],
                "path": "/documentation/cryptokit/hpke/aead",
                "title": "HPKE.AEAD",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/kdf/hkdf_sha256",
                    "title": "case HKDF_SHA256",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/kdf/hkdf_sha384",
                    "title": "case HKDF_SHA384",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/kdf/hkdf_sha512",
                    "title": "case HKDF_SHA512",
                    "type": "case"
                  }
                ],
                "path": "/documentation/cryptokit/hpke/kdf",
                "title": "HPKE.KDF",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/kem/curve25519_hkdf_sha256",
                    "title": "case Curve25519_HKDF_SHA256",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/kem/p256_hkdf_sha256",
                    "title": "case P256_HKDF_SHA256",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/kem/p384_hkdf_sha384",
                    "title": "case P384_HKDF_SHA384",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/kem/p521_hkdf_sha512",
                    "title": "case P521_HKDF_SHA512",
                    "type": "case"
                  }
                ],
                "path": "/documentation/cryptokit/hpke/kem",
                "title": "HPKE.KEM",
                "type": "enum"
              },
              {
                "path": "/documentation/cryptokit/hpke/dhkem",
                "title": "HPKE.DHKEM",
                "type": "enum"
              },
              {
                "title": "Handling errors",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/errors/ciphertexttooshort",
                    "title": "case ciphertextTooShort",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/errors/expectedpsk",
                    "title": "case expectedPSK",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/errors/exportonlymode",
                    "title": "case exportOnlyMode",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/errors/inconsistentciphersuiteandkey",
                    "title": "case inconsistentCiphersuiteAndKey",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/errors/inconsistentpskinputs",
                    "title": "case inconsistentPSKInputs",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/errors/inconsistentparameters",
                    "title": "case inconsistentParameters",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/errors/outofrangesequencenumber",
                    "title": "case outOfRangeSequenceNumber",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cryptokit/hpke/errors/unexpectedpsk",
                    "title": "case unexpectedPSK",
                    "type": "case"
                  }
                ],
                "path": "/documentation/cryptokit/hpke/errors",
                "title": "HPKE.Errors",
                "type": "enum"
              }
            ],
            "path": "/documentation/cryptokit/hpke",
            "title": "HPKE",
            "type": "enum"
          },
          {
            "title": "Key derivation functions",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Deriving a key",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hkdf/derivekey(inputkeymaterial:outputbytecount:)",
                "title": "static func deriveKey(inputKeyMaterial: SymmetricKey, outputByteCount: Int) -> SymmetricKey",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hkdf/derivekey(inputkeymaterial:info:outputbytecount:)",
                "title": "static func deriveKey<Info>(inputKeyMaterial: SymmetricKey, info: Info, outputByteCount: Int) -> SymmetricKey",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hkdf/derivekey(inputkeymaterial:salt:outputbytecount:)",
                "title": "static func deriveKey<Salt>(inputKeyMaterial: SymmetricKey, salt: Salt, outputByteCount: Int) -> SymmetricKey",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hkdf/derivekey(inputkeymaterial:salt:info:outputbytecount:)",
                "title": "static func deriveKey<Salt, Info>(inputKeyMaterial: SymmetricKey, salt: Salt, info: Info, outputByteCount: Int) -> SymmetricKey",
                "type": "method"
              },
              {
                "title": "Controlling key derivation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hkdf/extract(inputkeymaterial:salt:)",
                "title": "static func extract<Salt>(inputKeyMaterial: SymmetricKey, salt: Salt?) -> HashedAuthenticationCode<H>",
                "type": "method"
              },
              {
                "path": "/documentation/cryptokit/hkdf/expand(pseudorandomkey:info:outputbytecount:)",
                "title": "static func expand<PRK, Info>(pseudoRandomKey: PRK, info: Info?, outputByteCount: Int) -> SymmetricKey",
                "type": "method"
              }
            ],
            "path": "/documentation/cryptokit/hkdf",
            "title": "HKDF",
            "type": "struct"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Reporting errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/cryptokiterror/incorrectkeysize",
                "title": "case incorrectKeySize",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokiterror/invalidparameter",
                "title": "case invalidParameter",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokiterror/incorrectparametersize",
                "title": "case incorrectParameterSize",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokiterror/underlyingcorecryptoerror(error:)",
                "title": "case underlyingCoreCryptoError(error: Int32)",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokiterror/authenticationfailure",
                "title": "case authenticationFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokiterror/wrapfailure",
                "title": "case wrapFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokiterror/unwrapfailure",
                "title": "case unwrapFailure",
                "type": "case"
              }
            ],
            "path": "/documentation/cryptokit/cryptokiterror",
            "title": "CryptoKitError",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Reporting errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/cryptokitasn1error/invalidasn1integerencoding",
                "title": "case invalidASN1IntegerEncoding",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokitasn1error/invalidasn1object",
                "title": "case invalidASN1Object",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokitasn1error/invalidfieldidentifier",
                "title": "case invalidFieldIdentifier",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokitasn1error/invalidobjectidentifier",
                "title": "case invalidObjectIdentifier",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokitasn1error/invalidpemdocument",
                "title": "case invalidPEMDocument",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokitasn1error/truncatedasn1field",
                "title": "case truncatedASN1Field",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokitasn1error/unexpectedfieldtype",
                "title": "case unexpectedFieldType",
                "type": "case"
              },
              {
                "path": "/documentation/cryptokit/cryptokitasn1error/unsupportedfieldlength",
                "title": "case unsupportedFieldLength",
                "type": "case"
              }
            ],
            "path": "/documentation/cryptokit/cryptokitasn1error",
            "title": "CryptoKitASN1Error",
            "type": "enum"
          },
          {
            "title": "Legacy algorithms",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Hashes",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Specifying the output type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5/digest",
                    "title": "Insecure.MD5.Digest",
                    "type": "typealias"
                  },
                  {
                    "children": [
                      {
                        "title": "Inspecting the digest length",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/insecure/md5digest/bytecount",
                        "title": "static var byteCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Describing a digest",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/insecure/md5digest/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Hashing a digest",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/insecure/md5digest/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/cryptokit/insecure/md5digest",
                    "title": "Insecure.MD5Digest",
                    "type": "struct"
                  },
                  {
                    "title": "Reporting the hash length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5/bytecount",
                    "title": "static let byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Computing a hash iteratively",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5/update(bufferpointer:)",
                    "title": "func update(bufferPointer: UnsafeRawBufferPointer)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5/finalize()",
                    "title": "func finalize() -> Insecure.MD5.Digest",
                    "type": "method"
                  },
                  {
                    "title": "Reporting hash function information",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5/blockbytecount",
                    "title": "static let blockByteCount: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/cryptokit/insecure/md5",
                "title": "Insecure.MD5",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Specifying the output type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1/digest",
                    "title": "Insecure.SHA1.Digest",
                    "type": "typealias"
                  },
                  {
                    "children": [
                      {
                        "title": "Inspecting the digest length",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/insecure/sha1digest/bytecount",
                        "title": "static var byteCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Describing a digest",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/insecure/sha1digest/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Hasing a digest",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/cryptokit/insecure/sha1digest/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/cryptokit/insecure/sha1digest",
                    "title": "Insecure.SHA1Digest",
                    "type": "struct"
                  },
                  {
                    "title": "Reporting the hash length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1/bytecount",
                    "title": "static let byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Computing a hash iteratively",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1/update(bufferpointer:)",
                    "title": "func update(bufferPointer: UnsafeRawBufferPointer)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1/finalize()",
                    "title": "func finalize() -> Insecure.SHA1.Digest",
                    "type": "method"
                  },
                  {
                    "title": "Reporting hash function information",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1/blockbytecount",
                    "title": "static let blockByteCount: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/cryptokit/insecure/sha1",
                "title": "Insecure.SHA1",
                "type": "struct"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Inspecting the digest length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5digest/bytecount",
                    "title": "static var byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Describing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5digest/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Hashing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/md5digest/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/insecure/md5digest",
                "title": "Insecure.MD5Digest",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Inspecting the digest length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1digest/bytecount",
                    "title": "static var byteCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Describing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1digest/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Hasing a digest",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/insecure/sha1digest/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/cryptokit/insecure/sha1digest",
                "title": "Insecure.SHA1Digest",
                "type": "struct"
              }
            ],
            "path": "/documentation/cryptokit/insecure",
            "title": "Insecure",
            "type": "enum"
          },
          {
            "title": "Protocols",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/diffiehellmankeyagreement/publickey-swift.associatedtype",
                "title": "PublicKey",
                "type": "associatedtype"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/diffiehellmankeyagreement/publickey-swift.property",
                "title": "var publicKey: Self.PublicKey",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/diffiehellmankeyagreement/sharedsecretfromkeyagreement(with:)",
                "title": "func sharedSecretFromKeyAgreement(with: Self.PublicKey) throws -> SharedSecret",
                "type": "method"
              }
            ],
            "path": "/documentation/cryptokit/diffiehellmankeyagreement",
            "title": "DiffieHellmanKeyAgreement",
            "type": "protocol"
          },
          {
            "path": "/documentation/cryptokit/hpkediffiehellmanprivatekey",
            "title": "HPKEDiffieHellmanPrivateKey",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hpkediffiehellmanprivatekeygeneration/init()",
                "title": "init()",
                "type": "init"
              }
            ],
            "path": "/documentation/cryptokit/hpkediffiehellmanprivatekeygeneration",
            "title": "HPKEDiffieHellmanPrivateKeyGeneration",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hpkediffiehellmanpublickey/ephemeralprivatekey",
                "title": "EphemeralPrivateKey",
                "type": "associatedtype"
              }
            ],
            "path": "/documentation/cryptokit/hpkediffiehellmanpublickey",
            "title": "HPKEDiffieHellmanPublicKey",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hpkepublickeyserialization/init(_:kem:)",
                "title": "init<D>(D, kem: HPKE.KEM) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/hpkepublickeyserialization/hpkerepresentation(kem:)",
                "title": "func hpkeRepresentation(kem: HPKE.KEM) throws -> Data",
                "type": "method"
              }
            ],
            "path": "/documentation/cryptokit/hpkepublickeyserialization",
            "title": "HPKEPublicKeySerialization",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/kemprivatekey/publickey-swift.associatedtype",
                "title": "PublicKey",
                "type": "associatedtype"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/kemprivatekey/publickey-swift.property",
                "title": "var publicKey: Self.PublicKey",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/kemprivatekey/decapsulate(_:)",
                "title": "func decapsulate(Data) throws -> SymmetricKey",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/kemprivatekey/generate()",
                "title": "static func generate() throws -> Self",
                "type": "method"
              }
            ],
            "path": "/documentation/cryptokit/kemprivatekey",
            "title": "KEMPrivateKey",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cryptokit/kempublickey/encapsulate()",
                "title": "func encapsulate() throws -> KEM.EncapsulationResult",
                "type": "method"
              }
            ],
            "path": "/documentation/cryptokit/kempublickey",
            "title": "KEMPublicKey",
            "type": "protocol"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cryptokit/corecryptocurvetype",
            "title": "CorecryptoCurveType",
            "type": "struct"
          },
          {
            "title": "Type Aliases",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cryptokit/cryptokitmetaerror",
            "title": "CryptoKitMetaError",
            "type": "typealias"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/kem/encapsulationresult/init(sharedsecret:encapsulated:)",
                    "title": "init(sharedSecret: SymmetricKey, encapsulated: Data)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cryptokit/kem/encapsulationresult/encapsulated",
                    "title": "let encapsulated: Data",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/cryptokit/kem/encapsulationresult/sharedsecret",
                    "title": "let sharedSecret: SymmetricKey",
                    "type": "property"
                  }
                ],
                "path": "/documentation/cryptokit/kem/encapsulationresult",
                "title": "KEM.EncapsulationResult",
                "type": "struct"
              }
            ],
            "path": "/documentation/cryptokit/kem",
            "title": "KEM",
            "type": "enum"
          }
        ],
        "path": "/documentation/cryptokit",
        "title": "Apple CryptoKit",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
