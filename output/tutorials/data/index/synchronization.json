{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Atomic Values",
            "type": "groupMarker"
          },
          {
            "title": "Memory Ordering Semantics",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/synchronization",
        "title": "Synchronization",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Atomic Values",
            "type": "groupMarker"
          },
          {
            "title": "Memory Ordering Semantics",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/synchronization",
        "title": "Synchronization",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Atomic Values",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomic/init(_:)",
                "title": "init(consuming Value)",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-1k1sq",
                "title": "func add(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-34u14",
                "title": "func add(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-39vk1",
                "title": "func add(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-4dpjd",
                "title": "func add(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-4ocr0",
                "title": "func add(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-6rhji",
                "title": "func add(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-7ws8q",
                "title": "func add(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-8cc78",
                "title": "func add(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-8xoe3",
                "title": "func add(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-90njk",
                "title": "func add(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-97ilu",
                "title": "func add(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/add(_:ordering:)-vm4c",
                "title": "func add(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-1baj3",
                "title": "func bitwiseAnd(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-1gzwl",
                "title": "func bitwiseAnd(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-1yz1m",
                "title": "func bitwiseAnd(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-3zt46",
                "title": "func bitwiseAnd(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-4db7m",
                "title": "func bitwiseAnd(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-56lhq",
                "title": "func bitwiseAnd(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-5iaoz",
                "title": "func bitwiseAnd(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-5m0jk",
                "title": "func bitwiseAnd(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-5mhgj",
                "title": "func bitwiseAnd(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-6mxdg",
                "title": "func bitwiseAnd(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-8ilt7",
                "title": "func bitwiseAnd(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseand(_:ordering:)-l1a3",
                "title": "func bitwiseAnd(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-206dk",
                "title": "func bitwiseOr(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-39r9q",
                "title": "func bitwiseOr(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-4ozz5",
                "title": "func bitwiseOr(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-4q8ef",
                "title": "func bitwiseOr(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-4y864",
                "title": "func bitwiseOr(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-5574x",
                "title": "func bitwiseOr(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-6fz7a",
                "title": "func bitwiseOr(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-6zz2p",
                "title": "func bitwiseOr(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-72403",
                "title": "func bitwiseOr(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-84e8q",
                "title": "func bitwiseOr(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-9191v",
                "title": "func bitwiseOr(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwiseor(_:ordering:)-aa7f",
                "title": "func bitwiseOr(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-271x9",
                "title": "func bitwiseXor(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-2vrf",
                "title": "func bitwiseXor(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-33l7y",
                "title": "func bitwiseXor(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-4umey",
                "title": "func bitwiseXor(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-5df6p",
                "title": "func bitwiseXor(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-5vpxh",
                "title": "func bitwiseXor(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-5zfc",
                "title": "func bitwiseXor(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-8t1qf",
                "title": "func bitwiseXor(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-9l5qb",
                "title": "func bitwiseXor(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-9xi4f",
                "title": "func bitwiseXor(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-m4nt",
                "title": "func bitwiseXor(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/bitwisexor(_:ordering:)-sf4i",
                "title": "func bitwiseXor(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-33pf3",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-6rsfl",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-8uimm",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-9bh60",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:ordering:)-s52j",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-5obt4",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-7msfy",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-82j0l",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-8d36a",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/compareexchange(expected:desired:successordering:failureordering:)-cve0",
                "title": "func compareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/exchange(_:ordering:)-5n6sy",
                "title": "func exchange(consuming Value, ordering: AtomicUpdateOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/exchange(_:ordering:)-8ip0d",
                "title": "func exchange(consuming Value, ordering: AtomicUpdateOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/exchange(_:ordering:)-9kb4s",
                "title": "func exchange(consuming Value, ordering: AtomicUpdateOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/exchange(_:ordering:)-9y5j8",
                "title": "func exchange(consuming Value, ordering: AtomicUpdateOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/exchange(_:ordering:)-ycta",
                "title": "func exchange(consuming Value, ordering: AtomicUpdateOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/load(ordering:)-2u27y",
                "title": "func load(ordering: AtomicLoadOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/load(ordering:)-2v8gp",
                "title": "func load(ordering: AtomicLoadOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/load(ordering:)-3u18o",
                "title": "func load(ordering: AtomicLoadOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/load(ordering:)-4mv5b",
                "title": "func load(ordering: AtomicLoadOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/load(ordering:)-8ufx2",
                "title": "func load(ordering: AtomicLoadOrdering) -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/logicaland(_:ordering:)",
                "title": "func logicalAnd(Bool, ordering: AtomicUpdateOrdering) -> (oldValue: Bool, newValue: Bool)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/logicalor(_:ordering:)",
                "title": "func logicalOr(Bool, ordering: AtomicUpdateOrdering) -> (oldValue: Bool, newValue: Bool)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/logicalxor(_:ordering:)",
                "title": "func logicalXor(Bool, ordering: AtomicUpdateOrdering) -> (oldValue: Bool, newValue: Bool)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-1l8lv",
                "title": "func max(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-32cin",
                "title": "func max(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-4e4mn",
                "title": "func max(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-4rq6h",
                "title": "func max(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-5qqv7",
                "title": "func max(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-681q1",
                "title": "func max(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-7kusb",
                "title": "func max(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-7qnkd",
                "title": "func max(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-7z7ub",
                "title": "func max(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-81jab",
                "title": "func max(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-957na",
                "title": "func max(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/max(_:ordering:)-xy7u",
                "title": "func max(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-1uwzs",
                "title": "func min(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-2l64c",
                "title": "func min(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-39r27",
                "title": "func min(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-3tiyt",
                "title": "func min(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-3tk2x",
                "title": "func min(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-4b62m",
                "title": "func min(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-4wv9d",
                "title": "func min(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-6bbf1",
                "title": "func min(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-6ivky",
                "title": "func min(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-73283",
                "title": "func min(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-8k42m",
                "title": "func min(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/min(_:ordering:)-yogw",
                "title": "func min(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/store(_:ordering:)-195np",
                "title": "func store(consuming Value, ordering: AtomicStoreOrdering)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/store(_:ordering:)-22zxw",
                "title": "func store(consuming Value, ordering: AtomicStoreOrdering)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/store(_:ordering:)-532ut",
                "title": "func store(consuming Value, ordering: AtomicStoreOrdering)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/store(_:ordering:)-5q2fi",
                "title": "func store(consuming Value, ordering: AtomicStoreOrdering)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/store(_:ordering:)-97ua7",
                "title": "func store(consuming Value, ordering: AtomicStoreOrdering)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-1atf4",
                "title": "func subtract(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-1iop7",
                "title": "func subtract(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-2ddui",
                "title": "func subtract(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-2ds2s",
                "title": "func subtract(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-3c2nm",
                "title": "func subtract(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-47p0x",
                "title": "func subtract(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-5rq0s",
                "title": "func subtract(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-65sge",
                "title": "func subtract(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-6eidf",
                "title": "func subtract(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-7ebxd",
                "title": "func subtract(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-9w06o",
                "title": "func subtract(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/subtract(_:ordering:)-pqxe",
                "title": "func subtract(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-24bnb",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-728eh",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-72wpg",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-9w8ty",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:ordering:)-9xqnl",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, ordering: AtomicUpdateOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-2ywaz",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-3p8t6",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-7vtyo",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-9kx2t",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/weakcompareexchange(expected:desired:successordering:failureordering:)-kfa8",
                "title": "func weakCompareExchange(expected: consuming Value, desired: consuming Value, successOrdering: AtomicUpdateOrdering, failureOrdering: AtomicLoadOrdering) -> (exchanged: Bool, original: Value)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-1cynr",
                "title": "func wrappingAdd(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-35sou",
                "title": "func wrappingAdd(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-3ihte",
                "title": "func wrappingAdd(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-3ltc9",
                "title": "func wrappingAdd(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-4da1i",
                "title": "func wrappingAdd(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-7flp6",
                "title": "func wrappingAdd(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-8rrye",
                "title": "func wrappingAdd(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-8wun9",
                "title": "func wrappingAdd(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-9ce27",
                "title": "func wrappingAdd(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-bmso",
                "title": "func wrappingAdd(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-u8d5",
                "title": "func wrappingAdd(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingadd(_:ordering:)-ussb",
                "title": "func wrappingAdd(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-1bgvk",
                "title": "func wrappingSubtract(Int16, ordering: AtomicUpdateOrdering) -> (oldValue: Int16, newValue: Int16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-3795w",
                "title": "func wrappingSubtract(Int64, ordering: AtomicUpdateOrdering) -> (oldValue: Int64, newValue: Int64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-43111",
                "title": "func wrappingSubtract(UInt128, ordering: AtomicUpdateOrdering) -> (oldValue: UInt128, newValue: UInt128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-6g9gv",
                "title": "func wrappingSubtract(Int, ordering: AtomicUpdateOrdering) -> (oldValue: Int, newValue: Int)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-6xyiw",
                "title": "func wrappingSubtract(Int8, ordering: AtomicUpdateOrdering) -> (oldValue: Int8, newValue: Int8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-6y8r7",
                "title": "func wrappingSubtract(UInt32, ordering: AtomicUpdateOrdering) -> (oldValue: UInt32, newValue: UInt32)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-7136k",
                "title": "func wrappingSubtract(UInt, ordering: AtomicUpdateOrdering) -> (oldValue: UInt, newValue: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-7203n",
                "title": "func wrappingSubtract(UInt64, ordering: AtomicUpdateOrdering) -> (oldValue: UInt64, newValue: UInt64)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-7k1nk",
                "title": "func wrappingSubtract(Int128, ordering: AtomicUpdateOrdering) -> (oldValue: Int128, newValue: Int128)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-83zzr",
                "title": "func wrappingSubtract(UInt8, ordering: AtomicUpdateOrdering) -> (oldValue: UInt8, newValue: UInt8)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-8o6j2",
                "title": "func wrappingSubtract(UInt16, ordering: AtomicUpdateOrdering) -> (oldValue: UInt16, newValue: UInt16)",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomic/wrappingsubtract(_:ordering:)-8xrpg",
                "title": "func wrappingSubtract(Int32, ordering: AtomicUpdateOrdering) -> (oldValue: Int32, newValue: Int32)",
                "type": "method"
              }
            ],
            "path": "/documentation/synchronization/atomic",
            "title": "Atomic",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomiclazyreference/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomiclazyreference/load()",
                "title": "func load() -> Instance?",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomiclazyreference/storeifnil(_:)",
                "title": "func storeIfNil(consuming Instance) -> Instance",
                "type": "method"
              }
            ],
            "path": "/documentation/synchronization/atomiclazyreference",
            "title": "AtomicLazyReference",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/wordpair/init(first:second:)",
                "title": "init(first: UInt, second: UInt)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/wordpair/first",
                "title": "var first: UInt",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/wordpair/second",
                "title": "var second: UInt",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/atomicrepresentation",
                    "title": "WordPair.AtomicRepresentation",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/decodeatomicrepresentation(_:)",
                    "title": "static func decodeAtomicRepresentation(consuming WordPair.AtomicRepresentation) -> WordPair",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/encodeatomicrepresentation(_:)",
                    "title": "static func encodeAtomicRepresentation(consuming WordPair) -> WordPair.AtomicRepresentation",
                    "type": "method"
                  }
                ],
                "path": "/documentation/synchronization/wordpair/atomicrepresentable-implementations",
                "title": "AtomicRepresentable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/synchronization/wordpair/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/synchronization/wordpair/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/==(_:_:)",
                    "title": "static func == (WordPair, WordPair) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/synchronization/wordpair/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/wordpair/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/synchronization/wordpair/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/synchronization/wordpair",
            "title": "WordPair",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomicrepresentable/atomicrepresentation",
                "title": "AtomicRepresentation",
                "type": "associatedtype"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomicrepresentable/decodeatomicrepresentation(_:)",
                "title": "static func decodeAtomicRepresentation(consuming Self.AtomicRepresentation) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomicrepresentable/encodeatomicrepresentation(_:)",
                "title": "static func encodeAtomicRepresentation(consuming Self) -> Self.AtomicRepresentation",
                "type": "method"
              }
            ],
            "path": "/documentation/synchronization/atomicrepresentable",
            "title": "AtomicRepresentable",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomicoptionalrepresentable/atomicoptionalrepresentation",
                "title": "AtomicOptionalRepresentation",
                "type": "associatedtype"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomicoptionalrepresentable/decodeatomicoptionalrepresentation(_:)",
                "title": "static func decodeAtomicOptionalRepresentation(consuming Self.AtomicOptionalRepresentation) -> Self?",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/atomicoptionalrepresentable/encodeatomicoptionalrepresentation(_:)",
                "title": "static func encodeAtomicOptionalRepresentation(consuming Self?) -> Self.AtomicOptionalRepresentation",
                "type": "method"
              }
            ],
            "path": "/documentation/synchronization/atomicoptionalrepresentable",
            "title": "AtomicOptionalRepresentable",
            "type": "protocol"
          },
          {
            "title": "Memory Ordering Semantics",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomicloadordering/acquiring",
                "title": "static var acquiring: AtomicLoadOrdering",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/atomicloadordering/relaxed",
                "title": "static var relaxed: AtomicLoadOrdering",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/atomicloadordering/sequentiallyconsistent",
                "title": "static var sequentiallyConsistent: AtomicLoadOrdering",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicloadordering/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/synchronization/atomicloadordering/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicloadordering/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/synchronization/atomicloadordering/==(_:_:)",
                    "title": "static func == (AtomicLoadOrdering, AtomicLoadOrdering) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/synchronization/atomicloadordering/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicloadordering/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicloadordering/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/synchronization/atomicloadordering/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/synchronization/atomicloadordering",
            "title": "AtomicLoadOrdering",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomicstoreordering/relaxed",
                "title": "static var relaxed: AtomicStoreOrdering",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/atomicstoreordering/releasing",
                "title": "static var releasing: AtomicStoreOrdering",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/atomicstoreordering/sequentiallyconsistent",
                "title": "static var sequentiallyConsistent: AtomicStoreOrdering",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicstoreordering/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/synchronization/atomicstoreordering/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicstoreordering/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/synchronization/atomicstoreordering/==(_:_:)",
                    "title": "static func == (AtomicStoreOrdering, AtomicStoreOrdering) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/synchronization/atomicstoreordering/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicstoreordering/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicstoreordering/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/synchronization/atomicstoreordering/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/synchronization/atomicstoreordering",
            "title": "AtomicStoreOrdering",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/atomicupdateordering/acquiring",
                "title": "static var acquiring: AtomicUpdateOrdering",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/atomicupdateordering/acquiringandreleasing",
                "title": "static var acquiringAndReleasing: AtomicUpdateOrdering",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/atomicupdateordering/relaxed",
                "title": "static var relaxed: AtomicUpdateOrdering",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/atomicupdateordering/releasing",
                "title": "static var releasing: AtomicUpdateOrdering",
                "type": "property"
              },
              {
                "path": "/documentation/synchronization/atomicupdateordering/sequentiallyconsistent",
                "title": "static var sequentiallyConsistent: AtomicUpdateOrdering",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicupdateordering/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/synchronization/atomicupdateordering/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicupdateordering/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/synchronization/atomicupdateordering/==(_:_:)",
                    "title": "static func == (AtomicUpdateOrdering, AtomicUpdateOrdering) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/synchronization/atomicupdateordering/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicupdateordering/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/synchronization/atomicupdateordering/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/synchronization/atomicupdateordering/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/synchronization/atomicupdateordering",
            "title": "AtomicUpdateOrdering",
            "type": "struct"
          },
          {
            "path": "/documentation/synchronization/atomicmemoryfence(ordering:)",
            "title": "func atomicMemoryFence(ordering: AtomicUpdateOrdering)",
            "type": "func"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/mutex/init(_:)",
                "title": "init(consuming sending Value)",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/synchronization/mutex/withlock(_:)",
                "title": "func withLock<Result, E>((inout sending Value) throws(E) -> sending Result) throws(E) -> sending Result",
                "type": "method"
              },
              {
                "path": "/documentation/synchronization/mutex/withlockifavailable(_:)",
                "title": "func withLockIfAvailable<Result, E>((inout sending Value) throws(E) -> sending Result) throws(E) -> sending Result?",
                "type": "method"
              }
            ],
            "path": "/documentation/synchronization/mutex",
            "title": "Mutex",
            "type": "struct"
          }
        ],
        "path": "/documentation/synchronization",
        "title": "Synchronization",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
