{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Image Models",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/creating-an-image-classifier-model",
            "title": "Creating an Image Classifier Model",
            "type": "article"
          },
          {
            "title": "Video Models",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Action Classifier Data Sources",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/gathering-training-videos-for-an-action-classifier",
                "title": "Gathering Training Videos for an Action Classifier",
                "type": "article"
              },
              {
                "path": "/documentation/createml/building-an-action-classifier-data-source",
                "title": "Building an Action Classifier Data Source",
                "type": "article"
              }
            ],
            "path": "/documentation/createml/creating-an-action-classifier-model",
            "title": "Creating an Action Classifier Model",
            "type": "collection"
          },
          {
            "title": "Text Models",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/creating-a-text-classifier-model",
            "title": "Creating a text classifier model",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/naturallanguage/creating-a-word-tagger-model",
            "title": "Creating a word tagger model",
            "type": "article"
          },
          {
            "title": "Sound Models",
            "type": "groupMarker"
          },
          {
            "title": "Motion Models",
            "type": "groupMarker"
          },
          {
            "title": "Tabular Models",
            "type": "groupMarker"
          },
          {
            "title": "Tabular Data",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Table Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Column Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Plot Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Visualization Protocols",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/createml/data-visualizations",
            "title": "Data Visualizations",
            "type": "collection"
          },
          {
            "title": "Model Accuracy",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/improving-your-model-s-accuracy",
            "title": "Improving Your Model’s Accuracy",
            "type": "article"
          },
          {
            "title": "Model Training Control",
            "type": "groupMarker"
          },
          {
            "title": "Supporting Types",
            "type": "groupMarker"
          },
          {
            "title": "Articles",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/recording-or-choosing-training-videos",
            "title": "Gathering Training Videos for an Action Classifier",
            "type": "article"
          },
          {
            "path": "/documentation/createml/creating-a-classification-model-for-natural-language",
            "title": "Creating a Text Classifier Model",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Table Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Column Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Plot Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Visualization Protocols",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/createml/create-ml-utilties",
            "title": "Data Visualizations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an Augmentation",
                "type": "groupMarker"
              },
              {
                "title": "Inspecting an Augmentation",
                "type": "groupMarker"
              },
              {
                "title": "Adding an Augmentation",
                "type": "groupMarker"
              },
              {
                "title": "Combining Augmentations",
                "type": "groupMarker"
              },
              {
                "title": "Removing an Augmentation",
                "type": "groupMarker"
              },
              {
                "title": "Comparing Augmentations",
                "type": "groupMarker"
              },
              {
                "title": "Encoding and Decoding an Augmentation",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/createml/option-set-support",
            "title": "Option Set Support",
            "type": "collection"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/createml",
        "title": "Create ML",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Image Models",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/creating-an-image-classifier-model",
            "title": "Creating an Image Classifier Model",
            "type": "article"
          },
          {
            "title": "Video Models",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Action Classifier Data Sources",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/gathering-training-videos-for-an-action-classifier",
                "title": "Gathering Training Videos for an Action Classifier",
                "type": "article"
              },
              {
                "path": "/documentation/createml/building-an-action-classifier-data-source",
                "title": "Building an Action Classifier Data Source",
                "type": "article"
              }
            ],
            "path": "/documentation/createml/creating-an-action-classifier-model",
            "title": "Creating an Action Classifier Model",
            "type": "collection"
          },
          {
            "title": "Text Models",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/creating-a-text-classifier-model",
            "title": "Creating a text classifier model",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/naturallanguage/creating-a-word-tagger-model",
            "title": "Creating a word tagger model",
            "type": "article"
          },
          {
            "title": "Sound Models",
            "type": "groupMarker"
          },
          {
            "title": "Motion Models",
            "type": "groupMarker"
          },
          {
            "title": "Tabular Models",
            "type": "groupMarker"
          },
          {
            "title": "Tabular Data",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Table Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Column Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Plot Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Visualization Protocols",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/createml/data-visualizations",
            "title": "Data Visualizations",
            "type": "collection"
          },
          {
            "title": "Model Accuracy",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/improving-your-model-s-accuracy",
            "title": "Improving Your Model’s Accuracy",
            "type": "article"
          },
          {
            "title": "Model Training Control",
            "type": "groupMarker"
          },
          {
            "title": "Supporting Types",
            "type": "groupMarker"
          },
          {
            "title": "Articles",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/recording-or-choosing-training-videos",
            "title": "Gathering Training Videos for an Action Classifier",
            "type": "article"
          },
          {
            "path": "/documentation/createml/creating-a-classification-model-for-natural-language",
            "title": "Creating a Text Classifier Model",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Table Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Column Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Plot Visualizations",
                "type": "groupMarker"
              },
              {
                "title": "Visualization Protocols",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/createml/create-ml-utilties",
            "title": "Data Visualizations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an Augmentation",
                "type": "groupMarker"
              },
              {
                "title": "Inspecting an Augmentation",
                "type": "groupMarker"
              },
              {
                "title": "Adding an Augmentation",
                "type": "groupMarker"
              },
              {
                "title": "Combining Augmentations",
                "type": "groupMarker"
              },
              {
                "title": "Removing an Augmentation",
                "type": "groupMarker"
              },
              {
                "title": "Comparing Augmentations",
                "type": "groupMarker"
              },
              {
                "title": "Encoding and Decoding an Augmentation",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/createml/option-set-support",
            "title": "Option Set Support",
            "type": "collection"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/createml",
        "title": "Create ML",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Image Models",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/creating-an-image-classifier-model",
            "title": "Creating an Image Classifier Model",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Training an image classifier asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/maketrainingsession(trainingdata:parameters:sessionparameters:)",
                "title": "static func makeTrainingSession(trainingData: MLImageClassifier.DataSource, parameters: MLImageClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLImageClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/train(trainingdata:parameters:sessionparameters:)",
                "title": "static func train(trainingData: MLImageClassifier.DataSource, parameters: MLImageClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLImageClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/resume(_:)",
                "title": "static func resume(MLTrainingSession<MLImageClassifier>) throws -> MLJob<MLImageClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/restoretrainingsession(sessionparameters:)",
                "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLImageClassifier>",
                "type": "method"
              },
              {
                "title": "Creating an image classifier from a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/init(checkpoint:)",
                "title": "init(checkpoint: MLCheckpoint) throws",
                "type": "init"
              },
              {
                "title": "Training an image classifier synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/init(trainingdata:parameters:)-4r6hr",
                "title": "init(trainingData: MLImageClassifier.DataSource, parameters: MLImageClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlimageclassifier/init(trainingdata:parameters:)-7j4w6",
                "title": "init(trainingData: [String : [URL]], parameters: MLImageClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Assessing model accuracy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/trainingmetrics",
                "title": "var trainingMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/validationmetrics",
                "title": "var validationMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "title": "Evaluating an image classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/evaluation(on:)-9p8mi",
                "title": "func evaluation(on: MLImageClassifier.DataSource) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlimageclassifier/evaluation(on:)-7338q",
                "title": "func evaluation(on: [String : [URL]]) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "title": "Testing an image classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/prediction(from:)-97cll",
                "title": "func prediction(from: CGImage) throws -> String",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/prediction(from:)-7fitc",
                "title": "func prediction(from: URL) throws -> String",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/predictions(from:)",
                "title": "func predictions(from: [URL]) throws -> [String]",
                "type": "method"
              },
              {
                "title": "Saving an image classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Inspecting an image classifier model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.property",
                "title": "let modelParameters: MLImageClassifier.ModelParameters",
                "type": "property"
              },
              {
                "title": "Describing an image classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlimageclassifier/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/datasource/labeleddirectories(at:)",
                    "title": "case labeledDirectories(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/datasource/labeledfiles(at:)",
                    "title": "case labeledFiles(at: URL)",
                    "type": "case"
                  },
                  {
                    "title": "Retrieving the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/datasource/labeledimages()",
                    "title": "func labeledImages() throws -> [String : [URL]]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/datasource/filesbylabel(_:)",
                    "title": "case filesByLabel([String : [URL]])",
                    "type": "case"
                  },
                  {
                    "title": "Splitting the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/datasource/stratifiedsplit(proportions:seed:)",
                    "title": "func stratifiedSplit(proportions: [Double], seed: Int) throws -> [[String : [URL]]]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/datasource/stratifiedsplit(proportions:generator:)",
                    "title": "func stratifiedSplit<RNG>(proportions: [Double], generator: inout RNG) throws -> [[String : [URL]]]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlimageclassifier/datasource",
                "title": "MLImageClassifier.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/init(validation:maxiterations:augmentation:algorithm:)",
                    "title": "init(validation: MLImageClassifier.ModelParameters.ValidationData, maxIterations: Int, augmentation: MLImageClassifier.ImageAugmentationOptions, algorithm: MLImageClassifier.ModelParameters.ModelAlgorithmType)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/init(featureextractor:validation:maxiterations:augmentationoptions:)",
                    "title": "init(featureExtractor: MLImageClassifier.FeatureExtractorType, validation: MLImageClassifier.ModelParameters.ValidationData, maxIterations: Int, augmentationOptions: MLImageClassifier.ImageAugmentationOptions)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/init(featureextractor:validationdata:maxiterations:augmentationoptions:)-42gf1",
                    "title": "init(featureExtractor: MLImageClassifier.FeatureExtractorType, validationData: MLImageClassifier.DataSource, maxIterations: Int, augmentationOptions: MLImageClassifier.ImageAugmentationOptions)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/init(featureextractor:validationdata:maxiterations:augmentationoptions:)-5we70",
                    "title": "init(featureExtractor: MLImageClassifier.FeatureExtractorType, validationData: [String : [URL]]?, maxIterations: Int, augmentationOptions: MLImageClassifier.ImageAugmentationOptions)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating an algorithm’s classifier",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype/logisticregressor",
                        "title": "case logisticRegressor",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype/multilayerperceptron(layersizes:)",
                        "title": "case multilayerPerceptron(layerSizes: [Int])",
                        "type": "case"
                      },
                      {
                        "title": "Describing a classifier type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype/==(_:_:)",
                        "title": "static func == (MLImageClassifier.ModelParameters.ClassifierType, MLImageClassifier.ModelParameters.ClassifierType) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/classifiertype",
                    "title": "MLImageClassifier.ModelParameters.ClassifierType",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/modelalgorithmtype/transferlearning(featureextractor:classifier:)",
                        "title": "case transferLearning(featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType)",
                        "type": "case"
                      },
                      {
                        "title": "Describing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/modelalgorithmtype",
                    "title": "MLImageClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "title": "Accessing the training parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLImageClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/featureextractor",
                    "title": "var featureExtractor: MLImageClassifier.FeatureExtractorType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/validation",
                    "title": "var validation: MLImageClassifier.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/maxiterations",
                    "title": "var maxIterations: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/augmentationoptions",
                    "title": "var augmentationOptions: MLImageClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/validationdata-swift.property",
                    "title": "var validationData: [String : [URL]]?",
                    "type": "property"
                  },
                  {
                    "title": "Describing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting a feature extractor type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/sceneprint(revision:)",
                        "title": "case scenePrint(revision: Int?)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/custom(_:)",
                        "title": "case custom(MLImageClassifier.CustomFeatureExtractor)",
                        "type": "case"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a custom feature extractor",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/init(modelpath:outputname:)",
                            "title": "init(modelPath: URL, outputName: String?)",
                            "type": "init"
                          },
                          {
                            "title": "Configuring a custom feature extractor",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/modelpath",
                            "title": "var modelPath: URL",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/outputname",
                            "title": "var outputName: String?",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlimageclassifier/customfeatureextractor",
                        "title": "MLImageClassifier.CustomFeatureExtractor",
                        "type": "struct"
                      },
                      {
                        "title": "Describing a feature extractor type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/featureextractortype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/featureextractortype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/featureextractortype/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype",
                    "title": "MLImageClassifier.FeatureExtractorType",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/validationdata-swift.enum/datasource(_:)",
                        "title": "case dataSource(MLImageClassifier.DataSource)",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/validationdata-swift.enum/dictionary(_:)",
                        "title": "case dictionary([String : [URL]])",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/validationdata-swift.enum/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/validationdata-swift.enum",
                    "title": "MLImageClassifier.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting augmentation options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/crop",
                        "title": "static let crop: MLImageClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/rotation",
                        "title": "static let rotation: MLImageClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/blur",
                        "title": "static let blur: MLImageClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/exposure",
                        "title": "static let exposure: MLImageClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/noise",
                        "title": "static let noise: MLImageClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/flip",
                        "title": "static let flip: MLImageClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "title": "Creating augmentation options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(rawvalue:)",
                        "title": "init(rawValue: Int)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/rawvalue-swift.property",
                        "title": "let rawValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Testing for membership in a set",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "title": "Adding and removing elements",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Combining sets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "title": "Comparing sets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "title": "Testing for equality",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/element",
                        "title": "MLImageClassifier.ImageAugmentationOptions.Element",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/rawvalue-swift.typealias",
                        "title": "MLImageClassifier.ImageAugmentationOptions.RawValue",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/arrayliteralelement",
                        "title": "MLImageClassifier.ImageAugmentationOptions.ArrayLiteralElement",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init()",
                            "title": "init()",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/contains(_:)",
                            "title": "func contains(Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formintersection(_:)",
                            "title": "func formIntersection(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formsymmetricdifference(_:)",
                            "title": "func formSymmetricDifference(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formunion(_:)",
                            "title": "func formUnion(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/insert(_:)",
                            "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/intersection(_:)",
                            "title": "func intersection(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/remove(_:)",
                            "title": "func remove(Self.Element) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/symmetricdifference(_:)",
                            "title": "func symmetricDifference(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/union(_:)",
                            "title": "func union(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/update(with:)",
                            "title": "func update(with: Self.Element) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/optionset-implementations",
                        "title": "OptionSet Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(_:)",
                            "title": "init<S>(S)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(arrayliteral:)",
                            "title": "init(arrayLiteral: Self.Element...)",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isdisjoint(with:)",
                            "title": "func isDisjoint(with: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isstrictsubset(of:)",
                            "title": "func isStrictSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isstrictsuperset(of:)",
                            "title": "func isStrictSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/issubset(of:)",
                            "title": "func isSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/issuperset(of:)",
                            "title": "func isSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/subtract(_:)",
                            "title": "func subtract(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/subtracting(_:)",
                            "title": "func subtracting(Self) -> Self",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/setalgebra-implementations",
                        "title": "SetAlgebra Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions",
                    "title": "MLImageClassifier.ImageAugmentationOptions",
                    "type": "struct"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlimageclassifier/modelparameters-swift.struct",
                "title": "MLImageClassifier.ModelParameters",
                "type": "struct"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a custom feature extractor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/init(modelpath:outputname:)",
                    "title": "init(modelPath: URL, outputName: String?)",
                    "type": "init"
                  },
                  {
                    "title": "Configuring a custom feature extractor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/modelpath",
                    "title": "var modelPath: URL",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/outputname",
                    "title": "var outputName: String?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlimageclassifier/customfeatureextractor",
                "title": "MLImageClassifier.CustomFeatureExtractor",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Selecting augmentation options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/crop",
                    "title": "static let crop: MLImageClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/rotation",
                    "title": "static let rotation: MLImageClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/blur",
                    "title": "static let blur: MLImageClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/exposure",
                    "title": "static let exposure: MLImageClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/noise",
                    "title": "static let noise: MLImageClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/flip",
                    "title": "static let flip: MLImageClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "title": "Creating augmentation options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(arrayliteral:)",
                    "title": "init(arrayLiteral: Self.Element...)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(_:)",
                    "title": "init<S>(S)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/rawvalue-swift.property",
                    "title": "let rawValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Testing for membership in a set",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/contains(_:)",
                    "title": "func contains(Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "title": "Adding and removing elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/insert(_:)",
                    "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/update(with:)",
                    "title": "func update(with: Self.Element) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/remove(_:)",
                    "title": "func remove(Self.Element) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "title": "Combining sets",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/union(_:)",
                    "title": "func union(Self) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formunion(_:)",
                    "title": "func formUnion(Self)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/intersection(_:)",
                    "title": "func intersection(Self) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formintersection(_:)",
                    "title": "func formIntersection(Self)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/symmetricdifference(_:)",
                    "title": "func symmetricDifference(Self) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formsymmetricdifference(_:)",
                    "title": "func formSymmetricDifference(Self)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/subtract(_:)",
                    "title": "func subtract(Self)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/subtracting(_:)",
                    "title": "func subtracting(Self) -> Self",
                    "type": "method"
                  },
                  {
                    "title": "Comparing sets",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isstrictsubset(of:)",
                    "title": "func isStrictSubset(of: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/issubset(of:)",
                    "title": "func isSubset(of: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isstrictsuperset(of:)",
                    "title": "func isStrictSuperset(of: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/issuperset(of:)",
                    "title": "func isSuperset(of: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isdisjoint(with:)",
                    "title": "func isDisjoint(with: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "title": "Testing for equality",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/element",
                    "title": "MLImageClassifier.ImageAugmentationOptions.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/rawvalue-swift.typealias",
                    "title": "MLImageClassifier.ImageAugmentationOptions.RawValue",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/arrayliteralelement",
                    "title": "MLImageClassifier.ImageAugmentationOptions.ArrayLiteralElement",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions",
                "title": "MLImageClassifier.ImageAugmentationOptions",
                "type": "struct"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Selecting a feature extractor type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype/sceneprint(revision:)",
                    "title": "case scenePrint(revision: Int?)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype/custom(_:)",
                    "title": "case custom(MLImageClassifier.CustomFeatureExtractor)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a custom feature extractor",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/init(modelpath:outputname:)",
                        "title": "init(modelPath: URL, outputName: String?)",
                        "type": "init"
                      },
                      {
                        "title": "Configuring a custom feature extractor",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/modelpath",
                        "title": "var modelPath: URL",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/customfeatureextractor/outputname",
                        "title": "var outputName: String?",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/customfeatureextractor",
                    "title": "MLImageClassifier.CustomFeatureExtractor",
                    "type": "struct"
                  },
                  {
                    "title": "Describing a feature extractor type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlimageclassifier/featureextractortype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlimageclassifier/featureextractortype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlimageclassifier/featureextractortype",
                "title": "MLImageClassifier.FeatureExtractorType",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlimageclassifier/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlimageclassifier/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlimageclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlimageclassifier/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlimageclassifier",
            "title": "MLImageClassifier",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a data source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/building-an-object-detector-data-source",
                "title": "Building an object detector data source",
                "type": "article"
              },
              {
                "title": "Training an object detector asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/train(trainingdata:annotationtype:parameters:sessionparameters:)",
                "title": "static func train(trainingData: MLObjectDetector.DataSource, annotationType: MLObjectDetector.AnnotationType, parameters: MLObjectDetector.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLObjectDetector>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/maketrainingsession(trainingdata:annotationtype:parameters:sessionparameters:)",
                "title": "static func makeTrainingSession(trainingData: MLObjectDetector.DataSource, annotationType: MLObjectDetector.AnnotationType, parameters: MLObjectDetector.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLObjectDetector>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/resume(_:)",
                "title": "static func resume(MLTrainingSession<MLObjectDetector>) throws -> MLJob<MLObjectDetector>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/restoretrainingsession(sessionparameters:)",
                "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLObjectDetector>",
                "type": "method"
              },
              {
                "title": "Creating an object detector from a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/init(checkpoint:)",
                "title": "init(checkpoint: MLCheckpoint) throws",
                "type": "init"
              },
              {
                "title": "Training an object detector synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/init(trainingdata:parameters:annotationtype:)",
                "title": "init(trainingData: MLObjectDetector.DataSource, parameters: MLObjectDetector.ModelParameters, annotationType: MLObjectDetector.AnnotationType) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlobjectdetector/init(trainingdata:imagecolumn:annotationcolumn:annotationtype:parameters:)",
                "title": "init(trainingData: MLDataTable, imageColumn: String, annotationColumn: String, annotationType: MLObjectDetector.AnnotationType, parameters: MLObjectDetector.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Assessing model accuracy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/trainingmetrics",
                "title": "var trainingMetrics: MLObjectDetectorMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/validationmetrics",
                "title": "var validationMetrics: MLObjectDetectorMetrics",
                "type": "property"
              },
              {
                "title": "Evaluating an object detector",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/evaluation(on:)",
                "title": "func evaluation(on: MLObjectDetector.DataSource) -> MLObjectDetectorMetrics",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlobjectdetector/evaluation(on:imagecolumn:annotationcolumn:)",
                "title": "func evaluation(on: MLDataTable, imageColumn: String, annotationColumn: String) -> MLObjectDetectorMetrics",
                "type": "method"
              },
              {
                "title": "Testing an object detector",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/prediction(from:)",
                "title": "func prediction(from: URL) throws -> MLObjectDetector.DetectedObjects",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/predictions(from:)",
                "title": "func predictions(from: [URL]) throws -> [MLObjectDetector.DetectedObjects]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/detectedobjects",
                "title": "MLObjectDetector.DetectedObjects",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Creating an annotation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/init(label:boundingbox:confidence:)",
                    "title": "init(label: String, boundingBox: CGRect, confidence: Double)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting an annotation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/label",
                    "title": "var label: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/boundingbox",
                    "title": "var boundingBox: CGRect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/confidence",
                    "title": "var confidence: Double",
                    "type": "property"
                  },
                  {
                    "title": "Describing an annotation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/objectannotation/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/objectannotation/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/objectannotation/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/objectannotation/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetector/objectannotation",
                "title": "MLObjectDetector.ObjectAnnotation",
                "type": "struct"
              },
              {
                "title": "Saving an object detector",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Inspecting an object detector model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.property",
                "title": "let modelParameters: MLObjectDetector.ModelParameters",
                "type": "property"
              },
              {
                "title": "Describing an object detector",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlobjectdetector/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/datasource/directorywithimagesandjsonannotation(at:)",
                    "title": "case directoryWithImagesAndJsonAnnotation(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/datasource/directorywithimages(at:annotationfile:)",
                    "title": "case directoryWithImages(at: URL, annotationFile: URL)",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlobjectdetector/datasource/table(_:imagecolumn:annotationcolumn:)",
                    "title": "case table(MLDataTable, imageColumn: String, annotationColumn: String)",
                    "type": "case"
                  },
                  {
                    "title": "Getting the annotated file names",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/datasource/gatherannotatedfilenames()",
                    "title": "func gatherAnnotatedFileNames() throws -> DataFrame",
                    "type": "method"
                  },
                  {
                    "title": "Getting the data frame",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/datasource/frame(_:imagecolumn:annotationcolumn:)",
                    "title": "case frame(DataFrame, imageColumn: String, annotationColumn: String)",
                    "type": "case"
                  },
                  {
                    "title": "Retrieving the data",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlobjectdetector/datasource/imageswithobjectannotations()",
                    "title": "func imagesWithObjectAnnotations() throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "title": "Splitting the data",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlobjectdetector/datasource/stratifiedsplit(proportions:seed:annotationcolumn:)",
                    "title": "func stratifiedSplit(proportions: [Double], seed: Int, annotationColumn: String) throws -> MLDataTable",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetector/datasource",
                "title": "MLObjectDetector.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Bounding box annotations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/annotationtype/boundingbox(units:origin:anchor:)",
                    "title": "case boundingBox(units: MLBoundingBoxUnits, origin: MLBoundingBoxCoordinatesOrigin, anchor: MLBoundingBoxAnchor)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating units",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxunits/pixel",
                        "title": "case pixel",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxunits/normalized",
                        "title": "case normalized",
                        "type": "case"
                      },
                      {
                        "title": "Comparing errors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxunits/==(_:_:)",
                        "title": "static func == (MLBoundingBoxUnits, MLBoundingBoxUnits) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxunits/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Getting the hash value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxunits/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxunits/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboundingboxunits/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlboundingboxunits/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlboundingboxunits",
                    "title": "MLBoundingBoxUnits",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating anchors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxanchor/center",
                        "title": "case center",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxanchor/topleft",
                        "title": "case topLeft",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxanchor/bottomleft",
                        "title": "case bottomLeft",
                        "type": "case"
                      },
                      {
                        "title": "Comparing errors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxanchor/==(_:_:)",
                        "title": "static func == (MLBoundingBoxAnchor, MLBoundingBoxAnchor) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxanchor/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Getting the hash value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxanchor/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxanchor/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboundingboxanchor/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlboundingboxanchor/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlboundingboxanchor",
                    "title": "MLBoundingBoxAnchor",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating origins",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxcoordinatesorigin/topleft",
                        "title": "case topLeft",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxcoordinatesorigin/bottomleft",
                        "title": "case bottomLeft",
                        "type": "case"
                      },
                      {
                        "title": "Comparing errors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxcoordinatesorigin/==(_:_:)",
                        "title": "static func == (MLBoundingBoxCoordinatesOrigin, MLBoundingBoxCoordinatesOrigin) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxcoordinatesorigin/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Getting the hash value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxcoordinatesorigin/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlboundingboxcoordinatesorigin/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboundingboxcoordinatesorigin/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlboundingboxcoordinatesorigin/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlboundingboxcoordinatesorigin",
                    "title": "MLBoundingBoxCoordinatesOrigin",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetector/annotationtype",
                "title": "MLObjectDetector.AnnotationType",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating object detector parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/init(validation:batchsize:maxiterations:)",
                    "title": "init(validation: MLObjectDetector.ModelParameters.ValidationData, batchSize: Int?, maxIterations: Int?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/init(validation:batchsize:maxiterations:gridsize:algorithm:)",
                    "title": "init(validation: MLObjectDetector.ModelParameters.ValidationData, batchSize: Int?, maxIterations: Int?, gridSize: CGSize, algorithm: MLObjectDetector.ModelParameters.ModelAlgorithmType)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/init(validationdata:batchsize:maxiterations:)",
                    "title": "init(validationData: MLObjectDetector.DataSource, batchSize: Int?, maxIterations: Int?) throws",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the training parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/validation",
                    "title": "var validation: MLObjectDetector.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/batchsize",
                    "title": "var batchSize: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/maxiterations",
                    "title": "var maxIterations: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLObjectDetector.ModelParameters.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/gridsize",
                    "title": "var gridSize: CGSize",
                    "type": "property"
                  },
                  {
                    "title": "Describing the model parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/validationdata/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/validationdata/dataframe(_:imagecolumn:annotationcolumn:)",
                        "title": "case dataFrame(DataFrame, imageColumn: String, annotationColumn: String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/validationdata/datasource(_:)",
                        "title": "case dataSource(MLObjectDetector.DataSource)",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/validationdata/table(_:imagecolumn:annotationcolumn:)",
                        "title": "case table(MLDataTable, imageColumn: String, annotationColumn: String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/validationdata/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/validationdata",
                    "title": "MLObjectDetector.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating an algorithm",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/modelalgorithmtype/darknetyolo",
                        "title": "case darknetYolo",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/modelalgorithmtype/transferlearning(_:)",
                        "title": "case transferLearning(MLObjectDetector.ModelParameters.FeatureExtractorType)",
                        "type": "case"
                      },
                      {
                        "children": [
                          {
                            "title": "Designating a feature extractor",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/featureextractortype/objectprint(revision:)",
                            "title": "case objectPrint(revision: Int)",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/featureextractortype",
                        "title": "MLObjectDetector.ModelParameters.FeatureExtractorType",
                        "type": "enum"
                      },
                      {
                        "title": "Comparing algorithms",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/modelalgorithmtype/==(_:_:)",
                        "title": "static func == (MLObjectDetector.ModelParameters.ModelAlgorithmType, MLObjectDetector.ModelParameters.ModelAlgorithmType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/modelalgorithmtype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/modelalgorithmtype",
                    "title": "MLObjectDetector.ModelParameters.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "title": "Enumerations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating a feature extractor",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/featureextractortype/objectprint(revision:)",
                        "title": "case objectPrint(revision: Int)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/featureextractortype",
                    "title": "MLObjectDetector.ModelParameters.FeatureExtractorType",
                    "type": "enum"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetector/modelparameters-swift.struct",
                "title": "MLObjectDetector.ModelParameters",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetector/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetector/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetector/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetector/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlobjectdetector",
            "title": "MLObjectDetector",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Training a hand pose classifier asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/train(trainingdata:parameters:sessionparameters:)",
                "title": "static func train(trainingData: MLHandPoseClassifier.DataSource, parameters: MLHandPoseClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLHandPoseClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/maketrainingsession(trainingdata:parameters:sessionparameters:)",
                "title": "static func makeTrainingSession(trainingData: MLHandPoseClassifier.DataSource, parameters: MLHandPoseClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLHandPoseClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/resume(_:)",
                "title": "static func resume(MLTrainingSession<MLHandPoseClassifier>) throws -> MLJob<MLHandPoseClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/restoretrainingsession(sessionparameters:)",
                "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLHandPoseClassifier>",
                "type": "method"
              },
              {
                "title": "Creating a hand pose classifier from a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/init(checkpoint:)",
                "title": "init(checkpoint: MLCheckpoint) throws",
                "type": "init"
              },
              {
                "title": "Training a hand pose classifier synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/init(trainingdata:parameters:)",
                "title": "init(trainingData: MLHandPoseClassifier.DataSource, parameters: MLHandPoseClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Evaluating a hand pose classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/trainingmetrics",
                "title": "var trainingMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/validationmetrics",
                "title": "var validationMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/evaluation(on:)",
                "title": "func evaluation(on: MLHandPoseClassifier.DataSource) throws -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "title": "Testing a hand pose classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/prediction(from:)",
                "title": "func prediction(from: URL) throws -> [(label: String, confidence: Double)]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/predictions(from:)",
                "title": "func predictions(from: [URL]) throws -> [[(label: String, confidence: Double)]]",
                "type": "method"
              },
              {
                "title": "Saving a hand pose classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Inspecting a hand pose classifier model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.property",
                "title": "let modelParameters: MLHandPoseClassifier.ModelParameters",
                "type": "property"
              },
              {
                "title": "Describing a hand pose classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandposeclassifier/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/labeleddirectories(at:)",
                    "title": "case labeledDirectories(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/labeledfiles(at:)",
                    "title": "case labeledFiles(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/directorywithimagesandannotation(at:annotationfile:imagecolumn:labelcolumn:)",
                    "title": "case directoryWithImagesAndAnnotation(at: URL, annotationFile: URL, imageColumn: String, labelColumn: String)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/labeledimagedataframe(_:imagecolumn:labelcolumn:)",
                    "title": "case labeledImageDataFrame(DataFrame, imageColumn: String, labelColumn: String)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/labeledkeypointsdataframe(_:sessionidcolumn:labelcolumn:featurecolumn:)",
                    "title": "case labeledKeypointsDataFrame(DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/labeledimagedata(table:imagecolumn:labelcolumn:)",
                    "title": "case labeledImageData(table: MLDataTable, imageColumn: String, labelColumn: String)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/labeledkeypointsdata(table:sessionidcolumn:labelcolumn:featurecolumn:)",
                    "title": "case labeledKeypointsData(table: MLDataTable, sessionIdColumn: String, labelColumn: String, featureColumn: String)",
                    "type": "case"
                  },
                  {
                    "title": "Extracting keypoints",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/extractkeypoints()",
                    "title": "func extractKeypoints() throws -> DataFrame",
                    "type": "method"
                  },
                  {
                    "title": "Getting annotated file names",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/gatherannotatedfilenames()",
                    "title": "func gatherAnnotatedFileNames() throws -> DataFrame?",
                    "type": "method"
                  },
                  {
                    "title": "Exporting a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/labeledmedia()",
                    "title": "func labeledMedia() throws -> [String : [URL]]",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/imageswithannotations()",
                    "title": "func imagesWithAnnotations() throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/keypointswithannotations()",
                    "title": "func keypointsWithAnnotations() throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlhandposeclassifier/datasource/stratifiedsplit(proportions:seed:labelcolumn:)",
                    "title": "func stratifiedSplit(proportions: [Double], seed: Int, labelColumn: String) throws -> MLDataTable",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlhandposeclassifier/datasource",
                "title": "MLHandPoseClassifier.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating hand pose model parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/init(validation:batchsize:maximumiterations:augmentationoptions:algorithm:)",
                    "title": "init(validation: MLHandPoseClassifier.ModelParameters.ValidationData, batchSize: Int, maximumIterations: Int, augmentationOptions: MLHandPoseClassifier.ImageAugmentationOptions, algorithm: MLHandPoseClassifier.ModelParameters.ModelAlgorithmType)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing hand pose training parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/maximumiterations",
                    "title": "var maximumIterations: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/batchsize",
                    "title": "var batchSize: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLHandPoseClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/augmentationoptions",
                    "title": "var augmentationOptions: MLHandPoseClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/validation",
                    "title": "var validation: MLHandPoseClassifier.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "title": "Describing hand pose model parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Parameter supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Augmentations supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/horizontallyflip",
                        "title": "static let horizontallyFlip: MLHandPoseClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/rotate",
                        "title": "static let rotate: MLHandPoseClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/scale",
                        "title": "static let scale: MLHandPoseClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/translate",
                        "title": "static let translate: MLHandPoseClassifier.ImageAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/rawvalue-swift.typealias",
                        "title": "MLHandPoseClassifier.ImageAugmentationOptions.RawValue",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/element",
                        "title": "MLHandPoseClassifier.ImageAugmentationOptions.Element",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/arrayliteralelement",
                        "title": "MLHandPoseClassifier.ImageAugmentationOptions.ArrayLiteralElement",
                        "type": "typealias"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(arrayliteral:)",
                            "title": "init(arrayLiteral: Self.Element...)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init()",
                            "title": "init()",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(rawvalue:)",
                            "title": "init(rawValue: Int)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(_:)",
                            "title": "init<S>(S)",
                            "type": "init"
                          },
                          {
                            "title": "Inspecting an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/rawvalue-swift.property",
                            "title": "let rawValue: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/contains(_:)",
                            "title": "func contains(Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "title": "Adding an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/insert(_:)",
                            "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/update(with:)",
                            "title": "func update(with: Self.Element) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "title": "Combining Augmentations",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/union(_:)",
                            "title": "func union(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formunion(_:)",
                            "title": "func formUnion(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/intersection(_:)",
                            "title": "func intersection(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formintersection(_:)",
                            "title": "func formIntersection(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/symmetricdifference(_:)",
                            "title": "func symmetricDifference(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formsymmetricdifference(_:)",
                            "title": "func formSymmetricDifference(Self)",
                            "type": "method"
                          },
                          {
                            "title": "Removing an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/remove(_:)",
                            "title": "func remove(Self.Element) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/subtract(_:)",
                            "title": "func subtract(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/subtracting(_:)",
                            "title": "func subtracting(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "title": "Comparing Augmentations",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isdisjoint(with:)",
                            "title": "func isDisjoint(with: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/issubset(of:)",
                            "title": "func isSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isstrictsubset(of:)",
                            "title": "func isStrictSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/issuperset(of:)",
                            "title": "func isSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isstrictsuperset(of:)",
                            "title": "func isStrictSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Encoding and Decoding an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/createml/imageaugmentationoptions-option-set-support",
                        "title": "Option Set Support",
                        "type": "collection"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init()",
                            "title": "init()",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/contains(_:)",
                            "title": "func contains(Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formintersection(_:)",
                            "title": "func formIntersection(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formsymmetricdifference(_:)",
                            "title": "func formSymmetricDifference(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formunion(_:)",
                            "title": "func formUnion(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/insert(_:)",
                            "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/intersection(_:)",
                            "title": "func intersection(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/remove(_:)",
                            "title": "func remove(Self.Element) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/symmetricdifference(_:)",
                            "title": "func symmetricDifference(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/union(_:)",
                            "title": "func union(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/update(with:)",
                            "title": "func update(with: Self.Element) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/optionset-implementations",
                        "title": "OptionSet Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/rawrepresentable-implementations",
                        "title": "RawRepresentable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(_:)",
                            "title": "init<S>(S)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(arrayliteral:)",
                            "title": "init(arrayLiteral: Self.Element...)",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isdisjoint(with:)",
                            "title": "func isDisjoint(with: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isstrictsubset(of:)",
                            "title": "func isStrictSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isstrictsuperset(of:)",
                            "title": "func isStrictSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/issubset(of:)",
                            "title": "func isSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/issuperset(of:)",
                            "title": "func isSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/subtract(_:)",
                            "title": "func subtract(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/subtracting(_:)",
                            "title": "func subtracting(Self) -> Self",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/setalgebra-implementations",
                        "title": "SetAlgebra Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions",
                    "title": "MLHandPoseClassifier.ImageAugmentationOptions",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/validationdata/datasource(_:)",
                        "title": "case dataSource(MLHandPoseClassifier.DataSource)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/validationdata/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/validationdata/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/validationdata",
                    "title": "MLHandPoseClassifier.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Choosing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/modelalgorithmtype/gcn",
                        "title": "case gcn",
                        "type": "case"
                      },
                      {
                        "title": "Comparing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/modelalgorithmtype/==(_:_:)",
                        "title": "static func == (MLHandPoseClassifier.ModelParameters.ModelAlgorithmType, MLHandPoseClassifier.ModelParameters.ModelAlgorithmType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Hashing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/modelalgorithmtype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/modelalgorithmtype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/modelalgorithmtype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/modelalgorithmtype",
                    "title": "MLHandPoseClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlhandposeclassifier/modelparameters-swift.struct",
                "title": "MLHandPoseClassifier.ModelParameters",
                "type": "struct"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Augmentations supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/horizontallyflip",
                    "title": "static let horizontallyFlip: MLHandPoseClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/rotate",
                    "title": "static let rotate: MLHandPoseClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/scale",
                    "title": "static let scale: MLHandPoseClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/translate",
                    "title": "static let translate: MLHandPoseClassifier.ImageAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/rawvalue-swift.typealias",
                    "title": "MLHandPoseClassifier.ImageAugmentationOptions.RawValue",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/element",
                    "title": "MLHandPoseClassifier.ImageAugmentationOptions.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/arrayliteralelement",
                    "title": "MLHandPoseClassifier.ImageAugmentationOptions.ArrayLiteralElement",
                    "type": "typealias"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(rawvalue:)",
                        "title": "init(rawValue: Int)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "title": "Inspecting an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/rawvalue-swift.property",
                        "title": "let rawValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "title": "Adding an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Combining Augmentations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "title": "Removing an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "title": "Comparing Augmentations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Encoding and Decoding an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/createml/imageaugmentationoptions-option-set-support",
                    "title": "Option Set Support",
                    "type": "collection"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlhandposeclassifier/imageaugmentationoptions",
                "title": "MLHandPoseClassifier.ImageAugmentationOptions",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlhandposeclassifier/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlhandposeclassifier/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandposeclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlhandposeclassifier/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlhandposeclassifier",
            "title": "MLHandPoseClassifier",
            "type": "struct"
          },
          {
            "title": "Video Models",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Action Classifier Data Sources",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/gathering-training-videos-for-an-action-classifier",
                "title": "Gathering Training Videos for an Action Classifier",
                "type": "article"
              },
              {
                "path": "/documentation/createml/building-an-action-classifier-data-source",
                "title": "Building an Action Classifier Data Source",
                "type": "article"
              }
            ],
            "path": "/documentation/createml/creating-an-action-classifier-model",
            "title": "Creating an Action Classifier Model",
            "type": "collection"
          },
          {
            "path": "/documentation/createml/detecting_human_actions_in_a_live_video_feed",
            "title": "Detecting Human Actions in a Live Video Feed",
            "type": "sampleCode"
          },
          {
            "children": [
              {
                "title": "Training an action classifier asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/train(trainingdata:parameters:sessionparameters:)",
                "title": "static func train(trainingData: MLActionClassifier.DataSource, parameters: MLActionClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLActionClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/maketrainingsession(trainingdata:parameters:sessionparameters:)",
                "title": "static func makeTrainingSession(trainingData: MLActionClassifier.DataSource, parameters: MLActionClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLActionClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/resume(_:)",
                "title": "static func resume(MLTrainingSession<MLActionClassifier>) throws -> MLJob<MLActionClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/restoretrainingsession(sessionparameters:)",
                "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLActionClassifier>",
                "type": "method"
              },
              {
                "title": "Creating an action classifier from a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/init(checkpoint:)",
                "title": "init(checkpoint: MLCheckpoint) throws",
                "type": "init"
              },
              {
                "title": "Training an action classifier synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/init(trainingdata:parameters:)",
                "title": "init(trainingData: MLActionClassifier.DataSource, parameters: MLActionClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Evaluating an action classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/trainingmetrics",
                "title": "var trainingMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/validationmetrics",
                "title": "var validationMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/evaluation(on:)",
                "title": "func evaluation(on: MLActionClassifier.DataSource) throws -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "title": "Testing an action classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/prediction(from:)",
                "title": "func prediction(from: URL) throws -> [MLActionClassifier.Prediction]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/predictions(from:)",
                "title": "func predictions(from: [URL]) throws -> [[MLActionClassifier.Prediction]]",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Inspecting a prediction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/prediction/results",
                    "title": "var results: [(label: String, confidence: Double)]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/prediction/framerange",
                    "title": "var frameRange: Range<Int>",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlactionclassifier/prediction",
                "title": "MLActionClassifier.Prediction",
                "type": "struct"
              },
              {
                "title": "Saving an action classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Inspecting an action classifier model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.property",
                "title": "let modelParameters: MLActionClassifier.ModelParameters",
                "type": "property"
              },
              {
                "title": "Describing an action classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactionclassifier/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/datasource/labeleddirectories(at:)",
                    "title": "case labeledDirectories(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/datasource/labeledfiles(at:)",
                    "title": "case labeledFiles(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/datasource/directorywithvideosandannotation(at:annotationfile:videocolumn:labelcolumn:starttimecolumn:endtimecolumn:)",
                    "title": "case directoryWithVideosAndAnnotation(at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?)",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactionclassifier/datasource/labeledvideodata(table:videocolumn:labelcolumn:starttimecolumn:endtimecolumn:)",
                    "title": "case labeledVideoData(table: MLDataTable, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?)",
                    "type": "case"
                  },
                  {
                    "title": "Extracting key points",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/datasource/extractkeypoints(targetframerate:)",
                    "title": "func extractKeypoints(targetFrameRate: Double) throws -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/datasource/labeledkeypointsdataframe(_:sessionidcolumn:labelcolumn:featurecolumn:)",
                    "title": "case labeledKeypointsDataFrame(DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String)",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactionclassifier/datasource/labeledkeypointsdata(table:sessionidcolumn:labelcolumn:featurecolumn:)",
                    "title": "case labeledKeypointsData(table: MLDataTable, sessionIdColumn: String, labelColumn: String, featureColumn: String)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/datasource/labeledvideodataframe(_:videocolumn:labelcolumn:starttimecolumn:endtimecolumn:)",
                    "title": "case labeledVideoDataFrame(DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?)",
                    "type": "case"
                  },
                  {
                    "title": "Getting annotated file names",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/datasource/gatherannotatedfilenames()",
                    "title": "func gatherAnnotatedFileNames() throws -> DataFrame?",
                    "type": "method"
                  },
                  {
                    "title": "Generating data tables from a data source",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactionclassifier/datasource/videoswithannotations()",
                    "title": "func videosWithAnnotations() throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactionclassifier/datasource/keypointswithannotations(targetframerate:)",
                    "title": "func keypointsWithAnnotations(targetFrameRate: Double) throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactionclassifier/datasource/stratifiedsplit(proportions:seed:labelcolumn:)",
                    "title": "func stratifiedSplit(proportions: [Double], seed: Int, labelColumn: String) throws -> MLDataTable",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlactionclassifier/datasource",
                "title": "MLActionClassifier.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating action classifier parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/init(validation:batchsize:maximumiterations:predictionwindowsize:augmentationoptions:algorithm:targetframerate:)",
                    "title": "init(validation: MLActionClassifier.ModelParameters.ValidationData, batchSize: Int, maximumIterations: Int, predictionWindowSize: Int, augmentationOptions: MLActionClassifier.VideoAugmentationOptions, algorithm: MLActionClassifier.ModelParameters.ModelAlgorithmType, targetFrameRate: Double)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the training parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/maximumiterations",
                    "title": "var maximumIterations: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/batchsize",
                    "title": "var batchSize: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/targetframerate",
                    "title": "var targetFrameRate: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/predictionwindowsize",
                    "title": "var predictionWindowSize: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLActionClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/augmentationoptions",
                    "title": "var augmentationOptions: MLActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/validation",
                    "title": "var validation: MLActionClassifier.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "title": "Describing the model parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/validationdata/datasource(_:)",
                        "title": "case dataSource(MLActionClassifier.DataSource)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/validationdata/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/validationdata/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/validationdata",
                    "title": "MLActionClassifier.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating video augmentation options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/horizontalflip",
                        "title": "static let horizontalFlip: MLActionClassifier.VideoAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "title": "Creating augmentation options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(rawvalue:)",
                        "title": "init(rawValue: Int)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Inspecting options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/rawvalue-swift.property",
                        "title": "let rawValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "title": "Adding options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Combining options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "title": "Removing options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "title": "Comparing options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Encoding options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/element",
                        "title": "MLActionClassifier.VideoAugmentationOptions.Element",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/arrayliteralelement",
                        "title": "MLActionClassifier.VideoAugmentationOptions.ArrayLiteralElement",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/rawvalue-swift.typealias",
                        "title": "MLActionClassifier.VideoAugmentationOptions.RawValue",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init()",
                            "title": "init()",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/contains(_:)",
                            "title": "func contains(Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formintersection(_:)",
                            "title": "func formIntersection(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                            "title": "func formSymmetricDifference(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formunion(_:)",
                            "title": "func formUnion(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/insert(_:)",
                            "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/intersection(_:)",
                            "title": "func intersection(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/remove(_:)",
                            "title": "func remove(Self.Element) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                            "title": "func symmetricDifference(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/union(_:)",
                            "title": "func union(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/update(with:)",
                            "title": "func update(with: Self.Element) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/optionset-implementations",
                        "title": "OptionSet Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/rawrepresentable-implementations",
                        "title": "RawRepresentable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(_:)",
                            "title": "init<S>(S)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                            "title": "init(arrayLiteral: Self.Element...)",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                            "title": "func isDisjoint(with: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                            "title": "func isStrictSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                            "title": "func isStrictSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/issubset(of:)",
                            "title": "func isSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/issuperset(of:)",
                            "title": "func isSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/subtract(_:)",
                            "title": "func subtract(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/subtracting(_:)",
                            "title": "func subtracting(Self) -> Self",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/setalgebra-implementations",
                        "title": "SetAlgebra Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions",
                    "title": "MLActionClassifier.VideoAugmentationOptions",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating an algorithm",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/modelalgorithmtype/stgcn",
                        "title": "case stgcn",
                        "type": "case"
                      },
                      {
                        "title": "Hashing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/modelalgorithmtype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/modelalgorithmtype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Comparing algorithm types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/modelalgorithmtype/==(_:_:)",
                        "title": "static func == (MLActionClassifier.ModelParameters.ModelAlgorithmType, MLActionClassifier.ModelParameters.ModelAlgorithmType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/modelalgorithmtype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/modelalgorithmtype",
                    "title": "MLActionClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlactionclassifier/modelparameters-swift.struct",
                "title": "MLActionClassifier.ModelParameters",
                "type": "struct"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Designating video augmentation options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/horizontalflip",
                    "title": "static let horizontalFlip: MLActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "title": "Creating augmentation options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(_:)",
                    "title": "init<S>(S)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                    "title": "init(arrayLiteral: Self.Element...)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/rawvalue-swift.property",
                    "title": "let rawValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/contains(_:)",
                    "title": "func contains(Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "title": "Adding options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/insert(_:)",
                    "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/update(with:)",
                    "title": "func update(with: Self.Element) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "title": "Combining options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/union(_:)",
                    "title": "func union(Self) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formunion(_:)",
                    "title": "func formUnion(Self)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/intersection(_:)",
                    "title": "func intersection(Self) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formintersection(_:)",
                    "title": "func formIntersection(Self)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                    "title": "func symmetricDifference(Self) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                    "title": "func formSymmetricDifference(Self)",
                    "type": "method"
                  },
                  {
                    "title": "Removing options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/remove(_:)",
                    "title": "func remove(Self.Element) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/subtracting(_:)",
                    "title": "func subtracting(Self) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/subtract(_:)",
                    "title": "func subtract(Self)",
                    "type": "method"
                  },
                  {
                    "title": "Comparing options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                    "title": "func isDisjoint(with: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/issubset(of:)",
                    "title": "func isSubset(of: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                    "title": "func isStrictSubset(of: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/issuperset(of:)",
                    "title": "func isSuperset(of: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                    "title": "func isStrictSuperset(of: Self) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Encoding options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/element",
                    "title": "MLActionClassifier.VideoAugmentationOptions.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/arrayliteralelement",
                    "title": "MLActionClassifier.VideoAugmentationOptions.ArrayLiteralElement",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/rawvalue-swift.typealias",
                    "title": "MLActionClassifier.VideoAugmentationOptions.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions",
                "title": "MLActionClassifier.VideoAugmentationOptions",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlactionclassifier/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlactionclassifier/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactionclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlactionclassifier/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlactionclassifier",
            "title": "MLActionClassifier",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Training a hand action classifier asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/train(trainingdata:parameters:sessionparameters:)",
                "title": "static func train(trainingData: MLHandActionClassifier.DataSource, parameters: MLHandActionClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLHandActionClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/maketrainingsession(trainingdata:parameters:sessionparameters:)",
                "title": "static func makeTrainingSession(trainingData: MLHandActionClassifier.DataSource, parameters: MLHandActionClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLHandActionClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/resume(_:)",
                "title": "static func resume(MLTrainingSession<MLHandActionClassifier>) throws -> MLJob<MLHandActionClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/restoretrainingsession(sessionparameters:)",
                "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLHandActionClassifier>",
                "type": "method"
              },
              {
                "title": "Creating a hand action classifier from a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/init(checkpoint:)",
                "title": "init(checkpoint: MLCheckpoint) throws",
                "type": "init"
              },
              {
                "title": "Training a hand action classifier synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/init(trainingdata:parameters:)",
                "title": "init(trainingData: MLHandActionClassifier.DataSource, parameters: MLHandActionClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Evaluating a hand action classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/trainingmetrics",
                "title": "var trainingMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/validationmetrics",
                "title": "var validationMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/evaluation(on:)",
                "title": "func evaluation(on: MLHandActionClassifier.DataSource) throws -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "title": "Testing a hand action classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/prediction(from:)",
                "title": "func prediction(from: URL) throws -> [MLHandActionClassifier.Prediction]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/predictions(from:)",
                "title": "func predictions(from: [URL]) throws -> [[MLHandActionClassifier.Prediction]]",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Inspecting a prediction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/prediction/results",
                    "title": "var results: [(label: String, confidence: Double)]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/prediction/framerange",
                    "title": "var frameRange: Range<Int>",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlhandactionclassifier/prediction",
                "title": "MLHandActionClassifier.Prediction",
                "type": "struct"
              },
              {
                "title": "Saving a hand action classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Inspecting a hand action classifier model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.property",
                "title": "let modelParameters: MLHandActionClassifier.ModelParameters",
                "type": "property"
              },
              {
                "title": "Describing a hand action classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/labeleddirectories(at:)",
                    "title": "case labeledDirectories(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/labeledfiles(at:)",
                    "title": "case labeledFiles(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/directorywithvideosandannotation(at:annotationfile:videocolumn:labelcolumn:starttimecolumn:endtimecolumn:)",
                    "title": "case directoryWithVideosAndAnnotation(at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/labeledvideodataframe(_:videocolumn:labelcolumn:starttimecolumn:endtimecolumn:)",
                    "title": "case labeledVideoDataFrame(DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/labeledvideodata(table:videocolumn:labelcolumn:starttimecolumn:endtimecolumn:)",
                    "title": "case labeledVideoData(table: MLDataTable, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/labeledkeypointsdataframe(_:sessionidcolumn:labelcolumn:featurecolumn:)",
                    "title": "case labeledKeypointsDataFrame(DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/labeledkeypointsdata(table:sessionidcolumn:labelcolumn:featurecolumn:)",
                    "title": "case labeledKeypointsData(table: MLDataTable, sessionIdColumn: String, labelColumn: String, featureColumn: String)",
                    "type": "case"
                  },
                  {
                    "title": "Exporting a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/labeledmedia()",
                    "title": "func labeledMedia() throws -> [String : [URL]]",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/videoswithannotations()",
                    "title": "func videosWithAnnotations() throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/keypointswithannotations(targetframerate:)",
                    "title": "func keypointsWithAnnotations(targetFrameRate: Double) throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/stratifiedsplit(proportions:seed:labelcolumn:)",
                    "title": "func stratifiedSplit(proportions: [Double], seed: Int, labelColumn: String) throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/extractkeypoints(targetframerate:)",
                    "title": "func extractKeypoints(targetFrameRate: Double) throws -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/datasource/gatherannotatedfilenames()",
                    "title": "func gatherAnnotatedFileNames() throws -> DataFrame?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlhandactionclassifier/datasource",
                "title": "MLHandActionClassifier.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating hand action model parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/init(validation:batchsize:maximumiterations:predictionwindowsize:augmentationoptions:algorithm:targetframerate:)",
                    "title": "init(validation: MLHandActionClassifier.ModelParameters.ValidationData, batchSize: Int, maximumIterations: Int, predictionWindowSize: Int, augmentationOptions: MLHandActionClassifier.VideoAugmentationOptions, algorithm: MLHandActionClassifier.ModelParameters.ModelAlgorithmType, targetFrameRate: Double)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing hand action training parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/maximumiterations",
                    "title": "var maximumIterations: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/batchsize",
                    "title": "var batchSize: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/targetframerate",
                    "title": "var targetFrameRate: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/predictionwindowsize",
                    "title": "var predictionWindowSize: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLHandActionClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/augmentationoptions",
                    "title": "var augmentationOptions: MLHandActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/validation",
                    "title": "var validation: MLHandActionClassifier.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "title": "Describing hand action model parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Parameter supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Augmentations supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/dropframes",
                        "title": "static let dropFrames: MLHandActionClassifier.VideoAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/horizontallyflip",
                        "title": "static let horizontallyFlip: MLHandActionClassifier.VideoAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/interpolateframes",
                        "title": "static let interpolateFrames: MLHandActionClassifier.VideoAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rotate",
                        "title": "static let rotate: MLHandActionClassifier.VideoAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/scale",
                        "title": "static let scale: MLHandActionClassifier.VideoAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/translate",
                        "title": "static let translate: MLHandActionClassifier.VideoAugmentationOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rawvalue-swift.typealias",
                        "title": "MLHandActionClassifier.VideoAugmentationOptions.RawValue",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/element",
                        "title": "MLHandActionClassifier.VideoAugmentationOptions.Element",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/arrayliteralelement",
                        "title": "MLHandActionClassifier.VideoAugmentationOptions.ArrayLiteralElement",
                        "type": "typealias"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                            "title": "init(arrayLiteral: Self.Element...)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init()",
                            "title": "init()",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(rawvalue:)",
                            "title": "init(rawValue: Int)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(_:)",
                            "title": "init<S>(S)",
                            "type": "init"
                          },
                          {
                            "title": "Inspecting an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rawvalue-swift.property",
                            "title": "let rawValue: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/contains(_:)",
                            "title": "func contains(Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "title": "Adding an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/insert(_:)",
                            "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/update(with:)",
                            "title": "func update(with: Self.Element) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "title": "Combining Augmentations",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/union(_:)",
                            "title": "func union(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formunion(_:)",
                            "title": "func formUnion(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/intersection(_:)",
                            "title": "func intersection(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formintersection(_:)",
                            "title": "func formIntersection(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                            "title": "func symmetricDifference(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                            "title": "func formSymmetricDifference(Self)",
                            "type": "method"
                          },
                          {
                            "title": "Removing an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/remove(_:)",
                            "title": "func remove(Self.Element) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtract(_:)",
                            "title": "func subtract(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtracting(_:)",
                            "title": "func subtracting(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "title": "Comparing Augmentations",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                            "title": "func isDisjoint(with: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issubset(of:)",
                            "title": "func isSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                            "title": "func isStrictSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issuperset(of:)",
                            "title": "func isSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                            "title": "func isStrictSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Encoding and Decoding an Augmentation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/createml/videoaugmentationoptions-option-set-support",
                        "title": "Option Set Support",
                        "type": "collection"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init()",
                            "title": "init()",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/contains(_:)",
                            "title": "func contains(Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formintersection(_:)",
                            "title": "func formIntersection(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                            "title": "func formSymmetricDifference(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formunion(_:)",
                            "title": "func formUnion(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/insert(_:)",
                            "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/intersection(_:)",
                            "title": "func intersection(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/remove(_:)",
                            "title": "func remove(Self.Element) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                            "title": "func symmetricDifference(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/union(_:)",
                            "title": "func union(Self) -> Self",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/update(with:)",
                            "title": "func update(with: Self.Element) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/optionset-implementations",
                        "title": "OptionSet Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rawrepresentable-implementations",
                        "title": "RawRepresentable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(_:)",
                            "title": "init<S>(S)",
                            "type": "init"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                            "title": "init(arrayLiteral: Self.Element...)",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                            "title": "func isDisjoint(with: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                            "title": "func isStrictSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                            "title": "func isStrictSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issubset(of:)",
                            "title": "func isSubset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issuperset(of:)",
                            "title": "func isSuperset(of: Self) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtract(_:)",
                            "title": "func subtract(Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtracting(_:)",
                            "title": "func subtracting(Self) -> Self",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/setalgebra-implementations",
                        "title": "SetAlgebra Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions",
                    "title": "MLHandActionClassifier.VideoAugmentationOptions",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/validationdata/datasource(_:)",
                        "title": "case dataSource(MLHandActionClassifier.DataSource)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/validationdata/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/validationdata/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/validationdata",
                    "title": "MLHandActionClassifier.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Choosing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/modelalgorithmtype/gcn",
                        "title": "case gcn",
                        "type": "case"
                      },
                      {
                        "title": "Comparing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/modelalgorithmtype/==(_:_:)",
                        "title": "static func == (MLHandActionClassifier.ModelParameters.ModelAlgorithmType, MLHandActionClassifier.ModelParameters.ModelAlgorithmType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Hashing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/modelalgorithmtype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/modelalgorithmtype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/modelalgorithmtype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/modelalgorithmtype",
                    "title": "MLHandActionClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlhandactionclassifier/modelparameters-swift.struct",
                "title": "MLHandActionClassifier.ModelParameters",
                "type": "struct"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Augmentations supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/dropframes",
                    "title": "static let dropFrames: MLHandActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/horizontallyflip",
                    "title": "static let horizontallyFlip: MLHandActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/interpolateframes",
                    "title": "static let interpolateFrames: MLHandActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rotate",
                    "title": "static let rotate: MLHandActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/scale",
                    "title": "static let scale: MLHandActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/translate",
                    "title": "static let translate: MLHandActionClassifier.VideoAugmentationOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rawvalue-swift.typealias",
                    "title": "MLHandActionClassifier.VideoAugmentationOptions.RawValue",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/element",
                    "title": "MLHandActionClassifier.VideoAugmentationOptions.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/arrayliteralelement",
                    "title": "MLHandActionClassifier.VideoAugmentationOptions.ArrayLiteralElement",
                    "type": "typealias"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(rawvalue:)",
                        "title": "init(rawValue: Int)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "title": "Inspecting an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rawvalue-swift.property",
                        "title": "let rawValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "title": "Adding an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Combining Augmentations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "title": "Removing an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "title": "Comparing Augmentations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Encoding and Decoding an Augmentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/createml/videoaugmentationoptions-option-set-support",
                    "title": "Option Set Support",
                    "type": "collection"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions",
                "title": "MLHandActionClassifier.VideoAugmentationOptions",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlhandactionclassifier/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlhandactionclassifier/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlhandactionclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlhandactionclassifier/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlhandactionclassifier",
            "title": "MLHandActionClassifier",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Training a style transfer model asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/train(trainingdata:parameters:sessionparameters:)",
                "title": "static func train(trainingData: MLStyleTransfer.DataSource, parameters: MLStyleTransfer.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLStyleTransfer>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/maketrainingsession(trainingdata:parameters:sessionparameters:)",
                "title": "static func makeTrainingSession(trainingData: MLStyleTransfer.DataSource, parameters: MLStyleTransfer.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLStyleTransfer>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/resume(_:)",
                "title": "static func resume(MLTrainingSession<MLStyleTransfer>) throws -> MLJob<MLStyleTransfer>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/restoretrainingsession(sessionparameters:)",
                "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLStyleTransfer>",
                "type": "method"
              },
              {
                "title": "Creating a style transfer model from a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/init(checkpoint:)",
                "title": "init(checkpoint: MLCheckpoint) throws",
                "type": "init"
              },
              {
                "title": "Training a style transfer model synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/init(trainingdata:parameters:)",
                "title": "init(trainingData: MLStyleTransfer.DataSource, parameters: MLStyleTransfer.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Stylizing an image",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/stylize(image:)",
                "title": "func stylize(image: CGImage) throws -> CGImage?",
                "type": "method"
              },
              {
                "title": "Saving a style transfer model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Downloading model assets",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/downloadassets()",
                "title": "static func downloadAssets() throws",
                "type": "method"
              },
              {
                "title": "Describing a style transfer model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlstyletransfer/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/datasource/images(styleimage:contentdirectory:processingoption:)",
                    "title": "case images(styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?)",
                    "type": "case"
                  },
                  {
                    "title": "Stylizing images",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/datasource/processimages(texteldensity:styleimagedestination:contentimagesdestination:)",
                    "title": "func processImages(textelDensity: Int, styleImageDestination: URL?, contentImagesDestination: URL?) throws -> (processedStyleImage: URL, processedContentImages: URL)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlstyletransfer/datasource",
                "title": "MLStyleTransfer.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/init(algorithm:validation:maxiterations:texteldensity:stylestrength:)",
                    "title": "init(algorithm: MLStyleTransfer.ModelParameters.ModelAlgorithmType, validation: MLStyleTransfer.ModelParameters.ValidationData, maxIterations: Int, textelDensity: Int, styleStrength: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Setting style transfer parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/algorithm",
                    "title": "var algorithm: MLStyleTransfer.ModelParameters.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/maxiterations",
                    "title": "var maxIterations: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/stylestrength",
                    "title": "var styleStrength: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/texteldensity",
                    "title": "var textelDensity: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/validation",
                    "title": "var validation: MLStyleTransfer.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "title": "Describing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/cnn",
                        "title": "case cnn",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/cnnlite",
                        "title": "case cnnLite",
                        "type": "case"
                      },
                      {
                        "title": "Describing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Hashing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Working with raw values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/init(rawvalue:)",
                        "title": "init?(rawValue: String)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/rawvalue-swift.property",
                        "title": "var rawValue: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/rawvalue-swift.typealias",
                        "title": "MLStyleTransfer.ModelParameters.ModelAlgorithmType.RawValue",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype/rawrepresentable-implementations",
                        "title": "RawRepresentable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/modelalgorithmtype",
                    "title": "MLStyleTransfer.ModelParameters.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/validationdata/content(_:)",
                        "title": "case content(URL)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/validationdata/none",
                        "title": "case none",
                        "type": "case"
                      },
                      {
                        "title": "Comparing validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/validationdata/==(_:_:)",
                        "title": "static func == (MLStyleTransfer.ModelParameters.ValidationData, MLStyleTransfer.ModelParameters.ValidationData) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/validationdata/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlstyletransfer/modelparameters/validationdata/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mlstyletransfer/modelparameters/validationdata/==(_:_:)",
                            "title": "static func == (MLStyleTransfer.ModelParameters.ValidationData, MLStyleTransfer.ModelParameters.ValidationData) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/validationdata/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/validationdata",
                    "title": "MLStyleTransfer.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlstyletransfer/modelparameters/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlstyletransfer/modelparameters/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlstyletransfer/modelparameters",
                "title": "MLStyleTransfer.ModelParameters",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlstyletransfer/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlstyletransfer/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstyletransfer/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlstyletransfer/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlstyletransfer",
            "title": "MLStyleTransfer",
            "type": "struct"
          },
          {
            "title": "Text Models",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/creating-a-text-classifier-model",
            "title": "Creating a text classifier model",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/naturallanguage/creating-a-word-tagger-model",
            "title": "Creating a word tagger model",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Creating and training a text classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltextclassifier/init(trainingdata:parameters:)-9uj3q",
                "title": "init(trainingData: [String : [String]], parameters: MLTextClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mltextclassifier/init(trainingdata:textcolumn:labelcolumn:parameters:)-6keqn",
                "title": "init(trainingData: DataFrame, textColumn: String, labelColumn: String, parameters: MLTextClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mltextclassifier/init(trainingdata:parameters:)-8n8vs",
                "title": "init(trainingData: MLTextClassifier.DataSource, parameters: MLTextClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/datasource/labeleddirectories(at:)",
                    "title": "case labeledDirectories(at: URL)",
                    "type": "case"
                  },
                  {
                    "title": "Retrieving the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/datasource/labeledtexts()",
                    "title": "func labeledTexts() throws -> [String : [String]]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/datasource/stratifiedsplit(proportions:seed:labelcolumn:textcolumn:)",
                    "title": "func stratifiedSplit(proportions: [Double], seed: Int, labelColumn: String, textColumn: String) throws -> MLDataTable",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mltextclassifier/datasource",
                "title": "MLTextClassifier.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/init(validation:algorithm:language:)",
                    "title": "init(validation: MLTextClassifier.ModelParameters.ValidationData, algorithm: MLTextClassifier.ModelAlgorithmType, language: NLLanguage?)",
                    "type": "init"
                  },
                  {
                    "external": true,
                    "path": "/documentation/naturallanguage/nllanguage",
                    "title": "NLLanguage",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/crf(revision:)",
                        "title": "case crf(revision: Int?)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/maxent(revision:)",
                        "title": "case maxEnt(revision: Int?)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/transferlearning(_:revision:)",
                        "title": "case transferLearning(MLTextClassifier.FeatureExtractorType, revision: Int?)",
                        "type": "case"
                      },
                      {
                        "children": [
                          {
                            "title": "Selecting a feature extractor type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/customembedding(_:)",
                            "title": "case customEmbedding(URL)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/staticembedding",
                            "title": "case staticEmbedding",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/bertembedding",
                            "title": "case bertEmbedding",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/elmoembedding",
                            "title": "case elmoEmbedding",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/dynamicembedding",
                            "title": "case dynamicEmbedding",
                            "type": "case"
                          },
                          {
                            "title": "Describing a feature extractor type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/description",
                            "title": "var description: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mltextclassifier/featureextractortype/debugdescription",
                                "title": "var debugDescription: String",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/customdebugstringconvertible-implementations",
                            "title": "CustomDebugStringConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mltextclassifier/featureextractortype/playgrounddescription",
                                "title": "var playgroundDescription: Any",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/customplaygrounddisplayconvertible-implementations",
                            "title": "CustomPlaygroundDisplayConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mltextclassifier/featureextractortype/description",
                                "title": "var description: String",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/customstringconvertible-implementations",
                            "title": "CustomStringConvertible Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/createml/mltextclassifier/featureextractortype",
                        "title": "MLTextClassifier.FeatureExtractorType",
                        "type": "enum"
                      },
                      {
                        "title": "Describing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype",
                    "title": "MLTextClassifier.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Specifying validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validationdata-swift.enum/table(_:textcolumn:labelcolumn:)",
                        "title": "case table(MLDataTable, textColumn: String, labelColumn: String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:textcolumn:labelcolumn:)",
                        "title": "case dataFrame(DataFrame, textColumn: String, labelColumn: String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validationdata-swift.enum/datasource(_:)",
                        "title": "case dataSource(MLTextClassifier.DataSource)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validationdata-swift.enum/dictionary(_:)",
                        "title": "case dictionary([String : [String]])",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validationdata-swift.enum/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validationdata-swift.enum",
                    "title": "MLTextClassifier.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "title": "Accessing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLTextClassifier.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/language",
                    "title": "var language: NLLanguage?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validation",
                    "title": "var validation: MLTextClassifier.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/maxiterations",
                    "title": "var maxIterations: Int?",
                    "type": "property"
                  },
                  {
                    "title": "Describing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Deprecated",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/init(validationdata:algorithm:language:)-xplw",
                    "title": "init(validationData: [String : [String]], algorithm: MLTextClassifier.ModelAlgorithmType, language: NLLanguage?)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/init(validationdata:algorithm:language:textcolumnvalidationdata:labelcolumnvalidationdata:)",
                    "title": "init(validationData: MLDataTable?, algorithm: MLTextClassifier.ModelAlgorithmType, language: NLLanguage?, textColumnValidationData: String?, labelColumnValidationData: String?)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/init(validationdata:algorithm:language:)-95vq7",
                    "title": "init(validationData: MLTextClassifier.DataSource, algorithm: MLTextClassifier.ModelAlgorithmType, language: NLLanguage?)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/validationdata-swift.property",
                    "title": "var validationData: MLDataTable?",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/textcolumnvalidationdata",
                    "title": "var textColumnValidationData: String?",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/labelcolumnvalidationdata",
                    "title": "var labelColumnValidationData: String?",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mltextclassifier/modelparameters-swift.struct",
                "title": "MLTextClassifier.ModelParameters",
                "type": "struct"
              },
              {
                "path": "/documentation/createml/mltextclassifier/modelparameters-swift.property",
                "title": "let modelParameters: MLTextClassifier.ModelParameters",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mltextclassifier/init(trainingdata:textcolumn:labelcolumn:parameters:)-7lp6w",
                "title": "init(trainingData: MLDataTable, textColumn: String, labelColumn: String, parameters: MLTextClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Assessing model accuracy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltextclassifier/trainingmetrics",
                "title": "let trainingMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltextclassifier/validationmetrics",
                "title": "let validationMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "title": "Evaluating a text classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltextclassifier/evaluation(on:)-8ch4k",
                "title": "func evaluation(on: MLTextClassifier.DataSource) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mltextclassifier/evaluation(on:textcolumn:labelcolumn:)-2ibj8",
                "title": "func evaluation(on: DataFrame, textColumn: String, labelColumn: String) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mltextclassifier/evaluation(on:)-3h6eu",
                "title": "func evaluation(on: [String : [String]]) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mltextclassifier/evaluation(on:textcolumn:labelcolumn:)-6emxa",
                "title": "func evaluation(on: MLDataTable, textColumn: String, labelColumn: String) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "title": "Testing a text classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltextclassifier/prediction(from:)",
                "title": "func prediction(from: String) throws -> String",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mltextclassifier/predictions(from:)-1u3f2",
                "title": "func predictions(from: [String]) throws -> [String]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mltextclassifier/predictionwithconfidence(from:)",
                "title": "func predictionWithConfidence(from: String) throws -> [String : Double]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mltextclassifier/predictionswithconfidence(from:)-uezi",
                "title": "func predictionsWithConfidence(from: [String]) throws -> [[String : Double]]",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mltextclassifier/predictions(from:)-40gtb",
                "title": "func predictions(from: MLDataColumn<String>) throws -> MLDataColumn<String>",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mltextclassifier/predictionswithconfidence(from:)-1w9zo",
                "title": "func predictionsWithConfidence(from: MLDataColumn<String>) throws -> MLDataColumn<[String : Double]>",
                "type": "method"
              },
              {
                "title": "Saving a text classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltextclassifier/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mltextclassifier/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Describing a text classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltextclassifier/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltextclassifier/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltextclassifier/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltextclassifier/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Selecting a feature extractor type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/customembedding(_:)",
                    "title": "case customEmbedding(URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/staticembedding",
                    "title": "case staticEmbedding",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/bertembedding",
                    "title": "case bertEmbedding",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/elmoembedding",
                    "title": "case elmoEmbedding",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/dynamicembedding",
                    "title": "case dynamicEmbedding",
                    "type": "case"
                  },
                  {
                    "title": "Describing a feature extractor type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/featureextractortype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mltextclassifier/featureextractortype",
                "title": "MLTextClassifier.FeatureExtractorType",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Selecting an algorithm type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/crf(revision:)",
                    "title": "case crf(revision: Int?)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/maxent(revision:)",
                    "title": "case maxEnt(revision: Int?)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/transferlearning(_:revision:)",
                    "title": "case transferLearning(MLTextClassifier.FeatureExtractorType, revision: Int?)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting a feature extractor type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/customembedding(_:)",
                        "title": "case customEmbedding(URL)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/staticembedding",
                        "title": "case staticEmbedding",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/bertembedding",
                        "title": "case bertEmbedding",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/elmoembedding",
                        "title": "case elmoEmbedding",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/dynamicembedding",
                        "title": "case dynamicEmbedding",
                        "type": "case"
                      },
                      {
                        "title": "Describing a feature extractor type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mltextclassifier/featureextractortype/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mltextclassifier/featureextractortype/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/featureextractortype",
                    "title": "MLTextClassifier.FeatureExtractorType",
                    "type": "enum"
                  },
                  {
                    "title": "Describing an algorithm type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mltextclassifier/modelalgorithmtype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mltextclassifier/modelalgorithmtype",
                "title": "MLTextClassifier.ModelAlgorithmType",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mltextclassifier/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mltextclassifier/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mltextclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mltextclassifier/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mltextclassifier",
            "title": "MLTextClassifier",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating and training a word tagger",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtagger/init(trainingdata:parameters:)",
                "title": "init(trainingData: [(tokens: [MLWordTagger.Token], labels: [String])], parameters: MLWordTagger.ModelParameters) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlwordtagger/init(trainingdata:tokencolumn:labelcolumn:parameters:)-97qtg",
                "title": "init(trainingData: MLDataTable, tokenColumn: String, labelColumn: String, parameters: MLWordTagger.ModelParameters) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mlwordtagger/init(trainingdata:tokencolumn:labelcolumn:parameters:)-9fci2",
                "title": "init(trainingData: DataFrame, tokenColumn: String, labelColumn: String, parameters: MLWordTagger.ModelParameters) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mlwordtagger/token",
                "title": "MLWordTagger.Token",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/init(validation:algorithm:language:)",
                    "title": "init(validation: MLWordTagger.ModelParameters.ValidationData, algorithm: MLWordTagger.ModelAlgorithmType, language: NLLanguage?)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/crf(revision:)",
                        "title": "case crf(revision: Int?)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/transferlearning(_:revision:)",
                        "title": "case transferLearning(MLWordTagger.FeatureExtractorType, revision: Int)",
                        "type": "case"
                      },
                      {
                        "children": [
                          {
                            "title": "Selecting a feature extractor type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/bertembedding",
                            "title": "case bertEmbedding",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/elmoembedding",
                            "title": "case elmoEmbedding",
                            "type": "case"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/dynamicembedding",
                            "title": "case dynamicEmbedding",
                            "type": "case"
                          },
                          {
                            "title": "Describing a feature extractor type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/description",
                            "title": "var description: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          },
                          {
                            "title": "Comparing feature extractors",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/==(_:_:)",
                            "title": "static func == (MLWordTagger.FeatureExtractorType, MLWordTagger.FeatureExtractorType) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Accessing the hash value",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlwordtagger/featureextractortype/debugdescription",
                                "title": "var debugDescription: String",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/customdebugstringconvertible-implementations",
                            "title": "CustomDebugStringConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlwordtagger/featureextractortype/playgrounddescription",
                                "title": "var playgroundDescription: Any",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/customplaygrounddisplayconvertible-implementations",
                            "title": "CustomPlaygroundDisplayConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlwordtagger/featureextractortype/description",
                                "title": "var description: String",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/customstringconvertible-implementations",
                            "title": "CustomStringConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlwordtagger/featureextractortype/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/createml/mlwordtagger/featureextractortype",
                        "title": "MLWordTagger.FeatureExtractorType",
                        "type": "enum"
                      },
                      {
                        "title": "Describing an algorithm type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype",
                    "title": "MLWordTagger.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Specifying validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/validationdata-swift.enum/table(_:tokencolumn:labelcolumn:)",
                        "title": "case table(MLDataTable, tokenColumn: String, labelColumn: String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:tokencolumn:labelcolumn:)",
                        "title": "case dataFrame(DataFrame, tokenColumn: String, labelColumn: String)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/validationdata-swift.enum/tuples(_:)",
                        "title": "case tuples([(tokens: [MLWordTagger.Token], labels: [String])])",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/validationdata-swift.enum/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/validationdata-swift.enum",
                    "title": "MLWordTagger.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "title": "Accessing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLWordTagger.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/language",
                    "title": "var language: NLLanguage?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/validation",
                    "title": "var validation: MLWordTagger.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/maxiterations",
                    "title": "var maxIterations: Int?",
                    "type": "property"
                  },
                  {
                    "title": "Describing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Deprecated",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/init(validationdata:algorithm:language:tokencolumnvalidationdata:labelcolumnvalidationdata:)",
                    "title": "init(validationData: MLDataTable?, algorithm: MLWordTagger.ModelAlgorithmType, language: NLLanguage?, tokenColumnValidationData: String?, labelColumnValidationData: String?)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/init(validationdata:algorithm:language:)",
                    "title": "init(validationData: [(tokens: [MLWordTagger.Token], labels: [String])], algorithm: MLWordTagger.ModelAlgorithmType, language: NLLanguage?)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/validationdata-swift.property",
                    "title": "var validationData: MLDataTable?",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/tokencolumnvalidationdata",
                    "title": "var tokenColumnValidationData: String?",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/labelcolumnvalidationdata",
                    "title": "var labelColumnValidationData: String?",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlwordtagger/modelparameters-swift.struct",
                "title": "MLWordTagger.ModelParameters",
                "type": "struct"
              },
              {
                "path": "/documentation/createml/mlwordtagger/modelparameters-swift.property",
                "title": "let modelParameters: MLWordTagger.ModelParameters",
                "type": "property"
              },
              {
                "title": "Assessing model accuracy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtagger/trainingmetrics",
                "title": "let trainingMetrics: MLWordTaggerMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordtagger/validationmetrics",
                "title": "let validationMetrics: MLWordTaggerMetrics",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Analyzing the tagger’s performance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/taggingerror",
                    "title": "var taggingError: Double",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlwordtaggermetrics/precisionrecall",
                    "title": "var precisionRecall: MLDataTable",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlwordtaggermetrics/confusion",
                    "title": "var confusion: MLDataTable",
                    "type": "property"
                  },
                  {
                    "title": "Handling errors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/isvalid",
                    "title": "var isValid: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/error",
                    "title": "var error: (any Error)?",
                    "type": "property"
                  },
                  {
                    "title": "Describing metrics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/confusiondataframe",
                    "title": "var confusionDataFrame: DataFrame",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/precisionrecalldataframe",
                    "title": "var precisionRecallDataFrame: DataFrame",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtaggermetrics/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtaggermetrics/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtaggermetrics/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtaggermetrics/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtaggermetrics/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtaggermetrics/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlwordtaggermetrics",
                "title": "MLWordTaggerMetrics",
                "type": "struct"
              },
              {
                "title": "Evaluating a word tagger",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlwordtagger/evaluation(on:tokencolumn:labelcolumn:)-31x1l",
                "title": "func evaluation(on: MLDataTable, tokenColumn: String, labelColumn: String) -> MLWordTaggerMetrics",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordtagger/evaluation(on:tokencolumn:labelcolumn:)-7jhx7",
                "title": "func evaluation(on: DataFrame, tokenColumn: String, labelColumn: String) -> MLWordTaggerMetrics",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordtagger/evaluation(on:)",
                "title": "func evaluation(on: [(tokens: [MLWordTagger.Token], labels: [String])]) -> MLWordTaggerMetrics",
                "type": "method"
              },
              {
                "title": "Testing a word tagger",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtagger/predictions(from:)-12r03",
                "title": "func predictions<S>(from: S) throws -> DataFrame",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlwordtagger/predictions(from:)-22b8d",
                "title": "func predictions(from: MLDataColumn<String>) throws -> MLDataTable",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordtagger/prediction(from:)-7rqyq",
                "title": "func prediction(from: [MLWordTagger.Token]) throws -> [String]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordtagger/prediction(from:)-r5gb",
                "title": "func prediction(from: String) throws -> [String]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordtagger/predictionwithconfidence(from:)-398qj",
                "title": "func predictionWithConfidence(from: String) throws -> [[String : Double]]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordtagger/predictionwithconfidence(from:)-37coi",
                "title": "func predictionWithConfidence(from: [MLWordTagger.Token]) throws -> [[String : Double]]",
                "type": "method"
              },
              {
                "title": "Saving a word tagger",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtagger/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordtagger/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Describing a word tagger",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtagger/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordtagger/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordtagger/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordtagger/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Selecting a feature extractor type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/bertembedding",
                    "title": "case bertEmbedding",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/elmoembedding",
                    "title": "case elmoEmbedding",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/dynamicembedding",
                    "title": "case dynamicEmbedding",
                    "type": "case"
                  },
                  {
                    "title": "Describing a feature extractor type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Comparing feature extractors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/==(_:_:)",
                    "title": "static func == (MLWordTagger.FeatureExtractorType, MLWordTagger.FeatureExtractorType) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Accessing the hash value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/featureextractortype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlwordtagger/featureextractortype",
                "title": "MLWordTagger.FeatureExtractorType",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Selecting an algorithm type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/crf(revision:)",
                    "title": "case crf(revision: Int?)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/transferlearning(_:revision:)",
                    "title": "case transferLearning(MLWordTagger.FeatureExtractorType, revision: Int)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting a feature extractor type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/bertembedding",
                        "title": "case bertEmbedding",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/elmoembedding",
                        "title": "case elmoEmbedding",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/dynamicembedding",
                        "title": "case dynamicEmbedding",
                        "type": "case"
                      },
                      {
                        "title": "Describing a feature extractor type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Comparing feature extractors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/==(_:_:)",
                        "title": "static func == (MLWordTagger.FeatureExtractorType, MLWordTagger.FeatureExtractorType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Accessing the hash value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlwordtagger/featureextractortype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlwordtagger/featureextractortype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/featureextractortype",
                    "title": "MLWordTagger.FeatureExtractorType",
                    "type": "enum"
                  },
                  {
                    "title": "Describing an algorithm type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordtagger/modelalgorithmtype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlwordtagger/modelalgorithmtype",
                "title": "MLWordTagger.ModelAlgorithmType",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordtagger/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordtagger/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtagger/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordtagger/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlwordtagger",
            "title": "MLWordTagger",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a gazetteer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlgazetteer/init(dictionary:parameters:)",
                "title": "init(dictionary: [String : [String]], parameters: MLGazetteer.ModelParameters) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlgazetteer/init(labeleddata:textcolumn:labelcolumn:parameters:)",
                "title": "init(labeledData: MLDataTable, textColumn: String, labelColumn: String, parameters: MLGazetteer.ModelParameters) throws",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/init(language:)",
                    "title": "init(language: NLLanguage?)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/language",
                    "title": "var language: NLLanguage?",
                    "type": "property"
                  },
                  {
                    "title": "Describing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlgazetteer/modelparameters-swift.struct",
                "title": "MLGazetteer.ModelParameters",
                "type": "struct"
              },
              {
                "path": "/documentation/createml/mlgazetteer/modelparameters-swift.property",
                "title": "let modelParameters: MLGazetteer.ModelParameters",
                "type": "property"
              },
              {
                "title": "Testing a gazetteer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlgazetteer/prediction(from:)",
                "title": "func prediction(from: String) throws -> String",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlgazetteer/predictions(from:)-2rej",
                "title": "func predictions(from: [String]) throws -> [String]",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlgazetteer/predictions(from:)-2jaui",
                "title": "func predictions(from: MLDataColumn<String>) throws -> MLDataColumn<String>",
                "type": "method"
              },
              {
                "title": "Saving a gazetteer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlgazetteer/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlgazetteer/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Describing a gazetteer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlgazetteer/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlgazetteer/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlgazetteer/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlgazetteer/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlgazetteer/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlgazetteer/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlgazetteer/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlgazetteer/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlgazetteer/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlgazetteer/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlgazetteer",
            "title": "MLGazetteer",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a word embedding",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordembedding/init(dictionary:parameters:)",
                "title": "init(dictionary: [String : [Double]], parameters: MLWordEmbedding.ModelParameters) throws",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/init(language:revision:)",
                    "title": "init(language: NLLanguage?, revision: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/revision",
                    "title": "var revision: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/language",
                    "title": "var language: NLLanguage?",
                    "type": "property"
                  },
                  {
                    "title": "Describing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlwordembedding/modelparameters-swift.struct",
                "title": "MLWordEmbedding.ModelParameters",
                "type": "struct"
              },
              {
                "path": "/documentation/createml/mlwordembedding/modelparameters-swift.property",
                "title": "let modelParameters: MLWordEmbedding.ModelParameters",
                "type": "property"
              },
              {
                "title": "Testing a word embedding",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordembedding/prediction(from:maxcount:maxdistance:distancetype:)",
                "title": "func prediction(from: String, maxCount: Int, maxDistance: Double, distanceType: NLDistanceType) throws -> [(text: String, distance: Double)]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordembedding/distance(between:and:distancetype:)",
                "title": "func distance(between: String, and: String, distanceType: NLDistanceType) -> Double",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/naturallanguage/nldistancetype",
                "title": "NLDistanceType",
                "type": "enum"
              },
              {
                "path": "/documentation/createml/mlwordembedding/contains(_:)",
                "title": "func contains(String) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordembedding/vector(for:)",
                "title": "func vector(for: String) -> [Double]?",
                "type": "method"
              },
              {
                "title": "Saving a word embedding",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordembedding/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlwordembedding/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Describing a word embedding",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordembedding/dimension",
                "title": "let dimension: Int",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordembedding/vocabularysize",
                "title": "let vocabularySize: Int",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordembedding/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordembedding/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordembedding/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordembedding/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordembedding/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordembedding/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordembedding/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordembedding/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlwordembedding",
            "title": "MLWordEmbedding",
            "type": "struct"
          },
          {
            "title": "Sound Models",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Training a sound classifier asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/train(trainingdata:parameters:sessionparameters:)-5hdqg",
                "title": "static func train(trainingData: MLSoundClassifier.DataSource, parameters: MLSoundClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLSoundClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/train(trainingdata:parameters:sessionparameters:)-6z4c8",
                "title": "static func train(trainingData: [String : [URL]], parameters: MLSoundClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLSoundClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/maketrainingsession(trainingdata:parameters:sessionparameters:)",
                "title": "static func makeTrainingSession(trainingData: MLSoundClassifier.DataSource, parameters: MLSoundClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLSoundClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/resume(_:)",
                "title": "static func resume(MLTrainingSession<MLSoundClassifier>) throws -> MLJob<MLSoundClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/restoretrainingsession(sessionparameters:)",
                "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLSoundClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/extractfeatures(trainingdata:parameters:sessionparameters:)",
                "title": "static func extractFeatures(trainingData: MLSoundClassifier.DataSource, parameters: MLSoundClassifier.FeatureExtractionParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLSoundClassifier.DataSource>",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating feature extraction parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/init(overlapfactor:featureextractor:featureextractiontimewindowsize:)",
                    "title": "init(overlapFactor: Double, featureExtractor: MLSoundClassifier.ModelParameters.FeatureExtractorType, featureExtractionTimeWindowSize: TimeInterval?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/init(overlapfactor:featureextractor:)",
                    "title": "init(overlapFactor: Double, featureExtractor: MLSoundClassifier.ModelParameters.FeatureExtractorType)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing feature extraction parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/overlapfactor",
                    "title": "var overlapFactor: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/featureextractor",
                    "title": "var featureExtractor: MLSoundClassifier.ModelParameters.FeatureExtractorType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/featureextractiontimewindowsize",
                    "title": "var featureExtractionTimeWindowSize: TimeInterval",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters",
                "title": "MLSoundClassifier.FeatureExtractionParameters",
                "type": "struct"
              },
              {
                "title": "Creating a sound classifier from a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/init(checkpoint:)",
                "title": "init(checkpoint: MLCheckpoint) throws",
                "type": "init"
              },
              {
                "title": "Training a sound classifier synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/init(trainingdata:parameters:)-bztx",
                "title": "init(trainingData: MLSoundClassifier.DataSource, parameters: MLSoundClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlsoundclassifier/init(trainingdata:parameters:)-83tih",
                "title": "init(trainingData: [String : [URL]], parameters: MLSoundClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Assessing model accuracy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/trainingmetrics",
                "title": "var trainingMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/validationmetrics",
                "title": "var validationMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "title": "Evaluating a sound classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/evaluation(on:)-7fmux",
                "title": "func evaluation(on: MLSoundClassifier.DataSource) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlsoundclassifier/evaluation(on:)-8kplo",
                "title": "func evaluation(on: [String : [URL]]) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "title": "Testing a sound classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/predictions(from:)",
                "title": "func predictions(from: [URL]) throws -> [String]",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/predictions(from:overlapfactor:predictiontimewindowsize:)",
                "title": "func predictions(from: [URL], overlapFactor: Double, predictionTimeWindowSize: TimeInterval) throws -> [String]",
                "type": "method"
              },
              {
                "title": "Saving a sound classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Inspecting a sound classifier model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.property",
                "title": "let modelParameters: MLSoundClassifier.ModelParameters",
                "type": "property"
              },
              {
                "title": "Describing a sound classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlsoundclassifier/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/datasource/labeleddirectories(at:)",
                    "title": "case labeledDirectories(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/datasource/labeledfiles(at:)",
                    "title": "case labeledFiles(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/datasource/filesbylabel(_:)",
                    "title": "case filesByLabel([String : [URL]])",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/datasource/features(table:featurecolumn:labelcolumn:parameters:)",
                    "title": "case features(table: MLDataTable, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/datasource/featuresdataframe(_:featurecolumn:labelcolumn:parameters:)",
                    "title": "case featuresDataFrame(DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating feature extraction parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/init(overlapfactor:featureextractor:featureextractiontimewindowsize:)",
                        "title": "init(overlapFactor: Double, featureExtractor: MLSoundClassifier.ModelParameters.FeatureExtractorType, featureExtractionTimeWindowSize: TimeInterval?)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/init(overlapfactor:featureextractor:)",
                        "title": "init(overlapFactor: Double, featureExtractor: MLSoundClassifier.ModelParameters.FeatureExtractorType)",
                        "type": "init"
                      },
                      {
                        "title": "Accessing feature extraction parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/overlapfactor",
                        "title": "var overlapFactor: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/featureextractor",
                        "title": "var featureExtractor: MLSoundClassifier.ModelParameters.FeatureExtractorType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters/featureextractiontimewindowsize",
                        "title": "var featureExtractionTimeWindowSize: TimeInterval",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/featureextractionparameters",
                    "title": "MLSoundClassifier.FeatureExtractionParameters",
                    "type": "struct"
                  },
                  {
                    "title": "Retrieving the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/datasource/labeledsounds()",
                    "title": "func labeledSounds() throws -> [String : [URL]]",
                    "type": "method"
                  },
                  {
                    "title": "Partitioning the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/datasource/stratifiedsplit(proportions:seed:)",
                    "title": "func stratifiedSplit(proportions: [Double], seed: Int) throws -> [[String : [URL]]]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/datasource/stratifiedsplit(proportions:generator:)",
                    "title": "func stratifiedSplit<RNG>(proportions: [Double], generator: inout RNG) throws -> [[String : [URL]]]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlsoundclassifier/datasource",
                "title": "MLSoundClassifier.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/init(validation:maxiterations:overlapfactor:)",
                    "title": "init(validation: MLSoundClassifier.ModelParameters.ValidationData, maxIterations: Int, overlapFactor: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/init(validation:maxiterations:overlapfactor:algorithm:)",
                    "title": "init(validation: MLSoundClassifier.ModelParameters.ValidationData, maxIterations: Int, overlapFactor: Double, algorithm: MLSoundClassifier.ModelParameters.ModelAlgorithmType)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/init(validation:maxiterations:overlapfactor:algorithm:featureextractiontimewindowsize:)",
                    "title": "init(validation: MLSoundClassifier.ModelParameters.ValidationData, maxIterations: Int, overlapFactor: Double, algorithm: MLSoundClassifier.ModelParameters.ModelAlgorithmType, featureExtractionTimeWindowSize: TimeInterval)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing the training parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/validation",
                    "title": "var validation: MLSoundClassifier.ModelParameters.ValidationData",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/maxiterations",
                    "title": "var maxIterations: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/overlapfactor",
                    "title": "var overlapFactor: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLSoundClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractiontimewindowsize",
                    "title": "var featureExtractionTimeWindowSize: TimeInterval",
                    "type": "property"
                  },
                  {
                    "title": "Describing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/validationdata/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/validationdata/datasource(_:)",
                        "title": "case dataSource(MLSoundClassifier.DataSource)",
                        "type": "case"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/validationdata/dictionary(_:)",
                        "title": "case dictionary([String : [URL]])",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/validationdata/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/validationdata",
                    "title": "MLSoundClassifier.ModelParameters.ValidationData",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating an algorithm",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/modelalgorithmtype/transferlearning(featureextractor:classifier:)",
                        "title": "case transferLearning(featureExtractor: MLSoundClassifier.ModelParameters.FeatureExtractorType, classifier: MLSoundClassifier.ModelParameters.ClassifierType)",
                        "type": "case"
                      },
                      {
                        "children": [
                          {
                            "title": "Designating a feature extractor",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/audiofeatureprint(type:revision:)",
                            "title": "case audioFeaturePrint(type: MLSoundClassifier.ModelParameters.FeaturePrintType, revision: Int)",
                            "type": "case"
                          },
                          {
                            "children": [
                              {
                                "title": "Designating a feature-print type",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/sound",
                                "title": "case sound",
                                "type": "case"
                              },
                              {
                                "title": "Describing a feature-print type",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/description",
                                "title": "var description: String",
                                "type": "property"
                              },
                              {
                                "title": "Comparing feature-print types",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/==(_:_:)",
                                "title": "static func == (MLSoundClassifier.ModelParameters.FeaturePrintType, MLSoundClassifier.ModelParameters.FeaturePrintType) -> Bool",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              },
                              {
                                "title": "Hashing a feature-print type",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/hash(into:)",
                                "title": "func hash(into: inout Hasher)",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/hashvalue",
                                "title": "var hashValue: Int",
                                "type": "property"
                              },
                              {
                                "title": "Default Implementations",
                                "type": "groupMarker"
                              },
                              {
                                "children": [
                                  {
                                    "title": "Operators",
                                    "type": "groupMarker"
                                  },
                                  {
                                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/!=(_:_:)",
                                    "title": "static func != (Self, Self) -> Bool",
                                    "type": "op"
                                  }
                                ],
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/equatable-implementations",
                                "title": "Equatable Implementations",
                                "type": "collection"
                              }
                            ],
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype",
                            "title": "MLSoundClassifier.ModelParameters.FeaturePrintType",
                            "type": "enum"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/vggish(revision:)",
                            "title": "case vggish(revision: Int)",
                            "type": "case"
                          },
                          {
                            "title": "Describing a feature extractor",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/description",
                            "title": "var description: String",
                            "type": "property"
                          },
                          {
                            "title": "Comparing feature extractors",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/==(_:_:)",
                            "title": "static func == (MLSoundClassifier.ModelParameters.FeatureExtractorType, MLSoundClassifier.ModelParameters.FeatureExtractorType) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype",
                        "title": "MLSoundClassifier.ModelParameters.FeatureExtractorType",
                        "type": "enum"
                      },
                      {
                        "children": [
                          {
                            "title": "Designating an algorithm’s classifier",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/logisticregressor",
                            "title": "case logisticRegressor",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/multilayerperceptron(layersizes:)",
                            "title": "case multilayerPerceptron(layerSizes: [Int])",
                            "type": "case"
                          },
                          {
                            "title": "Describing a classifier type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/description",
                            "title": "var description: String",
                            "type": "property"
                          },
                          {
                            "title": "Comparing a classifier type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/==(_:_:)",
                            "title": "static func == (MLSoundClassifier.ModelParameters.ClassifierType, MLSoundClassifier.ModelParameters.ClassifierType) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype",
                        "title": "MLSoundClassifier.ModelParameters.ClassifierType",
                        "type": "enum"
                      },
                      {
                        "title": "Describing an algorithm",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Comparing algorithms",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/modelalgorithmtype/==(_:_:)",
                        "title": "static func == (MLSoundClassifier.ModelParameters.ModelAlgorithmType, MLSoundClassifier.ModelParameters.ModelAlgorithmType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/modelalgorithmtype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/modelalgorithmtype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/modelalgorithmtype",
                    "title": "MLSoundClassifier.ModelParameters.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "title": "Enumerations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating an algorithm’s classifier",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/logisticregressor",
                        "title": "case logisticRegressor",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/multilayerperceptron(layersizes:)",
                        "title": "case multilayerPerceptron(layerSizes: [Int])",
                        "type": "case"
                      },
                      {
                        "title": "Describing a classifier type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Comparing a classifier type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/==(_:_:)",
                        "title": "static func == (MLSoundClassifier.ModelParameters.ClassifierType, MLSoundClassifier.ModelParameters.ClassifierType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/classifiertype",
                    "title": "MLSoundClassifier.ModelParameters.ClassifierType",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating a feature extractor",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/audiofeatureprint(type:revision:)",
                        "title": "case audioFeaturePrint(type: MLSoundClassifier.ModelParameters.FeaturePrintType, revision: Int)",
                        "type": "case"
                      },
                      {
                        "children": [
                          {
                            "title": "Designating a feature-print type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/sound",
                            "title": "case sound",
                            "type": "case"
                          },
                          {
                            "title": "Describing a feature-print type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/description",
                            "title": "var description: String",
                            "type": "property"
                          },
                          {
                            "title": "Comparing feature-print types",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/==(_:_:)",
                            "title": "static func == (MLSoundClassifier.ModelParameters.FeaturePrintType, MLSoundClassifier.ModelParameters.FeaturePrintType) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Hashing a feature-print type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype",
                        "title": "MLSoundClassifier.ModelParameters.FeaturePrintType",
                        "type": "enum"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/vggish(revision:)",
                        "title": "case vggish(revision: Int)",
                        "type": "case"
                      },
                      {
                        "title": "Describing a feature extractor",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Comparing feature extractors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/==(_:_:)",
                        "title": "static func == (MLSoundClassifier.ModelParameters.FeatureExtractorType, MLSoundClassifier.ModelParameters.FeatureExtractorType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureextractortype",
                    "title": "MLSoundClassifier.ModelParameters.FeatureExtractorType",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Designating a feature-print type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/sound",
                        "title": "case sound",
                        "type": "case"
                      },
                      {
                        "title": "Describing a feature-print type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Comparing feature-print types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/==(_:_:)",
                        "title": "static func == (MLSoundClassifier.ModelParameters.FeaturePrintType, MLSoundClassifier.ModelParameters.FeaturePrintType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Hashing a feature-print type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/featureprinttype",
                    "title": "MLSoundClassifier.ModelParameters.FeaturePrintType",
                    "type": "enum"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlsoundclassifier/modelparameters-swift.struct",
                "title": "MLSoundClassifier.ModelParameters",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlsoundclassifier/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlsoundclassifier/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlsoundclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlsoundclassifier/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlsoundclassifier",
            "title": "MLSoundClassifier",
            "type": "struct"
          },
          {
            "title": "Motion Models",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Training an activity classifier asynchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/train(trainingdata:featurecolumns:labelcolumn:recordingfilecolumn:parameters:sessionparameters:)-6oapt",
                "title": "static func train(trainingData: MLActivityClassifier.DataSource, featureColumns: [String], labelColumn: String, recordingFileColumn: String, parameters: MLActivityClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLActivityClassifier>",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlactivityclassifier/train(trainingdata:featurecolumns:labelcolumn:recordingfilecolumn:parameters:sessionparameters:)-43yhp",
                "title": "static func train(trainingData: MLDataTable, featureColumns: [String], labelColumn: String, recordingFileColumn: String, parameters: MLActivityClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLActivityClassifier>",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlactivityclassifier/maketrainingsession(trainingdata:featurecolumns:labelcolumn:recordingfilecolumn:parameters:sessionparameters:)-3ic8k",
                "title": "static func makeTrainingSession(trainingData: MLDataTable, featureColumns: [String], labelColumn: String, recordingFileColumn: String, parameters: MLActivityClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLActivityClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/maketrainingsession(trainingdata:featurecolumns:labelcolumn:recordingfilecolumn:parameters:sessionparameters:)-dk66",
                "title": "static func makeTrainingSession(trainingData: MLActivityClassifier.DataSource, featureColumns: [String], labelColumn: String, recordingFileColumn: String, parameters: MLActivityClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLActivityClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/resume(_:)",
                "title": "static func resume(MLTrainingSession<MLActivityClassifier>) throws -> MLJob<MLActivityClassifier>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/restoretrainingsession(sessionparameters:)",
                "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLActivityClassifier>",
                "type": "method"
              },
              {
                "title": "Creating an activity classifier from a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/init(checkpoint:)",
                "title": "init(checkpoint: MLCheckpoint) throws",
                "type": "init"
              },
              {
                "title": "Training an activity classifier synchronously",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/init(trainingdata:featurecolumns:labelcolumn:recordingfilecolumn:parameters:)-6ltei",
                "title": "init(trainingData: MLActivityClassifier.DataSource, featureColumns: [String], labelColumn: String?, recordingFileColumn: String?, parameters: MLActivityClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlactivityclassifier/init(trainingdata:featurecolumns:labelcolumn:recordingfilecolumn:parameters:)-1z9ai",
                "title": "init(trainingData: MLDataTable, featureColumns: [String], labelColumn: String, recordingFileColumn: String, parameters: MLActivityClassifier.ModelParameters) throws",
                "type": "init"
              },
              {
                "title": "Assessing model accuracy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/trainingmetrics",
                "title": "var trainingMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/validationmetrics",
                "title": "var validationMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "title": "Evaluating an activity classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/evaluation(on:featurecolumns:labelcolumn:recordingfilecolumn:)-1ib5p",
                "title": "func evaluation(on: MLActivityClassifier.DataSource, featureColumns: [String], labelColumn: String?, recordingFileColumn: String?) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlactivityclassifier/evaluation(on:featurecolumns:labelcolumn:recordingfilecolumn:)-3r5em",
                "title": "func evaluation(on: MLDataTable, featureColumns: [String], labelColumn: String, recordingFileColumn: String) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "title": "Testing an activity classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/predictions(from:perwindowprediction:)-492gd",
                "title": "func predictions(from: DataFrame, perWindowPrediction: Bool?) throws -> [String]",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlactivityclassifier/predictions(from:perwindowprediction:)-6tatv",
                "title": "func predictions(from: MLDataTable, perWindowPrediction: Bool?) throws -> [String]",
                "type": "method"
              },
              {
                "title": "Saving an activity classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Inspecting an activity classifier model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.property",
                "title": "let modelParameters: MLActivityClassifier.ModelParameters",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/featurecolumns",
                "title": "var featureColumns: [String]",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/labelcolumn",
                "title": "var labelColumn: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/recordingfilecolumn",
                "title": "var recordingFileColumn: String",
                "type": "property"
              },
              {
                "title": "Describing an activity classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlactivityclassifier/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a data source",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/datasource/labeleddirectories(at:)",
                    "title": "case labeledDirectories(at: URL)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/datasource/directorywithdataandannotation(at:annotationfilename:timestampcolumn:labelstarttimecolumn:labelendtimecolumn:)",
                    "title": "case directoryWithDataAndAnnotation(at: URL, annotationFileName: String, timeStampColumn: String, labelStartTimeColumn: String, labelEndTimeColumn: String)",
                    "type": "case"
                  },
                  {
                    "title": "Generating data tables from a data source",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactivityclassifier/datasource/labeledsensordata(featurecolumns:labelcolumn:recordingfilecolumn:)",
                    "title": "func labeledSensorData(featureColumns: [String], labelColumn: String?, recordingFileColumn: String?) throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactivityclassifier/datasource/stratifiedsplit(proportions:seed:featurecolumns:labelcolumn:recordingfilecolumn:)",
                    "title": "func stratifiedSplit(proportions: [Double], seed: Int, featureColumns: [String], labelColumn: String, recordingFileColumn: String) throws -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "title": "Gathering annotated features",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/datasource/gatherannotatedfeatures(featurecolumns:labelcolumn:recordingfilecolumn:)",
                    "title": "func gatherAnnotatedFeatures(featureColumns: [String], labelColumn: String, recordingFileColumn: String?) throws -> DataFrame",
                    "type": "method"
                  },
                  {
                    "title": "Getting the data frame",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/datasource/dataframe(_:)",
                    "title": "case dataFrame(DataFrame)",
                    "type": "case"
                  }
                ],
                "path": "/documentation/createml/mlactivityclassifier/datasource",
                "title": "MLActivityClassifier.DataSource",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/init(validation:batchsize:maximumiterations:predictionwindowsize:)",
                    "title": "init(validation: MLActivityClassifier.ModelParameters.Validation, batchSize: Int?, maximumIterations: Int?, predictionWindowSize: Int?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/init(validationdata:batchsize:maximumiterations:predictionwindowsize:)-66z1y",
                    "title": "init(validationData: MLActivityClassifier.DataSource, batchSize: Int?, maximumIterations: Int?, predictionWindowSize: Int?)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/init(validationdata:batchsize:maximumiterations:predictionwindowsize:)-6lc3g",
                    "title": "init(validationData: MLDataTable?, batchSize: Int?, maximumIterations: Int?, predictionWindowSize: Int?)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Specifying validation data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/validation-swift.enum/split(strategy:)",
                        "title": "case split(strategy: MLSplitStrategy)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/validation-swift.enum/datasource(_:)",
                        "title": "case dataSource(MLActivityClassifier.DataSource)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/validation-swift.enum/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/validation-swift.enum",
                    "title": "MLActivityClassifier.ModelParameters.Validation",
                    "type": "enum"
                  },
                  {
                    "title": "Accessing the training parameters",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/validationdata",
                    "title": "var validationData: MLDataTable?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/batchsize",
                    "title": "var batchSize: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/maximumiterations",
                    "title": "var maximumIterations: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/predictionwindowsize",
                    "title": "var predictionWindowSize: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/validation-swift.property",
                    "title": "var validation: MLActivityClassifier.ModelParameters.Validation",
                    "type": "property"
                  },
                  {
                    "title": "Describing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlactivityclassifier/modelparameters-swift.struct",
                "title": "MLActivityClassifier.ModelParameters",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlactivityclassifier/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlactivityclassifier/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlactivityclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlactivityclassifier/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlactivityclassifier",
            "title": "MLActivityClassifier",
            "type": "struct"
          },
          {
            "title": "Tabular Models",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/creating_a_model_from_tabular_data",
            "title": "Creating a Model from Tabular Data",
            "type": "sampleCode"
          },
          {
            "children": [
              {
                "title": "Creating and training a classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifier/init(trainingdata:targetcolumn:featurecolumns:)-6ojd1",
                "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlclassifier/init(trainingdata:targetcolumn:featurecolumns:)-p3f6",
                "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mlclassifier/targetcolumn",
                "title": "var targetColumn: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifier/featurecolumns",
                "title": "var featureColumns: [String]",
                "type": "property"
              },
              {
                "title": "Assessing model accuracy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifier/trainingmetrics",
                "title": "var trainingMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifier/validationmetrics",
                "title": "var validationMetrics: MLClassifierMetrics",
                "type": "property"
              },
              {
                "title": "Evaluating a classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifier/evaluation(on:)-3xetj",
                "title": "func evaluation(on: DataFrame) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlclassifier/evaluation(on:)-6433y",
                "title": "func evaluation(on: MLDataTable) -> MLClassifierMetrics",
                "type": "method"
              },
              {
                "title": "Testing a classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifier/predictions(from:)-7mww4",
                "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlclassifier/predictions(from:)-50jlv",
                "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                "type": "method"
              },
              {
                "title": "Saving a classifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifier/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlclassifier/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Describing a model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifier/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifier/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifier/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifier/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Classifier cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifier/decisiontree(_:)",
                "title": "case decisionTree(MLDecisionTreeClassifier)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlclassifier/randomforest(_:)",
                "title": "case randomForest(MLRandomForestClassifier)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlclassifier/boostedtree(_:)",
                "title": "case boostedTree(MLBoostedTreeClassifier)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlclassifier/logisticregression(_:)",
                "title": "case logisticRegression(MLLogisticRegressionClassifier)",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlclassifier/supportvector(_:)",
                "title": "case supportVector(MLSupportVectorClassifier)",
                "type": "case"
              },
              {
                "title": "Supporting classifier types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating and training a decision tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/init(checkpoint:)",
                    "title": "init(checkpoint: MLCheckpoint) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-3dvkw",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-1cgxc",
                    "title": "static func makeTrainingSession(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLDecisionTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-73z9l",
                    "title": "static func makeTrainingSession(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLDecisionTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/restoretrainingsession(sessionparameters:)",
                    "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLDecisionTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/resume(_:)",
                    "title": "static func resume(MLTrainingSession<MLDecisionTreeClassifier>) throws -> MLJob<MLDecisionTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-4155u",
                    "title": "static func train(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLDecisionTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-50xr2",
                    "title": "static func train(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLDecisionTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mldecisiontreeclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-hmwt",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/init(validation:maxdepth:minlossreduction:minchildweight:randomseed:)",
                        "title": "init(validation: MLDecisionTreeClassifier.ModelParameters.ValidationData, maxDepth: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/init(validationdata:maxdepth:minlossreduction:minchildweight:randomseed:)",
                        "title": "init(validationData: MLDataTable?, maxDepth: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLDecisionTreeClassifier.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/maxdepth",
                        "title": "var maxDepth: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/minlossreduction",
                        "title": "var minLossReduction: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/minchildweight",
                        "title": "var minChildWeight: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/randomseed",
                        "title": "var randomSeed: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/validation",
                        "title": "var validation: MLDecisionTreeClassifier.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.struct",
                    "title": "MLDecisionTreeClassifier.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/modelparameters-swift.property",
                    "title": "let modelParameters: MLDecisionTreeClassifier.ModelParameters",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing model accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/trainingmetrics",
                    "title": "var trainingMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/validationmetrics",
                    "title": "var validationMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Evaluating a decision tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/evaluation(on:)-86lng",
                    "title": "func evaluation(on: DataFrame) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mldecisiontreeclassifier/evaluation(on:)-69gvl",
                    "title": "func evaluation(on: MLDataTable) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a decision tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/predictions(from:)-2clno",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mldecisiontreeclassifier/predictions(from:)-2di6j",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a decision tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a decision tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldecisiontreeclassifier/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldecisiontreeclassifier/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeclassifier/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldecisiontreeclassifier/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldecisiontreeclassifier",
                "title": "MLDecisionTreeClassifier",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and training a random forest classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/init(checkpoint:)",
                    "title": "init(checkpoint: MLCheckpoint) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-5nojh",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrandomforestclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-4pxej",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/init(validation:maxdepth:maxiterations:minlossreduction:minchildweight:randomseed:rowsubsample:columnsubsample:)",
                        "title": "init(validation: MLRandomForestClassifier.ModelParameters.ValidationData, maxDepth: Int, maxIterations: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int, rowSubsample: Double, columnSubsample: Double)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/init(validationdata:maxdepth:maxiterations:minlossreduction:minchildweight:randomseed:rowsubsample:columnsubsample:)",
                        "title": "init(validationData: MLDataTable?, maxDepth: Int, maxIterations: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int, rowSubsample: Double, columnSubsample: Double)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLRandomForestClassifier.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/columnsubsample",
                        "title": "var columnSubsample: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/maxdepth",
                        "title": "var maxDepth: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/maxiterations",
                        "title": "var maxIterations: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/minchildweight",
                        "title": "var minChildWeight: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/minlossreduction",
                        "title": "var minLossReduction: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/randomseed",
                        "title": "var randomSeed: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/rowsubsample",
                        "title": "var rowSubsample: Double",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/validation",
                        "title": "var validation: MLRandomForestClassifier.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.struct",
                    "title": "MLRandomForestClassifier.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/modelparameters-swift.property",
                    "title": "let modelParameters: MLRandomForestClassifier.ModelParameters",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing model accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/trainingmetrics",
                    "title": "var trainingMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/validationmetrics",
                    "title": "var validationMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Creating a training session",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-7e0li",
                    "title": "static func makeTrainingSession(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLRandomForestClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-8fmoq",
                    "title": "static func makeTrainingSession(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLRandomForestClassifier>",
                    "type": "method"
                  },
                  {
                    "title": "Restoring a training session",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/restoretrainingsession(sessionparameters:)",
                    "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLRandomForestClassifier>",
                    "type": "method"
                  },
                  {
                    "title": "Resuming a training session",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/resume(_:)",
                    "title": "static func resume(MLTrainingSession<MLRandomForestClassifier>) throws -> MLJob<MLRandomForestClassifier>",
                    "type": "method"
                  },
                  {
                    "title": "Training a random forest classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-1q4n7",
                    "title": "static func train(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLRandomForestClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-3teom",
                    "title": "static func train(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLRandomForestClassifier>",
                    "type": "method"
                  },
                  {
                    "title": "Evaluating a random forest classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/evaluation(on:)-9nxk0",
                    "title": "func evaluation(on: DataFrame) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrandomforestclassifier/evaluation(on:)-3w3a0",
                    "title": "func evaluation(on: MLDataTable) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a random forest classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/predictions(from:)-20act",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrandomforestclassifier/predictions(from:)-9dvl3",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a random forest classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a random forest classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrandomforestclassifier/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrandomforestclassifier/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestclassifier/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrandomforestclassifier/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlrandomforestclassifier",
                "title": "MLRandomForestClassifier",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and training a boosted tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/init(checkpoint:)",
                    "title": "init(checkpoint: MLCheckpoint) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-11dpb",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-334sj",
                    "title": "static func makeTrainingSession(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLBoostedTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-7et81",
                    "title": "static func makeTrainingSession(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLBoostedTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/restoretrainingsession(sessionparameters:)",
                    "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLBoostedTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/resume(_:)",
                    "title": "static func resume(MLTrainingSession<MLBoostedTreeClassifier>) throws -> MLJob<MLBoostedTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-79pib",
                    "title": "static func train(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLBoostedTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-9sfj7",
                    "title": "static func train(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLBoostedTreeClassifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlboostedtreeclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-8w2dm",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/init(validation:maxdepth:maxiterations:minlossreduction:minchildweight:randomseed:stepsize:earlystoppingrounds:rowsubsample:columnsubsample:)",
                        "title": "init(validation: MLBoostedTreeClassifier.ModelParameters.ValidationData, maxDepth: Int, maxIterations: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int, stepSize: Double, earlyStoppingRounds: Int?, rowSubsample: Double, columnSubsample: Double)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/init(validationdata:maxdepth:maxiterations:minlossreduction:minchildweight:randomseed:stepsize:earlystoppingrounds:rowsubsample:columnsubsample:)",
                        "title": "init(validationData: MLDataTable?, maxDepth: Int, maxIterations: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int, stepSize: Double, earlyStoppingRounds: Int?, rowSubsample: Double, columnSubsample: Double)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLBoostedTreeClassifier.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/maxdepth",
                        "title": "var maxDepth: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/maxiterations",
                        "title": "var maxIterations: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/minlossreduction",
                        "title": "var minLossReduction: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/minchildweight",
                        "title": "var minChildWeight: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/randomseed",
                        "title": "var randomSeed: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/stepsize",
                        "title": "var stepSize: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/earlystoppingrounds",
                        "title": "var earlyStoppingRounds: Int?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/rowsubsample",
                        "title": "var rowSubsample: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/columnsubsample",
                        "title": "var columnSubsample: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/validation",
                        "title": "var validation: MLBoostedTreeClassifier.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.struct",
                    "title": "MLBoostedTreeClassifier.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/modelparameters-swift.property",
                    "title": "let modelParameters: MLBoostedTreeClassifier.ModelParameters",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing model accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/trainingmetrics",
                    "title": "var trainingMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/validationmetrics",
                    "title": "var validationMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Evaluating the boosted tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/evaluation(on:)-4wlw0",
                    "title": "func evaluation(on: DataFrame) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlboostedtreeclassifier/evaluation(on:)-4uhu9",
                    "title": "func evaluation(on: MLDataTable) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a boosted tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/predictions(from:)-6i6d5",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlboostedtreeclassifier/predictions(from:)-17rgd",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a boosted tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a boosted tree classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlboostedtreeclassifier/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlboostedtreeclassifier/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeclassifier/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlboostedtreeclassifier/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlboostedtreeclassifier",
                "title": "MLBoostedTreeClassifier",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and training a logistic regression classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/init(checkpoint:)",
                    "title": "init(checkpoint: MLCheckpoint) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-3ilkk",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLLogisticRegressionClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mllogisticregressionclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-7xy2g",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLLogisticRegressionClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-1jn01",
                    "title": "static func train(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLLogisticRegressionClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLLogisticRegressionClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-8vpa1",
                    "title": "static func train(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLLogisticRegressionClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLLogisticRegressionClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-4anyg",
                    "title": "static func makeTrainingSession(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLLogisticRegressionClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLLogisticRegressionClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-7l7f0",
                    "title": "static func makeTrainingSession(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLLogisticRegressionClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLLogisticRegressionClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/resume(_:)",
                    "title": "static func resume(MLTrainingSession<MLLogisticRegressionClassifier>) throws -> MLJob<MLLogisticRegressionClassifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/restoretrainingsession(sessionparameters:)",
                    "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLLogisticRegressionClassifier>",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/init(validation:maxiterations:l1penalty:l2penalty:stepsize:convergencethreshold:featurerescaling:)",
                        "title": "init(validation: MLLogisticRegressionClassifier.ModelParameters.ValidationData, maxIterations: Int, l1Penalty: Double, l2Penalty: Double, stepSize: Double, convergenceThreshold: Double, featureRescaling: Bool)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/init(validationdata:maxiterations:l1penalty:l2penalty:stepsize:convergencethreshold:featurerescaling:)",
                        "title": "init(validationData: MLDataTable?, maxIterations: Int, l1Penalty: Double, l2Penalty: Double, stepSize: Double, convergenceThreshold: Double, featureRescaling: Bool)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLLogisticRegressionClassifier.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/convergencethreshold",
                        "title": "var convergenceThreshold: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/featurerescaling",
                        "title": "var featureRescaling: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/l1penalty",
                        "title": "var l1Penalty: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/l2penalty",
                        "title": "var l2Penalty: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/maxiterations",
                        "title": "var maxIterations: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/stepsize",
                        "title": "var stepSize: Double",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/validation",
                        "title": "var validation: MLLogisticRegressionClassifier.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.struct",
                    "title": "MLLogisticRegressionClassifier.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/modelparameters-swift.property",
                    "title": "let modelParameters: MLLogisticRegressionClassifier.ModelParameters",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing model accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/trainingmetrics",
                    "title": "var trainingMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/validationmetrics",
                    "title": "var validationMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Evaluating a logistic regression classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/evaluation(on:)-55vpv",
                    "title": "func evaluation(on: DataFrame) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mllogisticregressionclassifier/evaluation(on:)-8v2xt",
                    "title": "func evaluation(on: MLDataTable) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a logistic regression classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/predictions(from:)-3hmro",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mllogisticregressionclassifier/predictions(from:)-80abo",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a logistic regression classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a logistic regression classifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllogisticregressionclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mllogisticregressionclassifier/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mllogisticregressionclassifier/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllogisticregressionclassifier/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mllogisticregressionclassifier/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mllogisticregressionclassifier",
                "title": "MLLogisticRegressionClassifier",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and training a support vector classifier",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-7t1yb",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLSupportVectorClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/init(trainingdata:targetcolumn:featurecolumns:parameters:)-9ob53",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLSupportVectorClassifier.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/init(validation:maxiterations:penalty:convergencethreshold:featurerescaling:)",
                        "title": "init(validation: MLSupportVectorClassifier.ModelParameters.ValidationData, maxIterations: Int, penalty: Double, convergenceThreshold: Double, featureRescaling: Bool)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/init(validationdata:maxiterations:penalty:convergencethreshold:featurerescaling:)",
                        "title": "init(validationData: MLDataTable?, maxIterations: Int, penalty: Double, convergenceThreshold: Double, featureRescaling: Bool)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLSupportVectorClassifier.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/convergencethreshold",
                        "title": "var convergenceThreshold: Double",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/featurerescaling",
                        "title": "var featureRescaling: Bool",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/maxiterations",
                        "title": "var maxIterations: Int",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/penalty",
                        "title": "var penalty: Double",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/validation",
                        "title": "var validation: MLSupportVectorClassifier.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.struct",
                    "title": "MLSupportVectorClassifier.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/modelparameters-swift.property",
                    "title": "let modelParameters: MLSupportVectorClassifier.ModelParameters",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing model accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/trainingmetrics",
                    "title": "var trainingMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/validationmetrics",
                    "title": "var validationMetrics: MLClassifierMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Evaluating a support vector classifier",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/evaluation(on:)-3fvw",
                    "title": "func evaluation(on: DataFrame) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/evaluation(on:)-815go",
                    "title": "func evaluation(on: MLDataTable) -> MLClassifierMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a support vector classifier",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/predictions(from:)-p5qk",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/predictions(from:)-8pjz",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a support vector classifier",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a support vector classifier",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlsupportvectorclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlsupportvectorclassifier/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlsupportvectorclassifier/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlsupportvectorclassifier/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlsupportvectorclassifier/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/createml/mlsupportvectorclassifier",
                "title": "MLSupportVectorClassifier",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlclassifier/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlclassifier/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlclassifier/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlclassifier/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlclassifier/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlclassifier/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlclassifier",
            "title": "MLClassifier",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Creating and training a regressor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressor/init(trainingdata:targetcolumn:featurecolumns:)-5mhd2",
                "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlregressor/init(trainingdata:targetcolumn:featurecolumns:)-56rvo",
                "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mlregressor/targetcolumn",
                "title": "var targetColumn: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressor/featurecolumns",
                "title": "var featureColumns: [String]",
                "type": "property"
              },
              {
                "title": "Assessing model accuracy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressor/trainingmetrics",
                "title": "var trainingMetrics: MLRegressorMetrics",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressor/validationmetrics",
                "title": "var validationMetrics: MLRegressorMetrics",
                "type": "property"
              },
              {
                "title": "Evaluating a regressor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressor/evaluation(on:)-32nc7",
                "title": "func evaluation(on: DataFrame) -> MLRegressorMetrics",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlregressor/evaluation(on:)-7pirm",
                "title": "func evaluation(on: MLDataTable) -> MLRegressorMetrics",
                "type": "method"
              },
              {
                "title": "Testing a regressor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressor/predictions(from:)-6e6ti",
                "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlregressor/predictions(from:)-3gkt1",
                "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                "type": "method"
              },
              {
                "title": "Saving a regressor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressor/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlregressor/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Describing a regressor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressor/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressor/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressor/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressor/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Regressor cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressor/linear(_:)",
                "title": "case linear(MLLinearRegressor)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlregressor/decisiontree(_:)",
                "title": "case decisionTree(MLDecisionTreeRegressor)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlregressor/boostedtree(_:)",
                "title": "case boostedTree(MLBoostedTreeRegressor)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlregressor/randomforest(_:)",
                "title": "case randomForest(MLRandomForestRegressor)",
                "type": "case"
              },
              {
                "title": "Supporting regressor types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating and Training a Linear Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/init(checkpoint:)",
                    "title": "init(checkpoint: MLCheckpoint) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/init(trainingdata:targetcolumn:featurecolumns:parameters:)-5xpue",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLLinearRegressor.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-3cosv",
                    "title": "static func makeTrainingSession(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLLinearRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLLinearRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-7xqak",
                    "title": "static func makeTrainingSession(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLLinearRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLLinearRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/restoretrainingsession(sessionparameters:)",
                    "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLLinearRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/resume(_:)",
                    "title": "static func resume(MLTrainingSession<MLLinearRegressor>) throws -> MLJob<MLLinearRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-1v1q5",
                    "title": "static func train(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLLinearRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLLinearRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-7j70n",
                    "title": "static func train(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLLinearRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLLinearRegressor>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mllinearregressor/init(trainingdata:targetcolumn:featurecolumns:parameters:)-5lmry",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLLinearRegressor.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/init(validation:maxiterations:l1penalty:l2penalty:stepsize:convergencethreshold:featurerescaling:)",
                        "title": "init(validation: MLLinearRegressor.ModelParameters.ValidationData, maxIterations: Int, l1Penalty: Double, l2Penalty: Double, stepSize: Double, convergenceThreshold: Double, featureRescaling: Bool)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/init(validationdata:maxiterations:l1penalty:l2penalty:stepsize:convergencethreshold:featurerescaling:)",
                        "title": "init(validationData: MLDataTable?, maxIterations: Int, l1Penalty: Double, l2Penalty: Double, stepSize: Double, convergenceThreshold: Double, featureRescaling: Bool)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLLinearRegressor.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/maxiterations",
                        "title": "var maxIterations: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/l1penalty",
                        "title": "var l1Penalty: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/l2penalty",
                        "title": "var l2Penalty: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/stepsize",
                        "title": "var stepSize: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/convergencethreshold",
                        "title": "var convergenceThreshold: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/featurerescaling",
                        "title": "var featureRescaling: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/validation",
                        "title": "var validation: MLLinearRegressor.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mllinearregressor/modelparameters-swift.struct",
                    "title": "MLLinearRegressor.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/modelparameters-swift.property",
                    "title": "let modelParameters: MLLinearRegressor.ModelParameters",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing Model Accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/trainingmetrics",
                    "title": "var trainingMetrics: MLRegressorMetrics",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/validationmetrics",
                    "title": "var validationMetrics: MLRegressorMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Evaluating a Linear Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/evaluation(on:)-96oll",
                    "title": "func evaluation(on: DataFrame) -> MLRegressorMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mllinearregressor/evaluation(on:)-6pyq9",
                    "title": "func evaluation(on: MLDataTable) -> MLRegressorMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a Linear Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/predictions(from:)-7mob0",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mllinearregressor/predictions(from:)-2gc5w",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a Linear Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a Linear Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mllinearregressor/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mllinearregressor/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mllinearregressor/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mllinearregressor/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mllinearregressor/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mllinearregressor",
                "title": "MLLinearRegressor",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and training a decision tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/init(checkpoint:)",
                    "title": "init(checkpoint: MLCheckpoint) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/init(trainingdata:targetcolumn:featurecolumns:parameters:)-5ugec",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeRegressor.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-69up6",
                    "title": "static func makeTrainingSession(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLDecisionTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-9ginr",
                    "title": "static func makeTrainingSession(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLDecisionTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/restoretrainingsession(sessionparameters:)",
                    "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLDecisionTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/resume(_:)",
                    "title": "static func resume(MLTrainingSession<MLDecisionTreeRegressor>) throws -> MLJob<MLDecisionTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-5l3pj",
                    "title": "static func train(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLDecisionTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-6ldjt",
                    "title": "static func train(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLDecisionTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mldecisiontreeregressor/init(trainingdata:targetcolumn:featurecolumns:parameters:)-7cjvn",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLDecisionTreeRegressor.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/init(validation:maxdepth:minlossreduction:minchildweight:randomseed:)",
                        "title": "init(validation: MLDecisionTreeRegressor.ModelParameters.ValidationData, maxDepth: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/init(validationdata:maxdepth:minlossreduction:minchildweight:randomseed:)",
                        "title": "init(validationData: MLDataTable?, maxDepth: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLDecisionTreeRegressor.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/maxdepth",
                        "title": "var maxDepth: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/minchildweight",
                        "title": "var minChildWeight: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/minlossreduction",
                        "title": "var minLossReduction: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/randomseed",
                        "title": "var randomSeed: Int",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/validation",
                        "title": "var validation: MLDecisionTreeRegressor.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.struct",
                    "title": "MLDecisionTreeRegressor.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/modelparameters-swift.property",
                    "title": "let modelParameters: MLDecisionTreeRegressor.ModelParameters",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing model accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/trainingmetrics",
                    "title": "var trainingMetrics: MLRegressorMetrics",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/validationmetrics",
                    "title": "var validationMetrics: MLRegressorMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Evaluating a decision tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/evaluation(on:)-8uw90",
                    "title": "func evaluation(on: DataFrame) -> MLRegressorMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mldecisiontreeregressor/evaluation(on:)-7zk9x",
                    "title": "func evaluation(on: MLDataTable) -> MLRegressorMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a decision tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/predictions(from:)-8kcfl",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mldecisiontreeregressor/predictions(from:)-20026",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a decision tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a decision tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldecisiontreeregressor/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldecisiontreeregressor/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldecisiontreeregressor/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldecisiontreeregressor/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldecisiontreeregressor/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldecisiontreeregressor",
                "title": "MLDecisionTreeRegressor",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and Training a Random Forest Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/init(checkpoint:)",
                    "title": "init(checkpoint: MLCheckpoint) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/init(trainingdata:targetcolumn:featurecolumns:parameters:)-7ep5e",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestRegressor.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-3e9dp",
                    "title": "static func makeTrainingSession(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLRandomForestRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-8ds4f",
                    "title": "static func makeTrainingSession(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLRandomForestRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/restoretrainingsession(sessionparameters:)",
                    "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLRandomForestRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/resume(_:)",
                    "title": "static func resume(MLTrainingSession<MLRandomForestRegressor>) throws -> MLJob<MLRandomForestRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-4mev0",
                    "title": "static func train(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLRandomForestRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-7axdk",
                    "title": "static func train(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLRandomForestRegressor>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrandomforestregressor/init(trainingdata:targetcolumn:featurecolumns:parameters:)-9p7os",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLRandomForestRegressor.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/init(validation:maxdepth:maxiterations:minlossreduction:minchildweight:randomseed:rowsubsample:columnsubsample:)",
                        "title": "init(validation: MLRandomForestRegressor.ModelParameters.ValidationData, maxDepth: Int, maxIterations: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int, rowSubsample: Double, columnSubsample: Double)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/init(validationdata:maxdepth:maxiterations:minlossreduction:minchildweight:randomseed:rowsubsample:columnsubsample:)",
                        "title": "init(validationData: MLDataTable?, maxDepth: Int, maxIterations: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int, rowSubsample: Double, columnSubsample: Double)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLRandomForestRegressor.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/columnsubsample",
                        "title": "var columnSubsample: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/maxdepth",
                        "title": "var maxDepth: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/maxiterations",
                        "title": "var maxIterations: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/minchildweight",
                        "title": "var minChildWeight: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/minlossreduction",
                        "title": "var minLossReduction: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/randomseed",
                        "title": "var randomSeed: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/rowsubsample",
                        "title": "var rowSubsample: Double",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/validation",
                        "title": "var validation: MLRandomForestRegressor.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.struct",
                    "title": "MLRandomForestRegressor.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/modelparameters-swift.property",
                    "title": "let modelParameters: MLRandomForestRegressor.ModelParameters",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing Model Accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/trainingmetrics",
                    "title": "var trainingMetrics: MLRegressorMetrics",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/validationmetrics",
                    "title": "var validationMetrics: MLRegressorMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Evaluating a Random Forest Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/evaluation(on:)-237pc",
                    "title": "func evaluation(on: DataFrame) -> MLRegressorMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrandomforestregressor/evaluation(on:)-99j4w",
                    "title": "func evaluation(on: MLDataTable) -> MLRegressorMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a Random Forest Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/predictions(from:)-8s2mn",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrandomforestregressor/predictions(from:)-59u6",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a Random Forest Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a Random Forest Regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrandomforestregressor/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrandomforestregressor/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrandomforestregressor/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrandomforestregressor/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrandomforestregressor/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlrandomforestregressor",
                "title": "MLRandomForestRegressor",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and training a boosted tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/init(checkpoint:)",
                    "title": "init(checkpoint: MLCheckpoint) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/init(trainingdata:targetcolumn:featurecolumns:parameters:)-6z8wm",
                    "title": "init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeRegressor.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-1x5hc",
                    "title": "static func makeTrainingSession(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLBoostedTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/maketrainingsession(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-4d0fx",
                    "title": "static func makeTrainingSession(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLBoostedTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/restoretrainingsession(sessionparameters:)",
                    "title": "static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLBoostedTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/resume(_:)",
                    "title": "static func resume(MLTrainingSession<MLBoostedTreeRegressor>) throws -> MLJob<MLBoostedTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-1razs",
                    "title": "static func train(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLBoostedTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/train(trainingdata:targetcolumn:featurecolumns:parameters:sessionparameters:)-4okyp",
                    "title": "static func train(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeRegressor.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLBoostedTreeRegressor>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlboostedtreeregressor/init(trainingdata:targetcolumn:featurecolumns:parameters:)-hfxs",
                    "title": "init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?, parameters: MLBoostedTreeRegressor.ModelParameters) throws",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/init(validation:maxdepth:maxiterations:minlossreduction:minchildweight:randomseed:stepsize:earlystoppingrounds:rowsubsample:columnsubsample:)",
                        "title": "init(validation: MLBoostedTreeRegressor.ModelParameters.ValidationData, maxDepth: Int, maxIterations: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int, stepSize: Double, earlyStoppingRounds: Int?, rowSubsample: Double, columnSubsample: Double)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/init(validationdata:maxdepth:maxiterations:minlossreduction:minchildweight:randomseed:stepsize:earlystoppingrounds:rowsubsample:columnsubsample:)",
                        "title": "init(validationData: MLDataTable?, maxDepth: Int, maxIterations: Int, minLossReduction: Double, minChildWeight: Double, randomSeed: Int, stepSize: Double, earlyStoppingRounds: Int?, rowSubsample: Double, columnSubsample: Double)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying validation data",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/validationdata-swift.enum/split(strategy:)",
                            "title": "case split(strategy: MLSplitStrategy)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/validationdata-swift.enum/table(_:)",
                            "title": "case table(MLDataTable)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/validationdata-swift.enum/dataframe(_:)",
                            "title": "case dataFrame(DataFrame)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/validationdata-swift.enum/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/validationdata-swift.enum",
                        "title": "MLBoostedTreeRegressor.ModelParameters.ValidationData",
                        "type": "enum"
                      },
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/columnsubsample",
                        "title": "var columnSubsample: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/earlystoppingrounds",
                        "title": "var earlyStoppingRounds: Int?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/maxdepth",
                        "title": "var maxDepth: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/maxiterations",
                        "title": "var maxIterations: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/minchildweight",
                        "title": "var minChildWeight: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/minlossreduction",
                        "title": "var minLossReduction: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/randomseed",
                        "title": "var randomSeed: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/rowsubsample",
                        "title": "var rowSubsample: Double",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/stepsize",
                        "title": "var stepSize: Double",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/validationdata-swift.property",
                        "title": "var validationData: MLDataTable?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/validation",
                        "title": "var validation: MLBoostedTreeRegressor.ModelParameters.ValidationData",
                        "type": "property"
                      },
                      {
                        "title": "Describing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.struct",
                    "title": "MLBoostedTreeRegressor.ModelParameters",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/modelparameters-swift.property",
                    "title": "let modelParameters: MLBoostedTreeRegressor.ModelParameters",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/targetcolumn",
                    "title": "var targetColumn: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/featurecolumns",
                    "title": "var featureColumns: [String]",
                    "type": "property"
                  },
                  {
                    "title": "Assessing model accuracy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/trainingmetrics",
                    "title": "var trainingMetrics: MLRegressorMetrics",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/validationmetrics",
                    "title": "var validationMetrics: MLRegressorMetrics",
                    "type": "property"
                  },
                  {
                    "title": "Evaluating a boosted tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/evaluation(on:)-88akn",
                    "title": "func evaluation(on: DataFrame) -> MLRegressorMetrics",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlboostedtreeregressor/evaluation(on:)-2tsxy",
                    "title": "func evaluation(on: MLDataTable) -> MLRegressorMetrics",
                    "type": "method"
                  },
                  {
                    "title": "Testing a boosted tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/predictions(from:)-5a8oi",
                    "title": "func predictions(from: DataFrame) throws -> AnyColumn",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlboostedtreeregressor/predictions(from:)-3daff",
                    "title": "func predictions(from: MLDataTable) throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Saving a boosted tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/write(to:metadata:)",
                    "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/write(tofile:metadata:)",
                    "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                    "type": "method"
                  },
                  {
                    "title": "Describing a boosted tree regressor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/model",
                    "title": "var model: MLModel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlboostedtreeregressor/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlboostedtreeregressor/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlboostedtreeregressor/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlboostedtreeregressor/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlboostedtreeregressor/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlboostedtreeregressor",
                "title": "MLBoostedTreeRegressor",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlregressor/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlregressor/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlregressor/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlregressor/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlregressor/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlregressor/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlregressor",
            "title": "MLRegressor",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Creating and training a recommender",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlrecommender/init(trainingdata:usercolumn:itemcolumn:ratingcolumn:parameters:)-1mecd",
                "title": "init(trainingData: DataFrame, userColumn: String, itemColumn: String, ratingColumn: String?, parameters: MLRecommender.ModelParameters) throws",
                "type": "init"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlrecommender/init(trainingdata:usercolumn:itemcolumn:ratingcolumn:parameters:)-20dcf",
                "title": "init(trainingData: MLDataTable, userColumn: String, itemColumn: String, ratingColumn: String?, parameters: MLRecommender.ModelParameters) throws",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Creating parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct/init(algorithm:threshold:maxcount:nearestitemsdataframe:maxsimilarityiterations:)",
                    "title": "init(algorithm: MLRecommender.ModelAlgorithmType, threshold: Double, maxCount: Int, nearestItemsDataFrame: DataFrame?, maxSimilarityIterations: Int)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct/init(algorithm:threshold:maxcount:nearestitems:maxsimilarityiterations:)",
                    "title": "init(algorithm: MLRecommender.ModelAlgorithmType, threshold: Double, maxCount: Int, nearestItems: MLDataTable?, maxSimilarityIterations: Int)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Recommender algorithms",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/itemsimilarity(_:)",
                        "title": "case itemSimilarity(MLRecommender.SimilarityType)",
                        "type": "case"
                      },
                      {
                        "children": [
                          {
                            "title": "Similarity types",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/jaccard",
                            "title": "case jaccard",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/cosine",
                            "title": "case cosine",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/pearson",
                            "title": "case pearson",
                            "type": "case"
                          },
                          {
                            "title": "Comparing similarity types",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/==(_:_:)",
                            "title": "static func == (MLRecommender.SimilarityType, MLRecommender.SimilarityType) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Getting the hash value",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Similarity type descriptions",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/description",
                            "title": "var description: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlrecommender/similaritytype/debugdescription",
                                "title": "var debugDescription: String",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mlrecommender/similaritytype/customdebugstringconvertible-implementations",
                            "title": "CustomDebugStringConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlrecommender/similaritytype/playgrounddescription",
                                "title": "var playgroundDescription: Any",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mlrecommender/similaritytype/customplaygrounddisplayconvertible-implementations",
                            "title": "CustomPlaygroundDisplayConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlrecommender/similaritytype/description",
                                "title": "var description: String",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mlrecommender/similaritytype/customstringconvertible-implementations",
                            "title": "CustomStringConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mlrecommender/similaritytype/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/createml/mlrecommender/similaritytype/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/createml/mlrecommender/similaritytype",
                        "title": "MLRecommender.SimilarityType",
                        "type": "enum"
                      },
                      {
                        "title": "Algorithm descriptions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/modelalgorithmtype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/modelalgorithmtype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/modelalgorithmtype/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/modelalgorithmtype",
                    "title": "MLRecommender.ModelAlgorithmType",
                    "type": "enum"
                  },
                  {
                    "title": "Configuring the parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct/algorithm",
                    "title": "var algorithm: MLRecommender.ModelAlgorithmType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct/maxcount",
                    "title": "var maxCount: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct/maxsimilarityiterations",
                    "title": "var maxSimilarityIterations: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct/threshold",
                    "title": "var threshold: Double",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct/nearestitems",
                    "title": "var nearestItems: MLDataTable?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct/nearestitemsdataframe",
                    "title": "var nearestItemsDataFrame: DataFrame?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlrecommender/modelparameters-swift.struct",
                "title": "MLRecommender.ModelParameters",
                "type": "struct"
              },
              {
                "path": "/documentation/createml/mlrecommender/modelparameters-swift.property",
                "title": "let modelParameters: MLRecommender.ModelParameters",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlrecommender/useridentifiercolumn",
                "title": "var userIdentifierColumn: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlrecommender/itemidentifiercolumn",
                "title": "var itemIdentifierColumn: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlrecommender/ratingcolumn",
                "title": "var ratingColumn: String?",
                "type": "property"
              },
              {
                "title": "Evaluating a recommender",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlrecommender/evaluation(on:usercolumn:itemcolumn:ratingcolumn:cutoffs:excludingobserved:)-50o7t",
                "title": "func evaluation(on: MLDataTable, userColumn: String, itemColumn: String, ratingColumn: String?, cutoffs: [Int], excludingObserved: Bool) -> MLRecommenderMetrics",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlrecommender/evaluation(on:usercolumn:itemcolumn:ratingcolumn:cutoffs:excludingobserved:)-641uh",
                "title": "func evaluation(on: DataFrame, userColumn: String, itemColumn: String, ratingColumn: String?, cutoffs: [Int], excludingObserved: Bool) -> MLRecommenderMetrics",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Assessing the model",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommendermetrics/excludingobserved",
                    "title": "let excludingObserved: Bool",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrecommendermetrics/precisionrecall",
                    "title": "var precisionRecall: MLDataTable",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommendermetrics/precisionrecalldataframe",
                    "title": "var precisionRecallDataFrame: DataFrame",
                    "type": "property"
                  },
                  {
                    "title": "Handling errors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommendermetrics/isvalid",
                    "title": "var isValid: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommendermetrics/error",
                    "title": "let error: (any Error)?",
                    "type": "property"
                  },
                  {
                    "title": "Creating metrics",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlrecommendermetrics/init(precisionrecall:excludingobserved:)",
                    "title": "init(precisionRecall: MLDataTable, excludingObserved: Bool)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/createml/mlrecommendermetrics",
                "title": "MLRecommenderMetrics",
                "type": "struct"
              },
              {
                "title": "Testing a recommender",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlrecommender/recommendations(fromusers:maxcount:restrictingtoitems:excluding:excludingobserved:)-416wd",
                "title": "func recommendations<T>(fromUsers: MLDataColumn<T>, maxCount: Int, restrictingToItems: MLDataColumn<T>?, excluding: MLDataTable?, excludingObserved: Bool) throws -> MLDataTable",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlrecommender/recommendations(fromusers:maxcount:restrictingtoitems:excluding:excludingobserved:)-7an46",
                "title": "func recommendations(fromUsers: [any MLIdentifier], maxCount: Int, restrictingToItems: [any MLIdentifier]?, excluding: MLDataTable?, excludingObserved: Bool) throws -> MLDataTable",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting an identifier",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mlidentifier/identifiervalue",
                    "title": "var identifierValue: MLDataValue",
                    "type": "property"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/createml/mlidentifier",
                "title": "MLIdentifier",
                "type": "protocol"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlrecommender/getsimilaritems(fromitems:maxcount:)-9scon",
                "title": "func getSimilarItems<T>(fromItems: MLDataColumn<T>, maxCount: Int) throws -> MLDataTable",
                "type": "method"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlrecommender/getsimilaritems(fromitems:maxcount:)-kq37",
                "title": "func getSimilarItems(fromItems: [any MLIdentifier], maxCount: Int) throws -> MLDataTable",
                "type": "method"
              },
              {
                "title": "Saving a recommender",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlrecommender/write(to:metadata:)",
                "title": "func write(to: URL, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlrecommender/write(tofile:metadata:)",
                "title": "func write(toFile: String, metadata: MLModelMetadata?) throws",
                "type": "method"
              },
              {
                "title": "Describing a recommender",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlrecommender/model",
                "title": "var model: MLModel",
                "type": "property"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Recommender algorithms",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelalgorithmtype/itemsimilarity(_:)",
                    "title": "case itemSimilarity(MLRecommender.SimilarityType)",
                    "type": "case"
                  },
                  {
                    "children": [
                      {
                        "title": "Similarity types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/jaccard",
                        "title": "case jaccard",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/cosine",
                        "title": "case cosine",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/pearson",
                        "title": "case pearson",
                        "type": "case"
                      },
                      {
                        "title": "Comparing similarity types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/==(_:_:)",
                        "title": "static func == (MLRecommender.SimilarityType, MLRecommender.SimilarityType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Getting the hash value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Similarity type descriptions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrecommender/similaritytype/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrecommender/similaritytype/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mlrecommender/similaritytype/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlrecommender/similaritytype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlrecommender/similaritytype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/similaritytype",
                    "title": "MLRecommender.SimilarityType",
                    "type": "enum"
                  },
                  {
                    "title": "Algorithm descriptions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelalgorithmtype/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelalgorithmtype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/modelalgorithmtype/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/modelalgorithmtype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/modelalgorithmtype/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/modelalgorithmtype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/modelalgorithmtype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlrecommender/modelalgorithmtype",
                "title": "MLRecommender.ModelAlgorithmType",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Similarity types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/jaccard",
                    "title": "case jaccard",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/cosine",
                    "title": "case cosine",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/pearson",
                    "title": "case pearson",
                    "type": "case"
                  },
                  {
                    "title": "Comparing similarity types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/==(_:_:)",
                    "title": "static func == (MLRecommender.SimilarityType, MLRecommender.SimilarityType) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Getting the hash value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Similarity type descriptions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlrecommender/similaritytype/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/similaritytype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/similaritytype/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/similaritytype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlrecommender/similaritytype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mlrecommender/similaritytype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlrecommender/similaritytype",
                "title": "MLRecommender.SimilarityType",
                "type": "enum"
              }
            ],
            "path": "/documentation/createml/mlrecommender",
            "title": "MLRecommender",
            "type": "struct"
          },
          {
            "title": "Tabular Data",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a data table",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/creating_a_model_from_tabular_data",
                "title": "Creating a Model from Tabular Data",
                "type": "sampleCode"
              },
              {
                "children": [
                  {
                    "title": "Parsing options",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the CSV parsing options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/init(containsheader:delimiter:comment:escape:doublequote:quote:skipinitialspaces:missingvalues:lineterminator:selectcolumns:maxrows:skiprows:)",
                        "title": "init(containsHeader: Bool, delimiter: String, comment: String, escape: String, doubleQuote: Bool, quote: String, skipInitialSpaces: Bool, missingValues: [String], lineTerminator: String, selectColumns: [String]?, maxRows: Int?, skipRows: Int)",
                        "type": "init"
                      },
                      {
                        "title": "Specifying the CSV file format",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/containsheader",
                        "title": "var containsHeader: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/delimiter",
                        "title": "var delimiter: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/lineterminator",
                        "title": "var lineTerminator: String",
                        "type": "property"
                      },
                      {
                        "title": "Handling special characters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/escape",
                        "title": "var escape: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/quote",
                        "title": "var quote: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/doublequote",
                        "title": "var doubleQuote: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Ignoring CSV components",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/skiprows",
                        "title": "var skipRows: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/skipinitialspaces",
                        "title": "var skipInitialSpaces: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/comment",
                        "title": "var comment: String",
                        "type": "property"
                      },
                      {
                        "title": "Limiting rows and columns",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/maxrows",
                        "title": "var maxRows: Int?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/selectcolumns",
                        "title": "var selectColumns: [String]?",
                        "type": "property"
                      },
                      {
                        "title": "Representing missing values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/parsingoptions/missingvalues",
                        "title": "var missingValues: [String]",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/parsingoptions",
                    "title": "MLDataTable.ParsingOptions",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/createml/mldatatable/init(contentsof:options:)",
                "title": "init(contentsOf: URL, options: MLDataTable.ParsingOptions) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mldatatable/init(dictionary:)",
                "title": "init(dictionary: [String : any MLDataValueConvertible]) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mldatatable/init(namedcolumns:)",
                "title": "init(namedColumns: [String : MLUntypedColumn]) throws",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mldatatable/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Getting the size of a data table",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/size",
                "title": "var size: (rows: Int, columns: Int)",
                "type": "property"
              },
              {
                "title": "Transforming rows to generate a data column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/map(_:)-92wrj",
                "title": "func map<T>((MLDataTable.Row) -> T) -> MLDataColumn<T>",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mldatatable/map(_:)-3yamp",
                "title": "func map<T>((MLDataTable.Row) -> T?) -> MLDataColumn<T>",
                "type": "method"
              },
              {
                "title": "Adding columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/addcolumn(_:named:)-kkbw",
                "title": "func addColumn<Element>(MLDataColumn<Element>, named: String)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a data column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(repeating:count:)-5rxbo",
                    "title": "init(repeating: Element, count: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(repeating:count:)-4ljwl",
                    "title": "init(repeating: MLDataValue, count: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(_:)",
                    "title": "init<S>(S)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Creating a data column by converting another column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/map(to:)",
                    "title": "func map<T>(to: T.Type) -> MLDataColumn<T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(column:)-5rg9u",
                    "title": "init<T>(column: MLDataColumn<T>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(column:)-2rxtu",
                    "title": "init<T>(column: MLDataColumn<T>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(column:)-86ge9",
                    "title": "init<T>(column: MLDataColumn<T>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(column:)-23pmx",
                    "title": "init<T>(column: MLDataColumn<T>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(column:)-ztkv",
                    "title": "init<T>(column: MLDataColumn<T>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(column:)-8uzuq",
                    "title": "init<T>(column: MLDataColumn<T>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(column:)-855l9",
                    "title": "init<T>(column: MLDataColumn<T>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/init(column:)-s8g5",
                    "title": "init<T>(column: MLDataColumn<T>)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the number of elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Getting an element",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/subscript(_:)-reid",
                    "title": "subscript(Int) -> Element",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/element(at:)",
                    "title": "func element(at: Int) -> Element?",
                    "type": "method"
                  },
                  {
                    "title": "Appending to a data column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/append(contentsof:)",
                    "title": "func append(contentsOf: MLDataColumn<Element>)",
                    "type": "method"
                  },
                  {
                    "title": "Duplicating a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/copy()",
                    "title": "func copy() -> MLDataColumn<Element>",
                    "type": "method"
                  },
                  {
                    "title": "Sorting elements to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/sort(byincreasingorder:)",
                    "title": "func sort(byIncreasingOrder: Bool) -> MLDataColumn<Element>",
                    "type": "method"
                  },
                  {
                    "title": "Transforming elements to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/map(_:)-7kto3",
                    "title": "func map<T>((Element) -> T) -> MLDataColumn<T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/map(_:)-72ypl",
                    "title": "func map<T>((Element) -> T?) -> MLDataColumn<T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/mapmissing(_:)",
                    "title": "func mapMissing<T>((Element?) -> T?) -> MLDataColumn<T>",
                    "type": "method"
                  },
                  {
                    "title": "Masking elements to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/subscript(_:)-78irf",
                    "title": "subscript(MLDataColumn<Bool>) -> MLDataColumn<Element>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/subscript(_:)-1n3x",
                    "title": "subscript(MLUntypedColumn) -> MLDataColumn<Element>",
                    "type": "subscript"
                  },
                  {
                    "title": "Discarding elements to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/dropmissing()",
                    "title": "func dropMissing() -> MLDataColumn<Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/dropduplicates()",
                    "title": "func dropDuplicates() -> MLDataColumn<Element>",
                    "type": "method"
                  },
                  {
                    "title": "Selecting elements to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/subscript(_:)-pp34",
                    "title": "subscript(Range<Int>) -> MLDataColumn<Element>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/subscript(_:)-5mczv",
                    "title": "subscript<R>(R) -> MLDataColumn<Element>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/prefix(_:)",
                    "title": "func prefix(Int) -> MLDataColumn<Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/suffix(_:)",
                    "title": "func suffix(Int) -> MLDataColumn<Element>",
                    "type": "method"
                  },
                  {
                    "title": "Filling in missing elements to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/fillmissing(with:)",
                    "title": "func fillMissing(with: Element) -> MLDataColumn<Element>",
                    "type": "method"
                  },
                  {
                    "title": "Evaluating elements to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/materialize()",
                    "title": "func materialize() throws -> MLDataColumn<Element>",
                    "type": "method"
                  },
                  {
                    "title": "Combining columns to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/+(_:_:)-24g38",
                    "title": "static func + (MLDataColumn<Int>, MLDataColumn<Int>) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/+(_:_:)-q5bb",
                    "title": "static func + (MLDataColumn<Double>, MLDataColumn<Double>) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/-(_:_:)-11hbf",
                    "title": "static func - (MLDataColumn<Int>, MLDataColumn<Int>) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/-(_:_:)-3mwsr",
                    "title": "static func - (MLDataColumn<Double>, MLDataColumn<Double>) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/*(_:_:)-40smy",
                    "title": "static func * (MLDataColumn<Int>, MLDataColumn<Int>) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/*(_:_:)-lchb",
                    "title": "static func * (MLDataColumn<Double>, MLDataColumn<Double>) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-5uxby",
                    "title": "static func / (MLDataColumn<Int>, MLDataColumn<Int>) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-69vgc",
                    "title": "static func / (MLDataColumn<Double>, MLDataColumn<Double>) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "title": "Combining a column with a value to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/+(_:_:)-7tghu",
                    "title": "static func + (MLDataColumn<Int>, Int) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/+(_:_:)-4se2l",
                    "title": "static func + (MLDataColumn<Double>, Double) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/-(_:_:)-2sddu",
                    "title": "static func - (MLDataColumn<Int>, Int) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/-(_:_:)-9smok",
                    "title": "static func - (MLDataColumn<Double>, Double) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/*(_:_:)-2zih0",
                    "title": "static func * (MLDataColumn<Int>, Int) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/*(_:_:)-4ilhj",
                    "title": "static func * (MLDataColumn<Double>, Double) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-3ea6t",
                    "title": "static func / (MLDataColumn<Int>, Int) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-8k8ao",
                    "title": "static func / (MLDataColumn<Double>, Double) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "title": "Combining a value with a column to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/+(_:_:)-2zcp",
                    "title": "static func + (Int, MLDataColumn<Int>) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/+(_:_:)-9r67n",
                    "title": "static func + (Double, MLDataColumn<Double>) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/-(_:_:)-507l8",
                    "title": "static func - (Int, MLDataColumn<Int>) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/-(_:_:)-2e7k4",
                    "title": "static func - (Double, MLDataColumn<Double>) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/*(_:_:)-48xte",
                    "title": "static func * (Int, MLDataColumn<Int>) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/*(_:_:)-9sysp",
                    "title": "static func * (Double, MLDataColumn<Double>) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-9ew9w",
                    "title": "static func / (Int, MLDataColumn<Int>) -> MLDataColumn<Int>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-121w8",
                    "title": "static func / (Double, MLDataColumn<Double>) -> MLDataColumn<Double>",
                    "type": "op"
                  },
                  {
                    "title": "Comparing columns to generate a column of booleans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/==(_:_:)-9e3tx",
                    "title": "static func == (MLDataColumn<Element>, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/!=(_:_:)-1vu4e",
                    "title": "static func != (MLDataColumn<Element>, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-3om6w",
                    "title": "static func < (MLDataColumn<Element>, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_=(_:_:)-6s5v1",
                    "title": "static func <= (MLDataColumn<Element>, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-2dym4",
                    "title": "static func > (MLDataColumn<Element>, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_=(_:_:)-4w60p",
                    "title": "static func >= (MLDataColumn<Element>, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "title": "Comparing a column with a value to generate a column of booleans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/==(_:_:)-7clbs",
                    "title": "static func == (MLDataColumn<Element>, Element) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/!=(_:_:)-4jp0y",
                    "title": "static func != (MLDataColumn<Element>, Element) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-4ujss",
                    "title": "static func < (MLDataColumn<Element>, Element) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_=(_:_:)-86x3a",
                    "title": "static func <= (MLDataColumn<Element>, Element) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-ebgq",
                    "title": "static func > (MLDataColumn<Element>, Element) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_=(_:_:)-1ctuz",
                    "title": "static func >= (MLDataColumn<Element>, Element) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "title": "Comparing a value with a column to generate a column of booleans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/==(_:_:)-6zz2o",
                    "title": "static func == (Element, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/!=(_:_:)-4477j",
                    "title": "static func != (Element, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-33lwa",
                    "title": "static func < (Element, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_=(_:_:)-3fx6w",
                    "title": "static func <= (Element, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_(_:_:)-6irjn",
                    "title": "static func > (Element, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/_=(_:_:)-8e3ur",
                    "title": "static func >= (Element, MLDataColumn<Element>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "title": "Combining columns of booleans to generate a column of booleans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/&&(_:_:)",
                    "title": "static func && (MLDataColumn<Bool>, MLDataColumn<Bool>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/__(_:_:)",
                    "title": "static func || (MLDataColumn<Bool>, MLDataColumn<Bool>) -> MLDataColumn<Bool>",
                    "type": "op"
                  },
                  {
                    "title": "Getting the min and max element values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/min()-6xxpx",
                    "title": "func min() -> Int?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/min()-947f9",
                    "title": "func min() -> Double?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/max()-5ty6r",
                    "title": "func max() -> Int?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/max()-9ryp",
                    "title": "func max() -> Double?",
                    "type": "method"
                  },
                  {
                    "title": "Getting sum, mean, and standard deviation values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/sum()-9t8h3",
                    "title": "func sum() -> Int?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/sum()-7370q",
                    "title": "func sum() -> Double?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/mean()-5q8pp",
                    "title": "func mean() -> Double?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/mean()-7pv86",
                    "title": "func mean() -> Double?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/std()-69udj",
                    "title": "func std() -> Double?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/std()-1f7cr",
                    "title": "func std() -> Double?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/stdev()-4nvbb",
                    "title": "func stdev() -> Double?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/stdev()-6fy3a",
                    "title": "func stdev() -> Double?",
                    "type": "method"
                  },
                  {
                    "title": "Visualizing a column",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mldatacolumn/show()",
                    "title": "func show() -> any MLStreamingVisualizable",
                    "type": "method"
                  },
                  {
                    "title": "Getting a description of a data column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "title": "Handling data column errors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/isvalid",
                    "title": "var isValid: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatacolumn/error",
                    "title": "var error: (any Error)?",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatacolumn/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatacolumn/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatacolumn/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatacolumn/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatacolumn/custommirror",
                        "title": "var customMirror: Mirror",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatacolumn/customreflectable-implementations",
                    "title": "CustomReflectable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatacolumn/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatacolumn/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldatacolumn",
                "title": "MLDataColumn",
                "type": "struct"
              },
              {
                "path": "/documentation/createml/mldatatable/addcolumn(_:named:)-9cb24",
                "title": "func addColumn(MLUntypedColumn, named: String)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(repeating:count:)-7ttf1",
                    "title": "init<T>(repeating: T, count: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(repeating:count:)-q8yk",
                    "title": "init(repeating: MLDataValue, count: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(_:)-33tcv",
                    "title": "init(Range<Int>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(_:)-9no5",
                    "title": "init(ClosedRange<Int>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(_:)-ag8f",
                    "title": "init<S>(S)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(_:)-5by2g",
                    "title": "init<S>(S)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Creating an untyped column by converting another column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(ints:)",
                    "title": "init(ints: MLUntypedColumn)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(doubles:)",
                    "title": "init(doubles: MLUntypedColumn)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(strings:)",
                    "title": "init(strings: MLUntypedColumn)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(sequences:)",
                    "title": "init(sequences: MLUntypedColumn)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(dictionaries:)",
                    "title": "init(dictionaries: MLUntypedColumn)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/init(multiarrays:)",
                    "title": "init(multiArrays: MLUntypedColumn)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the number of elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Getting an element",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/subscript(_:)-6j6rb",
                    "title": "subscript(Int) -> MLDataValue",
                    "type": "subscript"
                  },
                  {
                    "title": "Appending to an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/append(contentsof:)",
                    "title": "func append(contentsOf: MLUntypedColumn)",
                    "type": "method"
                  },
                  {
                    "title": "Duplicating a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/copy()",
                    "title": "func copy() -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Sorting elements to generate a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/sort(byincreasingorder:)",
                    "title": "func sort(byIncreasingOrder: Bool) -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Converting a column to generate a data column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/map(to:)",
                    "title": "func map<T>(to: T.Type) -> MLDataColumn<T>",
                    "type": "method"
                  },
                  {
                    "title": "Exposing the underlying type to generate a data column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/type",
                    "title": "var type: MLDataValue.ValueType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/ints",
                    "title": "var ints: MLDataColumn<Int>?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/doubles",
                    "title": "var doubles: MLDataColumn<Double>?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/strings",
                    "title": "var strings: MLDataColumn<String>?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/sequences",
                    "title": "var sequences: MLDataColumn<MLDataValue.SequenceType>?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/dictionaries",
                    "title": "var dictionaries: MLDataColumn<MLDataValue.DictionaryType>?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/multiarrays",
                    "title": "var multiArrays: MLDataColumn<MLDataValue.MultiArrayType>?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/column(type:)",
                    "title": "func column<T>(type: T.Type) -> MLDataColumn<T>?",
                    "type": "method"
                  },
                  {
                    "title": "Transforming elements to generate a data column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/map(_:)-139qy",
                    "title": "func map<T>((MLDataValue) -> T) -> MLDataColumn<T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/map(_:)-9v61j",
                    "title": "func map<T>((MLDataValue) -> T?) -> MLDataColumn<T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/mapmissing(_:)",
                    "title": "func mapMissing<T>((MLDataValue) -> T?) -> MLDataColumn<T>",
                    "type": "method"
                  },
                  {
                    "title": "Masking elements to generate an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/subscript(_:)-8ot43",
                    "title": "subscript(MLDataColumn<Bool>) -> MLUntypedColumn",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/subscript(_:)-9hr32",
                    "title": "subscript(MLUntypedColumn) -> MLUntypedColumn",
                    "type": "subscript"
                  },
                  {
                    "title": "Discarding elements to generate an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/dropmissing()",
                    "title": "func dropMissing() -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/dropduplicates()",
                    "title": "func dropDuplicates() -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Selecting elements to generate an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/subscript(_:)-33ua2",
                    "title": "subscript(Range<Int>) -> MLUntypedColumn",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/subscript(_:)-9dpy7",
                    "title": "subscript<R>(R) -> MLUntypedColumn",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/prefix(_:)",
                    "title": "func prefix(Int) -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/suffix(_:)",
                    "title": "func suffix(Int) -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Filling in missing elements to generate an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/fillmissing(with:)",
                    "title": "func fillMissing(with: MLDataValue) -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Evaluating elements to generate an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/materialize()",
                    "title": "func materialize() throws -> MLUntypedColumn",
                    "type": "method"
                  },
                  {
                    "title": "Combining columns to generate an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/+(_:_:)-bcc5",
                    "title": "static func + (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/-(_:_:)-3h4o4",
                    "title": "static func - (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/*(_:_:)-2p6nm",
                    "title": "static func * (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-45tpp",
                    "title": "static func / (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "title": "Combining a column with a value to generate an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/+(_:_:)-4vnbk",
                    "title": "static func + (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/-(_:_:)-4uigi",
                    "title": "static func - (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/*(_:_:)-6gnlx",
                    "title": "static func * (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-18srk",
                    "title": "static func / (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "title": "Combining a value with a column to generate an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/+(_:_:)-miqp",
                    "title": "static func + (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/-(_:_:)-9gm9i",
                    "title": "static func - (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/*(_:_:)-7svdc",
                    "title": "static func * (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-aw9o",
                    "title": "static func / (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "title": "Comparing columns to generate an untyped column of booleans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/==(_:_:)-3o7mo",
                    "title": "static func == (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/!=(_:_:)-86hu4",
                    "title": "static func != (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-9r2zq",
                    "title": "static func > (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-7zms0",
                    "title": "static func < (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_=(_:_:)-5xmwz",
                    "title": "static func <= (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_=(_:_:)-4u3ir",
                    "title": "static func >= (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "title": "Comparing a column with a value to generate an untyped column of booleans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/==(_:_:)-7xysh",
                    "title": "static func == (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/!=(_:_:)-7do9",
                    "title": "static func != (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-2mdrt",
                    "title": "static func > (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-8w60f",
                    "title": "static func < (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_=(_:_:)-1wkt3",
                    "title": "static func <= (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_=(_:_:)-2vu3g",
                    "title": "static func >= (MLUntypedColumn, any MLDataValueConvertible) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "title": "Comparing a value with a column to generate an untyped column of booleans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/==(_:_:)-6z88q",
                    "title": "static func == (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/!=(_:_:)-6k3p6",
                    "title": "static func != (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-52drj",
                    "title": "static func > (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_(_:_:)-6qou9",
                    "title": "static func < (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_=(_:_:)-t4bt",
                    "title": "static func <= (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/_=(_:_:)-6yycf",
                    "title": "static func >= (any MLDataValueConvertible, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "title": "Combining columns of booleans to generate an untyped column of booleans",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/&&(_:_:)",
                    "title": "static func && (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/__(_:_:)",
                    "title": "static func || (MLUntypedColumn, MLUntypedColumn) -> MLUntypedColumn",
                    "type": "op"
                  },
                  {
                    "title": "Visualizing a column",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/createml/mluntypedcolumn/show()",
                    "title": "func show() -> any MLStreamingVisualizable",
                    "type": "method"
                  },
                  {
                    "title": "Getting a description of an untyped column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/custommirror",
                    "title": "var customMirror: Mirror",
                    "type": "property"
                  },
                  {
                    "title": "Handling untyped column errors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/isvalid",
                    "title": "var isValid: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mluntypedcolumn/error",
                    "title": "var error: (any Error)?",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mluntypedcolumn/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mluntypedcolumn/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mluntypedcolumn/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mluntypedcolumn/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mluntypedcolumn/custommirror",
                        "title": "var customMirror: Mirror",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mluntypedcolumn/customreflectable-implementations",
                    "title": "CustomReflectable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mluntypedcolumn/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mluntypedcolumn/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mluntypedcolumn",
                "title": "MLUntypedColumn",
                "type": "struct"
              },
              {
                "title": "Accessing columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/subscript(_:_:)",
                "title": "subscript<T>(String, T.Type) -> MLDataColumn<T>?",
                "type": "subscript"
              },
              {
                "path": "/documentation/createml/mldatatable/subscript(_:)-5tl9r",
                "title": "subscript<Element>(String) -> MLDataColumn<Element>",
                "type": "subscript"
              },
              {
                "path": "/documentation/createml/mldatatable/subscript(_:)-3wjk",
                "title": "subscript(String) -> MLUntypedColumn",
                "type": "subscript"
              },
              {
                "title": "Renaming columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/renamecolumn(named:to:)",
                "title": "func renameColumn(named: String, to: String)",
                "type": "method"
              },
              {
                "title": "Removing columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/removecolumn(named:)",
                "title": "func removeColumn(named: String)",
                "type": "method"
              },
              {
                "title": "Appending to a data table",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/append(contentsof:)",
                "title": "func append(contentsOf: MLDataTable)",
                "type": "method"
              },
              {
                "title": "Generating new data tables",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Aggregating Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/group(columnsnamed:aggregators:)",
                    "title": "func group<S>(columnsNamed: String..., aggregators: S) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating an aggregator",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/aggregator/init(operations:of:)",
                        "title": "init(operations: MLDataTable.Aggregator.Operations..., of: String)",
                        "type": "init"
                      },
                      {
                        "title": "Configuring an aggregator",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/aggregator/columnname",
                        "title": "var columnName: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/aggregator/operations-swift.property",
                        "title": "var operations: [MLDataTable.Aggregator.Operations]",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Aggregation operations",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/min",
                            "title": "case min",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/max",
                            "title": "case max",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/sum",
                            "title": "case sum",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/mean",
                            "title": "case mean",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/stdev",
                            "title": "case stdev",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/variance",
                            "title": "case variance",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/count",
                            "title": "case count",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/distinctcount",
                            "title": "case distinctCount",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/randomlyselectone",
                            "title": "case randomlySelectOne",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/sequencemerge",
                            "title": "case sequenceMerge",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/dictionarymerge(valuecolumn:)",
                            "title": "case dictionaryMerge(valueColumn: String)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/argmin(outputcolumn:)",
                            "title": "case argmin(outputColumn: String)",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum/argmax(outputcolumn:)",
                            "title": "case argmax(outputColumn: String)",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/aggregator/operations-swift.enum",
                        "title": "MLDataTable.Aggregator.Operations",
                        "type": "enum"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/aggregator",
                    "title": "MLDataTable.Aggregator",
                    "type": "struct"
                  },
                  {
                    "title": "Sorting Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/sort(columnnamed:byincreasingorder:)",
                    "title": "func sort(columnNamed: String, byIncreasingOrder: Bool) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "title": "Splitting a Data Table",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/randomsplit(by:seed:)",
                    "title": "func randomSplit(by: Double, seed: Int) -> (MLDataTable, MLDataTable)",
                    "type": "method"
                  },
                  {
                    "title": "Merging Data Tables",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/join(with:on:type:)",
                    "title": "func join(with: MLDataTable, on: String..., type: MLDataTable.JoinType) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting a joining operation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/jointype/inner",
                        "title": "case inner",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/jointype/left",
                        "title": "case left",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/jointype/right",
                        "title": "case right",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/jointype/outer",
                        "title": "case outer",
                        "type": "case"
                      },
                      {
                        "title": "Describing a joining operation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/jointype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/jointype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Comparing joining operations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/jointype/==(_:_:)",
                        "title": "static func == (MLDataTable.JoinType, MLDataTable.JoinType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/jointype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/jointype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/jointype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/jointype",
                    "title": "MLDataTable.JoinType",
                    "type": "enum"
                  },
                  {
                    "title": "Filling in Missing Values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/fillmissing(columnnamed:with:)",
                    "title": "func fillMissing(columnNamed: String, with: MLDataValue) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "title": "Masking Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/subscript(_:)-3opgl",
                    "title": "subscript(MLDataColumn<Bool>) -> MLDataTable",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/subscript(_:)-10r4l",
                    "title": "subscript(MLUntypedColumn) -> MLDataTable",
                    "type": "subscript"
                  },
                  {
                    "title": "Discarding Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/dropmissing()",
                    "title": "func dropMissing() -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/dropduplicates()",
                    "title": "func dropDuplicates() -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/exclude(_:of:)",
                    "title": "func exclude<T>(T..., of: String) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/randomsample(by:seed:)",
                    "title": "func randomSample(by: Double, seed: Int) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "title": "Selecting Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/subscript(_:)-7h4j3",
                    "title": "subscript(Range<Int>) -> MLDataTable",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/subscript(_:)-5le8a",
                    "title": "subscript<R>(R) -> MLDataTable",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/prefix(_:)",
                    "title": "func prefix(Int) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/suffix(_:)",
                    "title": "func suffix(Int) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/intersect(_:of:)",
                    "title": "func intersect<T>(T..., of: String) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "title": "Selecting Columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/subscript(_:)-2wkan",
                    "title": "subscript<S>(S) -> MLDataTable",
                    "type": "subscript"
                  },
                  {
                    "title": "Compacting Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/condense(columnnamed:to:)",
                    "title": "func condense(columnNamed: String, to: String) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "title": "Expanding Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/expand(columnnamed:to:)",
                    "title": "func expand(columnNamed: String, to: String) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "title": "Compacting Columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/pack(columnsnamed:to:type:filling:)",
                    "title": "func pack(columnsNamed: String..., to: String, type: MLDataTable.PackType, filling: MLDataValue) -> MLDataTable",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Selecting a packing operation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/packtype/sequence",
                        "title": "case sequence",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/packtype/dictionary",
                        "title": "case dictionary",
                        "type": "case"
                      },
                      {
                        "title": "Describing a packing operation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/packtype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/packtype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Comparing packing operations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/packtype/==(_:_:)",
                        "title": "static func == (MLDataTable.PackType, MLDataTable.PackType) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/packtype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/packtype/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/packtype/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/packtype",
                    "title": "MLDataTable.PackType",
                    "type": "enum"
                  },
                  {
                    "title": "Expanding Columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/unpack(columnnamed:valuetypes:indexsubset:keysubset:)",
                    "title": "func unpack(columnNamed: String, valueTypes: [MLDataValue.ValueType]?, indexSubset: [Int]?, keySubset: [String]?) -> MLDataTable",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/data-table-derivation-operations",
                "title": "Data Table Derivation Operations",
                "type": "collection"
              },
              {
                "title": "Splitting a data table",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/randomsplitbysequence(proportion:by:on:seed:)",
                "title": "func randomSplitBySequence(proportion: Double, by: String, on: String, seed: Int) -> (MLDataTable, remaining: MLDataTable)",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mldatatable/stratifiedsplit(proportions:on:generator:)",
                "title": "func stratifiedSplit<RNG>(proportions: [Double], on: String, generator: inout RNG) throws -> MLDataTable",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mldatatable/stratifiedsplit(proportions:on:seed:)",
                "title": "func stratifiedSplit(proportions: [Double], on: String, seed: Int) throws -> MLDataTable",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mldatatable/stratifiedsplitbysequence(proportions:by:on:generator:)",
                "title": "func stratifiedSplitBySequence<RNG>(proportions: [Double], by: String, on: String, generator: inout RNG) throws -> MLDataTable",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mldatatable/stratifiedsplitbysequence(proportions:by:on:seed:)",
                "title": "func stratifiedSplitBySequence(proportions: [Double], by: String, on: String, seed: Int) throws -> MLDataTable",
                "type": "method"
              },
              {
                "title": "Getting information about a data table’s rows",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/rows-swift.property",
                "title": "var rows: MLDataTable.Rows",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Inspecting a row collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "title": "Accessing rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/subscript(_:)",
                    "title": "subscript(Int) -> MLDataTable.Rows.Element",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "title": "Finding rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/contains(_:)",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "title": "Selecting rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Excluding rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Transforming a row collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "title": "Iterating over a row collection’s rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "title": "Reordering a row collection’s rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "title": "Splitting and joining rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/joined(separator:)",
                    "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "title": "Comparing row collections",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "title": "Manipulating indices",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "title": "Describing a row collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Accessing parameters",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/keys-swift.property",
                        "title": "var keys: MLDataTable.Row.Keys",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.property",
                        "title": "var values: MLDataTable.Row.Values",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/key",
                        "title": "MLDataTable.Row.Key",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/keys-swift.typealias",
                        "title": "MLDataTable.Row.Keys",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/value",
                        "title": "MLDataTable.Row.Value",
                        "type": "typealias"
                      },
                      {
                        "children": [
                          {
                            "title": "Manipulating indices",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/startindex",
                            "title": "var startIndex: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/endindex",
                            "title": "var endIndex: Int",
                            "type": "property"
                          },
                          {
                            "title": "Accessing columns",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/subscript(_:)",
                            "title": "subscript(Int) -> MLDataValue",
                            "type": "subscript"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/element",
                            "title": "MLDataTable.Row.Values.Element",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/index",
                            "title": "MLDataTable.Row.Values.Index",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/indices",
                            "title": "MLDataTable.Row.Values.Indices",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/iterator",
                            "title": "MLDataTable.Row.Values.Iterator",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/subsequence",
                            "title": "MLDataTable.Row.Values.SubSequence",
                            "type": "typealias"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/last",
                                "title": "var last: Self.Element?",
                                "type": "property"
                              },
                              {
                                "title": "Instance Methods",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/difference(from:)",
                                "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/difference(from:by:)",
                                "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/droplast(_:)",
                                "title": "func dropLast(Int) -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/formindex(before:)",
                                "title": "func formIndex(before: inout Self.Index)",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/last(where:)",
                                "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/lastindex(of:)",
                                "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/lastindex(where:)",
                                "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/reversed()",
                                "title": "func reversed() -> ReversedCollection<Self>",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/suffix(_:)",
                                "title": "func suffix(Int) -> Self.SubSequence",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/bidirectionalcollection-implementations",
                            "title": "BidirectionalCollection Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/count",
                                "title": "var count: Int",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/first",
                                "title": "var first: Self.Element?",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/isempty",
                                "title": "var isEmpty: Bool",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/underestimatedcount",
                                "title": "var underestimatedCount: Int",
                                "type": "property"
                              },
                              {
                                "title": "Instance Methods",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/drop(while:)",
                                "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/dropfirst(_:)",
                                "title": "func dropFirst(Int) -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/firstindex(of:)",
                                "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/firstindex(where:)",
                                "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/firstrange(of:)",
                                "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/formindex(_:offsetby:)",
                                "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/formindex(_:offsetby:limitedby:)",
                                "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/formindex(after:)",
                                "title": "func formIndex(after: inout Self.Index)",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/index(of:)",
                                "title": "func index(of: Self.Element) -> Self.Index?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/indices(of:)",
                                "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/indices(where:)",
                                "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/makeiterator()",
                                "title": "func makeIterator() -> IndexingIterator<Self>",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/map(_:)-6l4yc",
                                "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/prefix(_:)",
                                "title": "func prefix(Int) -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/prefix(through:)",
                                "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/prefix(upto:)",
                                "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/prefix(while:)",
                                "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomelement()",
                                "title": "func randomElement() -> Self.Element?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomelement(using:)",
                                "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/ranges(of:)",
                                "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/removingsubranges(_:)",
                                "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                                "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/split(separator:maxsplits:omittingemptysubsequences:)",
                                "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/suffix(from:)",
                                "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/trimmingprefix(_:)",
                                "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/trimmingprefix(while:)",
                                "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/collection-implementations",
                            "title": "Collection Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/debugdescription",
                                "title": "var debugDescription: String",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/customdebugstringconvertible-implementations",
                            "title": "CustomDebugStringConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/playgrounddescription",
                                "title": "var playgroundDescription: Any",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/customplaygrounddisplayconvertible-implementations",
                            "title": "CustomPlaygroundDisplayConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/description",
                                "title": "var description: String",
                                "type": "property"
                              }
                            ],
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/customstringconvertible-implementations",
                            "title": "CustomStringConvertible Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/==(_:_:)",
                                "title": "static func == (MLDataTable.Row.Values, MLDataTable.Row.Values) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Methods",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/index(_:offsetby:limitedby:)",
                                "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomaccesscollection-implementations",
                            "title": "RandomAccessCollection Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Instance Properties",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/lazy",
                                "title": "var lazy: LazySequence<Self>",
                                "type": "property"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/publisher",
                                "title": "var publisher: Publishers.Sequence<Self, Never>",
                                "type": "property"
                              },
                              {
                                "title": "Instance Methods",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/allsatisfy(_:)",
                                "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/compactmap(_:)",
                                "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/compare(_:_:)",
                                "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/contains(_:)",
                                "title": "func contains(Self.Element) -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/contains(where:)",
                                "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/count(where:)",
                                "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/elementsequal(_:)",
                                "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/elementsequal(_:by:)",
                                "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/enumerated()",
                                "title": "func enumerated() -> EnumeratedSequence<Self>",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/filter(_:)-3ii0s",
                                "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/filter(_:)-4ae4h",
                                "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/first(where:)",
                                "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/flatmap(_:)-25drg",
                                "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/flatmap(_:)-76jjn",
                                "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/foreach(_:)",
                                "title": "func forEach((Self.Element) throws -> Void) rethrows",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/formatted(_:)",
                                "title": "func formatted<S>(S) -> S.FormatOutput",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/lexicographicallyprecedes(_:by:)",
                                "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/map(_:)-9ujyp",
                                "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/mapannotations(_:)-9umkf",
                                "title": "func mapAnnotations<Feature, Input, Output>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Feature, Output>]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/mapannotations(_:)-lv6t",
                                "title": "func mapAnnotations<Feature, Input, Output>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Feature, Output>]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/mapfeatures(_:)-2y24e",
                                "title": "func mapFeatures<Input, Output, Annotation>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Output, Annotation>]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/mapfeatures(_:)-6zhmj",
                                "title": "func mapFeatures<Input, Output, Annotation>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Output, Annotation>]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/max(by:)",
                                "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/min(by:)",
                                "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomsplit(by:seed:)-59n47",
                                "title": "func randomSplit<T>(by: Double, seed: Int?) -> (ArraySlice<T>, ArraySlice<T>)",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomsplit(by:seed:)-5x1av",
                                "title": "func randomSplit<Feature, Annotation>(by: Double, seed: Int?) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomsplit(by:using:)-1rf7x",
                                "title": "func randomSplit<T, Generator>(by: Double, using: inout Generator) -> (ArraySlice<T>, ArraySlice<T>)",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomsplit(by:using:)-89k4w",
                                "title": "func randomSplit<Feature, Annotation, Generator>(by: Double, using: inout Generator) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/reduce(_:_:)",
                                "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/reduce(into:_:)",
                                "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/shuffled()",
                                "title": "func shuffled() -> [Self.Element]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/shuffled(using:)",
                                "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/sorted(by:)",
                                "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/sorted(using:)-37sf7",
                                "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/sorted(using:)-ph76",
                                "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/starts(with:)",
                                "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/starts(with:by:)",
                                "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/createml/mldatatable/row/values-swift.struct/withcontiguousstorageifavailable(_:)",
                                "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/sequence-implementations",
                            "title": "Sequence Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct",
                        "title": "MLDataTable.Row.Values",
                        "type": "struct"
                      },
                      {
                        "title": "Getting a row",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/index(forkey:)",
                        "title": "func index(forKey: MLDataTable.Row.Key) -> MLDataTable.Row.Index?",
                        "type": "method"
                      },
                      {
                        "title": "Accessing rows",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/subscript(_:)-7fw28",
                        "title": "subscript(MLDataTable.Row.Key) -> MLDataTable.Row.Value?",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/subscript(_:_:)",
                        "title": "subscript<T>(MLDataTable.Row.Key, T.Type) -> T?",
                        "type": "subscript"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/count",
                            "title": "var count: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/endindex",
                            "title": "var endIndex: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/first",
                            "title": "var first: Self.Element?",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/indices-swift.property",
                            "title": "var indices: DefaultIndices<Self>",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/startindex",
                            "title": "var startIndex: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/underestimatedcount",
                            "title": "var underestimatedCount: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/distance(from:to:)",
                            "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/drop(while:)",
                            "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/dropfirst(_:)",
                            "title": "func dropFirst(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/droplast(_:)",
                            "title": "func dropLast(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/firstindex(where:)",
                            "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/formindex(_:offsetby:)",
                            "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/formindex(_:offsetby:limitedby:)",
                            "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/formindex(after:)",
                            "title": "func formIndex(after: inout Self.Index)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/index(_:offsetby:)",
                            "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/index(_:offsetby:limitedby:)",
                            "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/index(after:)",
                            "title": "func index(after: Int) -> Int",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/indices(where:)",
                            "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/makeiterator()",
                            "title": "func makeIterator() -> IndexingIterator<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/map(_:)-48z0b",
                            "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/prefix(_:)",
                            "title": "func prefix(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/prefix(through:)",
                            "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/prefix(upto:)",
                            "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/prefix(while:)",
                            "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/randomelement()",
                            "title": "func randomElement() -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/randomelement(using:)",
                            "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/removingsubranges(_:)",
                            "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                            "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/suffix(_:)",
                            "title": "func suffix(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/suffix(from:)",
                            "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/trimmingprefix(while:)",
                            "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "title": "Subscripts",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/subscript(_:)-1xauh",
                            "title": "subscript<R>(R) -> Self.SubSequence",
                            "type": "subscript"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/subscript(_:)-26oc3",
                            "title": "subscript(Int) -> (MLDataTable.Row.Key, MLDataTable.Row.Value)",
                            "type": "subscript"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/subscript(_:)-2n06g",
                            "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                            "type": "subscript"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/subscript(_:)-3zxzk",
                            "title": "subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                            "type": "subscript"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/subscript(_:)-79vvr",
                            "title": "subscript(Range<Self.Index>) -> Slice<Self>",
                            "type": "subscript"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/index",
                            "title": "MLDataTable.Row.Index",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/indices",
                            "title": "MLDataTable.Row.Indices",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/iterator",
                            "title": "MLDataTable.Row.Iterator",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/subsequence",
                            "title": "MLDataTable.Row.SubSequence",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/collection-implementations",
                        "title": "Collection Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/==(_:_:)",
                            "title": "static func == (MLDataTable.Row, MLDataTable.Row) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/lazy",
                            "title": "var lazy: LazySequence<Self>",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/publisher",
                            "title": "var publisher: Publishers.Sequence<Self, Never>",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/allsatisfy(_:)",
                            "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/compactmap(_:)",
                            "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/compare(_:_:)",
                            "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/contains(where:)",
                            "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/count(where:)",
                            "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/elementsequal(_:by:)",
                            "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/enumerated()",
                            "title": "func enumerated() -> EnumeratedSequence<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/filter(_:)-3z8fk",
                            "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/filter(_:)-7zzy4",
                            "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/first(where:)",
                            "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/flatmap(_:)-766ww",
                            "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/flatmap(_:)-9oweg",
                            "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/foreach(_:)",
                            "title": "func forEach((Self.Element) throws -> Void) rethrows",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/formatted(_:)",
                            "title": "func formatted<S>(S) -> S.FormatOutput",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/lexicographicallyprecedes(_:by:)",
                            "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/map(_:)-2pe6d",
                            "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/mapannotations(_:)-52sd4",
                            "title": "func mapAnnotations<Feature, Input, Output>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Feature, Output>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/mapannotations(_:)-7b8te",
                            "title": "func mapAnnotations<Feature, Input, Output>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Feature, Output>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/mapfeatures(_:)-2dp9n",
                            "title": "func mapFeatures<Input, Output, Annotation>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Output, Annotation>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/mapfeatures(_:)-81wzo",
                            "title": "func mapFeatures<Input, Output, Annotation>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Output, Annotation>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/max(by:)",
                            "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/min(by:)",
                            "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/randomsplit(by:seed:)-5s60o",
                            "title": "func randomSplit<T>(by: Double, seed: Int?) -> (ArraySlice<T>, ArraySlice<T>)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/randomsplit(by:seed:)-9h97x",
                            "title": "func randomSplit<Feature, Annotation>(by: Double, seed: Int?) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/randomsplit(by:using:)-64hl5",
                            "title": "func randomSplit<T, Generator>(by: Double, using: inout Generator) -> (ArraySlice<T>, ArraySlice<T>)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/randomsplit(by:using:)-9t5d6",
                            "title": "func randomSplit<Feature, Annotation, Generator>(by: Double, using: inout Generator) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/reduce(_:_:)",
                            "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/reduce(into:_:)",
                            "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/reversed()",
                            "title": "func reversed() -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/shuffled()",
                            "title": "func shuffled() -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/shuffled(using:)",
                            "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/sorted(by:)",
                            "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/sorted(using:)-2vwoe",
                            "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/sorted(using:)-9g8wq",
                            "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/starts(with:by:)",
                            "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/withcontiguousstorageifavailable(_:)",
                            "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                            "type": "method"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/element",
                            "title": "MLDataTable.Row.Element",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/sequence-implementations",
                        "title": "Sequence Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/row",
                    "title": "MLDataTable.Row",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/element",
                    "title": "MLDataTable.Rows.Element",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/last",
                        "title": "var last: Self.Element?",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/difference(from:)",
                        "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/difference(from:by:)",
                        "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/droplast(_:)",
                        "title": "func dropLast(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/formindex(before:)",
                        "title": "func formIndex(before: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/last(where:)",
                        "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/lastindex(of:)",
                        "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/lastindex(where:)",
                        "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/reversed()",
                        "title": "func reversed() -> ReversedCollection<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/suffix(_:)",
                        "title": "func suffix(Int) -> Self.SubSequence",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/bidirectionalcollection-implementations",
                    "title": "BidirectionalCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/count",
                        "title": "var count: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/first",
                        "title": "var first: Self.Element?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/underestimatedcount",
                        "title": "var underestimatedCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/drop(while:)",
                        "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/firstindex(of:)",
                        "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/firstindex(where:)",
                        "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/firstrange(of:)",
                        "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/formindex(_:offsetby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/formindex(_:offsetby:limitedby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/formindex(after:)",
                        "title": "func formIndex(after: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/index(of:)",
                        "title": "func index(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/indices(of:)",
                        "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/indices(where:)",
                        "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/makeiterator()",
                        "title": "func makeIterator() -> IndexingIterator<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/map(_:)-7mibt",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/prefix(_:)",
                        "title": "func prefix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/prefix(through:)",
                        "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/prefix(upto:)",
                        "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/randomelement()",
                        "title": "func randomElement() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/randomelement(using:)",
                        "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/ranges(of:)",
                        "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/removingsubranges(_:)",
                        "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/suffix(from:)",
                        "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/trimmingprefix(_:)",
                        "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/trimmingprefix(while:)",
                        "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/index",
                        "title": "MLDataTable.Rows.Index",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/indices",
                        "title": "MLDataTable.Rows.Indices",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/iterator",
                        "title": "MLDataTable.Rows.Iterator",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/subsequence",
                        "title": "MLDataTable.Rows.SubSequence",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/collection-implementations",
                    "title": "Collection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/endindex",
                        "title": "var endIndex: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/startindex",
                        "title": "var startIndex: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/index(_:offsetby:limitedby:)",
                        "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/subscript(_:)",
                        "title": "subscript(Int) -> MLDataTable.Rows.Element",
                        "type": "subscript"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/element",
                        "title": "MLDataTable.Rows.Element",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/randomaccesscollection-implementations",
                    "title": "RandomAccessCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/lazy",
                        "title": "var lazy: LazySequence<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/publisher",
                        "title": "var publisher: Publishers.Sequence<Self, Never>",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/compactmap(_:)",
                        "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/compare(_:_:)",
                        "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/contains(_:)",
                        "title": "func contains(Self.Element) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/contains(where:)",
                        "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/count(where:)",
                        "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/elementsequal(_:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/elementsequal(_:by:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/enumerated()",
                        "title": "func enumerated() -> EnumeratedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/filter(_:)-1o6qz",
                        "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/filter(_:)-40u3y",
                        "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/first(where:)",
                        "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/flatmap(_:)-1tjx2",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/flatmap(_:)-odrl",
                        "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/foreach(_:)",
                        "title": "func forEach((Self.Element) throws -> Void) rethrows",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/formatted(_:)",
                        "title": "func formatted<S>(S) -> S.FormatOutput",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/joined()",
                        "title": "func joined() -> FlattenSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/joined(separator:)",
                        "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/lexicographicallyprecedes(_:by:)",
                        "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/map(_:)-lkdp",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/mapannotations(_:)-1lgaw",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/mapannotations(_:)-5p74k",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/mapfeatures(_:)-1b319",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/mapfeatures(_:)-6hj2x",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/randomsplit(by:seed:)-1lv1a",
                        "title": "func randomSplit<Feature, Annotation>(by: Double, seed: Int?) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/randomsplit(by:seed:)-9xfjk",
                        "title": "func randomSplit<T>(by: Double, seed: Int?) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/randomsplit(by:using:)-4pyzb",
                        "title": "func randomSplit<Feature, Annotation, Generator>(by: Double, using: inout Generator) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/randomsplit(by:using:)-9gxa8",
                        "title": "func randomSplit<T, Generator>(by: Double, using: inout Generator) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/shuffled()",
                        "title": "func shuffled() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/shuffled(using:)",
                        "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/sorted(by:)",
                        "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/sorted(using:)-775an",
                        "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/sorted(using:)-ap0j",
                        "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/starts(with:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/starts(with:by:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/rows-swift.struct/withcontiguousstorageifavailable(_:)",
                        "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/rows-swift.struct/sequence-implementations",
                    "title": "Sequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldatatable/rows-swift.struct",
                "title": "MLDataTable.Rows",
                "type": "struct"
              },
              {
                "title": "Getting information about a data table’s columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/columnnames-swift.property",
                "title": "var columnNames: MLDataTable.ColumnNames",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Manipulating indices",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "title": "Accessing columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/subscript(_:)",
                    "title": "subscript(Int) -> String",
                    "type": "subscript"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/element",
                    "title": "MLDataTable.ColumnNames.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/index",
                    "title": "MLDataTable.ColumnNames.Index",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/indices",
                    "title": "MLDataTable.ColumnNames.Indices",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/iterator",
                    "title": "MLDataTable.ColumnNames.Iterator",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/subsequence",
                    "title": "MLDataTable.ColumnNames.SubSequence",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/last",
                        "title": "var last: Self.Element?",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/difference(from:)",
                        "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/difference(from:by:)",
                        "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/droplast(_:)",
                        "title": "func dropLast(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/firstrange(of:)-2nsfn",
                        "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/formindex(before:)",
                        "title": "func formIndex(before: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/joined(separator:)",
                        "title": "func joined(separator: String) -> String",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/last(where:)",
                        "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/lastindex(of:)",
                        "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/lastindex(where:)",
                        "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/reversed()",
                        "title": "func reversed() -> ReversedCollection<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/suffix(_:)",
                        "title": "func suffix(Int) -> Self.SubSequence",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/bidirectionalcollection-implementations",
                    "title": "BidirectionalCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/count",
                        "title": "var count: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/first",
                        "title": "var first: Self.Element?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/underestimatedcount",
                        "title": "var underestimatedCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/drop(while:)",
                        "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/firstindex(of:)",
                        "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/firstindex(where:)",
                        "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/firstrange(of:)-7a65k",
                        "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/formindex(_:offsetby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/formindex(_:offsetby:limitedby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/formindex(after:)",
                        "title": "func formIndex(after: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/index(of:)",
                        "title": "func index(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/indices(of:)",
                        "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/indices(where:)",
                        "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/makeiterator()",
                        "title": "func makeIterator() -> IndexingIterator<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/map(_:)-8uwfu",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/prefix(_:)",
                        "title": "func prefix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/prefix(through:)",
                        "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/prefix(upto:)",
                        "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/randomelement()",
                        "title": "func randomElement() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/randomelement(using:)",
                        "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/ranges(of:)",
                        "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/removingsubranges(_:)",
                        "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/suffix(from:)",
                        "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/trimmingprefix(_:)",
                        "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/trimmingprefix(while:)",
                        "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/collection-implementations",
                    "title": "Collection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/==(_:_:)",
                        "title": "static func == (MLDataTable.ColumnNames, MLDataTable.ColumnNames) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/index(_:offsetby:limitedby:)",
                        "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/randomaccesscollection-implementations",
                    "title": "RandomAccessCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/lazy",
                        "title": "var lazy: LazySequence<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/publisher",
                        "title": "var publisher: Publishers.Sequence<Self, Never>",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/compactmap(_:)",
                        "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/compare(_:_:)",
                        "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/contains(_:)",
                        "title": "func contains(Self.Element) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/contains(where:)",
                        "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/count(where:)",
                        "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/elementsequal(_:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/elementsequal(_:by:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/enumerated()",
                        "title": "func enumerated() -> EnumeratedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/filter(_:)",
                        "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/first(where:)",
                        "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/flatmap(_:)-9espq",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/flatmap(_:)-9xcod",
                        "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/foreach(_:)",
                        "title": "func forEach((Self.Element) throws -> Void) rethrows",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/formatted()",
                        "title": "func formatted() -> String",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/formatted(_:)",
                        "title": "func formatted<S>(S) -> S.FormatOutput",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/joined()",
                        "title": "func joined() -> FlattenSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/lexicographicallyprecedes(_:)",
                        "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/lexicographicallyprecedes(_:by:)",
                        "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/map(_:)-2vy87",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/mapannotations(_:)-3lsnv",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/mapannotations(_:)-qtjw",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/mapfeatures(_:)-9s227",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/mapfeatures(_:)-9yvbt",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/max()",
                        "title": "func max() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/min()",
                        "title": "func min() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/randomsplit(by:seed:)-701ob",
                        "title": "func randomSplit<T>(by: Double, seed: Int?) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/randomsplit(by:seed:)-8i12v",
                        "title": "func randomSplit<Feature, Annotation>(by: Double, seed: Int?) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/randomsplit(by:using:)-6qqrp",
                        "title": "func randomSplit<T, Generator>(by: Double, using: inout Generator) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/randomsplit(by:using:)-9m3hv",
                        "title": "func randomSplit<Feature, Annotation, Generator>(by: Double, using: inout Generator) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/shuffled()",
                        "title": "func shuffled() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/shuffled(using:)",
                        "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/sorted()",
                        "title": "func sorted() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/sorted(by:)",
                        "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/sorted(using:)-92lat",
                        "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/sorted(using:)-9hde3",
                        "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/starts(with:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/starts(with:by:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/columnnames-swift.struct/withcontiguousstorageifavailable(_:)",
                        "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/columnnames-swift.struct/sequence-implementations",
                    "title": "Sequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldatatable/columnnames-swift.struct",
                "title": "MLDataTable.ColumnNames",
                "type": "struct"
              },
              {
                "path": "/documentation/createml/mldatatable/columntypes",
                "title": "var columnTypes: [String : MLDataValue.ValueType]",
                "type": "property"
              },
              {
                "title": "Saving a data table",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/write(to:)",
                "title": "func write(to: URL) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mldatatable/write(todirectory:)",
                "title": "func write(toDirectory: String) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mldatatable/writecsv(to:)",
                "title": "func writeCSV(to: URL) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mldatatable/writecsv(tofile:)",
                "title": "func writeCSV(toFile: String) throws",
                "type": "method"
              },
              {
                "title": "Visualizing a data table",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mldatatable/show()",
                "title": "func show() -> any MLStreamingVisualizable",
                "type": "method"
              },
              {
                "title": "Describing a data table",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mldatatable/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Handling data table errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatatable/isvalid",
                "title": "var isValid: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mldatatable/error",
                "title": "var error: (any Error)?",
                "type": "property"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating the CSV parsing options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/init(containsheader:delimiter:comment:escape:doublequote:quote:skipinitialspaces:missingvalues:lineterminator:selectcolumns:maxrows:skiprows:)",
                    "title": "init(containsHeader: Bool, delimiter: String, comment: String, escape: String, doubleQuote: Bool, quote: String, skipInitialSpaces: Bool, missingValues: [String], lineTerminator: String, selectColumns: [String]?, maxRows: Int?, skipRows: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Specifying the CSV file format",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/containsheader",
                    "title": "var containsHeader: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/delimiter",
                    "title": "var delimiter: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/lineterminator",
                    "title": "var lineTerminator: String",
                    "type": "property"
                  },
                  {
                    "title": "Handling special characters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/escape",
                    "title": "var escape: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/quote",
                    "title": "var quote: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/doublequote",
                    "title": "var doubleQuote: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Ignoring CSV components",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/skiprows",
                    "title": "var skipRows: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/skipinitialspaces",
                    "title": "var skipInitialSpaces: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/comment",
                    "title": "var comment: String",
                    "type": "property"
                  },
                  {
                    "title": "Limiting rows and columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/maxrows",
                    "title": "var maxRows: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/selectcolumns",
                    "title": "var selectColumns: [String]?",
                    "type": "property"
                  },
                  {
                    "title": "Representing missing values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/parsingoptions/missingvalues",
                    "title": "var missingValues: [String]",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mldatatable/parsingoptions",
                "title": "MLDataTable.ParsingOptions",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Accessing parameters",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/row/keys-swift.property",
                    "title": "var keys: MLDataTable.Row.Keys",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/row/values-swift.property",
                    "title": "var values: MLDataTable.Row.Values",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/row/key",
                    "title": "MLDataTable.Row.Key",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/row/keys-swift.typealias",
                    "title": "MLDataTable.Row.Keys",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/row/value",
                    "title": "MLDataTable.Row.Value",
                    "type": "typealias"
                  },
                  {
                    "children": [
                      {
                        "title": "Manipulating indices",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/startindex",
                        "title": "var startIndex: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/endindex",
                        "title": "var endIndex: Int",
                        "type": "property"
                      },
                      {
                        "title": "Accessing columns",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/subscript(_:)",
                        "title": "subscript(Int) -> MLDataValue",
                        "type": "subscript"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/element",
                        "title": "MLDataTable.Row.Values.Element",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/index",
                        "title": "MLDataTable.Row.Values.Index",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/indices",
                        "title": "MLDataTable.Row.Values.Indices",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/iterator",
                        "title": "MLDataTable.Row.Values.Iterator",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/subsequence",
                        "title": "MLDataTable.Row.Values.SubSequence",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/last",
                            "title": "var last: Self.Element?",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/difference(from:)",
                            "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/difference(from:by:)",
                            "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/droplast(_:)",
                            "title": "func dropLast(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/formindex(before:)",
                            "title": "func formIndex(before: inout Self.Index)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/last(where:)",
                            "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/lastindex(of:)",
                            "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/lastindex(where:)",
                            "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/reversed()",
                            "title": "func reversed() -> ReversedCollection<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/suffix(_:)",
                            "title": "func suffix(Int) -> Self.SubSequence",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/bidirectionalcollection-implementations",
                        "title": "BidirectionalCollection Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/count",
                            "title": "var count: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/first",
                            "title": "var first: Self.Element?",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/underestimatedcount",
                            "title": "var underestimatedCount: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/drop(while:)",
                            "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/dropfirst(_:)",
                            "title": "func dropFirst(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/firstindex(of:)",
                            "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/firstindex(where:)",
                            "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/firstrange(of:)",
                            "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/formindex(_:offsetby:)",
                            "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/formindex(_:offsetby:limitedby:)",
                            "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/formindex(after:)",
                            "title": "func formIndex(after: inout Self.Index)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/index(of:)",
                            "title": "func index(of: Self.Element) -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/indices(of:)",
                            "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/indices(where:)",
                            "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/makeiterator()",
                            "title": "func makeIterator() -> IndexingIterator<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/map(_:)-6l4yc",
                            "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/prefix(_:)",
                            "title": "func prefix(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/prefix(through:)",
                            "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/prefix(upto:)",
                            "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/prefix(while:)",
                            "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomelement()",
                            "title": "func randomElement() -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomelement(using:)",
                            "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/ranges(of:)",
                            "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/removingsubranges(_:)",
                            "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                            "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/split(separator:maxsplits:omittingemptysubsequences:)",
                            "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/suffix(from:)",
                            "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/trimmingprefix(_:)",
                            "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/trimmingprefix(while:)",
                            "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/collection-implementations",
                        "title": "Collection Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/debugdescription",
                            "title": "var debugDescription: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/customdebugstringconvertible-implementations",
                        "title": "CustomDebugStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/playgrounddescription",
                            "title": "var playgroundDescription: Any",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/customplaygrounddisplayconvertible-implementations",
                        "title": "CustomPlaygroundDisplayConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/==(_:_:)",
                            "title": "static func == (MLDataTable.Row.Values, MLDataTable.Row.Values) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/index(_:offsetby:limitedby:)",
                            "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomaccesscollection-implementations",
                        "title": "RandomAccessCollection Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/lazy",
                            "title": "var lazy: LazySequence<Self>",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/publisher",
                            "title": "var publisher: Publishers.Sequence<Self, Never>",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/allsatisfy(_:)",
                            "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/compactmap(_:)",
                            "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/compare(_:_:)",
                            "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/contains(_:)",
                            "title": "func contains(Self.Element) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/contains(where:)",
                            "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/count(where:)",
                            "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/elementsequal(_:)",
                            "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/elementsequal(_:by:)",
                            "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/enumerated()",
                            "title": "func enumerated() -> EnumeratedSequence<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/filter(_:)-3ii0s",
                            "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/filter(_:)-4ae4h",
                            "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/first(where:)",
                            "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/flatmap(_:)-25drg",
                            "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/flatmap(_:)-76jjn",
                            "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/foreach(_:)",
                            "title": "func forEach((Self.Element) throws -> Void) rethrows",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/formatted(_:)",
                            "title": "func formatted<S>(S) -> S.FormatOutput",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/lexicographicallyprecedes(_:by:)",
                            "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/map(_:)-9ujyp",
                            "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/mapannotations(_:)-9umkf",
                            "title": "func mapAnnotations<Feature, Input, Output>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Feature, Output>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/mapannotations(_:)-lv6t",
                            "title": "func mapAnnotations<Feature, Input, Output>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Feature, Output>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/mapfeatures(_:)-2y24e",
                            "title": "func mapFeatures<Input, Output, Annotation>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Output, Annotation>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/mapfeatures(_:)-6zhmj",
                            "title": "func mapFeatures<Input, Output, Annotation>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Output, Annotation>]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/max(by:)",
                            "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/min(by:)",
                            "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomsplit(by:seed:)-59n47",
                            "title": "func randomSplit<T>(by: Double, seed: Int?) -> (ArraySlice<T>, ArraySlice<T>)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomsplit(by:seed:)-5x1av",
                            "title": "func randomSplit<Feature, Annotation>(by: Double, seed: Int?) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomsplit(by:using:)-1rf7x",
                            "title": "func randomSplit<T, Generator>(by: Double, using: inout Generator) -> (ArraySlice<T>, ArraySlice<T>)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/randomsplit(by:using:)-89k4w",
                            "title": "func randomSplit<Feature, Annotation, Generator>(by: Double, using: inout Generator) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/reduce(_:_:)",
                            "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/reduce(into:_:)",
                            "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/shuffled()",
                            "title": "func shuffled() -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/shuffled(using:)",
                            "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/sorted(by:)",
                            "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/sorted(using:)-37sf7",
                            "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/sorted(using:)-ph76",
                            "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/starts(with:)",
                            "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/starts(with:by:)",
                            "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mldatatable/row/values-swift.struct/withcontiguousstorageifavailable(_:)",
                            "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mldatatable/row/values-swift.struct/sequence-implementations",
                        "title": "Sequence Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/row/values-swift.struct",
                    "title": "MLDataTable.Row.Values",
                    "type": "struct"
                  },
                  {
                    "title": "Getting a row",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/row/index(forkey:)",
                    "title": "func index(forKey: MLDataTable.Row.Key) -> MLDataTable.Row.Index?",
                    "type": "method"
                  },
                  {
                    "title": "Accessing rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/row/subscript(_:)-7fw28",
                    "title": "subscript(MLDataTable.Row.Key) -> MLDataTable.Row.Value?",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/row/subscript(_:_:)",
                    "title": "subscript<T>(MLDataTable.Row.Key, T.Type) -> T?",
                    "type": "subscript"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/count",
                        "title": "var count: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/endindex",
                        "title": "var endIndex: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/first",
                        "title": "var first: Self.Element?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/indices-swift.property",
                        "title": "var indices: DefaultIndices<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/startindex",
                        "title": "var startIndex: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/underestimatedcount",
                        "title": "var underestimatedCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/distance(from:to:)",
                        "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/drop(while:)",
                        "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/droplast(_:)",
                        "title": "func dropLast(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/firstindex(where:)",
                        "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/formindex(_:offsetby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/formindex(_:offsetby:limitedby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/formindex(after:)",
                        "title": "func formIndex(after: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/index(_:offsetby:)",
                        "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/index(_:offsetby:limitedby:)",
                        "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/index(after:)",
                        "title": "func index(after: Int) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/indices(where:)",
                        "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/makeiterator()",
                        "title": "func makeIterator() -> IndexingIterator<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/map(_:)-48z0b",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/prefix(_:)",
                        "title": "func prefix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/prefix(through:)",
                        "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/prefix(upto:)",
                        "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/randomelement()",
                        "title": "func randomElement() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/randomelement(using:)",
                        "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/removingsubranges(_:)",
                        "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/suffix(_:)",
                        "title": "func suffix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/suffix(from:)",
                        "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/trimmingprefix(while:)",
                        "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/subscript(_:)-1xauh",
                        "title": "subscript<R>(R) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/subscript(_:)-26oc3",
                        "title": "subscript(Int) -> (MLDataTable.Row.Key, MLDataTable.Row.Value)",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/subscript(_:)-2n06g",
                        "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/subscript(_:)-3zxzk",
                        "title": "subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/subscript(_:)-79vvr",
                        "title": "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type": "subscript"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/index",
                        "title": "MLDataTable.Row.Index",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/indices",
                        "title": "MLDataTable.Row.Indices",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/iterator",
                        "title": "MLDataTable.Row.Iterator",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/subsequence",
                        "title": "MLDataTable.Row.SubSequence",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/row/collection-implementations",
                    "title": "Collection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/row/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/playgrounddescription",
                        "title": "var playgroundDescription: Any",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/row/customplaygrounddisplayconvertible-implementations",
                    "title": "CustomPlaygroundDisplayConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/row/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/==(_:_:)",
                        "title": "static func == (MLDataTable.Row, MLDataTable.Row) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/row/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/lazy",
                        "title": "var lazy: LazySequence<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/publisher",
                        "title": "var publisher: Publishers.Sequence<Self, Never>",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/compactmap(_:)",
                        "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/compare(_:_:)",
                        "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/contains(where:)",
                        "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/count(where:)",
                        "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/elementsequal(_:by:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/enumerated()",
                        "title": "func enumerated() -> EnumeratedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/filter(_:)-3z8fk",
                        "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/filter(_:)-7zzy4",
                        "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/first(where:)",
                        "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/flatmap(_:)-766ww",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/flatmap(_:)-9oweg",
                        "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/foreach(_:)",
                        "title": "func forEach((Self.Element) throws -> Void) rethrows",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/formatted(_:)",
                        "title": "func formatted<S>(S) -> S.FormatOutput",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/lexicographicallyprecedes(_:by:)",
                        "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/map(_:)-2pe6d",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/mapannotations(_:)-52sd4",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/mapannotations(_:)-7b8te",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/mapfeatures(_:)-2dp9n",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/mapfeatures(_:)-81wzo",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/randomsplit(by:seed:)-5s60o",
                        "title": "func randomSplit<T>(by: Double, seed: Int?) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/randomsplit(by:seed:)-9h97x",
                        "title": "func randomSplit<Feature, Annotation>(by: Double, seed: Int?) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/randomsplit(by:using:)-64hl5",
                        "title": "func randomSplit<T, Generator>(by: Double, using: inout Generator) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/randomsplit(by:using:)-9t5d6",
                        "title": "func randomSplit<Feature, Annotation, Generator>(by: Double, using: inout Generator) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/reversed()",
                        "title": "func reversed() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/shuffled()",
                        "title": "func shuffled() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/shuffled(using:)",
                        "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/sorted(by:)",
                        "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/sorted(using:)-2vwoe",
                        "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/sorted(using:)-9g8wq",
                        "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/starts(with:by:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/withcontiguousstorageifavailable(_:)",
                        "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatatable/row/element",
                        "title": "MLDataTable.Row.Element",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatatable/row/sequence-implementations",
                    "title": "Sequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldatatable/row",
                "title": "MLDataTable.Row",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mldatatable/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatatable/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mldatatable/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mldatatable",
            "title": "MLDataTable",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Converting between types and data values",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Converting from a data value to a type’s instance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalueconvertible/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatavalueconvertible/init(from:)",
                    "title": "init?(from: MLDataValue)",
                    "type": "init"
                  },
                  {
                    "title": "Converting from a type’s instance to a data value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalueconvertible/datavalue",
                    "title": "var dataValue: MLDataValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatavalueconvertible/datavaluetype",
                    "title": "static var dataValueType: MLDataValue.ValueType",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mldatavalueconvertible",
                "title": "MLDataValueConvertible",
                "type": "protocol"
              },
              {
                "title": "Creating a data value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/int(_:)",
                "title": "case int(Int)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mldatavalue/double(_:)",
                "title": "case double(Double)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mldatavalue/string(_:)",
                "title": "case string(String)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mldatavalue/dictionary(_:)",
                "title": "case dictionary(MLDataValue.DictionaryType)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mldatavalue/sequence(_:)",
                "title": "case sequence(MLDataValue.SequenceType)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mldatavalue/multiarray(_:)",
                "title": "case multiArray(MLDataValue.MultiArrayType)",
                "type": "case"
              },
              {
                "title": "Inspecting the type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/type",
                "title": "var type: MLDataValue.ValueType",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Supported values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/int",
                    "title": "case int",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/double",
                    "title": "case double",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/string",
                    "title": "case string",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/dictionary",
                    "title": "case dictionary",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/sequence",
                    "title": "case sequence",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/multiarray",
                    "title": "case multiArray",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/invalid",
                    "title": "case invalid",
                    "type": "case"
                  },
                  {
                    "title": "Describing a data value type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "title": "Comparing value types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/==(_:_:)",
                    "title": "static func == (MLDataValue.ValueType, MLDataValue.ValueType) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/valuetype/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/valuetype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/valuetype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/valuetype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/valuetype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/valuetype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/valuetype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldatavalue/valuetype",
                "title": "MLDataValue.ValueType",
                "type": "enum"
              },
              {
                "title": "Accessing numeric values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/intvalue",
                "title": "var intValue: Int?",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mldatavalue/doublevalue",
                "title": "var doubleValue: Double?",
                "type": "property"
              },
              {
                "title": "Accessing string values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/stringvalue",
                "title": "var stringValue: String?",
                "type": "property"
              },
              {
                "title": "Accessing dictionary values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/dictionaryvalue",
                "title": "var dictionaryValue: MLDataValue.DictionaryType?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a dictionary type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/dictionarytype/init(_:)",
                    "title": "init([MLDataValue : MLDataValue])",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/dictionarytype/init(uniquekeyswithvalues:)",
                    "title": "init<S>(uniqueKeysWithValues: S)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/dictionarytype/key",
                    "title": "MLDataValue.DictionaryType.Key",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/dictionarytype/value",
                    "title": "MLDataValue.DictionaryType.Value",
                    "type": "typealias"
                  },
                  {
                    "title": "Getting an element",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/dictionarytype/subscript(_:)-80qj2",
                    "title": "subscript(MLDataValue.DictionaryType.Key) -> MLDataValue.DictionaryType.Value?",
                    "type": "subscript"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Structures",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Comparing dictionary types",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mldatavalue/dictionarytype/index/==(_:_:)",
                            "title": "static func == (MLDataValue.DictionaryType.Index, MLDataValue.DictionaryType.Index) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/createml/mldatavalue/dictionarytype/index/_(_:_:)",
                            "title": "static func < (MLDataValue.DictionaryType.Index, MLDataValue.DictionaryType.Index) -> Bool",
                            "type": "op"
                          },
                          {
                            "title": "Default Implementations",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/'...(_:)-3dxsb",
                                "title": "static func ... (Self) -> PartialRangeThrough<Self>",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/'...(_:)-6bii8",
                                "title": "static func ... (Self) -> PartialRangeFrom<Self>",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/'...(_:_:)",
                                "title": "static func ... (Self, Self) -> ClosedRange<Self>",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/'.._(_:)",
                                "title": "static func ..< (Self) -> PartialRangeUpTo<Self>",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/'.._(_:_:)",
                                "title": "static func ..< (Self, Self) -> Range<Self>",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/_(_:_:)-96zgl",
                                "title": "static func > (Self, Self) -> Bool",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/_=(_:_:)-91tls",
                                "title": "static func >= (Self, Self) -> Bool",
                                "type": "op"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/_=(_:_:)-9xisz",
                                "title": "static func <= (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/createml/mldatavalue/dictionarytype/index/comparable-implementations",
                            "title": "Comparable Implementations",
                            "type": "collection"
                          },
                          {
                            "children": [
                              {
                                "title": "Operators",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/createml/mldatavalue/dictionarytype/index/!=(_:_:)",
                                "title": "static func != (Self, Self) -> Bool",
                                "type": "op"
                              }
                            ],
                            "path": "/documentation/createml/mldatavalue/dictionarytype/index/equatable-implementations",
                            "title": "Equatable Implementations",
                            "type": "collection"
                          }
                        ],
                        "path": "/documentation/createml/mldatavalue/dictionarytype/index",
                        "title": "MLDataValue.DictionaryType.Index",
                        "type": "struct"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/count",
                        "title": "var count: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/endindex",
                        "title": "var endIndex: MLDataValue.DictionaryType.Index",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/first",
                        "title": "var first: Self.Element?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/indices-swift.property",
                        "title": "var indices: DefaultIndices<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/startindex",
                        "title": "var startIndex: MLDataValue.DictionaryType.Index",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/underestimatedcount",
                        "title": "var underestimatedCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/distance(from:to:)",
                        "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/drop(while:)",
                        "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/droplast(_:)",
                        "title": "func dropLast(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/firstindex(where:)",
                        "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/formindex(_:offsetby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/formindex(_:offsetby:limitedby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/formindex(after:)",
                        "title": "func formIndex(after: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/index(_:offsetby:)",
                        "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/index(_:offsetby:limitedby:)",
                        "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/index(after:)",
                        "title": "func index(after: MLDataValue.DictionaryType.Index) -> MLDataValue.DictionaryType.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/indices(where:)",
                        "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/makeiterator()",
                        "title": "func makeIterator() -> IndexingIterator<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/map(_:)-5ljtq",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/prefix(_:)",
                        "title": "func prefix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/prefix(through:)",
                        "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/prefix(upto:)",
                        "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/randomelement()",
                        "title": "func randomElement() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/randomelement(using:)",
                        "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/removingsubranges(_:)",
                        "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/suffix(_:)",
                        "title": "func suffix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/suffix(from:)",
                        "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/trimmingprefix(while:)",
                        "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/subscript(_:)-2a1cc",
                        "title": "subscript<R>(R) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/subscript(_:)-2pebt",
                        "title": "subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/subscript(_:)-3c20a",
                        "title": "subscript(MLDataValue.DictionaryType.Index) -> MLDataValue.DictionaryType.Element",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/subscript(_:)-3y9q",
                        "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/subscript(_:)-8zj5a",
                        "title": "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type": "subscript"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/indices",
                        "title": "MLDataValue.DictionaryType.Indices",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/iterator",
                        "title": "MLDataValue.DictionaryType.Iterator",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/subsequence",
                        "title": "MLDataValue.DictionaryType.SubSequence",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/dictionarytype/collection-implementations",
                    "title": "Collection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/dictionarytype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/dictionarytype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/==(_:_:)",
                        "title": "static func == (MLDataValue.DictionaryType, MLDataValue.DictionaryType) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/dictionarytype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/init(from:)",
                        "title": "init?(from: MLDataValue)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/datavalue",
                        "title": "var dataValue: MLDataValue",
                        "type": "property"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/datavaluetype",
                        "title": "static var dataValueType: MLDataValue.ValueType",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/dictionarytype/mldatavalueconvertible-implementations",
                    "title": "MLDataValueConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/lazy",
                        "title": "var lazy: LazySequence<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/publisher",
                        "title": "var publisher: Publishers.Sequence<Self, Never>",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/compactmap(_:)",
                        "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/compare(_:_:)",
                        "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/contains(where:)",
                        "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/count(where:)",
                        "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/elementsequal(_:by:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/enumerated()",
                        "title": "func enumerated() -> EnumeratedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/filter(_:)-7s77k",
                        "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/filter(_:)-c0tf",
                        "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/first(where:)",
                        "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/flatmap(_:)-11p5j",
                        "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/flatmap(_:)-5mw7j",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/foreach(_:)",
                        "title": "func forEach((Self.Element) throws -> Void) rethrows",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/formatted(_:)",
                        "title": "func formatted<S>(S) -> S.FormatOutput",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/lexicographicallyprecedes(_:by:)",
                        "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/map(_:)-1qoo2",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/mapannotations(_:)-13zlx",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/mapannotations(_:)-2ykxn",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/mapfeatures(_:)-3ocap",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/mapfeatures(_:)-5rlvk",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/randomsplit(by:seed:)-483qm",
                        "title": "func randomSplit<T>(by: Double, seed: Int?) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/randomsplit(by:seed:)-ljd0",
                        "title": "func randomSplit<Feature, Annotation>(by: Double, seed: Int?) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/randomsplit(by:using:)-8z02p",
                        "title": "func randomSplit<Feature, Annotation, Generator>(by: Double, using: inout Generator) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/randomsplit(by:using:)-9mb4k",
                        "title": "func randomSplit<T, Generator>(by: Double, using: inout Generator) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/reversed()",
                        "title": "func reversed() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/shuffled()",
                        "title": "func shuffled() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/shuffled(using:)",
                        "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/sorted(by:)",
                        "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/sorted(using:)-2frjp",
                        "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/sorted(using:)-a75q",
                        "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/starts(with:by:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/withcontiguousstorageifavailable(_:)",
                        "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/dictionarytype/element",
                        "title": "MLDataValue.DictionaryType.Element",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/dictionarytype/sequence-implementations",
                    "title": "Sequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldatavalue/dictionarytype",
                "title": "MLDataValue.DictionaryType",
                "type": "struct"
              },
              {
                "title": "Accessing array values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/sequencevalue",
                "title": "var sequenceValue: MLDataValue.SequenceType?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a dictionary type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/sequencetype/init(_:)-1vvdf",
                    "title": "init<S>(S)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/sequencetype/init(_:)-3u0oh",
                    "title": "init<S>(S)",
                    "type": "init"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/last",
                        "title": "var last: Self.Element?",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/difference(from:)",
                        "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/difference(from:by:)",
                        "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/droplast(_:)",
                        "title": "func dropLast(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/formindex(before:)",
                        "title": "func formIndex(before: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/last(where:)",
                        "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/lastindex(of:)",
                        "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/lastindex(where:)",
                        "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/reversed()",
                        "title": "func reversed() -> ReversedCollection<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/suffix(_:)",
                        "title": "func suffix(Int) -> Self.SubSequence",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/bidirectionalcollection-implementations",
                    "title": "BidirectionalCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/count",
                        "title": "var count: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/endindex",
                        "title": "var endIndex: MLDataValue.SequenceType.Index",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/first",
                        "title": "var first: Self.Element?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/startindex",
                        "title": "var startIndex: MLDataValue.SequenceType.Index",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/underestimatedcount",
                        "title": "var underestimatedCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/drop(while:)",
                        "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/firstindex(of:)",
                        "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/firstindex(where:)",
                        "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/firstrange(of:)",
                        "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/formindex(_:offsetby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/formindex(_:offsetby:limitedby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/formindex(after:)",
                        "title": "func formIndex(after: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/index(of:)",
                        "title": "func index(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/indices(of:)",
                        "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/indices(where:)",
                        "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/makeiterator()",
                        "title": "func makeIterator() -> IndexingIterator<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/map(_:)-3l8fk",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/prefix(_:)",
                        "title": "func prefix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/prefix(through:)",
                        "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/prefix(upto:)",
                        "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/randomelement()",
                        "title": "func randomElement() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/randomelement(using:)",
                        "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/ranges(of:)",
                        "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/removingsubranges(_:)",
                        "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/suffix(from:)",
                        "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/trimmingprefix(_:)",
                        "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/trimmingprefix(while:)",
                        "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/subscript(_:)",
                        "title": "subscript(MLDataValue.SequenceType.Index) -> MLDataValue.SequenceType.Element",
                        "type": "subscript"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/index",
                        "title": "MLDataValue.SequenceType.Index",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/indices",
                        "title": "MLDataValue.SequenceType.Indices",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/iterator",
                        "title": "MLDataValue.SequenceType.Iterator",
                        "type": "typealias"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/subsequence",
                        "title": "MLDataValue.SequenceType.SubSequence",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/collection-implementations",
                    "title": "Collection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/==(_:_:)",
                        "title": "static func == (MLDataValue.SequenceType, MLDataValue.SequenceType) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/init(arrayliteral:)",
                        "title": "init(arrayLiteral: MLDataValue.SequenceType.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/arrayliteralelement",
                        "title": "MLDataValue.SequenceType.ArrayLiteralElement",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/expressiblebyarrayliteral-implementations",
                    "title": "ExpressibleByArrayLiteral Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/init(from:)",
                        "title": "init?(from: MLDataValue)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/datavalue",
                        "title": "var dataValue: MLDataValue",
                        "type": "property"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/datavaluetype",
                        "title": "static var dataValueType: MLDataValue.ValueType",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/mldatavalueconvertible-implementations",
                    "title": "MLDataValueConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/index(_:offsetby:limitedby:)",
                        "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/randomaccesscollection-implementations",
                    "title": "RandomAccessCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/lazy",
                        "title": "var lazy: LazySequence<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/publisher",
                        "title": "var publisher: Publishers.Sequence<Self, Never>",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/compactmap(_:)",
                        "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/compare(_:_:)",
                        "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/contains(_:)",
                        "title": "func contains(Self.Element) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/contains(where:)",
                        "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/count(where:)",
                        "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/elementsequal(_:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/elementsequal(_:by:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/enumerated()",
                        "title": "func enumerated() -> EnumeratedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/filter(_:)-4jrx4",
                        "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/filter(_:)-8bu7n",
                        "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/first(where:)",
                        "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/flatmap(_:)-501d6",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/flatmap(_:)-96mj",
                        "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/foreach(_:)",
                        "title": "func forEach((Self.Element) throws -> Void) rethrows",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/formatted(_:)",
                        "title": "func formatted<S>(S) -> S.FormatOutput",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/lexicographicallyprecedes(_:by:)",
                        "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/map(_:)-17jav",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/mapannotations(_:)-16wg2",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/mapannotations(_:)-76dda",
                        "title": "func mapAnnotations<Feature, Input, Output>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Feature, Output>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/mapfeatures(_:)-5frgy",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) async throws -> Output) async rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/mapfeatures(_:)-9ae38",
                        "title": "func mapFeatures<Input, Output, Annotation>((Input) throws -> Output) rethrows -> [AnnotatedFeature<Output, Annotation>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/randomsplit(by:seed:)-29vkb",
                        "title": "func randomSplit<T>(by: Double, seed: Int?) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/randomsplit(by:seed:)-8bmuf",
                        "title": "func randomSplit<Feature, Annotation>(by: Double, seed: Int?) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/randomsplit(by:using:)-2rak3",
                        "title": "func randomSplit<Feature, Annotation, Generator>(by: Double, using: inout Generator) -> ([AnnotatedFeature<Feature, Annotation>], [AnnotatedFeature<Feature, Annotation>])",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/randomsplit(by:using:)-4mmo7",
                        "title": "func randomSplit<T, Generator>(by: Double, using: inout Generator) -> (ArraySlice<T>, ArraySlice<T>)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/shuffled()",
                        "title": "func shuffled() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/shuffled(using:)",
                        "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/sorted(by:)",
                        "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/sorted(using:)-26s2z",
                        "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/sorted(using:)-2um5d",
                        "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/starts(with:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/starts(with:by:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/withcontiguousstorageifavailable(_:)",
                        "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/sequencetype/element",
                        "title": "MLDataValue.SequenceType.Element",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/sequencetype/sequence-implementations",
                    "title": "Sequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldatavalue/sequencetype",
                "title": "MLDataValue.SequenceType",
                "type": "struct"
              },
              {
                "path": "/documentation/createml/mldatavalue/multiarrayvalue",
                "title": "var multiArrayValue: MLDataValue.MultiArrayType?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating an array type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/multiarraytype/init(_:)",
                    "title": "init(MLMultiArray)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/multiarraytype/init(shape:)",
                    "title": "init(shape: [Int])",
                    "type": "init"
                  },
                  {
                    "title": "Getting the array",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/multiarraytype/mlmultiarray",
                    "title": "var mlMultiArray: MLMultiArray",
                    "type": "property"
                  },
                  {
                    "title": "Getting an element",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/multiarraytype/subscript(_:)-17rkk",
                    "title": "subscript(Int) -> Double",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/multiarraytype/subscript(_:)-7lt8q",
                    "title": "subscript([Int]) -> Double",
                    "type": "subscript"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/multiarraytype/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/multiarraytype/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/multiarraytype/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/multiarraytype/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/multiarraytype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/multiarraytype/==(_:_:)",
                        "title": "static func == (MLDataValue.MultiArrayType, MLDataValue.MultiArrayType) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/multiarraytype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/multiarraytype/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/multiarraytype/init(from:)",
                        "title": "init?(from: MLDataValue)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/multiarraytype/datavalue",
                        "title": "var dataValue: MLDataValue",
                        "type": "property"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mldatavalue/multiarraytype/datavaluetype",
                        "title": "static var dataValueType: MLDataValue.ValueType",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/createml/mldatavalue/multiarraytype/mldatavalueconvertible-implementations",
                    "title": "MLDataValueConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mldatavalue/multiarraytype",
                "title": "MLDataValue.MultiArrayType",
                "type": "struct"
              },
              {
                "title": "Comparing data values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/createml/mldatavalue/==(_:_:)",
                "title": "static func == (MLDataValue, MLDataValue) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/createml/mldatavalue/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Describing a data value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mldatavalue/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "title": "Handling errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mldatavalue/invalid",
                "title": "case invalid",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mldatavalue/isvalid",
                "title": "var isValid: Bool",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mldatavalue/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mldatavalue/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/==(_:_:)",
                    "title": "static func == (MLDataValue, MLDataValue) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/createml/mldatavalue/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mldatavalue/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mldatavalue/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mldatavalue",
            "title": "MLDataValue",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Table Visualizations",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:)-2dkfz",
                "title": "func show(MLDataTable) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "title": "Column Visualizations",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:)-5r938",
                "title": "func show<Element>(MLDataColumn<Element>) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:)-9645r",
                "title": "func show(MLUntypedColumn) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "title": "Plot Visualizations",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:_:)-537qb",
                "title": "func show<ElementX, ElementY>(MLDataColumn<ElementX>, MLDataColumn<ElementY>) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:_:)-2tmbf",
                "title": "func show(MLUntypedColumn, MLUntypedColumn) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "title": "Visualization Protocols",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Seeing the visualization",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlvisualizable/cgimage",
                    "title": "var cgImage: CGImage?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlvisualizable",
                "title": "MLVisualizable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Seeing the next visualization",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstreamingvisualizable/hasfinishedstreaming",
                    "title": "var hasFinishedStreaming: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstreamingvisualizable/nextiteration()",
                    "title": "func nextIteration()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlstreamingvisualizable",
                "title": "MLStreamingVisualizable",
                "type": "protocol"
              }
            ],
            "path": "/documentation/createml/data-visualizations",
            "title": "Data Visualizations",
            "type": "collection"
          },
          {
            "title": "Model Accuracy",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/improving-your-model-s-accuracy",
            "title": "Improving Your Model’s Accuracy",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Understanding the model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/classificationerror",
                "title": "var classificationError: Double",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/precisionrecall",
                "title": "var precisionRecall: MLDataTable",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/confusion",
                "title": "var confusion: MLDataTable",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/confusiondataframe",
                "title": "var confusionDataFrame: DataFrame",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/precisionrecalldataframe",
                "title": "var precisionRecallDataFrame: DataFrame",
                "type": "property"
              },
              {
                "title": "Handling errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/isvalid",
                "title": "var isValid: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/error",
                "title": "var error: (any Error)?",
                "type": "property"
              },
              {
                "title": "Creating metrics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/init(classificationerror:confusion:precisionrecall:)",
                "title": "init(classificationError: Double, confusion: MLDataTable, precisionRecall: MLDataTable)",
                "type": "init"
              },
              {
                "title": "Describing metrics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlclassifiermetrics/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlclassifiermetrics/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlclassifiermetrics/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlclassifiermetrics/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlclassifiermetrics/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlclassifiermetrics/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlclassifiermetrics/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlclassifiermetrics",
            "title": "MLClassifierMetrics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Understanding the model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressormetrics/maximumerror",
                "title": "var maximumError: Double",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressormetrics/rootmeansquarederror",
                "title": "var rootMeanSquaredError: Double",
                "type": "property"
              },
              {
                "title": "Handling errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressormetrics/isvalid",
                "title": "var isValid: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressormetrics/error",
                "title": "var error: (any Error)?",
                "type": "property"
              },
              {
                "title": "Creating metrics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressormetrics/init(maximumerror:rootmeansquarederror:)",
                "title": "init(maximumError: Double, rootMeanSquaredError: Double)",
                "type": "init"
              },
              {
                "title": "Describing metrics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlregressormetrics/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressormetrics/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlregressormetrics/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlregressormetrics/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlregressormetrics/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlregressormetrics/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlregressormetrics/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlregressormetrics/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlregressormetrics/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlregressormetrics",
            "title": "MLRegressorMetrics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Analyzing the tagger’s performance",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtaggermetrics/taggingerror",
                "title": "var taggingError: Double",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlwordtaggermetrics/precisionrecall",
                "title": "var precisionRecall: MLDataTable",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlwordtaggermetrics/confusion",
                "title": "var confusion: MLDataTable",
                "type": "property"
              },
              {
                "title": "Handling errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtaggermetrics/isvalid",
                "title": "var isValid: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordtaggermetrics/error",
                "title": "var error: (any Error)?",
                "type": "property"
              },
              {
                "title": "Describing metrics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtaggermetrics/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordtaggermetrics/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordtaggermetrics/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlwordtaggermetrics/confusiondataframe",
                "title": "var confusionDataFrame: DataFrame",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlwordtaggermetrics/precisionrecalldataframe",
                "title": "var precisionRecallDataFrame: DataFrame",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordtaggermetrics/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordtaggermetrics/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlwordtaggermetrics/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlwordtaggermetrics/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlwordtaggermetrics",
            "title": "MLWordTaggerMetrics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Assessing the model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlrecommendermetrics/excludingobserved",
                "title": "let excludingObserved: Bool",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlrecommendermetrics/precisionrecall",
                "title": "var precisionRecall: MLDataTable",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlrecommendermetrics/precisionrecalldataframe",
                "title": "var precisionRecallDataFrame: DataFrame",
                "type": "property"
              },
              {
                "title": "Handling errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlrecommendermetrics/isvalid",
                "title": "var isValid: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlrecommendermetrics/error",
                "title": "let error: (any Error)?",
                "type": "property"
              },
              {
                "title": "Creating metrics",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/mlrecommendermetrics/init(precisionrecall:excludingobserved:)",
                "title": "init(precisionRecall: MLDataTable, excludingObserved: Bool)",
                "type": "init"
              }
            ],
            "path": "/documentation/createml/mlrecommendermetrics",
            "title": "MLRecommenderMetrics",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating metrics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetectormetrics/init(averageprecision:meanaverageprecision:)",
                "title": "init(averagePrecision: (variedIoU: [String : Double], IoU50: [String : Double]), meanAveragePrecision: (variedIoU: Double, IoU50: Double))",
                "type": "init"
              },
              {
                "title": "Assessing the model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetectormetrics/averageprecision",
                "title": "var averagePrecision: (variedIoU: [String : Double], IoU50: [String : Double])",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlobjectdetectormetrics/meanaverageprecision",
                "title": "var meanAveragePrecision: (variedIoU: Double, IoU50: Double)",
                "type": "property"
              },
              {
                "title": "Handling errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetectormetrics/isvalid",
                "title": "var isValid: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlobjectdetectormetrics/error",
                "title": "var error: (any Error)?",
                "type": "property"
              },
              {
                "title": "Describing metrics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlobjectdetectormetrics/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlobjectdetectormetrics/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlobjectdetectormetrics/playgrounddescription",
                "title": "var playgroundDescription: Any",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetectormetrics/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetectormetrics/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetectormetrics/playgrounddescription",
                    "title": "var playgroundDescription: Any",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetectormetrics/customplaygrounddisplayconvertible-implementations",
                "title": "CustomPlaygroundDisplayConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlobjectdetectormetrics/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlobjectdetectormetrics/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlobjectdetectormetrics",
            "title": "MLObjectDetectorMetrics",
            "type": "struct"
          },
          {
            "title": "Model Training Control",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Receiving progress updates",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mljob/checkpoints",
                "title": "var checkpoints: AnyPublisher<MLCheckpoint, Never>",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mljob/result",
                "title": "var result: AnyPublisher<Result, any Error>",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mljob/phase",
                "title": "var phase: AnyPublisher<MLPhase, Never>",
                "type": "property"
              },
              {
                "title": "Managing a job",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mljob/cancel()",
                "title": "func cancel()",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mljob/iscanceled",
                "title": "var isCanceled: Bool",
                "type": "property"
              },
              {
                "title": "Inspecting a job",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mljob/startdate",
                "title": "let startDate: Date",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mljob/progress",
                "title": "let progress: Progress",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a training progress update",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/init(phase:)",
                    "title": "init(phase: MLPhase)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/init(progress:)",
                    "title": "init?(progress: Progress)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting a session’s progress",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/elapsedtime",
                    "title": "var elapsedTime: TimeInterval",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/phase",
                    "title": "var phase: MLPhase",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/itemcount",
                    "title": "var itemCount: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/totalitemcount",
                    "title": "var totalItemCount: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metrics",
                    "title": "var metrics: [MLProgress.Metric : Any]",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Retrieving metric keys",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/accuracy",
                        "title": "case accuracy",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/contentloss",
                        "title": "case contentLoss",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/loss",
                        "title": "case loss",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/maximumerror",
                        "title": "case maximumError",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/rootmeansquarederror",
                        "title": "case rootMeanSquaredError",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/styleloss",
                        "title": "case styleLoss",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/stylizedimageurl",
                        "title": "case stylizedImageURL",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/validationaccuracy",
                        "title": "case validationAccuracy",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/validationloss",
                        "title": "case validationLoss",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/validationmaximumerror",
                        "title": "case validationMaximumError",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/validationrootmeansquarederror",
                        "title": "case validationRootMeanSquaredError",
                        "type": "case"
                      },
                      {
                        "title": "Iterating all metric keys",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/allcases-swift.type.property",
                        "title": "static var allCases: [MLProgress.Metric]",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/allcases-swift.typealias",
                        "title": "MLProgress.Metric.AllCases",
                        "type": "typealias"
                      },
                      {
                        "title": "Creating a key from a string",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/init(rawvalue:)",
                        "title": "init?(rawValue: String)",
                        "type": "init"
                      },
                      {
                        "title": "Getting a key’s string value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/rawvalue-swift.property",
                        "title": "var rawValue: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/rawvalue-swift.typealias",
                        "title": "MLProgress.Metric.RawValue",
                        "type": "typealias"
                      },
                      {
                        "title": "Encoding and decoding a key",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Providing a key’s hash value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Comparing metric keys",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlprogress/metric/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/createml/mlprogress/metric/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlprogress/metric/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlprogress/metric/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/createml/mlprogress/metric/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/createml/mlprogress/metric/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/createml/mlprogress/metric/rawrepresentable-implementations",
                        "title": "RawRepresentable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/createml/mlprogress/metric",
                    "title": "MLProgress.Metric",
                    "type": "enum"
                  },
                  {
                    "title": "Accessing general information",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/elapsedtimekey",
                    "title": "static let elapsedTimeKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/phasekey",
                    "title": "static let phaseKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/itemcountkey",
                    "title": "static let itemCountKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/totalitemcountkey",
                    "title": "static let totalItemCountKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "title": "Accessing assessment metrics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/accuracykey",
                    "title": "static let accuracyKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/losskey",
                    "title": "static let lossKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/validationaccuracykey",
                    "title": "static let validationAccuracyKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/validationlosskey",
                    "title": "static let validationLossKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "title": "Accessing style transfer metrics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/contentlosskey",
                    "title": "static let contentLossKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/stylelosskey",
                    "title": "static let styleLossKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/stylizedimagekey",
                    "title": "static let stylizedImageKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "title": "Accessing error information",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/maximumerrorkey",
                    "title": "static let maximumErrorKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/rootmeansquarederrorkey",
                    "title": "static let rootMeanSquaredErrorKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/validationmaximumerrorkey",
                    "title": "static let validationMaximumErrorKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/validationrootmeansquarederrorkey",
                    "title": "static let validationRootMeanSquaredErrorKey: ProgressUserInfoKey",
                    "type": "property"
                  },
                  {
                    "title": "Encoding and decoding a session’s progress",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/createml/mlprogress",
                "title": "MLProgress",
                "type": "struct"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mljob/store(in:)-8j3pv",
                    "title": "func store(in: inout Set<AnyCancellable>)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mljob/store(in:)-9hvds",
                    "title": "func store<C>(in: inout C)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mljob/cancellable-implementations",
                "title": "Cancellable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mljob",
            "title": "MLJob",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Checking a training session’s progress",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltrainingsession/phase",
                "title": "var phase: MLPhase",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Retrieving session phases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlphase/initialized",
                    "title": "case initialized",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlphase/extractingfeatures",
                    "title": "case extractingFeatures",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlphase/training",
                    "title": "case training",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlphase/evaluating",
                    "title": "case evaluating",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlphase/inferencing",
                    "title": "case inferencing",
                    "type": "case"
                  },
                  {
                    "title": "Creating a phase from a string",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlphase/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Getting a phase’s string value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlphase/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlphase/rawvalue-swift.typealias",
                    "title": "MLPhase.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Encoding and decoding a phase",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlphase/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlphase/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Providing a phase’s hash value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlphase/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlphase/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Comparing phases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlphase/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlphase/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mlphase/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlphase/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlphase/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlphase/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlphase/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlphase/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlphase",
                "title": "MLPhase",
                "type": "enum"
              },
              {
                "path": "/documentation/createml/mltrainingsession/iteration",
                "title": "var iteration: Int",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltrainingsession/checkpoints",
                "title": "var checkpoints: [MLCheckpoint]",
                "type": "property"
              },
              {
                "title": "Removing checkpoints",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltrainingsession/removecheckpoints(_:)",
                "title": "func removeCheckpoints((MLCheckpoint) -> Bool) throws",
                "type": "method"
              },
              {
                "title": "Reusing features from a previous session",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltrainingsession/reuseextractedfeatures(from:)",
                "title": "func reuseExtractedFeatures(from: MLTrainingSession<Task>) throws",
                "type": "method"
              },
              {
                "title": "Inspecting a session",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltrainingsession/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltrainingsession/parameters",
                "title": "let parameters: MLTrainingSessionParameters",
                "type": "property"
              }
            ],
            "path": "/documentation/createml/mltrainingsession",
            "title": "MLTrainingSession",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a session’s parameters",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltrainingsessionparameters/init(sessiondirectory:reportinterval:checkpointinterval:iterations:)",
                "title": "init(sessionDirectory: URL?, reportInterval: Int, checkpointInterval: Int, iterations: Int)",
                "type": "init"
              },
              {
                "title": "Configuring the session’s parameters",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mltrainingsessionparameters/sessiondirectory",
                "title": "let sessionDirectory: URL?",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltrainingsessionparameters/reportinterval",
                "title": "var reportInterval: Int",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltrainingsessionparameters/checkpointinterval",
                "title": "var checkpointInterval: Int",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mltrainingsessionparameters/iterations",
                "title": "var iterations: Int",
                "type": "property"
              }
            ],
            "path": "/documentation/createml/mltrainingsessionparameters",
            "title": "MLTrainingSessionParameters",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Inspecting a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlcheckpoint/phase",
                "title": "var phase: MLPhase",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcheckpoint/iteration",
                "title": "var iteration: Int",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcheckpoint/date",
                "title": "var date: Date",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcheckpoint/url",
                "title": "var url: URL",
                "type": "property"
              },
              {
                "title": "Assessing a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlcheckpoint/metrics",
                "title": "var metrics: [MLProgress.Metric : Any]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Retrieving metric keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/accuracy",
                    "title": "case accuracy",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/contentloss",
                    "title": "case contentLoss",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/loss",
                    "title": "case loss",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/maximumerror",
                    "title": "case maximumError",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/rootmeansquarederror",
                    "title": "case rootMeanSquaredError",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/styleloss",
                    "title": "case styleLoss",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/stylizedimageurl",
                    "title": "case stylizedImageURL",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/validationaccuracy",
                    "title": "case validationAccuracy",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/validationloss",
                    "title": "case validationLoss",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/validationmaximumerror",
                    "title": "case validationMaximumError",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/validationrootmeansquarederror",
                    "title": "case validationRootMeanSquaredError",
                    "type": "case"
                  },
                  {
                    "title": "Iterating all metric keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/allcases-swift.type.property",
                    "title": "static var allCases: [MLProgress.Metric]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/allcases-swift.typealias",
                    "title": "MLProgress.Metric.AllCases",
                    "type": "typealias"
                  },
                  {
                    "title": "Creating a key from a string",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Getting a key’s string value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/rawvalue-swift.typealias",
                    "title": "MLProgress.Metric.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Encoding and decoding a key",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  },
                  {
                    "title": "Providing a key’s hash value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Comparing metric keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlprogress/metric/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/createml/mlprogress/metric/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/createml/mlprogress/metric/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/createml/mlprogress/metric/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/createml/mlprogress/metric",
                "title": "MLProgress.Metric",
                "type": "enum"
              },
              {
                "title": "Encoding and decoding a checkpoint",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlcheckpoint/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlcheckpoint/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              }
            ],
            "path": "/documentation/createml/mlcheckpoint",
            "title": "MLCheckpoint",
            "type": "struct"
          },
          {
            "title": "Supporting Types",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Identifying errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlcreateerror/cancelled",
                "title": "case cancelled",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlcreateerror/incompatibleparameters(parameter:originalvalue:newvalue:)",
                "title": "case incompatibleParameters(parameter: String, originalValue: String, newValue: String)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlcreateerror/modifiedtrainingdata",
                "title": "case modifiedTrainingData",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlcreateerror/io(reason:)",
                "title": "case io(reason: String)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlcreateerror/type(reason:)",
                "title": "case type(reason: String)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlcreateerror/generic(reason:)",
                "title": "case generic(reason: String)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlcreateerrordomain",
                "title": "let MLCreateErrorDomain: String",
                "type": "var"
              },
              {
                "title": "Describing errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlcreateerror/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcreateerror/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "title": "Describing errors in a user interface",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlcreateerror/errordomain-8raky",
                "title": "static var errorDomain: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcreateerror/localizeddescription",
                "title": "var localizedDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcreateerror/errorcode",
                "title": "var errorCode: Int",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcreateerror/erroruserinfo",
                "title": "var errorUserInfo: [String : Any]",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcreateerror/errordescription",
                "title": "var errorDescription: String?",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcreateerror/failurereason",
                "title": "var failureReason: String?",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcreateerror/helpanchor",
                "title": "var helpAnchor: String?",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlcreateerror/recoverysuggestion",
                "title": "var recoverySuggestion: String?",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlcreateerror/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/errorcode",
                    "title": "var errorCode: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/errorcode-901va",
                    "title": "var errorCode: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/erroruserinfo",
                    "title": "var errorUserInfo: [String : Any]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/erroruserinfo-8oozt",
                    "title": "var errorUserInfo: [String : Any]",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/errordomain",
                    "title": "static var errorDomain: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/errordomain-8raky",
                    "title": "static var errorDomain: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlcreateerror/customnserror-implementations",
                "title": "CustomNSError Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlcreateerror/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlcreateerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/errordescription",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/errordescription-3tgao",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/failurereason",
                    "title": "var failureReason: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/failurereason-7k8tc",
                    "title": "var failureReason: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/helpanchor",
                    "title": "var helpAnchor: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlcreateerror/recoverysuggestion",
                    "title": "var recoverySuggestion: String?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlcreateerror/localizederror-implementations",
                "title": "LocalizedError Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlcreateerror",
            "title": "MLCreateError",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Creating metadata",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlmodelmetadata/init(author:shortdescription:license:version:additional:)",
                "title": "init(author: String, shortDescription: String, license: String?, version: String, additional: [String : String]?)",
                "type": "init"
              },
              {
                "title": "Accessing metadata",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlmodelmetadata/author",
                "title": "var author: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlmodelmetadata/shortdescription",
                "title": "var shortDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlmodelmetadata/license",
                "title": "var license: String?",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlmodelmetadata/version",
                "title": "var version: String",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlmodelmetadata/additional",
                "title": "var additional: [String : String]?",
                "type": "property"
              }
            ],
            "path": "/documentation/createml/mlmodelmetadata",
            "title": "MLModelMetadata",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Partitioning data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlsplitstrategy/automatic",
                "title": "case automatic",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlsplitstrategy/fixed(ratio:seed:)",
                "title": "case fixed(ratio: Double, seed: Int?)",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlsplitstrategy/resolve(count:)",
                "title": "func resolve(count: Int) -> (ratio: Double, seed: Int)",
                "type": "method"
              },
              {
                "title": "Creating a random seed",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/timestampseed()",
                "title": "func timestampSeed() -> Int",
                "type": "func"
              }
            ],
            "path": "/documentation/createml/mlsplitstrategy",
            "title": "MLSplitStrategy",
            "type": "enum"
          },
          {
            "title": "Articles",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/createml/recording-or-choosing-training-videos",
            "title": "Gathering Training Videos for an Action Classifier",
            "type": "article"
          },
          {
            "path": "/documentation/createml/creating-a-classification-model-for-natural-language",
            "title": "Creating a Text Classifier Model",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Table Visualizations",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:)-2dkfz",
                "title": "func show(MLDataTable) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "title": "Column Visualizations",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:)-5r938",
                "title": "func show<Element>(MLDataColumn<Element>) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:)-9645r",
                "title": "func show(MLUntypedColumn) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "title": "Plot Visualizations",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:_:)-537qb",
                "title": "func show<ElementX, ElementY>(MLDataColumn<ElementX>, MLDataColumn<ElementY>) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "deprecated": true,
                "path": "/documentation/createml/show(_:_:)-2tmbf",
                "title": "func show(MLUntypedColumn, MLUntypedColumn) -> any MLStreamingVisualizable",
                "type": "func"
              },
              {
                "title": "Visualization Protocols",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Seeing the visualization",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlvisualizable/cgimage",
                    "title": "var cgImage: CGImage?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/createml/mlvisualizable",
                "title": "MLVisualizable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Seeing the next visualization",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlstreamingvisualizable/hasfinishedstreaming",
                    "title": "var hasFinishedStreaming: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/createml/mlstreamingvisualizable/nextiteration()",
                    "title": "func nextIteration()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/createml/mlstreamingvisualizable",
                "title": "MLStreamingVisualizable",
                "type": "protocol"
              }
            ],
            "path": "/documentation/createml/create-ml-utilties",
            "title": "Data Visualizations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an Augmentation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(arrayliteral:)",
                "title": "init(arrayLiteral: Self.Element...)",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(rawvalue:)",
                "title": "init(rawValue: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(_:)",
                "title": "init<S>(S)",
                "type": "init"
              },
              {
                "title": "Inspecting an Augmentation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isempty",
                "title": "var isEmpty: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/rawvalue-swift.property",
                "title": "let rawValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/contains(_:)",
                "title": "func contains(Self) -> Bool",
                "type": "method"
              },
              {
                "title": "Adding an Augmentation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/insert(_:)",
                "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/update(with:)",
                "title": "func update(with: Self.Element) -> Self.Element?",
                "type": "method"
              },
              {
                "title": "Combining Augmentations",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/union(_:)",
                "title": "func union(Self) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formunion(_:)",
                "title": "func formUnion(Self)",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/intersection(_:)",
                "title": "func intersection(Self) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formintersection(_:)",
                "title": "func formIntersection(Self)",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/symmetricdifference(_:)",
                "title": "func symmetricDifference(Self) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/formsymmetricdifference(_:)",
                "title": "func formSymmetricDifference(Self)",
                "type": "method"
              },
              {
                "title": "Removing an Augmentation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/remove(_:)",
                "title": "func remove(Self.Element) -> Self.Element?",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtract(_:)",
                "title": "func subtract(Self)",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/subtracting(_:)",
                "title": "func subtracting(Self) -> Self",
                "type": "method"
              },
              {
                "title": "Comparing Augmentations",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isdisjoint(with:)",
                "title": "func isDisjoint(with: Self) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issubset(of:)",
                "title": "func isSubset(of: Self) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsubset(of:)",
                "title": "func isStrictSubset(of: Self) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/issuperset(of:)",
                "title": "func isSuperset(of: Self) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/isstrictsuperset(of:)",
                "title": "func isStrictSuperset(of: Self) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Encoding and Decoding an Augmentation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlhandactionclassifier/videoaugmentationoptions/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              }
            ],
            "path": "/documentation/createml/option-set-support",
            "title": "Option Set Support",
            "type": "collection"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Designating anchors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxanchor/center",
                "title": "case center",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlboundingboxanchor/topleft",
                "title": "case topLeft",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlboundingboxanchor/bottomleft",
                "title": "case bottomLeft",
                "type": "case"
              },
              {
                "title": "Comparing errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxanchor/==(_:_:)",
                "title": "static func == (MLBoundingBoxAnchor, MLBoundingBoxAnchor) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/createml/mlboundingboxanchor/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Getting the hash value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxanchor/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlboundingboxanchor/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboundingboxanchor/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/createml/mlboundingboxanchor/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlboundingboxanchor",
            "title": "MLBoundingBoxAnchor",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Designating origins",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxcoordinatesorigin/topleft",
                "title": "case topLeft",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlboundingboxcoordinatesorigin/bottomleft",
                "title": "case bottomLeft",
                "type": "case"
              },
              {
                "title": "Comparing errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxcoordinatesorigin/==(_:_:)",
                "title": "static func == (MLBoundingBoxCoordinatesOrigin, MLBoundingBoxCoordinatesOrigin) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/createml/mlboundingboxcoordinatesorigin/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Getting the hash value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxcoordinatesorigin/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlboundingboxcoordinatesorigin/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboundingboxcoordinatesorigin/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/createml/mlboundingboxcoordinatesorigin/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlboundingboxcoordinatesorigin",
            "title": "MLBoundingBoxCoordinatesOrigin",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Designating units",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxunits/pixel",
                "title": "case pixel",
                "type": "case"
              },
              {
                "path": "/documentation/createml/mlboundingboxunits/normalized",
                "title": "case normalized",
                "type": "case"
              },
              {
                "title": "Comparing errors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxunits/==(_:_:)",
                "title": "static func == (MLBoundingBoxUnits, MLBoundingBoxUnits) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/createml/mlboundingboxunits/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Getting the hash value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/createml/mlboundingboxunits/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/createml/mlboundingboxunits/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/createml/mlboundingboxunits/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/createml/mlboundingboxunits/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/createml/mlboundingboxunits",
            "title": "MLBoundingBoxUnits",
            "type": "enum"
          }
        ],
        "path": "/documentation/createml",
        "title": "Create ML",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
