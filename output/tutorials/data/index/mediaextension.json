{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Format readers",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/mediaextension/format-reader-property-list-dictionaries",
            "title": "Format reader property list dictionaries",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/format-reader-entitlement",
            "title": "Format reader entitlement",
            "type": "article"
          },
          {
            "title": "Track readers",
            "type": "groupMarker"
          },
          {
            "title": "Sample cursors",
            "type": "groupMarker"
          },
          {
            "title": "Byte sources",
            "type": "groupMarker"
          },
          {
            "title": "Video decoders",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/mediaextension/video-decoder-property-list-dictionary",
            "title": "Video decoder property list dictionary",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/video-decoder-entitlement",
            "title": "Video decoder entitlement",
            "type": "article"
          },
          {
            "title": "RAW processors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/mediaextension/raw-processor-property-list-dictionary",
            "title": "RAW processor property list dictionary",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/raw-processor-entitlement",
            "title": "RAW processor entitlement",
            "type": "article"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/mediaextension",
        "title": "MediaExtension",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Format readers",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Reading and parsing media assets",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meformatreader/loadfileinfo(completionhandler:)",
                "title": "- loadFileInfoWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/meformatreader/loadmetadata(completionhandler:)",
                "title": "- loadMetadataWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/meformatreader/loadtrackreaders(completionhandler:)",
                "title": "- loadTrackReadersWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/meformatreader/parseadditionalfragments(completionhandler:)",
                "title": "- parseAdditionalFragmentsWithCompletionHandler:",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Evaluating a fragment parsing operation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/sizeincreased",
                    "title": "MEFormatReaderParseAdditionalFragmentsStatusSizeIncreased",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/fragmentadded",
                    "title": "MEFormatReaderParseAdditionalFragmentsStatusFragmentAdded",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/fragmentscomplete",
                    "title": "MEFormatReaderParseAdditionalFragmentsStatusFragmentsComplete",
                    "type": "case"
                  }
                ],
                "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus",
                "title": "MEFormatReaderParseAdditionalFragmentsStatus",
                "type": "enum"
              },
              {
                "title": "Extension requirements",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Property list keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderclassimplementationidkey",
                    "title": "kMEFormatReaderClassImplementationIDKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderextensionpointname",
                    "title": "kMEFormatReaderExtensionPointName",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderfilenameextensionarraykey",
                    "title": "kMEFormatReaderFileNameExtensionArrayKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderuttypearraykey",
                    "title": "kMEFormatReaderUTTypeArrayKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderobjectnamekey",
                    "title": "kMEFormatReaderObjectNameKey",
                    "type": "macro"
                  }
                ],
                "path": "/documentation/mediaextension/format-reader-property-list-dictionaries",
                "title": "Format reader property list dictionaries",
                "type": "collection"
              },
              {
                "path": "/documentation/mediaextension/format-reader-entitlement",
                "title": "Format reader entitlement",
                "type": "article"
              }
            ],
            "path": "/documentation/mediaextension/meformatreader",
            "title": "MEFormatReader",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a format reader",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meformatreaderextension/init()",
                "title": "- init",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/meformatreaderextension/formatreader(with:options:)",
                "title": "- formatReaderWithByteSource:options:error:",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/meformatreaderextension",
            "title": "MEFormatReaderExtension",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Inspecting format reader extension options",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meformatreaderinstantiationoptions/allowincrementalfragmentparsing",
                "title": "allowIncrementalFragmentParsing",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/meformatreaderinstantiationoptions",
            "title": "MEFormatReaderInstantiationOptions",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Inspecting file properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mefileinfo/duration",
                "title": "duration",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.property",
                "title": "fragmentsStatus",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "File fragment status values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/couldnotcontainfragments",
                    "title": "MEFileInfoCouldNotContainFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/containsfragments",
                    "title": "MEFileInfoContainsFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/couldcontainbutdoesnotcontainfragments",
                    "title": "MEFileInfoCouldContainButDoesNotContainFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/couldnotcontainfragments",
                    "title": "MEFileInfoCouldNotContainFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/containsfragments",
                    "title": "MEFileInfoContainsFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/couldcontainbutdoesnotcontainfragments",
                    "title": "MEFileInfoCouldContainButDoesNotContainFragments",
                    "type": "case"
                  }
                ],
                "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum",
                "title": "MEFileInfoFragmentsStatus",
                "type": "enum"
              }
            ],
            "path": "/documentation/mediaextension/mefileinfo",
            "title": "MEFileInfo",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderclassimplementationidkey",
                "title": "kMEFormatReaderClassImplementationIDKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderextensionpointname",
                "title": "kMEFormatReaderExtensionPointName",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderfilenameextensionarraykey",
                "title": "kMEFormatReaderFileNameExtensionArrayKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderuttypearraykey",
                "title": "kMEFormatReaderUTTypeArrayKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderobjectnamekey",
                "title": "kMEFormatReaderObjectNameKey",
                "type": "macro"
              }
            ],
            "path": "/documentation/mediaextension/format-reader-property-list-dictionaries",
            "title": "Format reader property list dictionaries",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/format-reader-entitlement",
            "title": "Format reader entitlement",
            "type": "article"
          },
          {
            "title": "Track readers",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting track information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loadtrackinfo(completionhandler:)",
                "title": "- loadTrackInfoWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/generatesamplecursor(atpresentationtimestamp:completionhandler:)",
                "title": "- generateSampleCursorAtPresentationTimeStamp:completionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/generatesamplecursoratfirstsampleindecodeorder(completionhandler:)",
                "title": "- generateSampleCursorAtFirstSampleInDecodeOrderWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/generatesamplecursoratlastsampleindecodeorder(completionhandler:)",
                "title": "- generateSampleCursorAtLastSampleInDecodeOrderWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loaduneditedduration(completionhandler:)",
                "title": "- loadUneditedDurationWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loadtotalsampledatalength(completionhandler:)",
                "title": "- loadTotalSampleDataLengthWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loadestimateddatarate(completionhandler:)",
                "title": "- loadEstimatedDataRateWithCompletionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loadmetadata(completionhandler:)",
                "title": "- loadMetadataWithCompletionHandler:",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/metrackreader",
            "title": "METrackReader",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating track info objects",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/initwithmediatype:trackid:formatdescriptions:",
                "title": "- initWithMediaType:trackID:formatDescriptions:",
                "type": "method"
              },
              {
                "title": "Inspecting track information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/mediatype",
                "title": "mediaType",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/trackid",
                "title": "trackID",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/isenabled",
                "title": "enabled",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/formatdescriptions",
                "title": "formatDescriptions",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/naturaltimescale",
                "title": "naturalTimescale",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/extendedlanguagetag",
                "title": "extendedLanguageTag",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/naturalsize",
                "title": "naturalSize",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/preferredtransform",
                "title": "preferredTransform",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/nominalframerate",
                "title": "nominalFrameRate",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/requiresframereordering",
                "title": "requiresFrameReordering",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/trackedits",
                "title": "trackEdits",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/metrackinfo",
            "title": "METrackInfo",
            "type": "class"
          },
          {
            "title": "Sample cursors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a sample cursor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/presentationtimestamp",
                "title": "presentationTimeStamp",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/decodetimestamp",
                "title": "decodeTimeStamp",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/currentsampleduration",
                "title": "currentSampleDuration",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/currentsampleformatdescription",
                "title": "currentSampleFormatDescription",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/syncinfo",
                "title": "syncInfo",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/dependencyinfo",
                "title": "dependencyInfo",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/hevcdependencyinfo",
                "title": "hevcDependencyInfo",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/decodetimeoflastsamplereachablebyforwardsteppingthatisalreadyloadedbybytesource",
                "title": "decodeTimeOfLastSampleReachableByForwardSteppingThatIsAlreadyLoadedByByteSource",
                "type": "property"
              },
              {
                "title": "Stepping through samples",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/sampleswithearlierdtssmayhavelaterptss(than:)",
                "title": "- samplesWithEarlierDTSsMayHaveLaterPTSsThanCursor:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/sampleswithlaterdtssmayhaveearlierptss(than:)",
                "title": "- samplesWithLaterDTSsMayHaveEarlierPTSsThanCursor:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/estimatedsamplelocation()",
                "title": "- estimatedSampleLocationReturningError:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/refinesamplelocation(_:refinementdata:refinementdatalength:refinedlocation:)",
                "title": "- refineSampleLocation:refinementData:refinementDataLength:refinedLocation:error:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/stepbydecodetime(_:completionhandler:)",
                "title": "- stepByDecodeTime:completionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/stepbypresentationtime(_:completionhandler:)",
                "title": "- stepByPresentationTime:completionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/stepindecodeorder(by:completionhandler:)",
                "title": "- stepInDecodeOrderByCount:completionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/stepinpresentationorder(by:completionhandler:)",
                "title": "- stepInPresentationOrderByCount:completionHandler:",
                "type": "method"
              },
              {
                "title": "Sending samples to a pipeline",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/chunkdetails()",
                "title": "- chunkDetailsReturningError:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/samplelocation()",
                "title": "- sampleLocationReturningError:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/loadsamplebuffercontainingsamples(to:completionhandler:)",
                "title": "- loadSampleBufferContainingSamplesToEndCursor:completionHandler:",
                "type": "method"
              },
              {
                "title": "RAW processing metadata",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/loadpostdecodeprocessingmetadata(completionhandler:)",
                "title": "- loadPostDecodeProcessingMetadataWithCompletionHandler:",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/mesamplecursor",
            "title": "MESampleCursor",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a sample location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplelocation/init(bytesource:samplelocation:)",
                "title": "- initWithByteSource:sampleLocation:",
                "type": "method"
              },
              {
                "title": "Inspecting a sample location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplelocation/bytesource",
                "title": "byteSource",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplelocation/samplelocation",
                "title": "sampleLocation",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/mesamplelocation",
            "title": "MESampleLocation",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a sample cursor chunk",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/init(bytesource:chunkstoragerange:chunkinfo:sampleindexwithinchunk:)",
                "title": "- initWithByteSource:chunkStorageRange:chunkInfo:sampleIndexWithinChunk:",
                "type": "method"
              },
              {
                "title": "Inspecting a chunk",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/bytesource",
                "title": "byteSource",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/chunkstoragerange",
                "title": "chunkStorageRange",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/chunkinfo",
                "title": "chunkInfo",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/sampleindexwithinchunk",
                "title": "sampleIndexWithinChunk",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/mesamplecursorchunk",
            "title": "MESampleCursorChunk",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating an estimated sample location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meestimatedsamplelocation/init(bytesource:estimatedsamplelocation:refinementdatalocation:)",
                "title": "- initWithByteSource:estimatedSampleLocation:refinementDataLocation:",
                "type": "method"
              },
              {
                "title": "Inspecting an estimated sample location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meestimatedsamplelocation/bytesource",
                "title": "byteSource",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meestimatedsamplelocation/estimatedsamplelocation",
                "title": "estimatedSampleLocation",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meestimatedsamplelocation/refinementdatalocation",
                "title": "refinementDataLocation",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/meestimatedsamplelocation",
            "title": "MEEstimatedSampleLocation",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Inspecting the HEVC dependency attributes of a sample",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/hastemporalsublayeraccess",
                "title": "temporalSubLayerAccess",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/hasstepwisetemporalsublayeraccess",
                "title": "stepwiseTemporalSubLayerAccess",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/syncsamplenalunittype",
                "title": "syncSampleNALUnitType",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/temporallevel",
                "title": "temporalLevel",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/profilespace",
                "title": "profileSpace",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/tierflag",
                "title": "tierFlag",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/profileindex",
                "title": "profileIndex",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/profilecompatibilityflags",
                "title": "profileCompatibilityFlags",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/constraintindicatorflags",
                "title": "constraintIndicatorFlags",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/levelindex",
                "title": "levelIndex",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/mehevcdependencyinfo",
            "title": "MEHEVCDependencyInfo",
            "type": "class"
          },
          {
            "title": "Byte sources",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a byte source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/filename",
                "title": "fileName",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/filelength",
                "title": "fileLength",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/contenttype",
                "title": "contentType",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/relatedfilenamesinsamedirectory",
                "title": "relatedFileNamesInSameDirectory",
                "type": "property"
              },
              {
                "title": "Performing operations on a byte source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/availablelength(at:)",
                "title": "- availableLengthAtOffset:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/bytesourceforrelatedfilename(_:)",
                "title": "- byteSourceForRelatedFileName:error:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/read(length:from:completionhandler:)",
                "title": "- readDataOfLength:fromOffset:completionHandler:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/readdataoflength:fromoffset:todestination:bytesread:error:",
                "title": "- readDataOfLength:fromOffset:toDestination:bytesRead:error:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/readdataoflength:fromoffset:todestination:completionhandler:",
                "title": "- readDataOfLength:fromOffset:toDestination:completionHandler:",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/mebytesource",
            "title": "MEByteSource",
            "type": "class"
          },
          {
            "title": "Video decoders",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a video decoder",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/contenthasinterframedependencies",
                "title": "contentHasInterframeDependencies",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/recommendedthreadcount",
                "title": "recommendedThreadCount",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/actualthreadcount",
                "title": "actualThreadCount",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/supportedpixelformatsorderedbyquality",
                "title": "supportedPixelFormatsOrderedByQuality",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/reducedresolution",
                "title": "reducedResolution",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/pixelformatswithreducedresolutiondecodesupport",
                "title": "pixelFormatsWithReducedResolutionDecodeSupport",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/producesrawoutput",
                "title": "producesRAWOutput",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/isreadyformoremediadata",
                "title": "readyForMoreMediaData",
                "type": "property"
              },
              {
                "title": "Decoding frames",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/canaccept(_:)",
                "title": "- canAcceptFormatDescription:",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/decodeframe(from:options:completionhandler:)",
                "title": "- decodeFrameFromSampleBuffer:options:completionHandler:",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Inspecting a status",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/medecodeframestatus/framedropped",
                    "title": "MEDecodeFrameFrameDropped",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/medecodeframestatus/medecodeframenostatus",
                    "title": "MEDecodeFrameNoStatus",
                    "type": "case"
                  }
                ],
                "path": "/documentation/mediaextension/medecodeframestatus",
                "title": "MEDecodeFrameStatus",
                "type": "enum"
              },
              {
                "title": "Notifications",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderreadyformoremediadatadidchangenotification",
                "title": "MEVideoDecoderReadyForMoreMediaDataDidChangeNotification",
                "type": "var"
              },
              {
                "title": "Extension requirements",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Property list keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderclassimplementationidkey",
                    "title": "kMEVideoDecoderClassImplementationIDKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderextensionpointname",
                    "title": "kMEVideoDecoderExtensionPointName",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderobjectnamekey",
                    "title": "kMEVideoDecoderObjectNameKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodecinfokey",
                    "title": "kMEVideoDecoderCodecInfoKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodectypekey",
                    "title": "kMEVideoDecoderCodecTypeKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodecnamekey",
                    "title": "kMEVideoDecoderCodecNameKey",
                    "type": "macro"
                  }
                ],
                "path": "/documentation/mediaextension/video-decoder-property-list-dictionary",
                "title": "Video decoder property list dictionary",
                "type": "collection"
              },
              {
                "path": "/documentation/mediaextension/video-decoder-entitlement",
                "title": "Video decoder entitlement",
                "type": "article"
              }
            ],
            "path": "/documentation/mediaextension/mevideodecoder",
            "title": "MEVideoDecoder",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a video decoder",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderextension/init()",
                "title": "- init",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderextension/makevideodecoder(codectype:videoformatdescription:videodecoderspecifications:pixelbuffermanager:)",
                "title": "- videoDecoderWithCodecType:videoFormatDescription:videoDecoderSpecifications:extensionDecoderPixelBufferManager:error:",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/mevideodecoderextension",
            "title": "MEVideoDecoderExtension",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Inspecting frame decoding options",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/medecodeframeoptions/donotoutputframe",
                "title": "doNotOutputFrame",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/medecodeframeoptions/realtimeplayback",
                "title": "realTimePlayback",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/medecodeframeoptions",
            "title": "MEDecodeFrameOptions",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a pixel buffer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderpixelbuffermanager/pixelbufferattributes",
                "title": "pixelBufferAttributes",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderpixelbuffermanager/makepixelbuffer()",
                "title": "- createPixelBufferAndReturnError:",
                "type": "method"
              },
              {
                "title": "Registering Custom Pixel Formats",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderpixelbuffermanager/registercustompixelformat(_:)",
                "title": "- registerCustomPixelFormat:",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/mevideodecoderpixelbuffermanager",
            "title": "MEVideoDecoderPixelBufferManager",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderclassimplementationidkey",
                "title": "kMEVideoDecoderClassImplementationIDKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderextensionpointname",
                "title": "kMEVideoDecoderExtensionPointName",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderobjectnamekey",
                "title": "kMEVideoDecoderObjectNameKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodecinfokey",
                "title": "kMEVideoDecoderCodecInfoKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodectypekey",
                "title": "kMEVideoDecoderCodecTypeKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodecnamekey",
                "title": "kMEVideoDecoderCodecNameKey",
                "type": "macro"
              }
            ],
            "path": "/documentation/mediaextension/video-decoder-property-list-dictionary",
            "title": "Video decoder property list dictionary",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/video-decoder-entitlement",
            "title": "Video decoder entitlement",
            "type": "article"
          },
          {
            "title": "RAW processors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a RAW processor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/metaldeviceregistryid",
                "title": "metalDeviceRegistryID",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/outputcolorattachments",
                "title": "outputColorAttachments",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/processingparameters",
                "title": "processingParameters",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/isreadyformoremediadata",
                "title": "readyForMoreMediaData",
                "type": "property"
              },
              {
                "title": "Processing RAW frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/processframe(fromimagebuffer:completionhandler:)",
                "title": "- processFrameFromImageBuffer:completionHandler:",
                "type": "method"
              },
              {
                "title": "Extension requirements",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Property list keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderclassimplementationidkey",
                    "title": "kMEVideoDecoderClassImplementationIDKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmerawprocessorextensionpointname",
                    "title": "kMERAWProcessorExtensionPointName",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderobjectnamekey",
                    "title": "kMEVideoDecoderObjectNameKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodecinfokey",
                    "title": "kMEVideoDecoderCodecInfoKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodectypekey",
                    "title": "kMEVideoDecoderCodecTypeKey",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodecnamekey",
                    "title": "kMEVideoDecoderCodecNameKey",
                    "type": "macro"
                  }
                ],
                "path": "/documentation/mediaextension/raw-processor-property-list-dictionary",
                "title": "RAW processor property list dictionary",
                "type": "collection"
              },
              {
                "path": "/documentation/mediaextension/raw-processor-entitlement",
                "title": "RAW processor entitlement",
                "type": "article"
              },
              {
                "title": "Notifications",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorreadyformoremediadatadidchangenotification",
                "title": "MERAWProcessorReadyForMoreMediaDataDidChangeNotification",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorvaluesdidchangenotification",
                "title": "MERAWProcessorValuesDidChangeNotification",
                "type": "var"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessor",
            "title": "MERAWProcessor",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating an extension",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorextension/init()",
                "title": "- init",
                "type": "method"
              },
              {
                "title": "Creating a RAW processor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorextension/makeprocessor(formatdescription:pixelbuffermanager:)",
                "title": "- processorWithFormatDescription:extensionPixelBufferManager:error:",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessorextension",
            "title": "MERAWProcessorExtension",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a pixel buffer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorpixelbuffermanager/pixelbufferattributes-2cki6",
                "title": "pixelBufferAttributes",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorpixelbuffermanager/makepixelbuffer()",
                "title": "- createPixelBufferAndReturnError:",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessorpixelbuffermanager",
            "title": "MERAWProcessorPixelBufferManager",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Inspecting a processing parameter",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/enabled",
                "title": "enabled",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/key",
                "title": "key",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/longdescription",
                "title": "longDescription",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/name",
                "title": "name",
                "type": "property"
              },
              {
                "title": "Processing parameters",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a boolean parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingbooleanparameter/initwithname:key:description:initialvalue:",
                    "title": "- initWithName:key:description:initialValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingbooleanparameter/initwithname:key:description:initialvalue:cameravalue:",
                    "title": "- initWithName:key:description:initialValue:cameraValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingbooleanparameter/initwithname:key:description:initialvalue:neutralvalue:",
                    "title": "- initWithName:key:description:initialValue:neutralValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingbooleanparameter/initwithname:key:description:initialvalue:neutralvalue:cameravalue:",
                    "title": "- initWithName:key:description:initialValue:neutralValue:cameraValue:",
                    "type": "method"
                  },
                  {
                    "title": "Inspecting a parameter",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingbooleanparameter/hascameravalue:",
                    "title": "- hasCameraValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingbooleanparameter/hasneutralvalue:",
                    "title": "- hasNeutralValue:",
                    "type": "method"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/boolean/currentvalue",
                    "title": "currentValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/boolean/initialvalue",
                    "title": "initialValue",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/boolean",
                "title": "MERAWProcessingBooleanParameter",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a floating-point parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingfloatparameter/initwithname:key:description:initialvalue:maximum:minimum:",
                    "title": "- initWithName:key:description:initialValue:maximum:minimum:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingfloatparameter/initwithname:key:description:initialvalue:maximum:minimum:cameravalue:",
                    "title": "- initWithName:key:description:initialValue:maximum:minimum:cameraValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingfloatparameter/initwithname:key:description:initialvalue:maximum:minimum:neutralvalue:",
                    "title": "- initWithName:key:description:initialValue:maximum:minimum:neutralValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingfloatparameter/initwithname:key:description:initialvalue:maximum:minimum:neutralvalue:cameravalue:",
                    "title": "- initWithName:key:description:initialValue:maximum:minimum:neutralValue:cameraValue:",
                    "type": "method"
                  },
                  {
                    "title": "Inspecting a parameter",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingfloatparameter/hascameravalue:",
                    "title": "- hasCameraValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingfloatparameter/hasneutralvalue:",
                    "title": "- hasNeutralValue:",
                    "type": "method"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/currentvalue",
                    "title": "currentValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/initialvalue",
                    "title": "initialValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/maximumvalue",
                    "title": "maximumValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/minimumvalue",
                    "title": "minimumValue",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint",
                "title": "MERAWProcessingFloatParameter",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating an integer parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingintegerparameter/initwithname:key:description:initialvalue:maximum:minimum:",
                    "title": "- initWithName:key:description:initialValue:maximum:minimum:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingintegerparameter/initwithname:key:description:initialvalue:maximum:minimum:cameravalue:",
                    "title": "- initWithName:key:description:initialValue:maximum:minimum:cameraValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingintegerparameter/initwithname:key:description:initialvalue:maximum:minimum:neutralvalue:",
                    "title": "- initWithName:key:description:initialValue:maximum:minimum:neutralValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingintegerparameter/initwithname:key:description:initialvalue:maximum:minimum:neutralvalue:cameravalue:",
                    "title": "- initWithName:key:description:initialValue:maximum:minimum:neutralValue:cameraValue:",
                    "type": "method"
                  },
                  {
                    "title": "Inspecting a parameter",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingintegerparameter/hascameravalue:",
                    "title": "- hasCameraValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingintegerparameter/hasneutralvalue:",
                    "title": "- hasNeutralValue:",
                    "type": "method"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/currentvalue",
                    "title": "currentValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/initialvalue",
                    "title": "initialValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/maximumvalue",
                    "title": "maximumValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/minimumvalue",
                    "title": "minimumValue",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/integer",
                "title": "MERAWProcessingIntegerParameter",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a list parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessinglistparameter/initwithname:key:description:list:initialvalue:",
                    "title": "- initWithName:key:description:list:initialValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessinglistparameter/initwithname:key:description:list:initialvalue:cameravalue:",
                    "title": "- initWithName:key:description:list:initialValue:cameraValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessinglistparameter/initwithname:key:description:list:initialvalue:neutralvalue:",
                    "title": "- initWithName:key:description:list:initialValue:neutralValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessinglistparameter/initwithname:key:description:list:initialvalue:neutralvalue:cameravalue:",
                    "title": "- initWithName:key:description:list:initialValue:neutralValue:cameraValue:",
                    "type": "method"
                  },
                  {
                    "title": "Inspecting a parameter",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessinglistparameter/hascameravalue:",
                    "title": "- hasCameraValue:",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessinglistparameter/hasneutralvalue:",
                    "title": "- hasNeutralValue:",
                    "type": "method"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/currentvalue",
                    "title": "currentValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/initialvalue",
                    "title": "initialValue",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/listelements",
                    "title": "listElements",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/list",
                "title": "MERAWProcessingListParameter",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a list element parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/listelement/init(name:description:elementid:)",
                    "title": "- initWithName:description:elementID:",
                    "type": "method"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/listelement/listelementid",
                    "title": "listElementID",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/listelement",
                "title": "MERAWProcessingListElementParameter",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a sub group parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/subgroup/init(name:description:parameters:)",
                    "title": "- initWithName:description:parameters:",
                    "type": "method"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/subgroup/subgroupparameters",
                    "title": "subGroupParameters",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/subgroup",
                "title": "MERAWProcessingSubGroupParameter",
                "type": "class"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessingparameter",
            "title": "MERAWProcessingParameter",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderclassimplementationidkey",
                "title": "kMEVideoDecoderClassImplementationIDKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmerawprocessorextensionpointname",
                "title": "kMERAWProcessorExtensionPointName",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderobjectnamekey",
                "title": "kMEVideoDecoderObjectNameKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodecinfokey",
                "title": "kMEVideoDecoderCodecInfoKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodectypekey",
                "title": "kMEVideoDecoderCodecTypeKey",
                "type": "macro"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodecnamekey",
                "title": "kMEVideoDecoderCodecNameKey",
                "type": "macro"
              }
            ],
            "path": "/documentation/mediaextension/raw-processor-property-list-dictionary",
            "title": "RAW processor property list dictionary",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/raw-processor-entitlement",
            "title": "RAW processor entitlement",
            "type": "article"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/mediaextension/mediaextensionerrordomain",
            "title": "MediaExtensionErrorDomain",
            "type": "var"
          },
          {
            "children": [
              {
                "title": "Error codes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/allocationfailure",
                "title": "MEErrorAllocationFailure",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/endofstream",
                "title": "MEErrorEndOfStream",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/internalfailure",
                "title": "MEErrorInternalFailure",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/invalidparameter",
                "title": "MEErrorInvalidParameter",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/locationnotavailable",
                "title": "MEErrorLocationNotAvailable",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/nosamples",
                "title": "MEErrorNoSamples",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/nosuchedit",
                "title": "MEErrorNoSuchEdit",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/parsingfailure",
                "title": "MEErrorParsingFailure",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/permissiondenied",
                "title": "MEErrorPermissionDenied",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/propertynotsupported",
                "title": "MEErrorPropertyNotSupported",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/referencemissing",
                "title": "MEErrorReferenceMissing",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/unsupportedfeature",
                "title": "MEErrorUnsupportedFeature",
                "type": "case"
              }
            ],
            "path": "/documentation/mediaextension/meerror-swift.struct/code",
            "title": "MEError",
            "type": "enum"
          }
        ],
        "path": "/documentation/mediaextension",
        "title": "MediaExtension",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Format readers",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Reading and parsing media assets",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meformatreader/loadfileinfo(completionhandler:)",
                "title": "func loadFileInfo(completionHandler: (MEFileInfo?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/meformatreader/loadmetadata(completionhandler:)",
                "title": "func loadMetadata(completionHandler: ([AVMetadataItem]?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/meformatreader/loadtrackreaders(completionhandler:)",
                "title": "func loadTrackReaders(completionHandler: ([any METrackReader]?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/meformatreader/parseadditionalfragments(completionhandler:)",
                "title": "func parseAdditionalFragments(completionHandler: (MEFormatReaderParseAdditionalFragmentsStatus, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating informational status flags",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/init(rawvalue:)",
                    "title": "init(rawValue: UInt)",
                    "type": "init"
                  },
                  {
                    "title": "Evaluating a fragment parsing operation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/sizeincreased",
                    "title": "static var sizeIncreased: MEFormatReaderParseAdditionalFragmentsStatus",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/fragmentadded",
                    "title": "static var fragmentAdded: MEFormatReaderParseAdditionalFragmentsStatus",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/fragmentscomplete",
                    "title": "static var fragmentsComplete: MEFormatReaderParseAdditionalFragmentsStatus",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/mediaextension/meformatreaderparseadditionalfragmentsstatus",
                "title": "MEFormatReaderParseAdditionalFragmentsStatus",
                "type": "struct"
              },
              {
                "title": "Extension requirements",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Property list keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderclassimplementationidkey",
                    "title": "var kMEFormatReaderClassImplementationIDKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderextensionpointname",
                    "title": "var kMEFormatReaderExtensionPointName: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderfilenameextensionarraykey",
                    "title": "var kMEFormatReaderFileNameExtensionArrayKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderuttypearraykey",
                    "title": "var kMEFormatReaderUTTypeArrayKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmeformatreaderobjectnamekey",
                    "title": "var kMEFormatReaderObjectNameKey: String",
                    "type": "var"
                  }
                ],
                "path": "/documentation/mediaextension/format-reader-property-list-dictionaries",
                "title": "Format reader property list dictionaries",
                "type": "collection"
              },
              {
                "path": "/documentation/mediaextension/format-reader-entitlement",
                "title": "Format reader entitlement",
                "type": "article"
              }
            ],
            "path": "/documentation/mediaextension/meformatreader",
            "title": "MEFormatReader",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a format reader",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meformatreaderextension/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/mediaextension/meformatreaderextension/formatreader(with:options:)",
                "title": "func formatReader(with: MEByteSource, options: MEFormatReaderInstantiationOptions?) throws -> any MEFormatReader",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/meformatreaderextension",
            "title": "MEFormatReaderExtension",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Inspecting format reader extension options",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meformatreaderinstantiationoptions/allowincrementalfragmentparsing",
                "title": "var allowIncrementalFragmentParsing: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/meformatreaderinstantiationoptions",
            "title": "MEFormatReaderInstantiationOptions",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Inspecting file properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mefileinfo/duration",
                "title": "var duration: CMTime",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.property",
                "title": "var fragmentsStatus: MEFileInfo.FragmentsStatus",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "File fragment status values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/couldnotcontainfragments",
                    "title": "case couldNotContainFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/containsfragments",
                    "title": "case containsFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/couldcontainbutdoesnotcontainfragments",
                    "title": "case couldContainButDoesNotContainFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/couldnotcontainfragments",
                    "title": "case couldNotContainFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/containsfragments",
                    "title": "case containsFragments",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/couldcontainbutdoesnotcontainfragments",
                    "title": "case couldContainButDoesNotContainFragments",
                    "type": "case"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/init(rawvalue:)",
                    "title": "init?(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/mediaextension/mefileinfo/fragmentsstatus-swift.enum",
                "title": "MEFileInfo.FragmentsStatus",
                "type": "enum"
              }
            ],
            "path": "/documentation/mediaextension/mefileinfo",
            "title": "MEFileInfo",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderclassimplementationidkey",
                "title": "var kMEFormatReaderClassImplementationIDKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderextensionpointname",
                "title": "var kMEFormatReaderExtensionPointName: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderfilenameextensionarraykey",
                "title": "var kMEFormatReaderFileNameExtensionArrayKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderuttypearraykey",
                "title": "var kMEFormatReaderUTTypeArrayKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmeformatreaderobjectnamekey",
                "title": "var kMEFormatReaderObjectNameKey: String",
                "type": "var"
              }
            ],
            "path": "/documentation/mediaextension/format-reader-property-list-dictionaries",
            "title": "Format reader property list dictionaries",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/format-reader-entitlement",
            "title": "Format reader entitlement",
            "type": "article"
          },
          {
            "title": "Track readers",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting track information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loadtrackinfo(completionhandler:)",
                "title": "func loadTrackInfo(completionHandler: (METrackInfo?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/generatesamplecursor(atpresentationtimestamp:completionhandler:)",
                "title": "func generateSampleCursor(atPresentationTimeStamp: CMTime, completionHandler: ((any MESampleCursor)?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/generatesamplecursoratfirstsampleindecodeorder(completionhandler:)",
                "title": "func generateSampleCursorAtFirstSampleInDecodeOrder(completionHandler: ((any MESampleCursor)?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/generatesamplecursoratlastsampleindecodeorder(completionhandler:)",
                "title": "func generateSampleCursorAtLastSampleInDecodeOrder(completionHandler: ((any MESampleCursor)?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loaduneditedduration(completionhandler:)",
                "title": "func loadUneditedDuration(completionHandler: (CMTime, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loadtotalsampledatalength(completionhandler:)",
                "title": "func loadTotalSampleDataLength(completionHandler: (Int64, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loadestimateddatarate(completionhandler:)",
                "title": "func loadEstimatedDataRate(completionHandler: (Float32, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/metrackreader/loadmetadata(completionhandler:)",
                "title": "func loadMetadata(completionHandler: ([AVMetadataItem]?, (any Error)?) -> Void)",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/metrackreader",
            "title": "METrackReader",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Inspecting track information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/mediatype",
                "title": "var mediaType: CMMediaType",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/trackid",
                "title": "var trackID: CMPersistentTrackID",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/isenabled",
                "title": "var isEnabled: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/naturaltimescale",
                "title": "var naturalTimescale: CMTimeScale",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/extendedlanguagetag",
                "title": "var extendedLanguageTag: String?",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/naturalsize",
                "title": "var naturalSize: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/preferredtransform",
                "title": "var preferredTransform: CGAffineTransform",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/nominalframerate",
                "title": "var nominalFrameRate: Float32",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/metrackinfo/requiresframereordering",
                "title": "var requiresFrameReordering: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/metrackinfo",
            "title": "METrackInfo",
            "type": "class"
          },
          {
            "title": "Sample cursors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a sample cursor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/presentationtimestamp",
                "title": "var presentationTimeStamp: CMTime",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/decodetimestamp",
                "title": "var decodeTimeStamp: CMTime",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/currentsampleduration",
                "title": "var currentSampleDuration: CMTime",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/currentsampleformatdescription",
                "title": "var currentSampleFormatDescription: CMFormatDescription?",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/syncinfo",
                "title": "var syncInfo: AVSampleCursorSyncInfo",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/dependencyinfo",
                "title": "var dependencyInfo: AVSampleCursorDependencyInfo",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/hevcdependencyinfo",
                "title": "var hevcDependencyInfo: MEHEVCDependencyInfo",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/decodetimeoflastsamplereachablebyforwardsteppingthatisalreadyloadedbybytesource",
                "title": "var decodeTimeOfLastSampleReachableByForwardSteppingThatIsAlreadyLoadedByByteSource: CMTime",
                "type": "property"
              },
              {
                "title": "Stepping through samples",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/sampleswithearlierdtssmayhavelaterptss(than:)",
                "title": "func samplesWithEarlierDTSsMayHaveLaterPTSs(than: any MESampleCursor) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/sampleswithlaterdtssmayhaveearlierptss(than:)",
                "title": "func samplesWithLaterDTSsMayHaveEarlierPTSs(than: any MESampleCursor) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/estimatedsamplelocation()",
                "title": "func estimatedSampleLocation() throws -> MEEstimatedSampleLocation",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/refinesamplelocation(_:refinementdata:refinementdatalength:refinedlocation:)",
                "title": "func refineSampleLocation(AVSampleCursorStorageRange, refinementData: UnsafePointer<UInt8>, refinementDataLength: Int, refinedLocation: UnsafeMutablePointer<AVSampleCursorStorageRange>) throws",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/stepbydecodetime(_:completionhandler:)",
                "title": "func stepByDecodeTime(CMTime, completionHandler: (CMTime, Bool, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/stepbypresentationtime(_:completionhandler:)",
                "title": "func stepByPresentationTime(CMTime, completionHandler: (CMTime, Bool, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/stepindecodeorder(by:completionhandler:)",
                "title": "func stepInDecodeOrder(by: Int64, completionHandler: (Int64, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/stepinpresentationorder(by:completionhandler:)",
                "title": "func stepInPresentationOrder(by: Int64, completionHandler: (Int64, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "title": "Sending samples to a pipeline",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/chunkdetails()",
                "title": "func chunkDetails() throws -> MESampleCursorChunk",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/samplelocation()",
                "title": "func sampleLocation() throws -> MESampleLocation",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/loadsamplebuffercontainingsamples(to:completionhandler:)",
                "title": "func loadSampleBufferContainingSamples(to: (any MESampleCursor)?, completionHandler: (CMSampleBuffer?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "title": "RAW processing metadata",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursor/loadpostdecodeprocessingmetadata(completionhandler:)",
                "title": "func loadPostDecodeProcessingMetadata(completionHandler: ([String : any Sendable]?, (any Error)?) -> Void)",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/mesamplecursor",
            "title": "MESampleCursor",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a sample location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplelocation/init(bytesource:samplelocation:)",
                "title": "init(byteSource: MEByteSource, sampleLocation: AVSampleCursorStorageRange)",
                "type": "init"
              },
              {
                "title": "Inspecting a sample location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplelocation/bytesource",
                "title": "var byteSource: MEByteSource",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplelocation/samplelocation",
                "title": "var sampleLocation: AVSampleCursorStorageRange",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/mesamplelocation",
            "title": "MESampleLocation",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a sample cursor chunk",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/init(bytesource:chunkstoragerange:chunkinfo:sampleindexwithinchunk:)",
                "title": "init(byteSource: MEByteSource, chunkStorageRange: AVSampleCursorStorageRange, chunkInfo: AVSampleCursorChunkInfo, sampleIndexWithinChunk: CFIndex)",
                "type": "init"
              },
              {
                "title": "Inspecting a chunk",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/bytesource",
                "title": "var byteSource: MEByteSource",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/chunkstoragerange",
                "title": "var chunkStorageRange: AVSampleCursorStorageRange",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/chunkinfo",
                "title": "var chunkInfo: AVSampleCursorChunkInfo",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mesamplecursorchunk/sampleindexwithinchunk",
                "title": "var sampleIndexWithinChunk: CFIndex",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/mesamplecursorchunk",
            "title": "MESampleCursorChunk",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating an estimated sample location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meestimatedsamplelocation/init(bytesource:estimatedsamplelocation:refinementdatalocation:)",
                "title": "init(byteSource: MEByteSource, estimatedSampleLocation: AVSampleCursorStorageRange, refinementDataLocation: AVSampleCursorStorageRange)",
                "type": "init"
              },
              {
                "title": "Inspecting an estimated sample location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meestimatedsamplelocation/bytesource",
                "title": "var byteSource: MEByteSource",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meestimatedsamplelocation/estimatedsamplelocation",
                "title": "var estimatedSampleLocation: AVSampleCursorStorageRange",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meestimatedsamplelocation/refinementdatalocation",
                "title": "var refinementDataLocation: AVSampleCursorStorageRange",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/meestimatedsamplelocation",
            "title": "MEEstimatedSampleLocation",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Inspecting the HEVC dependency attributes of a sample",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/hastemporalsublayeraccess",
                "title": "var hasTemporalSubLayerAccess: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/hasstepwisetemporalsublayeraccess",
                "title": "var hasStepwiseTemporalSubLayerAccess: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/syncsamplenalunittype",
                "title": "var syncSampleNALUnitType: Int16",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/temporallevel",
                "title": "var temporalLevel: Int16",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/profilespace",
                "title": "var profileSpace: Int16",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/tierflag",
                "title": "var tierFlag: Int16",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/profileindex",
                "title": "var profileIndex: Int16",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/profilecompatibilityflags",
                "title": "var profileCompatibilityFlags: Data?",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/constraintindicatorflags",
                "title": "var constraintIndicatorFlags: Data?",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mehevcdependencyinfo/levelindex",
                "title": "var levelIndex: Int16",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/mehevcdependencyinfo",
            "title": "MEHEVCDependencyInfo",
            "type": "class"
          },
          {
            "title": "Byte sources",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a byte source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/filename",
                "title": "var fileName: String",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/filelength",
                "title": "var fileLength: Int64",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/contenttype",
                "title": "var contentType: UTType?",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/relatedfilenamesinsamedirectory",
                "title": "var relatedFileNamesInSameDirectory: [String]",
                "type": "property"
              },
              {
                "title": "Performing operations on a byte source",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/availablelength(at:)",
                "title": "func availableLength(at: Int64) -> Int64",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/bytesourceforrelatedfilename(_:)",
                "title": "func byteSourceForRelatedFileName(String) throws -> MEByteSource",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mebytesource/read(length:from:completionhandler:)",
                "title": "func read(length: Int, from: Int64, completionHandler: (Data?, (any Error)?) -> Void)",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/mebytesource",
            "title": "MEByteSource",
            "type": "class"
          },
          {
            "title": "Video decoders",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a video decoder",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/contenthasinterframedependencies",
                "title": "var contentHasInterframeDependencies: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/recommendedthreadcount",
                "title": "var recommendedThreadCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/actualthreadcount",
                "title": "var actualThreadCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/supportedpixelformatsorderedbyquality",
                "title": "var supportedPixelFormatsOrderedByQuality: [NSNumber]",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/reducedresolution",
                "title": "var reducedResolution: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/pixelformatswithreducedresolutiondecodesupport",
                "title": "var pixelFormatsWithReducedResolutionDecodeSupport: [NSNumber]",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/producesrawoutput",
                "title": "var producesRAWOutput: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/isreadyformoremediadata",
                "title": "var isReadyForMoreMediaData: Bool",
                "type": "property"
              },
              {
                "title": "Decoding frames",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/canaccept(_:)",
                "title": "func canAccept(CMFormatDescription) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoder/decodeframe(from:options:completionhandler:)",
                "title": "func decodeFrame(from: CMSampleBuffer, options: MEDecodeFrameOptions, completionHandler: (CVImageBuffer?, MEDecodeFrameStatus, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a status",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/medecodeframestatus/init(rawvalue:)",
                    "title": "init(rawValue: UInt)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting a status",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/medecodeframestatus/framedropped",
                    "title": "static var frameDropped: MEDecodeFrameStatus",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/mediaextension/medecodeframestatus/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/mediaextension/medecodeframestatus/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/mediaextension/medecodeframestatus/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/mediaextension/medecodeframestatus/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/mediaextension/medecodeframestatus",
                "title": "MEDecodeFrameStatus",
                "type": "struct"
              },
              {
                "title": "Extension requirements",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Property list keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderclassimplementationidkey",
                    "title": "var kMEVideoDecoderClassImplementationIDKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderextensionpointname",
                    "title": "var kMEVideoDecoderExtensionPointName: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderobjectnamekey",
                    "title": "var kMEVideoDecoderObjectNameKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodecinfokey",
                    "title": "var kMEVideoDecoderCodecInfoKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodectypekey",
                    "title": "var kMEVideoDecoderCodecTypeKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodecnamekey",
                    "title": "var kMEVideoDecoderCodecNameKey: String",
                    "type": "var"
                  }
                ],
                "path": "/documentation/mediaextension/video-decoder-property-list-dictionary",
                "title": "Video decoder property list dictionary",
                "type": "collection"
              },
              {
                "path": "/documentation/mediaextension/video-decoder-entitlement",
                "title": "Video decoder entitlement",
                "type": "article"
              }
            ],
            "path": "/documentation/mediaextension/mevideodecoder",
            "title": "MEVideoDecoder",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a video decoder",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderextension/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderextension/makevideodecoder(codectype:videoformatdescription:videodecoderspecifications:pixelbuffermanager:)",
                "title": "func makeVideoDecoder(codecType: CMVideoCodecType, videoFormatDescription: CMVideoFormatDescription, videoDecoderSpecifications: [String : Any], pixelBufferManager: MEVideoDecoderPixelBufferManager) throws -> any MEVideoDecoder",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/mevideodecoderextension",
            "title": "MEVideoDecoderExtension",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Inspecting frame decoding options",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/medecodeframeoptions/donotoutputframe",
                "title": "var doNotOutputFrame: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/medecodeframeoptions/realtimeplayback",
                "title": "var realTimePlayback: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/medecodeframeoptions",
            "title": "MEDecodeFrameOptions",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating a pixel buffer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderpixelbuffermanager/pixelbufferattributes",
                "title": "var pixelBufferAttributes: [String : Any]",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderpixelbuffermanager/makepixelbuffer()",
                "title": "func makePixelBuffer() throws -> CVPixelBuffer",
                "type": "method"
              },
              {
                "title": "Registering Custom Pixel Formats",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/mevideodecoderpixelbuffermanager/registercustompixelformat(_:)",
                "title": "func registerCustomPixelFormat([String : Any])",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/mevideodecoderpixelbuffermanager",
            "title": "MEVideoDecoderPixelBufferManager",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderclassimplementationidkey",
                "title": "var kMEVideoDecoderClassImplementationIDKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderextensionpointname",
                "title": "var kMEVideoDecoderExtensionPointName: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderobjectnamekey",
                "title": "var kMEVideoDecoderObjectNameKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodecinfokey",
                "title": "var kMEVideoDecoderCodecInfoKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodectypekey",
                "title": "var kMEVideoDecoderCodecTypeKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodecnamekey",
                "title": "var kMEVideoDecoderCodecNameKey: String",
                "type": "var"
              }
            ],
            "path": "/documentation/mediaextension/video-decoder-property-list-dictionary",
            "title": "Video decoder property list dictionary",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/video-decoder-entitlement",
            "title": "Video decoder entitlement",
            "type": "article"
          },
          {
            "title": "RAW processors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a RAW processor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/metaldeviceregistryid",
                "title": "var metalDeviceRegistryID: UInt64",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/outputcolorattachments",
                "title": "var outputColorAttachments: [String : Any]",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/processingparameters",
                "title": "var processingParameters: [MERAWProcessingParameter]",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/isreadyformoremediadata",
                "title": "var isReadyForMoreMediaData: Bool",
                "type": "property"
              },
              {
                "title": "Processing RAW frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessor/processframe(fromimagebuffer:completionhandler:)",
                "title": "func processFrame(fromImageBuffer: CVPixelBuffer, completionHandler: (CVPixelBuffer?, (any Error)?) -> Void)",
                "type": "method"
              },
              {
                "title": "Extension requirements",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Property list keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderclassimplementationidkey",
                    "title": "var kMEVideoDecoderClassImplementationIDKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmerawprocessorextensionpointname",
                    "title": "var kMERAWProcessorExtensionPointName: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecoderobjectnamekey",
                    "title": "var kMEVideoDecoderObjectNameKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodecinfokey",
                    "title": "var kMEVideoDecoderCodecInfoKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodectypekey",
                    "title": "var kMEVideoDecoderCodecTypeKey: String",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/mediaextension/kmevideodecodercodecnamekey",
                    "title": "var kMEVideoDecoderCodecNameKey: String",
                    "type": "var"
                  }
                ],
                "path": "/documentation/mediaextension/raw-processor-property-list-dictionary",
                "title": "RAW processor property list dictionary",
                "type": "collection"
              },
              {
                "path": "/documentation/mediaextension/raw-processor-entitlement",
                "title": "RAW processor entitlement",
                "type": "article"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessor",
            "title": "MERAWProcessor",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating an extension",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorextension/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Creating a RAW processor",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorextension/makeprocessor(formatdescription:pixelbuffermanager:)",
                "title": "func makeProcessor(formatDescription: CMVideoFormatDescription, pixelBufferManager: MERAWProcessorPixelBufferManager) throws -> any MERAWProcessor",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessorextension",
            "title": "MERAWProcessorExtension",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a pixel buffer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorpixelbuffermanager/pixelbufferattributes-4fe69",
                "title": "var pixelBufferAttributes: [String : any Sendable]",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessorpixelbuffermanager/makepixelbuffer()",
                "title": "func makePixelBuffer() throws -> CVPixelBuffer",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessorpixelbuffermanager",
            "title": "MERAWProcessorPixelBufferManager",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Inspecting a processing parameter",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/enabled",
                "title": "var enabled: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/key",
                "title": "var key: String",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/longdescription",
                "title": "var longDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "title": "Processing parameters",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a boolean parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/boolean/init(name:key:description:initialvalue:neutralvalue:cameravalue:)",
                    "title": "convenience init(name: String, key: String, description: String, initialValue: Bool, neutralValue: Bool?, cameraValue: Bool?)",
                    "type": "init"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/boolean/currentvalue",
                    "title": "var currentValue: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/boolean/initialvalue",
                    "title": "var initialValue: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/boolean/cameravalue",
                    "title": "var cameraValue: Bool?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/boolean/neutralvalue",
                    "title": "var neutralValue: Bool?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/boolean",
                "title": "MERAWProcessingParameter.Boolean",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a floating-point parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/init(name:key:description:initialvalue:maximum:minimum:neutralvalue:cameravalue:)",
                    "title": "convenience init(name: String, key: String, description: String, initialValue: Float, maximum: Float, minimum: Float, neutralValue: Float?, cameraValue: Float?)",
                    "type": "init"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/currentvalue",
                    "title": "var currentValue: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/initialvalue",
                    "title": "var initialValue: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/maximumvalue",
                    "title": "var maximumValue: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/minimumvalue",
                    "title": "var minimumValue: Float",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/cameravalue",
                    "title": "var cameraValue: Float?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint/neutralvalue",
                    "title": "var neutralValue: Float?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/floatingpoint",
                "title": "MERAWProcessingParameter.FloatingPoint",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating an integer parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/init(name:key:description:initialvalue:maximum:minimum:neutralvalue:cameravalue:)",
                    "title": "convenience init(name: String, key: String, description: String, initialValue: Int, maximum: Int, minimum: Int, neutralValue: Int?, cameraValue: Int?)",
                    "type": "init"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/currentvalue",
                    "title": "var currentValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/initialvalue",
                    "title": "var initialValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/maximumvalue",
                    "title": "var maximumValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/minimumvalue",
                    "title": "var minimumValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/cameravalue",
                    "title": "var cameraValue: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/integer/neutralvalue",
                    "title": "var neutralValue: Int?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/integer",
                "title": "MERAWProcessingParameter.Integer",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a list parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/init(name:key:description:list:initialvalue:neutralvalue:cameravalue:)",
                    "title": "convenience init(name: String, key: String, description: String, list: [MERAWProcessingParameter.ListElement], initialValue: Int, neutralValue: Int?, cameraValue: Int?)",
                    "type": "init"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/currentvalue",
                    "title": "var currentValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/initialvalue",
                    "title": "var initialValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/listelements",
                    "title": "var listElements: [MERAWProcessingParameter.ListElement]",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/cameravalue",
                    "title": "var cameraValue: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/list/neutralvalue",
                    "title": "var neutralValue: Int?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/list",
                "title": "MERAWProcessingParameter.List",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a list element parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/listelement/init(name:description:elementid:)",
                    "title": "init(name: String, description: String, elementID: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/listelement/listelementid",
                    "title": "var listElementID: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/listelement",
                "title": "MERAWProcessingParameter.ListElement",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a sub group parameter object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/subgroup/init(name:description:parameters:)",
                    "title": "init(name: String, description: String, parameters: [MERAWProcessingParameter])",
                    "type": "init"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/merawprocessingparameter/subgroup/subgroupparameters",
                    "title": "var subGroupParameters: [MERAWProcessingParameter]",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/merawprocessingparameter/subgroup",
                "title": "MERAWProcessingParameter.SubGroup",
                "type": "class"
              },
              {
                "title": "Class methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/boolean(name:key:description:initialvalue:neutralvalue:cameravalue:)",
                "title": "class func boolean(name: String, key: String, description: String, initialValue: Bool, neutralValue: Bool?, cameraValue: Bool?) -> MERAWProcessingParameter.Boolean",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/integer(name:key:description:initialvalue:maximum:minimum:neutralvalue:cameravalue:)",
                "title": "class func integer(name: String, key: String, description: String, initialValue: Int, maximum: Int, minimum: Int, neutralValue: Int?, cameraValue: Int?) -> MERAWProcessingParameter.Integer",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/list(name:key:description:list:initialvalue:neutralvalue:cameravalue:)",
                "title": "class func list(name: String, key: String, description: String, list: [MERAWProcessingParameter.ListElement], initialValue: Int, neutralValue: Int?, cameraValue: Int?) -> MERAWProcessingParameter.List",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/listelement(name:description:elementid:)",
                "title": "class func listElement(name: String, description: String, elementID: Int) -> MERAWProcessingParameter.ListElement",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/subgroup(name:description:parameters:)",
                "title": "class func subGroup(name: String, description: String, parameters: [MERAWProcessingParameter]) -> MERAWProcessingParameter.SubGroup",
                "type": "method"
              },
              {
                "path": "/documentation/mediaextension/merawprocessingparameter/float(name:key:description:initialvalue:maximum:minimum:neutralvalue:cameravalue:)",
                "title": "class func float(name: String, key: String, description: String, initialValue: Float, maximum: Float, minimum: Float, neutralValue: Float?, cameraValue: Float?) -> MERAWProcessingParameter.FloatingPoint",
                "type": "method"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessingparameter",
            "title": "MERAWProcessingParameter",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/merawprocessornotification/readyformoremediadatadidchange",
                "title": "static let readyForMoreMediaDataDidChange: NSNotification.Name",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/merawprocessornotification/valuesdidchange",
                "title": "static let valuesDidChange: NSNotification.Name",
                "type": "property"
              }
            ],
            "path": "/documentation/mediaextension/merawprocessornotification",
            "title": "MERAWProcessorNotification",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Property list keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderclassimplementationidkey",
                "title": "var kMEVideoDecoderClassImplementationIDKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmerawprocessorextensionpointname",
                "title": "var kMERAWProcessorExtensionPointName: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecoderobjectnamekey",
                "title": "var kMEVideoDecoderObjectNameKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodecinfokey",
                "title": "var kMEVideoDecoderCodecInfoKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodectypekey",
                "title": "var kMEVideoDecoderCodecTypeKey: String",
                "type": "var"
              },
              {
                "path": "/documentation/mediaextension/kmevideodecodercodecnamekey",
                "title": "var kMEVideoDecoderCodecNameKey: String",
                "type": "var"
              }
            ],
            "path": "/documentation/mediaextension/raw-processor-property-list-dictionary",
            "title": "RAW processor property list dictionary",
            "type": "collection"
          },
          {
            "path": "/documentation/mediaextension/raw-processor-entitlement",
            "title": "RAW processor entitlement",
            "type": "article"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/mediaextension/mediaextensionerrordomain",
            "title": "let MediaExtensionErrorDomain: String",
            "type": "var"
          },
          {
            "children": [
              {
                "title": "Identifying the error domain and codes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/errordomain-6dfr0",
                "title": "static var errorDomain: String",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/allocationfailure",
                "title": "static var allocationFailure: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/endofstream",
                "title": "static var endOfStream: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/internalfailure",
                "title": "static var internalFailure: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/invalidparameter",
                "title": "static var invalidParameter: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/locationnotavailable",
                "title": "static var locationNotAvailable: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/nosamples",
                "title": "static var noSamples: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/nosuchedit",
                "title": "static var noSuchEdit: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/parsingfailure",
                "title": "static var parsingFailure: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/permissiondenied",
                "title": "static var permissionDenied: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/propertynotsupported",
                "title": "static var propertyNotSupported: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/referencemissing",
                "title": "static var referenceMissing: MEError.Code",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/unsupportedfeature",
                "title": "static var unsupportedFeature: MEError.Code",
                "type": "property"
              },
              {
                "title": "Inspecting an error",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/foundation/nserror/1409165-code",
                "title": "var code: Int",
                "type": "property"
              },
              {
                "external": true,
                "path": "/documentation/foundation/customnserror/2946828-errorcode",
                "title": "var errorCode: Int",
                "type": "property"
              },
              {
                "external": true,
                "path": "/documentation/foundation/customnserror/3017373-erroruserinfo",
                "title": "var errorUserInfo: [String : Any]",
                "type": "property"
              },
              {
                "external": true,
                "path": "/documentation/swift/hashable/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/localizeddescription",
                "title": "var localizedDescription: String",
                "type": "property"
              },
              {
                "external": true,
                "path": "/documentation/foundation/nserror/1411580-userinfo",
                "title": "var userInfo: [String : Any]",
                "type": "property"
              },
              {
                "external": true,
                "path": "/documentation/swift/equatable/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "external": true,
                "path": "/documentation/swift/hashable/hash(into:)-v52",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Error codes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/allocationfailure",
                    "title": "case allocationFailure",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/endofstream",
                    "title": "case endOfStream",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/internalfailure",
                    "title": "case internalFailure",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/invalidparameter",
                    "title": "case invalidParameter",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/locationnotavailable",
                    "title": "case locationNotAvailable",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/nosamples",
                    "title": "case noSamples",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/nosuchedit",
                    "title": "case noSuchEdit",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/parsingfailure",
                    "title": "case parsingFailure",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/permissiondenied",
                    "title": "case permissionDenied",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/propertynotsupported",
                    "title": "case propertyNotSupported",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/referencemissing",
                    "title": "case referenceMissing",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/unsupportedfeature",
                    "title": "case unsupportedFeature",
                    "type": "case"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/init(rawvalue:)",
                    "title": "init?(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meerror-swift.struct/code/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meerror-swift.struct/code/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/mediaextension/meerror-swift.struct/code/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/mediaextension/meerror-swift.struct/code",
                "title": "MEError.Code",
                "type": "enum"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/errordomain",
                "title": "static var errorDomain: String",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/errorcode-5agv3",
                    "title": "var errorCode: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/erroruserinfo-3x3xe",
                    "title": "var errorUserInfo: [String : Any]",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/errordomain-6dfr0",
                    "title": "static var errorDomain: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/meerror-swift.struct/customnserror-implementations",
                "title": "CustomNSError Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/==(_:_:)",
                    "title": "static func == (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/mediaextension/meerror-swift.struct/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/mediaextension/meerror-swift.struct/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/mediaextension/meerror-swift.struct/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/mediaextension/meerror-swift.struct",
            "title": "MEError",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Error codes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/allocationfailure",
                "title": "case allocationFailure",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/endofstream",
                "title": "case endOfStream",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/internalfailure",
                "title": "case internalFailure",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/invalidparameter",
                "title": "case invalidParameter",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/locationnotavailable",
                "title": "case locationNotAvailable",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/nosamples",
                "title": "case noSamples",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/nosuchedit",
                "title": "case noSuchEdit",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/parsingfailure",
                "title": "case parsingFailure",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/permissiondenied",
                "title": "case permissionDenied",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/propertynotsupported",
                "title": "case propertyNotSupported",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/referencemissing",
                "title": "case referenceMissing",
                "type": "case"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/unsupportedfeature",
                "title": "case unsupportedFeature",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/mediaextension/meerror-swift.struct/code/init(rawvalue:)",
                "title": "init?(rawValue: Int)",
                "type": "init"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/mediaextension/meerror-swift.struct/code/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/mediaextension/meerror-swift.struct/code/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/mediaextension/meerror-swift.struct/code/rawrepresentable-implementations",
                "title": "RawRepresentable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/mediaextension/meerror-swift.struct/code",
            "title": "MEError.Code",
            "type": "enum"
          }
        ],
        "path": "/documentation/mediaextension",
        "title": "MediaExtension",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
